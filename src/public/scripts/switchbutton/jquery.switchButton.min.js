/*
    @licstart  The following is the entire license notice for the
    JavaScript code in this page.

    "Expat": {
    "licenseName": "Expat License (sometimes called MIT Licensed)",
    "identifier": "Expat",
    "canonicalUrl": [
      "http://www.jclark.com/xml/copying.txt",
      "magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt"
    ],
    "licenseFragments": [
      {
        "text": "Copyright <YEAR> <NAME> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.",
        "type": "short"
      }
    ]
  }

    @licend  The above is the entire license notice
    for the JavaScript code in this page.
*/

(function (n) { n.widget("sylightsUI.switchButton", { options: { checked: undefined, show_labels: !0, labels_placement: "both", on_label: "ON", off_label: "OFF", width: 25, height: 11, button_width: 12, clear: !0, clear_after: null, on_callback: undefined, off_callback: undefined }, _create: function () { this.options.checked === undefined && (this.options.checked = this.element.prop("checked")); this._initLayout(); this._initEvents() }, _initLayout: function () { this.element.hide(); this.off_label = n("<span>").addClass("switch-button-label"); this.on_label = n("<span>").addClass("switch-button-label"); this.button_bg = n("<div>").addClass("switch-button-background"); this.button = n("<div>").addClass("switch-button-button"); this.off_label.insertAfter(this.element); this.button_bg.insertAfter(this.off_label); this.on_label.insertAfter(this.button_bg); this.button_bg.append(this.button); this.options.clear && (this.options.clear_after === null && (this.options.clear_after = this.on_label), n("<div>").css({ clear: "left" }).insertAfter(this.options.clear_after)); this._refresh(); this.options.checked = !this.options.checked; this._toggleSwitch() }, _refresh: function () { this.options.show_labels ? (this.off_label.show(), this.on_label.show()) : (this.off_label.hide(), this.on_label.hide()); switch (this.options.labels_placement) { case "both": (this.button_bg.prev() !== this.off_label || this.button_bg.next() !== this.on_label) && (this.off_label.detach(), this.on_label.detach(), this.off_label.insertBefore(this.button_bg), this.on_label.insertAfter(this.button_bg), this.on_label.addClass(this.options.checked ? "on" : "off").removeClass(this.options.checked ? "off" : "on"), this.off_label.addClass(this.options.checked ? "off" : "on").removeClass(this.options.checked ? "on" : "off")); break; case "left": (this.button_bg.prev() !== this.on_label || this.on_label.prev() !== this.off_label) && (this.off_label.detach(), this.on_label.detach(), this.off_label.insertBefore(this.button_bg), this.on_label.insertBefore(this.button_bg), this.on_label.addClass("on").removeClass("off"), this.off_label.addClass("off").removeClass("on")); break; case "right": (this.button_bg.next() !== this.off_label || this.off_label.next() !== this.on_label) && (this.off_label.detach(), this.on_label.detach(), this.off_label.insertAfter(this.button_bg), this.on_label.insertAfter(this.off_label), this.on_label.addClass("on").removeClass("off"), this.off_label.addClass("off").removeClass("on")) }this.on_label.html(this.options.on_label); this.off_label.html(this.options.off_label); this.button_bg.width(this.options.width); this.button_bg.height(this.options.height); this.button.width(this.options.button_width); this.button.height(this.options.height) }, _initEvents: function () { var n = this; this.button_bg.click(function (t) { return t.preventDefault(), t.stopPropagation(), n._toggleSwitch(), !1 }); this.button.click(function (t) { return t.preventDefault(), t.stopPropagation(), n._toggleSwitch(), !1 }); this.on_label.click(function () { return n.options.checked && n.options.labels_placement === "both" ? !1 : (n._toggleSwitch(), !1) }); this.off_label.click(function () { return !n.options.checked && n.options.labels_placement === "both" ? !1 : (n._toggleSwitch(), !1) }) }, _setOption: function (n, t) { if (n === "checked") { this._setChecked(t); return } this.options[n] = t; this._refresh() }, _setChecked: function (n) { n !== this.options.checked && (this.options.checked = !n, this._toggleSwitch()) }, _toggleSwitch: function () { var n, t; this.options.checked = !this.options.checked; n = ""; this.options.checked ? (this.element.prop("checked", !0), this.element.change(), t = this.options.width - this.options.button_width, n = "+=" + t, this.options.labels_placement == "both" ? (this.off_label.removeClass("on").addClass("off"), this.on_label.removeClass("off").addClass("on")) : (this.off_label.hide(), this.on_label.show()), this.button_bg.addClass("checked"), typeof this.options.on_callback == "function" && this.options.on_callback.call(this)) : (this.element.prop("checked", !1), this.element.change(), n = "-1px", this.options.labels_placement == "both" ? (this.off_label.removeClass("off").addClass("on"), this.on_label.removeClass("on").addClass("off")) : (this.off_label.show(), this.on_label.hide()), this.button_bg.removeClass("checked"), typeof this.options.off_callback == "function" && this.options.off_callback.call(this)); this.button.animate({ left: n }, 250, "easeInOutCubic") } }) })(jQuery);
//# sourceMappingURL=jquery.switchButton.min.js.map
