$.widget("bw.bwRequest", {
    options: {

        /*
            @licstart  The following is the entire license notice for the
            JavaScript code in this page.
        
            Welcome to this software. BudgetWorkflow.com, ShareAndCollaborate.com. 
            Copyright (C) 2011-2025  Todd N. Hiltz
            Contact todd@budgetworkflow.com, todd@shareandcollaborate.com. Todd Hiltz, 61 Crescent Avenue, Kentville, Nova Scotia, Canada B4N 1R1. 
        
            This program is free software: you can redistribute it and/or modify
            it under the terms of the GNU Affero General Public License as
            published by the Free Software Foundation, either version 3 of the
            License, or (at your option) any later version.
        
            This program is distributed in the hope that it will be useful,
            but WITHOUT ANY WARRANTY; without even the implied warranty of
            MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            GNU Affero General Public License for more details.
        
            You should have received a copy of the GNU Affero General Public License
            along with this program.  If not, see https://www.gnu.org/licenses.
        
            @licend  The above is the entire license notice
            for the JavaScript code in this page.
        */

        /*
        ===========================================================
        This is the bwRequest.js jQuery Widget. 
        ===========================================================

            [more to follow]
                          
        ===========================================================
        ===========================================================
        MORE DOCUMENTATION TO FOLLOW, JUST GETTING STARTED. Jan. 24, 2024.


        These need to clear out the "New Request" form after they are performed:

            - cmdCreateBudgetRequestAndStartWorkflow >> _bw/initializebudgetrequest
            - saveAndPublishTheRequest >> _bw/bwbudgetrequests/saveAndPublishTheRequest
            - saveRequestOnThisDevice >> indexdb

            Here is the message so far:
                - console.log('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN. xcx2321312-2.');
                - alert('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN.  xcx2321312-2.');



            [put your stuff here]

        ===========================================================
       
        */

        // 1-14-2023
        // Now that we are checking for changes before closing a request, we need to save the "last saved json" in each request widget.
        // That also means we need to save the bwBudgetRequestId, so that we can identify the widget.
        // See also method checkIfThereHaveBeenAnyChanges(), populateRequestForm(), and saveAndPublishTheRequest().
        lastSavedJson: [], // WE NEED TO INCLUDE brData IN THIS JSON!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        requestWorkflowTasks: [], // Populating this when the workflow audit trail is displayed.... so it can be used for the Revert button.

        Checklists: null,
        Workflows: null, // Not sure if this will stay here forever. Using for the audit trail of a request.
        CurrentWorkflow: null, // Not sure if this will stay here forever. Using for the audit trail of a request.

        ActiveForms: [], // THIS IS WHERE THE FORM (with HTML) IS STORED WHEN THE WIDGET IS INSTANTIATED! THIS COMES FROM THE BwForm TABLE.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


        lastPoppedOutZoom: 1, // Used from zoomAndCenterPoppedOutWindow().

        store: null,

        operationUriPrefix: null,

        //bwBudgetRequestId: null, // We need to make sure we use this consistently. // removed 1-3-2022
        //bwRequestTypeId: null, // 1-3-2022 changed from bwRequestType
        //bwEnabledRequestTypes: null, // Moved to bwAuthentication 11-29-2021

        numberOfRequestFormsCurrentlyDisplayed: 0, // Using this to position the forms on the screen a bit more nicely. There will be a lot of tweaking of this in the future!

        dragSourceAttachmentElement: null, // This is so we can drag attachments around! 

        //db: null,
        //indexDBVersion: 1, // Index DB Version. // In Edge, if we specify 0, it raises an error, SO JUST MAKE IT GREATER THAN 1! OLD NOTES: This is arbitrary and decided by us to manage improvements to our database structure moving forward. Starting with version 0 because Edge doesn't seem to work with versions, or perhaps my edge clears history... not sure yet.
        //indexDBName: 'BudgetNet-ca-Requests-TempV4', // This can be changed when you want to start fresh!!
        //indexedDBInstance: null,


        //ajaxTimeout: 15000,
        displayWorkflowPicker: false,
        displayRoleIdColumn: false
    },
    _create: function (assignmentRowChanged_ElementId) {
        this.element.addClass("bwRequest");
        try {
            console.log('In bwRequest._create().');
            var thiz = this; // Need this because of the asynchronous operations below.

            if (this.options.operationUriPrefix == null) {
                // This formulates the operationUri, which is used throughout.
                var url1 = window.location.href.split('https://')[1];
                var url2 = url1.split('/')[0];
                this.options.operationUriPrefix = 'https://' + url2 + '/';
            }
            //// debugger; // LOAD this.options.ActiveForms HERE!!!!!!!!!! 5-11-2020.

            //// debugger;
            //var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            if (!workflowAppId) {

                alert('In bwRequest.js._create(). No workflowAppId so not loading forms.');

                console.log('');
                console.log('In bwRequest.js._create(). No workflowAppId so not loading forms. workflowAppId: ' + workflowAppId);
                console.log('');

                //// debugger;
                //var masterWindow = window.opener;
                //if (masterWindow) {
                //    alert('masterWindow: ' + masterWindow);

                //var workflowAppId = $(masterWindow.document).find('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                //alert('masterWindow workflowAppId: ' + workflowAppId);

                //}


                //alert('In bwRequest.js._create(). No workflowAppId so not loading forms. workflowAppId: ' + workflowAppId);

                // 11-14-2020
                // THIS MUST MEAN THE WIDGET IS BEING USED FOR THE OFFLINE REQUESTS!!!!!!!
                // Get the html from the BwOfflineForm table.
                //


                //$.ajax({
                //    url: this.options.operationUriPrefix + 'odata/getofflineformsconfiguration', //'all', //thiz.options.LastSelectedRequestType, //'budgetrequest', //
                //    dataType: "json",
                //    contentType: "application/json",
                //    type: "Get",
                //    timeout: thiz.options.ajaxTimeout
                //}).done(function (result) {
                //    try {

                //        // debugger;
                //        if (result.message != 'SUCCESS') {
                //            alert('ERROR in bwRequest._create(): ' + result.message);
                //        } else {
                //            //// debugger; // THE FORMS SHOULD LOAD HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                //            thiz.options.ActiveForms = result.value;

                //            //// debugger;
                //            //for (var i = 0; i < result.value.length; i++) {

                //        }
                //    } catch (e) {
                //        console.log('Exception in bwRequest._create().done: ' + e.message + ', ' + e.stack);
                //        alert('Exception in bwRequest._create().done: ' + e.message + ', ' + e.stack);
                //    }
                //}).fail(function (data, errorCode) {

                //    //lpSpinner.Hide();
                //    console.log(' : ' + JSON.stringify(data));
                //    var msg;
                //    if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                //        msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                //    } else {
                //        msg = JSON.stringify(data);
                //    }
                //    alert('Exception in bwRequest._create().xx.Get: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                //    console.log('Exception in bwRequest._create().xx.Get: ' + JSON.stringify(data));
                //    //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
                //    //var error = JSON.parse(data.responseText)["odata.error"];
                //    //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
                //});


                //console.log('Error in bwRequest.js._create(): Invalid tenantId/workflowAppId. tenantId: ' + tenantId + ', workflowAppId: ' + workflowAppId);

                // REMOVED 10-20-2020 5-53pm adt.
                //var html = '';
                //html += '<span style="font-size:24pt;color:red;">bwRequest: Invalid tenantId/workflowAppId.</span>';
                //html += '<br />';
                //html += '<span style="">Error in bwRequest.js._create(): Invalid tenantId/workflowAppId. tenantId: ' + tenantId + ', workflowAppId: ' + workflowAppId + '</span>';
                //thiz.element.html(html);
            } else {


                console.log('In bwRequest.js._create(). Calling loadActiveForms. xcx44432-1.');

                thiz.loadActiveForms().then(function (results) {

                    if (results.status != 'SUCCESS') {

                        var msg = 'Error in bwRequest.js._create(). ' + results.status + ', ' + results.message;
                        console.log(msg);
                        displayAlertDialog(msg);

                    } else {

                        thiz.createRequestJson();

                    }

                }).catch(function (e) {

                    var msg = 'Exception in bwRequest.js._create.loadActiveForms(): ' + JSON.stringify(e);
                    console.log(msg);
                    displayAlertDialog(msg);

                });


                // NEED THIS SECTION TO INstantiate IndexDB.
                //try {
                //    var indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB;
                //} catch (e) {
                //    console.log('Error instantiating indexedDB: ' + e.message + ', ' + e.stack);
                //}
                //var IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.OIDBTransaction || window.msIDBTransaction;


                //
                //if (this.options.store != null) {
                // this.options.store is populated, so just render the raci.
                //thiz.element.html(renderRequest); // Render the xx.
                //} else {
                //    // this.options.store was null, so go get it from the database.
                //    $.ajax({
                //        url: this.options.operationUriPrefix + "odata/ConfigurationValues?$filter=Active eq true", //('eCarWorkflow')", // Get the eCarWorkflow json/definition from the database.
                //        dataType: "json",
                //        contentType: "application/json",
                //        type: "Get",
                //        timeout: this.options.ajaxTimeout
                //    }).done(function (result) {
                //        try {
                //            var workflow = result.value;
                //            console.log('LOADED FROM DATABASE: workflow[0].ConfigurationValues: ' + JSON.stringify(workflow[0].ConfigurationValues)); // + ', result: ' + JSON.stringify(result));

                //            if (workflow.length != 1) {
                //                alert('ERROR: An incorrect number of workflows are marked as active! This process cannot continue. There can only be 1 active workflow.');
                //            } else {
                //                thiz.options.store = workflow[0].ConfigurationValues; //JSON.parse(workflow[0].ConfigurationValues);




                //                renderRequest(); // Render the raci chart. // TODD: TURNED OFF FOR THE MOMENT UNTIL WE GET OUR ROLE ENTRY COMPLETED




                //            }
                //        } catch (e) {
                //            //lpSpinner.Hide();
                //            console.log('Exception in raci.html._create().xx.Get: ' + e.message + ', ' + e.stack);
                //        }
                //    }).fail(function (data) {
                //        //lpSpinner.Hide();
                //        console.log('In xx.fail(): ' + JSON.stringify(data));
                //        var msg;
                //        if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                //            msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                //        } else {
                //            msg = JSON.stringify(data);
                //        }
                //        alert('Exception in raci.html._create().xx.Get: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                //        console.log('Exception in raci.html._create().xx.Get: ' + JSON.stringify(data));
                //        //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
                //        //var error = JSON.parse(data.responseText)["odata.error"];
                //        //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
                //    });
                //}


                //try {
                //    thiz.options.indexedDBInstance = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB; // Initialize IndexDB
                //} catch (e) {
                //    console.log('Error instantiating this.indexedDBInstance: ' + e.message + ', ' + e.stack);
                //}

                //// Check if we have created the indexDB. If not, load the XSL files that we will need in case of losing the network connection.
                //// Create/open database
                //if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                //    thiz.options.db = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
                //} else {
                //    thiz.options.db = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
                //}

                //thiz.options.db.onblocked = function (event) {
                //    // debugger;
                //    console.log('In index.js.document.ready.openRequestsDatabase.onblocked(): errorCode: ' + event.target.error.name);
                //    displayAlertDialog('In index.js.document.ready.openRequestsDatabase.onblocked(): errorCode: ' + event.target.error.name);
                //};
                //thiz.options.db.onabort = function (event) {
                //    // debugger;
                //    console.log('In index.js.document.ready.openRequestsDatabase.onabort(): errorCode: ' + event.target.error.name);
                //    displayAlertDialog('In index.js.document.ready.openRequestsDatabase.onabort(): errorCode: ' + event.target.error.name);
                //};
                //thiz.options.db.onerror = function (event) {
                //    // debugger;
                //    console.log('In index.js.document.ready.openRequestsDatabase.onerror(): errorCode: ' + event.target.error.name); // AbortError
                //    //displayAlertDialog('In index.js.document.ready.openRequestsDatabase.onerror(): errorCode: ' + event.target.error.name);
                //    //initializeTheLogon();

                //    //renderWelcomePageOffline(); // TODD: DO THIS ANYWAY. MOST LIKELY THE MACHINE RAN OUT OF MEMORY AND DELETED THE INDEXDB DATABASES.

                //};
                //thiz.options.db.onsuccess = function (event) {
                //    // Don't need to do anything.
                //    console.log('In IndexDb.onsuccess() for the database "' + thiz.options.indexDBName + '", version: ' + thiz.options.indexDBVersion + '.');
                //    var db = event.target.result;
                //    // debugger;
                //    try {
                //        //var testTransaction = thiz.options.indexedDBInstance.transaction('OfflineAttachedFiles', 'readwrite'); //IDBTransaction.READ_WRITE); 
                //        var testTransaction = db.transaction('OfflineAttachedFiles', 'readwrite'); //IDBTransaction.READ_WRITE); 
                //    } catch (e) {

                //        if (e.message == 'NotFoundError') {
                //            // The database has been destroyed by the browser, or did not get created properly in the beginning.
                //            console.log('In bw.offline.core.js.ProcessOfflineUpload(). The database has been destroyed by the browser, or did not get created properly in the beginning.');
                //            //displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload(). The database has been destroyed by the browser, or did not get created properly in the beginning.');
                //            var objectStoreOfflineFiles = db.createObjectStore("OfflineAttachedFiles", { autoIncrement: true, keyPath: "id" }); // Offline file attachments. This may seem weird with the keypath, but it fixes iPhone behaviour.
                //            //objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                //            //objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                //            //objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                //            //objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                //            //objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                //            objectStoreOfflineFiles.transaction.oncomplete = function (event) {
                //                console.log('In xxx.objectStoreOfflineFiles.transaction.oncomplete(). Preparing to create indexes.');
                //                objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                //                objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                //                objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                //                objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                //                objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                //                console.log('In xxx.objectStoreOfflineFiles.transaction.oncomplete(). Successfully created indexes.');

                //                //var transaction = db.transaction("OfflineAttachedFiles", 'readwrite'); //IDBTransaction.READ_WRITE); 
                //            };
                //        } else {
                //            console.log('In bw.offline.core.js.ProcessOfflineUpload(). ERROR ACCESSING OfflineAttachedFiles DATABASE33!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                //            displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload(). ERROR ACCESSING OfflineAttachedFiles DATABASE33!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                //        }
                //    }


                //    //displayAlertDialog('renderWelcomePageOffline');
                //    //renderWelcomePageOffline();
                //    //initializeTheLogon();
                //};
                //thiz.options.db.onupgradeneeded = function (event) {
                //    // This happens if the database doesn't exist. This is where we create the database and load it with the content we need for the application.
                //    console.log('In IndexDb.onupgradeneeded() for the database "' + thiz.options.indexDBName + '", version: ' + thiz.options.indexDBVersion + '. Not sure why this is happening every time! oldVersion: ' + event.oldVersion); //  did not exist, so it is being created.');
                //    //displayAlertDialog('The database "' + indexDBName + '" did not exist, so it is being created.');

                //    var db = event.target.result;
                //    // debugger;
                //    var objectStoreCachedRequests = db.createObjectStore("objectStoreCachedRequests", { autoIncrement: true }); // Requests.
                //    var test = 'test'

                //    objectStoreCachedRequests.transaction.oncomplete = function (event) {
                //        // Don't need to do anything here, it just ensures the object store is created successfully.
                //        // debugger;
                //        console.log('In $(document).ready().objectStoreCachedRequests.transaction.oncomplete().');
                //        //this.displayAlertDialog('1');
                //        console.log('1');
                //    };

                //    var objectStoreOfflineFiles = db.createObjectStore("OfflineAttachedFiles", { autoIncrement: true, keyPath: "id" }); // Offline file attachments. This may seem weird with the keypath, but it fixes iPhone behaviour.
                //    //objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                //    //objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                //    //objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                //    //objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                //    //objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                //    objectStoreOfflineFiles.transaction.oncomplete = function (event) {
                //        //this.displayAlertDialog('2');
                //        console.log('2');
                //        console.log('In $(document).ready().objectStoreOfflineFiles.transaction.oncomplete(). Preparing to create indexes.');
                //        objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                //        objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                //        objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                //        objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                //        objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                //        console.log('In $(document).ready().objectStoreOfflineFiles.transaction.oncomplete(). Successfully created indexes.');
                //    };

                //    var objectStoreXsltFiles = db.createObjectStore("objectStoreCachedXsltFiles"); // XSLT files.
                //    objectStoreXsltFiles.transaction.oncomplete = function (event) {
                //        //displayAlertDialog('3');

                //        // debugger;
                //        console.log('In $(document).ready().objectStoreXsltFiles.transaction.oncomplete().');
                //        thiz.loadXslFiles();
                //    };
                //};

            }

            console.log('In bwRequest._create(). The widget has been initialized.');

        } catch (e) {
            console.log('Exception in bwRequest.js._create(): ' + e.message + ', ' + e.stack);
            var html = '';
            html += '<span style="font-size:24pt;color:red;">bwRequest: CANNOT RENDER THE widget</span>';
            html += '<br />';
            html += '<span style="">Exception in bwRequest.Create(): ' + e.message + ', ' + e.stack + '</span>';
            thiz.element.html(html);
        }
    },
    _setOption: function (key, value) {
        this.options[key] = value;
        this._update();
    },
    _update: function () {
        try {
            console.log('In _update(). This does nothing! (yet)');
        } catch (e) {
            console.log('Exception in _update(): ' + e.message + ', ' + e.stack);
        }
    },
    _destroy: function () {
        this.element
            .removeClass("bwRequest")
            .text("");
    },
    getOption: function (key) {
        try {
            console.log('In getOption().');

            return this.options[key];

        } catch (e) {
            console.log('Exception in getOption(): ' + e.message + ', ' + e.stack);
        }
    },


    addSupplementalToRequest: function (source_bwBudgetRequestId, destination_bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.addSupplementalToRequest().');
            $('#bwRequest_AddSupplementalToRequestDialog').dialog('close');
            alert('In bwRequest.js.addSupplementalToRequest(). source_bwBudgetRequestId: ' + source_bwBudgetRequestId + ', destination_bwBudgetRequestId: ' + destination_bwBudgetRequestId);

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwParticipantEmail: participantEmail,
                bwParticipantFriendlyName: participantFriendlyName,

                source_bwBudgetRequestId: source_bwBudgetRequestId,
                destination_bwBudgetRequestId: destination_bwBudgetRequestId
            };

            $.ajax({
                url: webserviceurl + '/addsupplementaltorequest',
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                error: function (jqXHR, settings, errorThrown) {
                    debugger;
                    //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId); // Make sure the dialog is closed.

                    if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                        console.log('HTTP 401 "Unauthorized".');
                        console.log('HTTP 401 "Unauthorized".');
                        console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        //alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        console.log('HTTP 401 "Unauthorized".');
                        console.log('HTTP 401 "Unauthorized".');

                    } else {
                        console.log('Error in bwRequest.js.displayRequestForm():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        alert('Error in bwRequest.js.displayRequestForm():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                    }

                },
                success: function (results) {
                    try {

                        if (results.status != 'SUCCESS') {

                            console.log('Error in bwRequest.js.addSupplementalToRequest.success(): ' + results.status + ', ' + results.message);
                            displayAlertDialog('Error in bwRequest.js.addSupplementalToRequest.success(): ' + results.status + ', ' + results.message);

                        } else {

                            console.log('SUCCESS in bwRequest.js.addSupplementalToRequest.success(): ' + results.status + ', ' + results.message);
                            displayAlertDialog('The Supplemental has been added to the request.');

                        }

                    } catch (e) {
                        console.log('Exception in bwRequest.js.addSupplementalToRequest():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.addSupplementalToRequest():2: ' + e.message + ', ' + e.stack);
                    }

                }

            });

        } catch (e) {

            var msg = 'Exception in bwRequest.js.addSupplementalToRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },

    removeSupplementalFromARequest: function (supplemental_bwBudgetRequestId, master_bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.removeSupplementalFromARequest().');
            //alert('In bwRequest.js.removeSupplementalFromARequest(). supplemental_bwBudgetRequestId: ' + supplemental_bwBudgetRequestId + ', master_bwBudgetRequestId: ' + master_bwBudgetRequestId);

            $('#bwRequest_RemoveSupplementalFromARequestDialog').dialog('close');

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwParticipantEmail: participantEmail,
                bwParticipantFriendlyName: participantFriendlyName,

                supplemental_bwBudgetRequestId: supplemental_bwBudgetRequestId,
                master_bwBudgetRequestId: master_bwBudgetRequestId
            };

            $.ajax({
                url: webserviceurl + '/removesupplementalfromarequest',
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                error: function (data, errorCode, errorMessage) {

                    var msg = 'Error in bwRequest.js.removeSupplementalFromARequest.removesupplementalfromarequest(): ' + errorCode + ', ' + errorMessage + ', data: ' + JSON.stringify(data);
                    console.log(msg);
                    displayAlertDialog(msg);

                },
                success: function (results) {
                    try {

                        if (results.status != 'SUCCESS') {

                            console.log('Error in bwRequest.js.removeSupplementalFromARequest.success(): ' + results.status + ', ' + results.message);
                            displayAlertDialog('Error in bwRequest.js.removeSupplementalFromARequest.success(): ' + results.status + ', ' + results.message);

                        } else {

                            console.log('SUCCESS in bwRequest.js.removeSupplementalFromARequest.success(): ' + results.status + ', ' + results.message);
                            displayAlertDialog('The Supplemental has been removed from the request.');

                        }

                    } catch (e) {
                        console.log('Exception in bwRequest.js.removeSupplementalFromARequest():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.removeSupplementalFromARequest():2: ' + e.message + ', ' + e.stack);
                    }

                }

            });

        } catch (e) {

            var msg = 'Exception in bwRequest.js.removeSupplementalFromARequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },

    cmdCreateSupplementalAr: function () {
        try {
            console.log('In bwRequest.js.cmdCreateSupplementalAr().');

            // Try to close this in case it is open.
            try {
                $('#ArDialog').dialog("close");
            } catch (e) {
            }


            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.

            $('#liWelcome').hide();
            $('#liArchive').hide();
            $('#liSummaryReport').hide();
            $('#liConfiguration').hide();
            $('#liHelp').hide();
            $('#liNewRequest').show();

            var e1 = document.getElementById('divNewRequestMasterDiv');
            e1.style.borderRadius = '20px 0 0 20px';

            $('#divWelcomeMasterDivTitle').text('New Supplemental Request'); // + budgetRequestId); // + budgetRequestId);

            //$('#divWelcomePageLeftButtonsWelcomeButton').css({
            //    'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer'
            //});

            renderLeftButtons('divNewRequestPageLeftButtons');

            $('#divNewRequestPageLeftButtonsWelcomeButton').off('click').click(function () {
                renderWelcomeScreen();
            });

            renderNewSupplementalBudgetRequestForm(budgetRequestId, functionalAreaId, pmAccountId, brTitle);

        } catch (e) {

            var msg = 'Exception in bwRequest.js.cmdCreateSupplementalAr(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },

    renderNewSupplementalBudgetRequestForm: function (budgetRequestId, functionalAreaId, pmAccountId, brTitle) {
        try {
            console.log('In bwRequest.js.renderNewSupplementalBudgetRequestForm().');

            // Generate and store the GUID on the page. This is necessary so that the attachments section works ok (among other things).
            var supplementalRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });

            // We must clear any old form data so that there is no confusion (duplicate elements specifically BudgetRequestId). Todd: This is a best practice, implement throughout.
            document.getElementById('myxml').innerHTML = '';

            var html = '';
            html += '<table style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 654px" class="xdFormLayout">';
            html += '  <colgroup>';
            html += '    <col style="WIDTH: 654px" />';
            html += '  </colgroup>';
            html += '  <tbody>';
            html += '    <tr class="xdTableContentRow">';
            html += '      <td style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px" class="xdTableContentCell">';
            html += '        <div />';
            html += '        <!--<img src="../Lists/LogoImage/CompanyLogo.png" style="HEIGHT: 96px; WIDTH: 96px" />-->';
            html += '        <table>';
            html += '        <!--<tr><td>&nbsp;</td></tr>-->';
            html += '          <tr><td>&nbsp;</td></tr>';
            html += '          <tr>';
            html += '            <td width="5px"></td>';
            html += '            <td><!--<img src="../Lists/LogoImage/CompanyLogo.png" style="HEIGHT: 96px; WIDTH: 96px" />--></td>';
            html += '            <td><span id="spanNewRequestFormTitle"><br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong></span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;font-size:150%;">for ' + brTitle + '<br /><br /></span></span></td>';
            html += '          </tr>';
            html += '        </table>';
            html += '        <div align="right">';
            html += '        <span class="xdlabel">';
            html += '          <em />';
            html += '        </span>';
            html += '        </div>';
            html += '        <div align="right">';
            html += '          <span class="xdlabel">';
            html += '            <em>';
            html += '            <font style="FONT-SIZE: 11pt">';
            html += '            <!--<a xd:disableEditing="yes" href="http://sp2010/budget/_layouts/help.aspx?Lcid=1033&amp;amp;Key=HelpHome&amp;amp;ShowNav=true">';
            html += '              <img setWidth="24" setHeight="22" src="30837E49.png" alt="SharePoint-Help-Question-Mark.png" style="BORDER-TOP: #000080 1.5pt; HEIGHT: 22px; BORDER-RIGHT: #000080 1.5pt; BORDER-BOTTOM: #000080 1.5pt; BORDER-LEFT: #000080 1.5pt; WIDTH: 24px" class="ms-rtePosition-4" />';
            html += '            </a>-->';
            html += '            xComplete the form then click the "Submit" button.';
            html += '            </font>';
            html += '            </em>';
            html += '          </span>';
            html += '        </div>';
            html += '        <div align="right">';
            html += '          <span class="xdlabel" id="spanNewBudgetRequestPageButtons">';
            html += '            <!-- <input tabindex="0" xd:xctname="Button" xd:ctrlid="CTRL81" value="Submit" type="button" style="margin: 1px" class="langFont" title="Click here to Submit the request, or click the Help icon in the top right corner of this screen..." /> -->';
            html += '            <!--<input type="button" name="startWorkflowButton" value="Submitxcx1" onclick="cmdCreateBudgetRequestAndStartWorkflow();" title="Click here to Submit the request." style="MARGIN: 1px; WIDTH: 200px;font-size: 20pt;cursor:pointer;" />-->';
            //html += '            <button name="startWorkflowButton" id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow();" class="BwButton200" title="Click here to Submit the request.">Submit</button>';

            html += '            <button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + budgetRequestId + '\', \'' + supplementalRequestId + '\', \'' + functionalAreaId + '\', \'' + pmAccountId + '\');" class="BwButton200" title="Click here to Submit the supplemental request.">Submit</button>';
            html += '            &nbsp;';
            html += '            <!--<input type="button" value="Cancel" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" style="MARGIN: 1px; WIDTH: 200px;font-size: 20pt;cursor:pointer;" />-->';
            html += '            <button onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200">Cancel</button>';
            html += '            &nbsp;';
            html += '          </span>';
            html += '        </div>';
            html += '        <div align="right">';
            html += '          &nbsp;';
            html += '        </div>';
            html += '        <div align="center">';
            html += '          <span class="xdlabel" />';
            html += '          <span style="BORDER-TOP: #dcdcdc 1pt; BORDER-RIGHT: #dcdcdc 1pt; WHITE-SPACE: nowrap; BORDER-BOTTOM: #dcdcdc 1pt; COLOR: #ff0000; TEXT-ALIGN: right; BORDER-LEFT: #dcdcdc 1pt; WIDTH: 100%" tabindex="-1" xd:binding="my:GlobalError" xd:xctname="PlainText" xd:ctrlid="CTRL115" xd:disableediting="yes" hidefocus="1" class="xdTextBox" title="" />';
            html += '        </div>';
            html += '        <div align="center">';
            html += '          <span class="xdlabel" />';
            html += '        </div>';
            html += '    <div align="center">';
            html += '        <table class="xdFormLayout" style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 652px">';
            html += '            <!-- original was  WIDTH: 652px had changed to 98% for some reason...-->';
            html += '            <colgroup>';
            html += '                <col style="WIDTH: 98%" /> <!-- was style="WIDTH: 652px"-->';
            html += '            </colgroup>';
            html += '            <tbody>';
            html += '                <tr style="MIN-HEIGHT: 4px" class="xdTableContentRow">';
            html += '                    <td valign="top" style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-BOTTOM: #d8d8d8 1pt" class="xdTableContentCell">';
            html += '                        <div>';
            html += '                            <table class="xdFormLayout xdTableStyleTwoCol" style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 649px">';
            html += '                                <colgroup>';
            html += '                                    <col style="WIDTH: 169px" />';
            html += '                                    <col style="WIDTH: 480px" />';
            html += '                                </colgroup>';
            html += '                                <tbody valign="top">';
            html += '                                    <tr class="xdTableOffsetRow">';
            html += '                                        <td class="xdTableOffsetCellLabel" style="text-align:left; BORDER-TOP: #d8d8d8 1pt; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px">';
            html += '                                            <font color="#000000">';
            html += '                                                <span class="xdlabel" />';
            html += '                                                <span class="xdlabel">Description:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            html += '                                            </font>';
            html += '                                        </td>';
            html += '                                        <td style="BORDER-TOP: #d8d8d8 1pt; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            html += '                                            <div>';
            html += '                                                <input type="text" id="strProjectTitle" style="WIDTH: 70%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" /> <!-- was 2.77em -->';
            html += '                                                <!--<textarea id="strProjectTitle" rows="1" style="WIDTH: 97%; HEIGHT: 18px;"></textarea>-->';
            html += '                                           </div>';
            html += '                                       </td>';
            html += '                                    </tr>';
            //html += '                                    <!--<tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <span class="xdlabel">';
            //html += '                                                <font color="#000000">Category:</font>';
            //html += '                                            </span>';
            //html += '                                        </td>';
            //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <div>';
            //html += '                                                <select id="ddlCategory" name="ddlCategory" tabindex="0" size="1" style="WIDTH: 100%" class="xdComboBox xdBehavior_Select" />';
            //html += '                                            </div>';
            //html += '                                        </td>';
            //html += '                                    </tr>-->';
            html += '                                    <tr class="xdTableOffsetRow">';
            html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            html += '                                            <span id="spanNewRequestDetailsLabel"><span class="xdlabel">Justification details:</span></span>';
            html += '                                        </td>';
            html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            html += '                                            <div>';
            html += '                                                <textarea id="strBriefDescriptionOfProject" rows="3" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea>';
            html += '                                                <!--<span style="WORD-WRAP: break-word; HEIGHT: 60px; WHITE-SPACE: normal; TEXT-ALIGN: left; OVERFLOW-X: auto; OVERFLOW-Y: auto; WIDTH: 451px" tabindex="0" xd:datafmt="" xd:binding="my:Brief_Description_of_Project" xd:xctname="PlainText" xd:ctrlid="CTRL83" contenteditable="true" hidefocus="1" class="xdTextBox xdBehavior_Formatting" title="" />-->';
            html += '                                            </div>';
            html += '                                        </td>';
            html += '                                    </tr>';
            html += '                                    <tr class="xdTableOffsetRow">';
            html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            html += '                                            <span class="xdlabel">';
            html += '                                                <span class="xdlabel">';
            html += '                                                    <font color="#000000">Requested Amount:</font>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            html += '                                                </span>';
            html += '                                            </span>';
            html += '                                        </td>';
            html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            html += '                                            <div>';
            html += '                                                <input type="text" id="dblRequestedCapital" onblur="formatRequestedCapital_InitBudgetRequest();" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: right;" />';
            html += '                                            </div>';
            html += '                                        </td>';
            html += '                                    </tr>';
            //html += '                                    <!--<tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <span class="xdlabel">Requested Expense:</span>';
            //html += '                                        </td>';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <div>';
            //html += '                                                <input type="text" id="dblRequestedExpense" onblur="formatRequestedExpense_InitBudgetRequest();" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 40pt;TEXT-ALIGN: right;" />';
            //html += '                                            </div>';
            //html += '                                        </td>';
            //html += '                                    </tr>-->';





            //html += '                                    <tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <span id="spanRequestForm_ManagerTitle" class="xdlabel"></span><span class="xdlabel">:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            //html += '                                        </td>';
            //html += '                                        <td style="white-space:nowrap;text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px;" class="xdTableOffsetCellComponent">';
            //html += '                                            <!--<div id="peoplePicker"></div>-->';
            //html += '                                            <input id="txtProjectManagerName" title="Type the first name. This is the person who does the initial approval." style="WIDTH: 85%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><input id="txtProjectManagerId" style="display:none;" /><input id="txtProjectManagerEmail" style="display:none;" />';
            //html += '                                            <!--👥-->';
            //html += '                                            <img src="images/addressbook-icon35x35.png" style="width:35px;height:35px;vertical-align:text-bottom;cursor:pointer;" onclick="cmdDisplayPeoplePickerDialog(\'txtProjectManagerName\', \'txtProjectManagerId\', \'txtProjectManagerEmail\');" />';
            //html += '                                            <!--<span style="font-size:x-small;vertical-align:bottom;padding-left:10px;color:gray;"></span>-->';
            //html += '                                        </td>';
            //html += '                                    </tr>';
            //html += '                                    <tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <span class="xdlabel">';
            //html += '                                                <span class="xdlabel">Year:</span>';
            //html += '                                            </span>';
            //html += '                                        </td>';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <div>';
            //html += '                                                <select id="ddlYear" onchange="cmdDdlYearSelectionChanged();" tabindex="0" xd:postbackmodel="always" xd:boundprop="value" xd:binding="my:Year" xd:xctname="dropdown" xd:ctrlid="CTRL104" size="1" class="xdComboBox xdBehavior_Select" style="WIDTH: 50%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: right;"></select>';
            //html += '                                            </div>';
            //html += '                                        </td>';
            //html += '                                    </tr>';
            //html += '                                    <tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <div>';
            //html += '                                                <span class="xdlabel">';
            //html += '                                                    <span class="xdlabel">Financial Area:</span>';
            //html += '                                                </span>';
            //html += '                                            </div>';
            //html += '                                        </td>';
            //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <div>';
            //html += '                                                <select id="ddlFunctionalArea" name="ddlFunctionalArea" tabindex="0" value="" size="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" class="xdComboBox xdBehavior_Select" title="" />';
            //html += '                                            </div>';
            //html += '                                        </td>';
            //html += '                                    </tr>';
            //html += '                                    <tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                            <span id="spanNewRequestStartDateLabel" style="white-space:nowrap;"><span class="xdlabel" style="white-space:nowrap;">Estimated Start Date:</span></span>';
            //html += '                                        </td>';
            //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <!--<SharePoint:DateTimeControl id="dtiEstimatedStartDate" DatePickerFrameUrl="../_layouts/15/iframe.aspx" LocaleId="1033" DateOnly="true" runat="server" />-->';
            //html += '                                           <input type="text" id="dtEstimatedStartDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;">';
            //html += '                                        </td>';
            //html += '                                    </tr>';
            //html += '                                    <tr class="xdTableOffsetRow">';
            //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
            //html += '                                                <span id="spanNewRequestEndDateLabel" style="white-space:nowrap;"><span class="xdlabel" style="white-space:nowrap;">Estimated End Date:</span></span>';
            //html += '                                        </td>';
            //html += '                                       <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
            //html += '                                            <!--<SharePoint:DateTimeControl id="dtiEstimatedEndDate" DatePickerFrameUrl="../_layouts/15/iframe.aspx" LocaleId="1033" DateOnly="true" runat="server" />-->';
            //html += '                                            <input type="text" id="dtEstimatedEndDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;">';
            //html += '                                        </td>';
            //html += '                                    </tr>';

            if (enableNewRequestAttachments == true) {
                html += '                                    <tr id="trNewRequestAttachmentsSection" class="xdTableOffsetRow">';
                html += '                                        <td class="xdTableOffsetCellLabel" valign="top" style="text-align:left; BORDER-BOTTOM: #d8d8d8 1pt; BORDER-LEFT: #d8d8d8 1pt; BACKGROUND-COLOR: #ffffff">';
                html += '                                            <span class="xdlabel">Attachments:</span>';
                html += '                                        </td>';
                html += '                                        <td style="VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
                html += '                                            <div>';
                html += '                                                <div xd:widgetindex="0" tabindex="-1" xd:xctname="RepeatingSection" xd:ctrlid="CTRL90" align="left" style="MARGIN-BOTTOM: 0px; WIDTH: 100%" class="xdRepeatingSection xdRepeating" title="">';
                html += '                                                    <div>';
                html += '                                                        <!--<span tabindex="0" tabstop="true" xd:boundprop="xd:inline" xd:binding="my:CapexAttachment" xd:xctname="FileAttachment" xd:ctrlid="CTRL91" style="HEIGHT: 30px; WIDTH: 161px" hidefocus="1" class="xdFileAttachment" />-->';
                html += '                                                        <input id="inputFile" type="file" onchange="uploadAttachment(\'attachments\');" style="width: 75%;" />';
                html += '                                                    </div>';
                html += '                                                </div>';
                html += '                                                <p id="newrequestattachments"></p>';
                html += '                                            </div>';
                html += '                                        </td>';
                html += '                                    </tr>';
            }

            html += '<span id="BudgetRequestId" style="display: none; visibility: hidden;" xd:binding="my:BudgetRequestId"></span>'; // This is where we store the guid which is generated prior to this form being displayed. 

            html += '<tr>';
            html += '  <td>';
            html += '&nbsp;';
            html += '';
            html += '';
            html += '';
            html += '';
            html += '  </td>';
            html += '</tr>';


            html += '                                </tbody>';
            html += '                            </table>';
            html += '                        </div>';
            html += '                    </td>';
            html += '                </tr>';
            html += '            </tbody>';
            html += '        </table>';
            html += '   </div>';
            html += '</td>';
            html += '</tr>';
            html += '</tbody>';
            html += '</table>';


            document.getElementById('budgetrequestform').innerHTML = html;

            // Generate and store the GUID on the page. This is necessary so that the attachments section works ok (among other things).
            //var supplementalRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            //    return v.toString(16);
            //});
            document.getElementById('BudgetRequestId').innerHTML = supplementalRequestId;

            displayAlertDialog('In bwRequest.js.renderNewSupplementalBudgetRequestForm. supplementalRequestId: ' + supplementalRequestId);

            //populateFunctionalAreas();

            // Populate the year drop-down

            // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.

            // This is a supplemental request for budget request _reference, which is a guid.
            //var html = '';
            //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
            //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //var html = '';
            //html += '';
            //html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200" title="Click here to Submit the supplemental request.">Submit</button>';
            //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200">Cancel</button>';
            //html += '&nbsp;';
            //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;


            // Set the manager title.
            //$('#spanRequestForm_ManagerTitle').html(newBudgetRequestManagerTitle);
            // Set if the details are required.
            if (requireRequestDetails == true) {
                document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            } else {
                document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
            }
            //// Set if the dates are required.
            //if (requireStartEndDates == true) {
            //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Estimated Start Date:&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
            //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Estimated End Date:&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
            //} else {
            //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Estimated Start Date:</span>';
            //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">Estimated End Date:</span>';
            //}
            //// Set if the attachments are allowed.
            //if (enableNewRequestAttachments == true) {
            //    $('#trNewRequestAttachmentsSection').show();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            //} else {
            //    $('#trNewRequestAttachmentsSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}
            // Now we can hook up the Participant text box for autocomplete.
            //$("#txtProjectManagerName").autocomplete({
            //    source: function (request, response) {
            //        //weburl = _spPageContextInfo.siteAbsoluteUrl;
            //        $.ajax({
            //            url: appweburl + "/workflow/" + workflowAppId + "/participants/" + request.term,
            //            dataType: "json",
            //            success: function (data) {
            //                var searchArray = [];
            //                for (var i = 0; i < data.participants.length; i++) {
            //                    searchArray[i] = data.participants[i].participant;
            //                }
            //                response(searchArray);
            //            }
            //        });
            //    },
            //    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
            //    select: function (event, ui) {
            //        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
            //    },
            //    open: function () {
            //        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
            //    },
            //    close: function () {
            //        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //        var projectManagerName = this.value.split('|')[0];
            //        var projectManagerId = this.value.split('|')[1];

            //        if (projectManagerName.indexOf('undefined') > -1) {
            //            document.getElementById('txtProjectManagerName').value = '';
            //            document.getElementById('txtProjectManagerId').value = '';
            //        } else {
            //            document.getElementById('txtProjectManagerName').value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
            //            document.getElementById('txtProjectManagerId').value = projectManagerId;
            //        }
            //    }
            //});
        } catch (e) {

            var msg = 'Exception in bwRequest.js.renderNewSupplementalBudgetRequestForm(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }

    },

    checkIfThereHaveBeenAnyChanges: function (bwBudgetRequestId, lastSavedJson) { // 1-14-2023
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                console.log('In bwRequest.js.checkIfThereHaveBeenAnyChanges().');
                //alert('In bwRequest.js.checkIfThereHaveBeenAnyChanges().');

                if (!bwBudgetRequestId) {

                    var msg = 'Error in bwRequest.js.checkIfThereHaveBeenAnyChanges(). Unexpected value for bwBudgetRequestId: ' + bwBudgetRequestId;
                    alert(msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    reject(result);

                } else {

                    //
                    //
                    // IF WE PASS IN THE lastSavedJson THAT MEANS IT IS FROM A NEW REQUEST ON THE NEW REQUEST SCREEN. THIS IS A PART OF OUR AUTO-SAVE FUNCTIONALITY FOR THE NEW REQUEST SCREEN.
                    //
                    //
                    if (!lastSavedJson) {

                        for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                            if (!(thiz.options.lastSavedJson[i] && thiz.options.lastSavedJson[i].bwBudgetRequestId)) {
                                alert('xcx12345-1 Error: Property [bwBudgetRequestId] does not exist: ' + JSON.stringify(thiz.options.lastSavedJson[i]));
                            } else {
                                if (thiz.options.lastSavedJson[i].bwBudgetRequestId == bwBudgetRequestId) {
                                    lastSavedJson = thiz.options.lastSavedJson[i];
                                    break;
                                }
                            }
                        }

                    }

                    if (!lastSavedJson) {

                        //
                        // THIS MEANS THERE IS NO lastSavedJson. WHICH ALSO MEANS, THE REQUEST NEVER RENDERED PROPERLY, AND IT IS HIGHLY LIKELY THAT THE USER TRIED TO VIEW A REQUEST when not authenticated... it wasn't displayed correctly, etc.
                        // WE WILL LOG THIS ERROR to the console just in case. 8-18-2023.
                        //

                        var msg = 'There is no lastSavedJson, so let the user close the request dialog. xcx88374005693.';

                        var result = {
                            status: 'SUCCESS',
                            message: msg,
                            results: 'NO_CHANGES_TO_SAVE'
                        }
                        console.log(msg);
                        resolve(result);

                    } else {

                        console.log('In checkIfThereHaveBeenAnyChanges(). Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-1');
                        var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                        promise.then(function (results) {
                            try {

                                console.log('Returning from scrapeBwRequestJson(). xcx2131241-1');

                                //
                                // 1-14-2023
                                // Now we have to compare both sets of JSON, and see if there have been any changes.
                                //
                                var budgetrequestform;
                                var budgetrequestforms = document.getElementsByClassName('budgetrequestform');
                                for (var i = 0; i < budgetrequestforms.length; i++) {
                                    var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                                    if (bwBudgetRequestId == _budgetRequestId) {
                                        // We found the form.
                                        budgetrequestform = budgetrequestforms[i];
                                        break;
                                    }
                                }
                                if (!budgetrequestform) {

                                    console.log('In bwRequest.js.checkIfThereHaveBeenAnyChanges(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);
                                    displayAlertDialog('In bwRequest.js.checkIfThereHaveBeenAnyChanges(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);

                                } else {

                                    var dataElements = $(budgetrequestform).find('[bwwidgetname]');
                                    var formWidgets = [];
                                    for (var i = 0; i < dataElements.length; i++) {
                                        var formWidgetName = dataElements[i].getAttribute('bwwidgetname');
                                        formWidgets.push(formWidgetName);
                                    }

                                    //
                                    // Then we go through the list of form widgets, and compare their JSON to see if there has been any changes.
                                    //
                                    var widgetsWithChanges = [];
                                    for (var i = 0; i < formWidgets.length; i++) {

                                        var element = $(budgetrequestform).find('.' + formWidgets[i] + ':first');

                                        if (!$(element)[formWidgets[i]]) {

                                            // 12-26-2023. NO LONGER DISPLAYING THIS message to the user. Currently it stubmled on ProjectTitle.js, which I believe has been depracated/removed/renamed. A remnant on the form defiinition.
                                            var msg = '12-26-2023. NO LONGER DISPLAYING THIS message to the user. Currently it stubmled on ProjectTitle.js, which I believe has been depracated/removed/renamed. A remnant on the form defiinition. xcx2131245368894-2';

                                            console.log(msg);

                                        } else {

                                            var originalValue = (function () { return; })(); // To reliably initialize and set a variable to undefined, use a function with an empty return expression





                                            console.log('xcx23123123-2. In checkIfThereHaveBeenAnyChanges(). Calling getData().');
                                            //debugger;

                                            var currentValue = results.bwRequestJson[formWidgets[i]].value;
                                            //var currentValue = $(element)[formWidgets[i]]('getData'); // Got rid of this, we only want to call getData once when necessary... not multiple times.





                                            if ((lastSavedJson[formWidgets[i]]) || (typeof currentValue !== 'undefined')) {

                                                //if (lastSavedJson[formWidgets[i]] && lastSavedJson[formWidgets[i]].value) {
                                                try {
                                                    originalValue = lastSavedJson[formWidgets[i]].value;
                                                } catch (e) { }
                                                //}

                                                if (JSON.stringify(currentValue) != JSON.stringify(originalValue)) {
                                                    var json = {
                                                        widget: formWidgets[i],
                                                        originalValue: JSON.stringify(originalValue),
                                                        currentValue: JSON.stringify(currentValue)
                                                    }
                                                    widgetsWithChanges.push(json);
                                                }
                                            }

                                        }

                                    }

                                    if (widgetsWithChanges.length > 0) {

                                        console.log('widgetsWithChanges: ' + JSON.stringify(widgetsWithChanges));
                                        //displayAlertDialog_Persistent('widgetsWithChanges: ' + JSON.stringify(widgetsWithChanges));

                                        var result = {
                                            status: 'SUCCESS',
                                            message: msg,
                                            results: 'YES_CHANGES_TO_SAVE'
                                        }
                                        resolve(result);

                                    } else {

                                        var msg = 'The json is the same, so let the user close the request dialog.';

                                        var result = {
                                            status: 'SUCCESS',
                                            message: msg,
                                            results: 'NO_CHANGES_TO_SAVE'
                                        }
                                        resolve(result);

                                    }

                                }

                            } catch (e) {

                                var msg = 'Exception in bwRequest.js.checkIfThereHaveBeenAnyChanges.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                                console.log(msg);
                                displayAlertDialog(msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            }
                        });

                    }




                    //} else {
                    //// Step 1: Scrape the request
                    //// Step 2: Get the one from the database? No, it should have been stored here.....
                    //// Step 3: Prompt the user to save the changes or cancel closing the request.
                    //// Step 4: If there is no way to stop it, at last save this partially saved version to the database for recoverery on next login.... "Unexpectedly closed down... do you wish to recover thesed requests?"

                    //var widgetCount = $('.bwRequest').length; // This is just a random check I am doing to make sure there is only ever 1 of these jquery ui widgets.
                    //if (widgetCount != 1) {

                    //    var msg = 'Error in bwRequest.js.checkIfThereHaveBeenAnyChanges(). Unexpected value for widget count, expected 1. widget count: ' + widgetCount;

                    //    var result = {
                    //        status: 'ERROR',
                    //        message: msg
                    //    }
                    //    reject(result);

                    //} else {

                    //    var lastSavedJson;
                    //    for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                    //        if (!(thiz.options.lastSavedJson[i] && thiz.options.lastSavedJson[i].bwBudgetRequestId)) {
                    //            alert('xcx12345-1 Error: Property [bwBudgetRequestId] does not exist: ' + JSON.stringify(thiz.options.lastSavedJson[i]));
                    //        } else {
                    //            if (thiz.options.lastSavedJson[i].bwBudgetRequestId == bwBudgetRequestId) {
                    //                lastSavedJson = thiz.options.lastSavedJson[i];
                    //                break;
                    //            }
                    //        }
                    //    }

                    //    if (!lastSavedJson) {

                    //        //var msg = 'Error in bwRequest.js.checkIfThereHaveBeenAnyChanges(). Could not find the request\'s lastSavedJson for bwBudgetRequestId: ' + bwBudgetRequestId + ', thiz.options.lastSavedJson: ' + JSON.stringify(thiz.options.lastSavedJson);

                    //        //var result = {
                    //        //    status: 'ERROR',
                    //        //    message: msg
                    //        //}
                    //        //reject(result);

                    //        //
                    //        // THIS MEANS THERE IS NO lastSavedJson. WHICH ALSO MEANS, THE REQUEST NEVER RENDERED PROPERLY, AND IT IS HIGHLY LIKELY THAT THE USER TRIED TO VIEW A REQUEST when not authenticated... it wasn't displayed correctly, etc.
                    //        // WE WILL LOG THIS ERROR to the console just in case. 8-18-2023.
                    //        //

                    //        var msg = 'There is no lastSavedJson, so let the user close the request dialog. xcx88374005693.';

                    //        var result = {
                    //            status: 'SUCCESS',
                    //            message: msg,
                    //            results: 'NO_CHANGES_TO_SAVE'
                    //        }
                    //        console.log(msg);
                    //        resolve(result);

                    //    } else {

                    //        console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-1');
                    //        var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                    //        promise.then(function (bwRequestJson) {
                    //            try {

                    //                console.log('Returning from scrapeBwRequestJson(). xcx2131241-1');

                    //                //
                    //                // 1-14-2023
                    //                // Now we have to compare both sets of JSON, and see if there have been any changes.
                    //                //
                    //                var budgetrequestform;
                    //                var budgetrequestforms = document.getElementsByClassName('budgetrequestform');
                    //                for (var i = 0; i < budgetrequestforms.length; i++) {
                    //                    var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                    //                    if (bwBudgetRequestId == _budgetRequestId) {
                    //                        // We found the form.
                    //                        budgetrequestform = budgetrequestforms[i];
                    //                        break;
                    //                    }
                    //                }
                    //                if (!budgetrequestform) {
                    //                    displayAlertDialog('In bwRequest.js.checkIfThereHaveBeenAnyChanges(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);
                    //                } else {

                    //                    var dataElements = $(budgetrequestform).find('[bwwidgetname]');
                    //                    var formWidgets = [];
                    //                    for (var i = 0; i < dataElements.length; i++) {
                    //                        var formWidgetName = dataElements[i].getAttribute('bwwidgetname');
                    //                        formWidgets.push(formWidgetName);
                    //                    }

                    //                    // Then we go through the list of form widgets, and compare their JSON to see if there has been any changes.
                    //                    var widgetsWithChanges = [];
                    //                    for (var i = 0; i < formWidgets.length; i++) {

                    //                        var element = $(budgetrequestform).find('.' + formWidgets[i] + ':first');

                    //                        var originalValue = (function () { return; })(); // To reliably set a variable boo to undefined, use a function with an empty return expression
                    //                        var currentValue = $(element)[formWidgets[i]]('getData');
                    //                        //if ((lastSavedJson[formWidgets[i]] && lastSavedJson[formWidgets[i]].value) || (typeof currentValue !== 'undefined')) {
                    //                        if ((lastSavedJson[formWidgets[i]]) || (typeof currentValue !== 'undefined')) {

                    //                            //if (lastSavedJson[formWidgets[i]] && lastSavedJson[formWidgets[i]].value) {
                    //                            try {
                    //                                originalValue = lastSavedJson[formWidgets[i]].value;
                    //                            } catch (e) { }
                    //                            //}

                    //                            if (JSON.stringify(currentValue) != JSON.stringify(originalValue)) {
                    //                                var json = {
                    //                                    widget: formWidgets[i],
                    //                                    originalValue: JSON.stringify(originalValue),
                    //                                    currentValue: JSON.stringify(currentValue)
                    //                                }
                    //                                widgetsWithChanges.push(json);
                    //                            }
                    //                        }

                    //                    }

                    //                    if (widgetsWithChanges.length > 0) {

                    //                        console.log('widgetsWithChanges: ' + JSON.stringify(widgetsWithChanges));
                    //                        //displayAlertDialog_Persistent('widgetsWithChanges: ' + JSON.stringify(widgetsWithChanges));

                    //                        var result = {
                    //                            status: 'SUCCESS',
                    //                            message: msg,
                    //                            results: 'YES_CHANGES_TO_SAVE'
                    //                        }
                    //                        resolve(result);

                    //                    } else {

                    //                        var msg = 'The json is the same, so let the user close the request dialog.';

                    //                        var result = {
                    //                            status: 'SUCCESS',
                    //                            message: msg,
                    //                            results: 'NO_CHANGES_TO_SAVE'
                    //                        }
                    //                        resolve(result);

                    //                    }

                    //                }







                    //                // THIS STRNG COMPARISON APPROACH IS FOR THE BIRDS.... CHANGING TO JUST COMPARING THE FORM ELEMENTS THAT ARE ON THE FORM. 1-16-2023

                    //                // Note that lastSavedJson is populated in the xx method, when the form is first displayed, so that when we do the comparison here,
                    //                // we can compare the JSON as a string, and the JSON elements/properties will all be in the correct order. This makes things so simple and fast! :)
                    //                // Also, we refresh lastSavedJson when the user saves the equest using save/publish or cntrl-s (method: xx().)

                    //                //debugger;
                    //                //lastSavedJson.Created = bwRequestJson.Created; // Have to set these as they are the only data item in the JSON which may be different. scrapeBwRequestJson must change this value.
                    //                //delete lastSavedJson.ModifiedById;
                    //                //delete lastSavedJson.ModifiedByFriendlyName;
                    //                //delete lastSavedJson.ModifiedByEmail;
                    //                //delete lastSavedJson.Modified;


                    //                //delete bwRequestJson.bwAttachments;
                    //                //delete lastSavedJson.bwAttachments;

                    //                //// "ModifiedById":"dcfbc697-7728-4e0f-8620-8d9ab6ed31c6","ModifiedByFriendlyName":"Todd Hiltz","ModifiedByEmail":"todd@budgetworkflow.com","Modified":"2023-01-14T18:08:00.882Z"}"


                    //                //var newJson = JSON.stringify(bwRequestJson);
                    //                //var oldJson = JSON.stringify(lastSavedJson);
                    //                //if (newJson === oldJson) {

                    //                //    var msg = 'The json is the same, so let the user close the request dialog.';

                    //                //    var result = {
                    //                //        status: 'SUCCESS',
                    //                //        message: msg,
                    //                //        results: 'NO_CHANGES_TO_SAVE'
                    //                //    }
                    //                //    resolve(result);

                    //                //} else {

                    //                //    var result = {
                    //                //        status: 'SUCCESS',
                    //                //        message: msg,
                    //                //        results: 'YES_CHANGES_TO_SAVE'
                    //                //    }
                    //                //    resolve(result);

                    //                //}

                    //            } catch (e) {

                    //                var msg = 'Exception in bwRequest.js.checkIfThereHaveBeenAnyChanges.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                    //                console.log(msg);
                    //                displayAlertDialog(msg);

                    //                var result = {
                    //                    status: 'EXCEPTION',
                    //                    message: msg
                    //                }
                    //                reject(result);

                    //            }
                    //        });

                    //    }

                    //}
                }

            } catch (e) {

                var msg = 'Exception in beRequest.js.checkIfThereHaveBeenAnyChanges(): ' + e.message + ', ' + e.stack;
                console.log(msg);
                displayAlertDialog(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                reject(result);

            }
        })
    },

    recoverFromTheTrashBin: function (bwBudgetRequestId) {
        try {
            console.log('In recoverFromTheTrashBin().');

            //alert('In recoverFromTheTrashBin(). This functionality is incomplete. Coming Soon! xcx12434578. bwBudgetRequestId: ' + bwBudgetRequestId);






            //
            // The following will get commented out once it is all working. This is our Use Case user story........ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //
            var html = '';

            html += '<table style="width:100%;">';
            html += '   <tr>';
            html += '       <td style="width:90%;">';
            html += '           <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:30pt;font-weight:bold;">TrashBin - This functionality is incomplete. Coming Soon!</span>';
            html += '           <br />';
            html += '       </td>';
            html += '       <td style="width:9%;"></td>';
            html += '       <td style="width:1%;cursor:pointer;vertical-align:top;">';
            html += '           <span class="dialogXButton" style="font-size:30pt;font-weight:bold;" onclick="$(\'#bwDataGrid_TrashBinAdminDialog\').dialog(\'close\');">X</span>';
            html += '       </td>';
            html += '   </tr>';
            html += '</table>';
            html += '<input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';

            html += '<table>';
            html += '   <tr>';
            html += '       <td></td>';
            html += '       <td style="text-align:right;">';
            html += '           <span id="spanThereAreChangesToPublishText51" style="font-style:italic;color:tomato;">';
            //html += '';
            html += 'An easy way to find and recover a deleted request, with all of it\'s incomplete and completed tasks. Notifications will have to happen accordingly, and the mapping to the new title (eg: BR-230099). ';
            html += 'Maybe the system should ask the question, "Do you wish to merge this request with an another/existing one?". ';
            html += 'Ensure full remediation for getting this request back into the organization smoothly. An upper-right search component will allow the user to find the exact request easily as well.';
            html += '           </span>'; //<input value=" There are unsaved changes. Enter a description here and click Save..." type="text" id="txtNewWorkflowDescription" style="width:450px;color:grey;font-style:italic;padding:5px 5px 5px 5px;" onkeyup="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'NewWorkflowDescriptionTextBox_Onkeyup\');" />';
            html += '       </td>';
            html += '       <td></td>';
            html += '   </tr>';
            html += '</table>';

            html += '<br />';
            html += '<br />';

            var div = document.getElementById('bwDataGrid_TrashBinAdminDialog');
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = 'bwDataGrid_TrashBinAdminDialog';
                div.style.display = 'none';
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $("#bwDataGrid_TrashBinAdminDialog").dialog({
                modal: false,
                resizable: false,
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                width: '1200',
                dialogClass: 'no-close', // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function () {
                    try {

                    } catch (e) {
                        console.log('Exception in recoverFromTheTrashBin.bwDataGrid_TrashBinAdminDialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in recoverFromTheTrashBin.bwDataGrid_TrashBinAdminDialog.open(): ' + e.message + ', ' + e.stack);
                    }
                },
                close: function () {
                    $('#bwDataGrid_TrashBinAdminDialog').dialog('destroy');
                }

            });
            //$('#divConfigureBusinessModelNotificationsDialog2-1').dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();


        } catch (e) {
            console.log('Exception in recoverFromTheTrashBin(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in recoverFromTheTrashBin(): ' + e.message + ', ' + e.stack);
        }
    },
    permanentlyDeleteThisRequestFromTheTrashbin: function (bwBudgetRequestId) {
        try {
            console.log('In permanentlyDeleteThisRequestFromTheTrashbin().');
            //alert('In permanentlyDeleteThisRequestFromTheTrashbin(). This functionality is incomplete. Coming Soon! bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;

            //
            // The following will get commented out once it is all working. This is our Use Case user story........ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //
            var dialogId = 'bwRequest_PermanentlyDeleteRequestDialog';

            var html = '';

            html += '<table style="width:100%;">';
            html += '   <tr>';
            html += '       <td style="width:90%;">';
            html += '           <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:30pt;font-weight:bold;">Permanently delete this request?</span>';
            html += '           <br />';
            html += '       </td>';
            html += '       <td style="width:9%;"></td>';
            html += '       <td style="width:1%;cursor:pointer;vertical-align:top;">';
            html += '           <span class="dialogXButton" style="font-size:30pt;font-weight:bold;" onclick="$(\'#' + dialogId + '\').dialog(\'close\');">X</span>';
            html += '       </td>';
            html += '   </tr>';
            html += '</table>';
            html += '<input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';

            html += '<table>';
            html += '   <tr>';
            html += '       <td></td>';
            html += '       <td style="text-align:right;">';
            html += '           <span id="spanThereAreChangesToPublishText51" style="font-weight:bold;color:tomato;">';
            //html += '';
            html += 'This request will be permanently deleted. There will be no possibility of recovery.';
            //html += 'Maybe the system should ask the question, "Do you wish to merge this request with an another/existing one?". ';
            //html += 'Ensure full remediation for getting this request back into the organization smoothly. An upper-right search component will allow the user to find the exact request easily as well.';
            html += '           </span>'; //<input value=" There are unsaved changes. Enter a description here and click Save..." type="text" id="txtNewWorkflowDescription" style="width:450px;color:grey;font-style:italic;padding:5px 5px 5px 5px;" onkeyup="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'NewWorkflowDescriptionTextBox_Onkeyup\');" />';
            html += '       </td>';
            html += '       <td></td>';
            html += '   </tr>';
            html += '</table>';

            html += '<br />';
            html += '<div id="bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequest" class="divDialogButton" >';
            html += 'Permanently Delete';
            html += '</div>';
            html += '<br />';
            html += '<div class="divDialogButton" onclick="$(\'#' + dialogId + '\').dialog(\'close\');">';
            html += 'Close';
            html += '</div>';
            html += '<br /><br />';

            html += '<br />';
            html += '<br />';

            var div = document.getElementById(dialogId);
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = dialogId;
                div.style.display = 'none';
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $('#' + dialogId).dialog({
                modal: false,
                resizable: false,
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                width: '750',
                dialogClass: 'no-close', // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function () {
                    try {

                        $('#bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequest').off('click').click(function (error) {
                            try {

                                console.log('In bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin.bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequest.click().');

                                var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                                var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                                var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                                data = {
                                    bwParticipantId_LoggedIn: participantId,
                                    bwActiveStateIdentifier: activeStateIdentifier,
                                    bwWorkflowAppId_LoggedIn: workflowAppId,

                                    bwWorkflowAppId: workflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    bwParticipantId: participantId
                                };
                                var operationUri = thiz.options.operationUriPrefix + "_bw/bwworkflow/permanentlyDeleteThisRequestFromTheTrashbin";
                                $.ajax({
                                    url: operationUri,
                                    type: "POST",
                                    data: data,
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (result) {

                                        if (result.status != 'SUCCESS') {

                                            displayAlertDialog(result.message);

                                            $('#' + dialogId).dialog('close');
                                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close');

                                        } else {

                                            displayAlertDialog(result.message);

                                            $('#' + dialogId).dialog('close');
                                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close');

                                            //// Close the request.
                                            //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', 'divRequestFormDialog_c3711c95-4fc8-46b3-847f-572cdb6e9b85');

                                            //// Close the dialog.
                                            //$('#bwRequest_PermanentlyDeleteRequestDialog').dialog('close');

                                            //
                                            // Hide the executive summary.
                                            //
                                            var window1 = window; // This is how we make this work for popped-out request dialog windows.
                                            if (window.opener) {
                                                window1 = window.opener;
                                            }

                                            var executiveSummaries = window1.$('.executiveSummaryInCarousel');
                                            if (executiveSummaries && executiveSummaries.length && executiveSummaries.length > 0) {
                                                for (var i = 0; i < executiveSummaries.length; i++) {

                                                    var budgetRequestId = window1.$(executiveSummaries[i]).attr('bwbudgetrequestid');

                                                    if (bwBudgetRequestId == budgetRequestId) {
                                                        // We found it. Remove!

                                                        console.log('In bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin(). We just permanently deleted the request... remove it from the display. bwBudgetRequestId: ' + bwBudgetRequestId);

                                                        executiveSummaries[i].remove(); // Remove it from the dom.

                                                    }
                                                }
                                            }
                                            //
                                            // end: Hide the executive summary.
                                            //

                                        }

                                    },
                                    error: function (data, errorCode, errorMessage) {
                                        console.log('Error in bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin(). errorMessage: ' + errorMessage + ', errorCode: ' + errorCode + ', data: ' + JSON.stringify(data));
                                        displayAlertDialog('Error in bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin(). errorMessage: ' + errorMessage + ', errorCode: ' + errorCode + ', data: ' + JSON.stringify(data));
                                    }
                                });

                            } catch (e) {
                                console.log('Exception in bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin.bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequest.click(): ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in bwRequest.js.permanentlyDeleteThisRequestFromTheTrashbin.bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequest.click(): ' + e.message + ', ' + e.stack);
                            }
                        });

                    } catch (e) {
                        console.log('Exception in permanentlyDeleteThisRequestFromTheTrashbin.bwDataGrid_TrashBinAdminDialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in permanentlyDeleteThisRequestFromTheTrashbin.bwDataGrid_TrashBinAdminDialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }

            });
            $('#' + dialogId).dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();

        } catch (e) {
            console.log('Exception in permanentlyDeleteThisRequestFromTheTrashbin(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in permanentlyDeleteThisRequestFromTheTrashbin(): ' + e.message + ', ' + e.stack);
        }
    },

    reloadAndRefreshTheRequest: function (requestDialogId, budgetRequestId, bwWorkflowTaskItemId) {
        try {
            console.log('In bwRequest.js.reloadAndRefreshTheRequest(). requestDialogId: ' + requestDialogId + ', budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //alert('In bwRequest.js.reloadAndRefreshTheRequest(). requestDialogId: ' + requestDialogId + ', budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            var promise = thiz.checkIfThereHaveBeenAnyChanges(budgetRequestId);
            promise.then(function (results) {
                try {

                    $('#' + requestDialogId).dialog('option', 'bwForceClose', false); // This ensures that the dialog cannot be closed. We set this value to true in one place below.

                    if (results.status != 'SUCCESS') {

                        console.log('Error in bwRequest.js.reloadAndRefreshTheRequest(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));
                        displayAlertDialog('Error in bwRequest.js.reloadAndRefreshTheRequest(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));

                    } else {

                        if (results.results == 'YES_CHANGES_TO_SAVE') {

                            console.log('You have made changes to this request. You cannot close it until you save your changes.');

                            //
                            // The dialog displayed here should say:
                            //
                            // Save changes to this request before closing it? [bold]
                            //
                            // Your changes will be lost if you don't save them. [not bold]
                            //
                            // [Save] [Don't Save] [Cancel]
                            //

                            var dialogId = 'divPromptToSaveRequestChangesDialog';

                            var div = document.getElementById(dialogId);
                            if (!div) {

                                div = document.createElement('div');
                                div.id = dialogId;
                                div.style.display = 'none';
                                document.body.appendChild(div); // Place at end of document

                                var html = '';

                                html += '        <table style="width:100%;">';
                                html += '            <tr>';
                                html += '                <td style="width:90%;">';
                                html += '                    <br /><br />';
                                html += '                    <span style="font-size:25pt;font-weight:bold;">Save changes to this request before closing it?</span>';
                                html += '                    <br /><br />';
                                html += '                    <span style="font-size:25pt;font-weight:normal;">Your changes will be lost if you don\'t save them.</span>';
                                html += '                </td>';
                                html += '            </tr>';
                                html += '        </table>';
                                html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                                html += '        <br /><br />';

                                div.innerHTML = html;
                            }

                            $('#' + dialogId).dialog({
                                modal: true,
                                resizable: false,
                                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                                title: 'Save Changes xcx1-1',
                                width: "720",
                                dialogClass: "no-close", // No close button in the upper right corner.
                                hide: false,//, // This means when hiding just disappear with no effects.
                                buttons: {
                                    "Save": function () {
                                        try {
                                            $('.bwRequest').bwRequest('saveAndPublishTheRequest', requestDialogId, 'true', '').then(function (results) {
                                                try {

                                                    if (results.status == 'SUCCESS') {

                                                        $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                                                        $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                                                        //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                                                        $('#divPromptToSaveRequestChangesDialog').dialog("close");

                                                    } else if (results.status == 'REFUSED_SAVE_CHANGED_ORGID') {
                                                        $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                                    } else {
                                                        $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                                    }

                                                } catch (e) {
                                                    displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.checkIfThereHaveBeenAnyChanges.Save.saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack);
                                                }
                                            }).catch(function (e) {

                                                displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.checkIfThereHaveBeenAnyChanges.Save(). Unexpected exception saving the request: ' + JSON.stringify(e));

                                            });
                                        } catch (e) {
                                            displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.checkIfThereHaveBeenAnyChanges.Save(): ' + e.message + ', ' + e.stack);
                                        }
                                    },
                                    "Don\'t Save and Lose Changes": function () {
                                        try {

                                            this.style.color = 'red';
                                            $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                                            $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                                            //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                                            $('#divPromptToSaveRequestChangesDialog').dialog("close");

                                            thiz.displayArInDialog('https://budgetworkflow.com', budgetRequestId, '', '', '', '', bwWorkflowTaskItemId); //, bwRequestJson);

                                        } catch (e) {
                                            displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.checkIfThereHaveBeenAnyChanges.DontSave(): ' + e.message + ', ' + e.stack);
                                        }
                                    },
                                    "Cancel": function () {
                                        $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                    }
                                },
                                open: function (event, ui) {
                                    $('.ui-widget-overlay').bind('click', function () { $('#divPromptToSaveRequestChangesDialog').dialog('close'); });
                                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                close: function (event, ui) {
                                    //console.log('In index.js.displayAlertDialog_Persistent(). THIS DIALOG DOES NOT CLEAN UP AFTER ITSELF. THIS WILL HAVE TO BE DONE SOMEDAY. <<<<<<<<<<<<<<<<<<<<<<<<<<');
                                }
                            });
                            //$("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                        } else if (results.results == 'NO_CHANGES_TO_SAVE') {

                            $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                            $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)

                            thiz.displayArInDialog('https://budgetworkflow.com', budgetRequestId, '', '', '', '', bwWorkflowTaskItemId); //, bwRequestJson);

                        } else {

                            console.log('Error in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));
                            displayAlertDialog('Error in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));

                        }

                    }
                } catch (e) {
                    console.log('Exception in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                    displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                }
            }).catch(function (e) {

                console.log('Exception in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));
                displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));

            });









        } catch (e) {
            console.log('Exception in bwRequest.js.reloadAndRefreshTheRequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshTheRequest(): ' + e.message + ', ' + e.stack);
        }
    },
    reloadAndRefreshThePoppedOutRequest: function (requestDialogId, budgetRequestId, bwWorkflowTaskItemId) {
        try {
            console.log('In bwRequest.js.reloadAndRefreshThePoppedOutRequest().');

            location.reload();

        } catch (e) {
            console.log('Exception in bwRequest.js.reloadAndRefreshThePoppedOutRequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.reloadAndRefreshThePoppedOutRequest(): ' + e.message + ', ' + e.stack);
        }
    },
    loadActiveForms: function () {
        console.log('In bwRequest.js.loadActiveForms(). THIS IS THE ONLY PLACE WHERE WE SHOULD BE LOADING THE FORMS.');
        //alert('In bwRequest.js.loadActiveForms(). THIS IS THE ONLY PLACE WHERE WE SHOULD BE LOADING THE FORMS.');
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                debugger;
                var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                console.log('In bwRequest.js.loadActiveForms(). workflowAppId: ' + workflowAppId);
                if (!workflowAppId) {

                    var msg = 'In bwRequest.js.loadActiveForms(). Unexpected value for workflowAppId: ' + workflowAppId;

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }

                    reject(result);

                } else {

                    var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                    var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                    var data = {
                        bwParticipantId_LoggedIn: participantId,
                        bwActiveStateIdentifier: activeStateIdentifier,
                        bwWorkflowAppId_LoggedIn: workflowAppId,

                        bwWorkflowAppId: workflowAppId,
                        bwRequestTypeId: 'all'
                    };

                    $.ajax({
                        url: webserviceurl + "/formsconfiguration",
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(data),
                        success: function (results) {
                            try {

                                console.log('In bwRequest.js.loadActiveForms(). xcx3425345465675674.');
                                if (results.status != 'SUCCESS') {

                                    var msg = 'Error in bwRequest.js.loadActiveForms.formsconfiguration(): ' + results.status + ', ' + results.message;

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }

                                    reject(result);

                                } else {

                                    thiz.options.ActiveForms = results.data;

                                    var msg = 'Success in bwRequest.js.loadActiveForms.formsconfiguration(). Loaded options.ActiveForms. THIS IS THE ONLY PLACE THIS SHOULD BE HAPPENING.';
                                    console.log(msg);
                                    //displayAlertDialog(msg);

                                    var result = {
                                        status: 'SUCCESS',
                                        message: msg
                                    }

                                    resolve(result);

                                }

                            } catch (e) {

                                var msg = 'Exception in bwRequest.loadActiveForms().done: ' + e.message + ', ' + e.stack;

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }

                                reject(result);

                            }
                        },
                        error: function (data, errorCode) {

                            var msg = 'Error in bwRequest.js.loadActiveForms.formsconfiguration(). ' + errorCode + '. data: ' + JSON.stringify(data);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }

                            reject(result);

                        }
                    });

                }

            } catch (e) {

                var msg = 'Exception in bwRequest.loadActiveForms().done: ' + e.message + ', ' + e.stack;

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                reject(result);

            }
        })
    },
    assignRequestTypeToRequest: function (bwBudgetRequestId, element) {
        try {
            console.log('In assignRequestTypeToRequest().');
            alert('In assignRequestTypeToRequest().');
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            var bwRequestTypeId = $('#ChangeRequestTypeDialog_selectRequestTypeDropDown option:selected').val();

            console.log('xcx993486 bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestTypeId: ' + bwRequestTypeId);
            //alert('xcx993486 bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestTypeId: ' + bwRequestTypeId);

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId,
                bwBudgetRequestId: bwBudgetRequestId,
                bwRequestTypeId: bwRequestTypeId,
                bwParticipantId: participantId,
                participantEmail: participantEmail,
                participantFriendlyName: participantFriendlyName
            };
            var operationUri = webserviceurl + "/assignrequesttypetorequest";
            $.ajax({
                url: operationUri,
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (result) {
                    try {
                        //var message = result.message;
                        //var mod = result.mod;
                        //var data = result.data;



                        // debugger;
                        if (result.message != 'SUCCESS') {
                            displayAlertDialog(result.message);
                        } else {



                            if (result.mod.nModified == 1) {

                                console.log('In assignRequestTypeToRequest.post.assignrequesttypetorequest(). Showing the request here, calling thiz.displayArInDialog(). xcx325346');
                                //alert('Showing the request here. xcx325346');


                                //aria-describedby="divRequestFormDialog_24f5901e-19f6-493b-b37d-791d03dcd3df"
                                try {
                                    $('#' + requestDialogId).dialog('close'); // Make sure this gets closed!!!!!!!!!!!!!!!! Because we instantiate using the same name below. Not ideal perhaps room for improvement on that..? 1-26-2022
                                } catch (e) {
                                    $('#ChangeRequestTypeDialog').dialog('close');
                                }

                                //thiz.displayArInDialog('https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', '');
                                thiz.reloadAndRefreshTheRequest('divRequestFormDialog_' + bwBudgetRequestId, bwBudgetRequestId, null); // Call this instead, because the request is obviously displayed at this point. 5-19-2023.

                                //
                                // Now we need to refresh the executive summaries which may be displayed.
                                //
                                var window1 = window; // This is how we make this work for popped-out request dialog windows.
                                if (window.opener) {
                                    window1 = window.opener;
                                }

                                var executiveSummaries = window1.$('.executiveSummaryInCarousel');
                                if (executiveSummaries && executiveSummaries.length && executiveSummaries.length > 0) {
                                    for (var i = 0; i < executiveSummaries.length; i++) {

                                        var budgetRequestId = window1.$(executiveSummaries[i]).attr('bwbudgetrequestid');

                                        if (bwBudgetRequestId == budgetRequestId) {

                                            // We found it. Update it!
                                            console.log('In bwRequest.js.assignRequestTypeToRequest(). The request type was changes, so updating the executive summary that is displayed. bwBudgetRequestId: ' + bwBudgetRequestId);
                                            alert('Dev ToDo: xcx1243677. In bwRequest.js.assignRequestTypeToRequest(). The request type was changed, so updating the executive summary that is displayed. Does the request type display Ok? bwBudgetRequestId: ' + bwBudgetRequestId);

                                            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-8-2');
                                            var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                                            promise.then(function (results) {
                                                try {

                                                    if (results.status != 'SUCCESS') {

                                                        var msg = 'Error in bwRequest.js.assignRequestTypeToRequest(). ' + results.status + ', ' + results.message;
                                                        console.log(msg);
                                                        displayAlertDialog(msg);

                                                    } else {

                                                        //var bwRequestJson = JSON.parse(JSON.stringify(results.bwRequestJson));
                                                        var bwRequestJson = results.bwRequestJson;

                                                        bwBudgetRequest = {
                                                            bwWorkflowAppId: workflowAppId,
                                                            bwBudgetRequestId: bwBudgetRequestId,

                                                            ModifiedById: participantId,
                                                            ModifiedByEmail: participantEmail,
                                                            ModifiedByFriendlyName: participantFriendlyName,

                                                            bwRequestJson: JSON.stringify(bwRequestJson),

                                                            //ProjectTitle: projectTitle,
                                                            BudgetAmount: null, // FIX<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                            //RequestedCapital: requestedCapital,
                                                            //RequestedExpense: requestedExpense,

                                                            //OrgId: bwOrgId,
                                                            //OrgName: bwOrgName,

                                                            //ManagerId: managerId,
                                                            //ManagerEmail: managerEmail,
                                                            //ManagerFriendlyName: managerFriendlyName,


                                                            bwRequestTypeId: bwRequestTypeId // This value only gets passed if it is the first time. 7-18-2022
                                                        };

                                                        //
                                                        // The following json properties have to bubble up from bwRequestJson, to be duplicated at the top level of the request json. This is done to maximize query speed in Mongo. It is the only duplicated data in the entire system, so don't complain lol!! :)
                                                        // OrgId, OrgName, ProjectTitle, RequestedCapital.
                                                        //
                                                        if (bwRequestJson.bwLocationPicker && bwRequestJson.bwLocationPicker.value && bwRequestJson.bwLocationPicker.value.bwOrgId) {
                                                            bwBudgetRequest["OrgId"] = bwRequestJson.bwLocationPicker.value.bwOrgId;
                                                        }

                                                        if (bwRequestJson.bwLocationPicker && bwRequestJson.bwLocationPicker.value && bwRequestJson.bwLocationPicker.value.bwOrgName) {
                                                            bwBudgetRequest["OrgName"] = bwRequestJson.bwLocationPicker.value.bwOrgName;
                                                        }

                                                        if (bwRequestJson.ProjectTitle && bwRequestJson.ProjectTitle.value) {
                                                            bwBudgetRequest["ProjectTitle"] = bwRequestJson.ProjectTitle.value;
                                                        }

                                                        if (bwRequestJson.bwRequestedCapitalField && bwRequestJson.bwRequestedCapitalField.value) {
                                                            bwBudgetRequest["RequestedCapital"] = bwRequestJson.bwRequestedCapitalField.value;
                                                        }

                                                        if (bwRequestJson.RequestedExpense) {
                                                            bwBudgetRequest["RequestedExpense"] = bwRequestJson.RequestedExpense.value;
                                                        }

                                                        if (bwRequestJson.ProjectManager) {
                                                            bwBudgetRequest["ManagerId"] = bwRequestJson.ProjectManager.ParticipantId;
                                                            bwBudgetRequest["ManagerEmail"] = bwRequestJson.ProjectManager.ParticipantEmail;
                                                            bwBudgetRequest["ManagerFriendlyName"] = bwRequestJson.ProjectManager.ParticipantFriendlyName;
                                                        }

                                                        $('.bwAuthentication').bwAuthentication('redrawSingleExecutiveSummary', bwBudgetRequestId, bwBudgetRequest);

                                                    }
                                                } catch (e) {

                                                    console.log('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(): ' + e.message + ', ' + e.stack);
                                                    displayAlertDialog('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(): ' + e.message + ', ' + e.stack);

                                                }
                                            }).catch(function (e) {

                                                console.log('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(): ' + JSON.stringify(e));
                                                displayAlertDialog('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(): ' + JSON.stringify(e));

                                            });

                                        }
                                    }
                                }

                            } else {
                                console.log('Error in assignRequestTypeToRequest.post.assignrequesttypetorequest(). result.message: ' + result.message + ', mod: ' + JSON.stringify(result.mod) + ' xcx92385-1');
                                displayAlertDialog('Error in assignRequestTypeToRequest.post.assignrequesttypetorequest(). result.message: ' + result.message + ', mod: ' + JSON.stringify(result.mod) + ' xcx92385-1');
                            }

                        }
                    } catch (e) {
                        console.log('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(). result.message: ' + result.message + ', mod: ' + JSON.stringify(result.mod) + ' xcx92385-2. ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in assignRequestTypeToRequest.post.assignrequesttypetorequest(). result.message: ' + result.message + ', mod: ' + JSON.stringify(result.mod) + ' xcx92385-2. ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    // debugger;
                    displayAlertDialog('Error in my.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                }
            });

        } catch (e) {
            console.log('Exception in assignRequestTypeToRequest(): ' + e.message + ', ' + e.stack);
            alert('Exception in assignRequestTypeToRequest(): ' + e.message + ', ' + e.stack);
        }
    },
    changeTheRequestTypeForARequest: function (bwBudgetRequestId) {
        try {
            console.log('In changeTheRequestTypeForARequest().');
            //alert('In changeTheRequestTypeForARequest().');

            var div = document.getElementById('ChangeRequestTypeDialog');
            if (!div) {
                div = document.createElement('div');
                div.id = 'ChangeRequestTypeDialog';
                div.style.display = 'none';
                document.body.appendChild(div); // to place at end of document body.
                var html = '';
                //html += '<div id="ChangeRequestTypeDialog">';
                html += '   <table style="width:100%;">';
                html += '       <tr>';
                html += '           <td style="width:90%;">';
                html += '               <span id="spanChangeRequestTypeDialogTitle" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;"></span>';
                html += '           </td>';
                html += '           <td style="width:9%;"></td>';
                html += '           <td style="width:1%;cursor:pointer;vertical-align:top;">';
                html += '               <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size: 30pt;font-weight:bold;" onclick="$(\'#ChangeRequestTypeDialog\').dialog(\'close\');">X</span>';
                html += '           </td>';
                html += '       </tr>';
                html += '   </table>';
                html += '   <br /><br />';
                html += '   <span id="spanChangeRequestTypeDialog_Content"></span>';
                //html += '</div>';
                div.innerHTML = html;
            }

            var html = '';
            html += '        <br /><br />';
            html += '        <span id="spanChangeRequestTypeDialogTitle2" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;">Select from the available Request Types, then click the "Change Request Type" button.</span><br /><br />';
            html += '        <br /><br />';
            html += '        <span id="spanChangeRequestTypeDialog_spanChangeRequestTypeDialog_Content_spanRequestTypeDropDown" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;"></span><br /><br />';
            html += '        <br /><br />';
            html += '        <br /><br />';
            html += '        <div id="btnUserRoleDialogChangeRole" class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;" onclick="$(\'.bwRequest\').bwRequest(\'assignRequestTypeToRequest\', \'' + bwBudgetRequestId + '\', this);">';
            html += '            Change Request Type';
            html += '        </div>';
            html += '        <br /><br />';
            html += '        <div id="xxxx" class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;" onclick="$(\'#ChangeRequestTypeDialog\').dialog(\'close\');">';
            html += '            Close';
            html += '        </div>';
            html += '        <br /><br />';
            $('#spanChangeRequestTypeDialog_Content').html(html);

            $("#ChangeRequestTypeDialog").dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: "570px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                close: function () {
                    $('#ChangeRequestTypeDialog').dialog('destroy');
                },
                open: function (event, ui) {
                    try {
                        $('.ui-widget-overlay').bind('click', function () { $("#ChangeRequestTypeDialog").dialog('close'); });

                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');

                        var html = '';
                        html += '<select id="ChangeRequestTypeDialog_selectRequestTypeDropDown" onchange="" style=\'display:inline;border-color: whitesmoke; color: grey; font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 14pt; font-weight: bold; cursor: pointer;\'>'; // was .5em
                        for (var i = 0; i < bwEnabledRequestTypes.EnabledItems.length; i++) {
                            html += '<option value="' + bwEnabledRequestTypes.EnabledItems[i].bwRequestTypeId + '" >' + bwEnabledRequestTypes.EnabledItems[i].SingletonName + '</option>';
                        }
                        html += '</select>';

                        $('#spanChangeRequestTypeDialog_spanChangeRequestTypeDialog_Content_spanRequestTypeDropDown').html(html);

                    } catch (e) {
                        console.log('Exception in changeTheRequestTypeForARequest.ChangeRequestTypeDialog.dialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in changeTheRequestTypeForARequest.ChangeRequestTypeDialog.dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }
            });
            // Hide the title bar.
            //$("#ChangeRequestTypeDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            // Set the title.
            document.getElementById('spanChangeRequestTypeDialogTitle').innerHTML = 'Change the Request Type for ' + 'bwBudgetRequestId' + '.';




        } catch (e) {
            console.log('Exception in changeTheRequestTypeForARequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in changeTheRequestTypeForARequest(): ' + e.message + ', ' + e.stack);
        }
    },

    renderRequestFormButtons_old: function (requestDialogId, bwBudgetRequestId, bwRequestTypeId, html, source, isANewRequest, bwWworfklowStep_Assignment, bwRequestingUser, roleMember, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, allowRequestModifications, checklistsRemainingToBeCompleted) { // bwWworfklowStep_Assignment would have passed the Assign. For example: RolesData.WorkflowStep.Assign, RolesData.RequestingUser as well.
        try {
            //
            // THIS CODE IS THE ORIGINAL, the new code is below this method.
            // Before passing the bwBudgetRequest to this function, clear the bwRequestJson so that we don't pass a huge bwJustificationDetails, for instance. Does this matter? Am I correct? Hmm. Maybe it is just a pointer, and it doesn't matter.
            //
            console.log('In bwRequest.js.renderRequestFormButtons_old(). source: ' + source);
            alert('In bwRequest.js.renderRequestFormButtons_old(). source: ' + source + '. CONVERTING THE bwBudgetRequestId PARAMETER TO SEND THE REQUEST OBJECT bwBudgetRequest, and get rid of bwRequestTypeId parameter.');
            debugger;
            //alert('In bwRequest.js.renderRequestFormButtons(). checklistsRemainingToBeCompleted: ' + JSON.stringify(checklistsRemainingToBeCompleted));

            //
            // VALUABLE COMMENTS DO NOT REMOVE 1-6-2023
            //
            //spanRequestForm_Error
            // displayRequestForm(): 
            // xcx445566-1 is for un-submitted requests  
            // xcx445566-7 is for submitted requests. // needs RolesData.RequestingUser passed.
            // xcx445566-2 // This is an invalid workflow status.
            // xcx445566-3, xcx445566-4 is for a "Done" request. // DONE
            // xcx445566-6 if for !RolesData.WorkflowStep.Assign

            // populateNewRequestForm:
            // xcx445566-8 // New request

            // populateNewRequestForm_IndexDb():
            // xcx445566-9 // New request

            // displayRequestFormForMobile():
            // xcx445566-10 is when if (stepIndex == null) {
            // xcx445566-11 

            // renderCreateRequestFullFormOnline():
            // xcx445566-12 // New request
            // xcx445566-13 // New request

            //alert('In bwRequest.js.renderRequestFormButtons(). source: ' + source);


            var html = '';

            if (source == 'xcx445566-6-1') { // In renderRequestForm(). "No roles have been asigned to this user".

                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

            } else if (source == 'xcx445566-4') { // "Done"

                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

            } else if (source == 'xcx445566-1') {

                html += '<button xcx="xcx2312412-1" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                html += '                        &nbsp;';

                html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                html += '                        &nbsp;';


                // 3-2-2024.
                // This button is disabled by default. Once it is discovered that it can be anabled, this event will be attached to it.
                // onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');"
                // html += '                        <button name="startWorkflowButton" xcx="xcx22354235-1" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                html += '                        <button name="startWorkflowButton" xcx="xcx22354235-1" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';







                html += '                        &nbsp;';

                html += '                        <button xcx="xcx4242-3" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm">Close</button>';

            } else if (source == 'xcx445566-7') {


                var RolesData = {
                    WorkflowStep: {
                        Assign: bwWworfklowStep_Assignment
                    },
                    RequestingUser: bwRequestingUser
                }

                // 4-20-2022 Everyone needs this button, as it is the only way to save comments.
                // Save/Publish button.
                html += '<button xcx="xcx2312412-2" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'' + requestDialogId + '\', \'true\', \'\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';

                //
                // All of the other buttons. These are defined by the Actions JSON.
                //
                //alert('xcx324234: ' + JSON.stringify(assign.Action));
                //debugger; // 12-25-2022
                if (RolesData.WorkflowStep.Assign.Action && RolesData.WorkflowStep.Assign.Action.length) {
                    // More than 1 button.
                    console.log('If we get here that means this workflow step must have ' + RolesData.WorkflowStep.Assign.Action.length + ' Actions (and hence ' + RolesData.WorkflowStep.Assign.Action.length + ' buttons).  onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    //alert('If we get here that means this workflow step must have ' + assign.Action.length + ' Actions (and hence ' + assign.Action.length + ' buttons).  onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    for (var b = 0; b < RolesData.WorkflowStep.Assign.Action.length; b++) {

                        if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Approve') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // selectedRoles

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            //html += '<button ondblclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + assign.Action[b].Tooltip + '">' + assign.Action[b]["@Name"] + ' xcx2345347</button>&nbsp;';
                            // 
                            // 2-10-2022

                            if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length && checklistsRemainingToBeCompleted.length > 0) {

                                html += '<button disabled ';
                                html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">';
                                html += RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '';
                                html += '</button>&nbsp;';

                            } else {

                                html += '<button ';
                                html += ' onclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');"';
                                //html += ' onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                                //html += ' onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                                html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">';
                                html += RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '';
                                html += '</button>&nbsp;';

                            }

                        } else if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Decline') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdDeclineRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                        } else if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Revise/Hold') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdReviseHoldRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                        } else {

                            var js = RolesData.WorkflowStep.Assign.Action[b]["@JavaScript"];
                            if (!js) {
                                console.log('');
                                console.log('In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-1');
                                console.log('');
                                js = 'alert(\'In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-1\');';
                                html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';
                            } else {
                                html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';
                            }

                        }
                    }

                } else if (RolesData.WorkflowStep.Assign.Action) {

                    // Only 1 button.
                    console.log('If we get here that means this workflow step must have 1 Action (and hence 1 button). onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    //alert('If we get here that means this workflow step must have 1 Action (and hence 1 button). onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Approve') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length && checklistsRemainingToBeCompleted.length > 0) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button  disabled ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + ' xcx123235689</button>&nbsp;';

                        } else {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + ' xcx123235689</button>&nbsp;';

                        }

                    } else if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Decline') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        // The ADMIN has the option of performing tasks "On Behalf Of".
                        html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdDeclineRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                        //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                        //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                        html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                    } else if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Revise/Hold') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        // The ADMIN has the option of performing tasks "On Behalf Of".
                        html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdReviseHoldRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                        //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                        //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                        html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                    } else {

                        var js = RolesData.WorkflowStep.Assign.Action["@JavaScript"];
                        if (!js) {
                            console.log('');
                            console.log('In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action["@Name"] + '. This process cannot continue. xcx2341-1');
                            console.log('');
                            js = 'alert(\'In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action["@Name"] + '. This process cannot continue. xcx2341-1\');';
                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + '</button>&nbsp;';
                        } else {

                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + '</button>&nbsp;';

                        }
                    }

                } else {

                    // If we get here that means this workflow step must not have any Actions (and hence buttons).
                    console.log('If we get here that means this workflow step must not have any Actions (and hence no buttons).');

                }

                html += '<button xcx="xcx4242-1" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button


            } else if (source == 'xcx445566-8') {

                html += '<button xcx="xcx2312412-3" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                html += '                        &nbsp;';

                html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                html += '                        &nbsp;';

                // 1-13-2022
                //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + 'divNewRequest' + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                html += '                        <button name="startWorkflowButton" xcx="xcx22354235-2" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';


                html += '                        &nbsp;';
                //html += '                        <button onclick="RenderContentForButton(\'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';
                html += '                        <button onclick="$(\'.bwActiveMenu\').bwActiveMenu(\'RenderContentForButton\', \'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';

            } else {

                var msg = 'In bwRequest.js.renderRequestFormButtons(). Unexpected value for source: ' + source;
                console.log(msg);
                displayAlertDialog(msg);

            }

            //
            //
            // THIS METHOD NEEDS A Re-DO, but it is a large effort, and it works for now, but will come back in the future. The whole idea is that we always have the buttons generated in 1 place, and 1 place only.
            //   11-7-2023.
            //
            //

            if (source == 'xcx445566-8') {
                $(requestDialogId).find('#spanRequestForm_Buttons').html(html);
            } else {
                $('#' + requestDialogId).find('#spanRequestForm_Buttons')[0].innerHTML = html;
            }



        } catch (e) {
            console.log('Exception in bwRequest.js.renderRequestFormButtons(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderRequestFormButtons(): ' + e.message + ', ' + e.stack);
        }
    },

    renderRequestFormButtons: function (requestDialogId, bwBudgetRequest, unused, html, source, isANewRequest, bwWworfklowStep_Assignment, bwRequestingUser, roleMember, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, allowRequestModifications, checklistsRemainingToBeCompleted) { // bwWworfklowStep_Assignment would have passed the Assign. For example: RolesData.WorkflowStep.Assign, RolesData.RequestingUser as well.
        try {

            //
            // 3-2-2024.
            // Before passing the bwBudgetRequest to this function, clear the bwRequestJson so that we don't pass a huge bwJustificationDetails, for instance. Does this matter? Am I correct? Hmm. Maybe it is just a pointer, and it doesn't matter.
            //
            //

            console.log('In bwRequest.js.renderRequestFormButtons(). source: ' + source);
            //alert('In bwRequest.js.renderRequestFormButtons(). source: ' + source);
            console.log('In bwRequest.js.renderRequestFormButtons(). source: ' + source + '. CONVERTING THE bwBudgetRequestId PARAMETER TO SEND THE REQUEST OBJECT bwBudgetRequest, and get rid of bwRequestTypeId parameter.');
            //debugger;
            //alert('In bwRequest.js.renderRequestFormButtons(). checklistsRemainingToBeCompleted: ' + JSON.stringify(checklistsRemainingToBeCompleted));

            //
            // VALUABLE COMMENTS DO NOT REMOVE 1-6-2023
            //
            //spanRequestForm_Error
            // displayRequestForm(): 
            // xcx445566-1 is for un-submitted requests  
            // xcx445566-7 is for submitted requests. // needs RolesData.RequestingUser passed.
            // xcx445566-2 // This is an invalid workflow status.
            // xcx445566-3, xcx445566-4 is for a "Done" request. // DONE
            // xcx445566-6 if for !RolesData.WorkflowStep.Assign

            // populateNewRequestForm:
            // xcx445566-8 // New request

            // populateNewRequestForm_IndexDb():
            // xcx445566-9 // New request

            // displayRequestFormForMobile():
            // xcx445566-10 is when if (stepIndex == null) {
            // xcx445566-11 

            // renderCreateRequestFullFormOnline():
            // xcx445566-12 // New request
            // xcx445566-13 // New request

            //alert('In bwRequest.js.renderRequestFormButtons(). source: ' + source);


            var html = '';

            if (source == 'xcx445566-6-1') { // In renderRequestForm(). "No roles have been asigned to this user".

                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

            } else if (source == 'xcx445566-4') { // "Done"

                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

            } else if (source == 'xcx445566-1') {

                html += '<button xcx="xcx2312412-1" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                html += '                        &nbsp;';

                html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                html += '                        &nbsp;';




                // 3-2-2024.
                // html += '                        <button name="startWorkflowButton" xcx="xcx22354235-1" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                if (bwBudgetRequest.BudgetWorkflowStatus == 'NOT_SUBMITTED') {

                    // Display an enabled "Submit" button.
                    html += '                        <button name="startWorkflowButton" xcx="xcx22354235-1enabled" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                } else {

                    // Display a disabled "Submit" button.
                    html += '                        <button name="startWorkflowButton" xcx="xcx22354235-1disabled" disabled="disabled" id="startWorkflowButton" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                }







                html += '                        &nbsp;';

                html += '                        <button xcx="xcx4242-3" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm">Close</button>';

            } else if (source == 'xcx445566-7') {


                var RolesData = {
                    WorkflowStep: {
                        Assign: bwWworfklowStep_Assignment
                    },
                    RequestingUser: bwRequestingUser
                }

                // 4-20-2022 Everyone needs this button, as it is the only way to save comments.
                // Save/Publish button.
                html += '<button xcx="xcx2312412-2" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'' + requestDialogId + '\', \'true\', \'\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';

                //
                // All of the other buttons. These are defined by the Actions JSON.
                //
                //alert('xcx324234: ' + JSON.stringify(assign.Action));
                //debugger; // 12-25-2022
                if (RolesData.WorkflowStep.Assign.Action && RolesData.WorkflowStep.Assign.Action.length) {
                    // More than 1 button.
                    console.log('If we get here that means this workflow step must have ' + RolesData.WorkflowStep.Assign.Action.length + ' Actions (and hence ' + RolesData.WorkflowStep.Assign.Action.length + ' buttons).  onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    //alert('If we get here that means this workflow step must have ' + assign.Action.length + ' Actions (and hence ' + assign.Action.length + ' buttons).  onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    for (var b = 0; b < RolesData.WorkflowStep.Assign.Action.length; b++) {

                        if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Approve') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // selectedRoles

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            //html += '<button ondblclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + assign.Action[b].Tooltip + '">' + assign.Action[b]["@Name"] + ' xcx2345347</button>&nbsp;';
                            // 
                            // 2-10-2022

                            if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length && checklistsRemainingToBeCompleted.length > 0) {

                                html += '<button disabled ';
                                html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">';
                                html += RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '';
                                html += '</button>&nbsp;';

                            } else {

                                html += '<button ';
                                html += ' onclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');"';
                                //html += ' onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                                //html += ' onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                                html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">';
                                html += RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '';
                                html += '</button>&nbsp;';

                            }

                        } else if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Decline') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdDeclineRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                        } else if ((RolesData.WorkflowStep.Assign.Action[b]["@Name"] == 'Revise/Hold') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdReviseHoldRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember.roleMember_participantId + '\', \'' + roleMember.roleMember_participantEmail + '\', \'' + roleMember.roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                        } else {

                            var js = RolesData.WorkflowStep.Assign.Action[b]["@JavaScript"];
                            if (!js) {
                                console.log('');
                                console.log('In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-1');
                                console.log('');
                                js = 'alert(\'In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-1\');';
                                html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';
                            } else {
                                html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';
                            }

                        }
                    }

                } else if (RolesData.WorkflowStep.Assign.Action) {

                    // Only 1 button.
                    console.log('If we get here that means this workflow step must have 1 Action (and hence 1 button). onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    //alert('If we get here that means this workflow step must have 1 Action (and hence 1 button). onmouseenter calls showRequestButtonADMINOnBehalfOfDialog().');
                    if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Approve') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length && checklistsRemainingToBeCompleted.length > 0) {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button  disabled ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + ' xcx123235689</button>&nbsp;';

                        } else {

                            // The ADMIN has the option of performing tasks "On Behalf Of".
                            html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                            //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                            //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                            html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + ' xcx123235689</button>&nbsp;';

                        }

                    } else if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Decline') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        // The ADMIN has the option of performing tasks "On Behalf Of".
                        html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdDeclineRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                        //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                        //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                        html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                    } else if ((RolesData.WorkflowStep.Assign.Action["@Name"] == 'Revise/Hold') && RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {

                        // The ADMIN has the option of performing tasks "On Behalf Of".
                        html += '<button onclick="$(\'.bwRequest\').bwRequest(\'cmdReviseHoldRequest\', this, \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\');" ';
                        //html += 'onmouseenter="$(\'.bwRequest\').bwRequest(\'showRequestButtonADMINOnBehalfOfDialog\', \'' + onBehalfOf_RoleId + '\', \'' + onBehalfOf_RoleName + '\', \'' + stepName + '\', \'' + stepFriendlyName + '\', \'' + participantId + '\', \'' + participantEmail + '\', \'' + participantFriendlyName + '\', \'' + roleMember_participantId + '\', \'' + roleMember_participantEmail + '\', \'' + roleMember_participantFriendlyName + '\', this);" ';
                        //html += 'onmouseleave="$(\'.bwRequest\').bwRequest(\'hideRequestButtonADMINOnBehalfOfDialog\');" ';
                        html += 'onclick_old_thiswasthewaywedidit="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action[b].Tooltip + '">' + RolesData.WorkflowStep.Assign.Action[b]["@Name"] + '</button>&nbsp;';

                    } else {

                        var js = RolesData.WorkflowStep.Assign.Action["@JavaScript"];
                        if (!js) {
                            console.log('');
                            console.log('In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action["@Name"] + '. This process cannot continue. xcx2341-1');
                            console.log('');
                            js = 'alert(\'In displayRequestFormDialog(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + RolesData.WorkflowStep.Assign.Action["@Name"] + '. This process cannot continue. xcx2341-1\');';
                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + '</button>&nbsp;';
                        } else {

                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + RolesData.WorkflowStep.Assign.Action.Tooltip + '">' + RolesData.WorkflowStep.Assign.Action["@Name"] + '</button>&nbsp;';

                        }
                    }

                } else {

                    // If we get here that means this workflow step must not have any Actions (and hence buttons).
                    console.log('If we get here that means this workflow step must not have any Actions (and hence no buttons).');

                }

                html += '<button xcx="xcx4242-1" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button


            } else if (source == 'xcx445566-8') {

                console.log('Rendering buttons for the new request form. xcx993857.');
                //alert('Rendering buttons for the new request form. xcx993857. NEED TO CHECK IF THIS REQUEST TYPE HAS A WORKFLOW AND IF THE SUBMIT BUTTON SHOULD BE DISPLAYED.');

                html += '<button xcx="xcx2312412-3" onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                html += '                        &nbsp;';

                html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                html += '                        &nbsp;';

                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');

                var hasAWorkflow = false;
                for (var i = 0; i < bwEnabledRequestTypes.EnabledItems.length; i++) {
                    if (bwBudgetRequest.bwRequestTypeId == bwEnabledRequestTypes.EnabledItems[i].bwRequestTypeId) {
                        if (bwEnabledRequestTypes.EnabledItems[i].hasWorkflow == true) {
                            hasAWorkflow = true
                        }
                        break;
                    }
                }

                if (hasAWorkflow == true) {

                    // This means this request type has a workflow associated with it. Therefore, display the "Submit" button.
                    // 1-13-2022
                    //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + 'divNewRequest' + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                    html += '                        <button name="startWorkflowButton" xcx="xcx22354235-2" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                    html += '                        &nbsp;';

                    // Complete the form then click the "Submit" button.
                    $(requestDialogId).find('#spanRequestForm_Instructions').html('Complete the form then click the "Submit" button.');

                } else {

                    // Complete the form then click the "Save" button.
                    $(requestDialogId).find('#spanRequestForm_Instructions').html('Complete the form then click a "Save" button.');

                }

                //html += '                        <button onclick="RenderContentForButton(\'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';
                html += '                        <button onclick="$(\'.bwActiveMenu\').bwActiveMenu(\'RenderContentForButton\', \'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';

            } else {

                var msg = 'In bwRequest.js.renderRequestFormButtons(). Unexpected value for source: ' + source;
                console.log(msg);
                displayAlertDialog(msg);

            }

            //
            //
            // THIS METHOD NEEDS A Re-DO, but it is a large effort, and it works for now, but will come back in the future. The whole idea is that we always have the buttons generated in 1 place, and 1 place only.
            //   11-7-2023.
            //
            //

            if (source == 'xcx445566-8') {
                $(requestDialogId).find('#spanRequestForm_Buttons').html(html);
            } else {
                $('#' + requestDialogId).find('#spanRequestForm_Buttons')[0].innerHTML = html;
            }



        } catch (e) {
            console.log('Exception in bwRequest.js.renderRequestFormButtons(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderRequestFormButtons(): ' + e.message + ', ' + e.stack);
        }
    },

    saveRequestOnThisDevice: function (requestDialogId) {
        try {
            // debugger;
            var thiz = this;
            // First we get the guid that was created when the new request form was displayed. It is done here because we need the guid prior to doing attachment file uploads so that they get stored in the correct location.
            //var bwBudgetRequestId = 'test'; //document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML;

            console.log('In saveRequestOnThisDevice().'); // BudgetRequestId: ' + bwBudgetRequestId);
            //displayAlertDialog('In cmdSaveDraftVersionOfTheOfflineAr(). BudgetRequestId: ' + bwBudgetRequestId);



            //// open a read/write db transaction, ready for adding the data
            //var transaction = db.transaction(["toDoList"], "readwrite");

            //// report on the success of opening the transaction
            //transaction.oncomplete = function (event) {
            //    note.innerHTML += '<li>Transaction completed: database modification finished.</li>';
            //};

            //transaction.onerror = function (event) {
            //    note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';
            //};

            //// you would then go on to do something to this database
            //// via an object store
            //var objectStore = transaction.objectStore("toDoList");
            //// etc.









            //var request = db.open(indexDBName, dbVersion);
            //request.onblocked = function (event) {
            //    console.log('In saveRequestOnThisDevice(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
            //    // debugger;
            //    displayAlertDialog('In saveRequestOnThisDevice(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
            //};
            //request.onerror = function (event) {
            //    console.log('In saveRequestOnThisDevice(). Error creating/accessing IndexedDB database1. errorCode: ' + event.target.errorCode);
            //    // debugger;
            //    displayAlertDialog('In saveRequestOnThisDevice(). Error creating/accessing IndexedDB database1. errorCode: ' + event.target.errorCode);
            //};

            //request.onsuccess = function (event) {
            //    //console.log('In cmdSaveDraftVersionOfTheOfflineAr(). Success accessing IndexedDB database.');
            //    try {
            //        var db = event.target.result;
            //        console.log('In saveRequestOnThisDevice(). Successfully opened the database "' + event.target.result.name + '".');
            //        // debugger;
            //        db.onerror = function (event) {
            //            console.log('Error in saveRequestOnThisDevice(' + bwBudgetRequestId + ').request.onsuccess.db.onerror: ' + event.target.result.name + ', errorCode: ' + event.target.errorCode);
            //            // debugger;
            //            displayAlertDialog('Error in saveRequestOnThisDevice(' + bwBudgetRequestId + ').request.onsuccess.db.onerror: ' + event.target.result.name + ', errorCode: ' + event.target.errorCode);
            //        };

            //// debugger;
            //var db = $('.bwCoreComponent').bwCoreComponent('getIndexDbInstance');


            //// debugger;
            //try {
            //    //var transaction = db.transaction("objectStoreCachedRequests", "readwrite"); //.objectStore("objectStoreCachedRequests");
            //    var transaction = db.transaction('objectStoreCachedRequests', 'readwrite');
            //    // we wont get here
            //    var test = 'test';
            //} catch (e) {
            //    if (e.message == 'NotFoundError') {
            //        // debugger;
            //        //createObjectStore


            //        //var objectStoreCachedRequests = db.createObjectStore("objectStoreCachedRequests", {
            //        //    autoIncrement: true
            //        //}); // Requests.

            //        //objectStoreCachedRequests.transaction.oncomplete = function (event) {
            //        //    // Don't need to do anything here, it just ensures the object store is created successfully.
            //        //    // debugger;
            //        //    console.log('In $(document).ready().objectStoreCachedRequests.transaction.oncomplete().');

            //        //    var transaction = db.transaction(["objectStoreCachedRequests"], "readwrite");

            //        //    displayAlertDialog('1xcx34234');
            //        //};




            //    }
            //}
            //// debugger;
            //var objectStoreCachedRequests = $('.bwCoreComponent').bwCoreComponent('getobjectStoreCachedRequests');
            //var db = $('.bwCoreComponent').bwCoreComponent('getIndexDbInstance');


            //// debugger;
            //var requestDialogId; // = 'divNewRequest'; //'divNewRequestWorkflowParticipantsDialog_' + bwBudgetRequestId;

            //if (window.location.href.indexOf('my.html') > -1) {
            //    requestDialogId = 'divNewRequest';
            //} else if (window.location.href.indexOf('ios8.html') > -1) {
            //    requestDialogId = 'welcomePageNewRequestTab';
            //} else {
            //    //displayAlertDialog('Error xcx1: Unexpected window.location. This process cannot proceed.');
            //}
            //// debugger; 
            //var bwBudgetRequestId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwbudgetrequestid'); // bwBudgetRequestId



            console.log('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN. xcx2321312-3.');
            alert('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN.  xcx2321312-3.');


            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-2');
            var promise = this.scrapeBwRequestJson(requestDialogId);
            promise.then(function (bwRequestJson) {
                try {

                    alert('Returning from scrapeBwRequestJson(). xcx2131241-2');

                    console.log('In saveRequestOnThisDevice().scrapeBwRequestJson().bwRequestJson.xcx1: ' + JSON.stringify(bwRequestJson, 2, null));
                    //// debugger;
                    var db = $('.bwCoreComponent').bwCoreComponent('getIndexDbInstance');


                    var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                    var savedBudgetRequestOk = false;
                    objectStore.openCursor().onsuccess = function (event) {
                        try {
                            //// debugger;
                            var cursor = event.target.result;
                            if (cursor && savedBudgetRequestOk == false) {
                                //// debugger;
                                if (cursor.value.bwBudgetRequestId == bwRequestJson.bwBudgetRequestId) {
                                    //// debugger;
                                    savedBudgetRequestOk = true;

                                    // The bwBudgetRequestId does not exist in IndexDb yet, so save it here.
                                    var transaction = db.transaction('objectStoreCachedRequests', 'readwrite');
                                    var store = transaction.objectStore('objectStoreCachedRequests');
                                    //var obj = { measureID: this.measureID, measureName: this.measureName, fieldName: this.fieldName };

                                    //// debugger; // is the OrgId in the bwRequestJson?? Yes!! 
                                    var request = store.put(bwRequestJson, cursor.primaryKey);

                                    transaction.oncomplete = function (event) {
                                        //// debugger;
                                        //note.innerHTML += '<li>Transaction completed: database modification finished.</li>';
                                        console.log('In saveRequestOnThisDevice(). Transaction completed: database modification finished.');
                                        displayAlertDialog('In saveRequestOnThisDevice(). Transaction completed: database modification finished.');
                                    };

                                    transaction.onerror = function (event) {
                                        // debugger;
                                        //note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';
                                        console.log('In saveRequestOnThisDevice(). Transaction not opened due to error. Duplicate items not allowed.');
                                        displayAlertDialog('In saveRequestOnThisDevice(). Transaction not opened due to error. Duplicate items not allowed.');
                                    };

                                }
                                cursor.continue();

                            } else {
                                // When we get here, the cursor is done going through all records.

                                //console.log('In my.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog3. DONE LOOPING.');
                                if (savedBudgetRequestOk != true) {
                                    //// debugger;
                                    // The bwBudgetRequestId does not exist in IndexDb yet, so save it here.
                                    var transaction = db.transaction('objectStoreCachedRequests', 'readwrite');
                                    var store = transaction.objectStore('objectStoreCachedRequests');
                                    //var obj = { measureID: this.measureID, measureName: this.measureName, fieldName: this.fieldName };
                                    var request = store.add(bwRequestJson);

                                    transaction.oncomplete = function (event) {
                                        //// debugger;
                                        //note.innerHTML += '<li>Transaction completed: database modification finished.</li>';
                                        console.log('In saveRequestOnThisDevice(). Transaction completed: database modification finished.');
                                        displayAlertDialog('In saveRequestOnThisDevice(). Transaction completed: database modification finished.');
                                    };

                                    transaction.onerror = function (event) {
                                        // debugger;
                                        //note.innerHTML += '<li>Transaction not opened due to error. Duplicate items not allowed.</li>';
                                        console.log('In saveRequestOnThisDevice(). Transaction not opened due to error. Duplicate items not allowed.');
                                        displayAlertDialog('In saveRequestOnThisDevice(). Transaction not opened due to error. Duplicate items not allowed.');
                                    };
                                }


                            }



                        } catch (e) {
                            console.log('Exception in my.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog4. xxError: ' + e.message + ', ' + e.stack);
                        }
                    };
















                } catch (e) {
                    console.log('Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson():2-1: ' + e.message + ', ' + e.stack);
                    // spanRequestForm_Error
                    $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson():2: ' + e.message + ', ' + e.stack;
                }
            });




            //var transaction = objectStoreCachedRequests.objectStore("objectStoreCachedRequests");

            // report on the success of opening the transaction


            //// debugger;
            //var objectStore = transaction.objectStore("objectStoreCachedRequests");




            //thiz.options.objectStoreCachedRequests
            //// debugger;
            //transaction.openCursor().onsuccess = function (event) {
            //    try {
            //        // debugger; // HERE IS WHERE IT HAPPENS!!!!
            //        var cursor = event.target.result;
            //        if (cursor) {
            //            if (cursor.value.bwBudgetRequestId == bwBudgetRequestId) {

            //                var xmlDocument = createXmlDocument_SaveDraftOfflineAr(bwBudgetRequestId);
            //                if (xmlDocument == 'FAILED') {
            //                    displayAlertDialog('Failed to create XML.');
            //                } else {
            //                    var projectTitle = document.getElementById('strProjectTitleInXslForm').innerHTML;

            //                    cursor.value.RequestedCapital = document.getElementById('dblRequestedCapitalInXslForm2').innerHTML.replace('<br>', ''); // Todd: this isn't suitable... better checking is needed here maybe!
            //                    //var amountv = document.getElementById('dblRequestedCapitalInXslForm2').value;

            //                    console.log('projectTitle: ' + projectTitle + ', cursor.value.RequestedCapital: ' + cursor.value.RequestedCapital); // + ', amountv: ' + amountv);
            //                    //try {
            //                    //    var requestedCapital = document.getElementById('dblRequestedCapitalInXslForm2').value.replace(/[^0-9-.]/g, ''); // dblRequestedCapitalInXslForm2
            //                    //    console.log('requestedCapital1: ' + requestedCapital);
            //                    //} catch (e) {
            //                    //    var requestedCapital = document.getElementById('dblOfflineRequestRequestedCapital').innerHTML.replace(/[^0-9-.]/g, '');
            //                    //    // dblOfflineRequestRequestedCapital
            //                    //    console.log('requestedCapital2: ' + requestedCapital);
            //                    //}

            //                    //console.log('requestedCapital3: ' + requestedCapital);

            //                    var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
            //                    var created = getCreatedTimestamp();
            //                    var duedate = getDueDateTimestamp();

            //                    //displayAlertDialog(JSON.stringify(cursor.value));
            //                    //{"bwBudgetRequestId":"cce01869-6b55-40cb-bbda-be0e77b69ccc","bwTenantId":"","bwWorkflowAppId":"","bwWorkflowId":null,"IsSupplementalRequest":"false","RelatedBudgetRequestId":null,"IsRecurringExpense":"false","RelatedRecurringExpenseId":null,"CreatedBy":"","CreatedById":"","CreatedByEmail":"","bwDocumentXml":"cce01869-6b55-40cb-bbda-be0e77b69cccNaNfalsetttt0FALSE \t\t\t\t\t\t\t\t","ProjectTitle":"tttt","BudgetAmount":null,"RequestedCapital":"","RequestedExpense":0,"ARStatus":"Submitted","BudgetWorkflowStatus":"Assign Budget","Quote":false,"bwWorkflowToken":"0"}

            //                    var updateData = cursor.value;
            //                    updateData.bwDocumentXml = xmlDocument;
            //                    updateData.ProjectTitle = projectTitle;
            //                    //updateData.RequestedCapital = requestedCapital;
            //                    updateData.RequestedExpense = requestedExpense;

            //                    //displayAlertDialog(JSON.stringify(updateData));

            //                    var update = cursor.update(updateData);
            //                    update.onsuccess = function (event) {

            //                        // debugger;
            //                        //console.log('event.result.RequestedCapital: ' + event.result.RequestedCapital);


            //                        console.log('In saveRequestOnThisDevice(). Successfully updated the budget request.');
            //                        //displayAlertDialog('This offline request has been saved.');
            //                        $('#divOfflineRequestFormDialog').dialog('close');
            //                        //displayAlertDialog('This offline request has been saved. updateData: ' + JSON.stringify(updateData));

            //                        if (Platform == 'IOS8') {
            //                            // This is for ios8.js.
            //                            //console.log('window.location.href = https://budgetworkflow.com/ios8.html');
            //                            //window.location.href = 'https://budgetworkflow.com/ios8.html';
            //                            // debugger;
            //                            renderWelcomePageOffline();
            //                        } else {
            //                            // This is for index.js.
            //                            populateStartPageItem('divArchiveOffline', 'Reports', '');
            //                        }



            //                    };
            //                    update.onerror = function (event) {
            //                        console.log('In saveRequestOnThisDevice(). Error storing _budgetRequest in the database.' + this.error);
            //                        // debugger;
            //                        //console.error('In cmdSaveDraftVersionOfTheOfflineAr(). Error storing _budgetRequest in the database.', this.error);
            //                        displayAlertDialog('In saveRequestOnThisDevice(). Error storing _budgetRequest in the database.' + this.error);
            //                    };

            //                }
            //            }
            //            cursor.continue();
            //        } else {
            //            // DONE LOOPING through the cursor.
            //            console.log('In saveRequestOnThisDevice(' + bwBudgetRequestId + ').request.onsuccess.objectStore.openCursor().onsuccess. DONE LOOPING through the cursor.');



            //        }

            //    } catch (e) {
            //        console.log('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):1:' + e.message + ', ' + e.stack);
            //        // debugger;
            //        displayAlertDialog('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):1:' + e.message + ', ' + e.stack);
            //    }
            //    console.log('In saveRequestOnThisDevice(' + bwBudgetRequestId + '). Stored new request in IndexedDB:2.');
            //};














            //    } catch (e) {
            //        console.log('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):2: ' + e.message + ', ' + e.stack);
            //        // debugger; // NotFoundError
            //        displayAlertDialog('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):2: ' + e.message + ', ' + e.stack);
            //    }
            //}
        } catch (e) {
            console.log('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):3: ' + e.message + ', ' + e.stack);
            // debugger;
            displayAlertDialog('Exception in saveRequestOnThisDevice(' + bwBudgetRequestId + '):3: ' + e.message + ', ' + e.stack);
        }
    },
    cmdSaveRequestTitle: function () {
        try {
            console.log('In bwRequest.cmdSaveRequestTitle().');
            alert('In bwRequest.cmdSaveRequestTitle(). This functionality is incomplete. Coming soon!xcx3395');
            //var newWorkflowTitle = document.getElementById('txtWorkflowAppTitle').value;
            //var data = [];
            //data = {
            //    bwTenantId: tenantId,
            //    bwWorkflowAppId: workflowAppId,
            //    bwWorkflowAppTitle: newWorkflowTitle,
            //    ModifiedByFriendlyName: participantFriendlyName,
            //    ModifiedById: participantId,
            //    ModifiedByEmail: participantEmail,
            //};
            //var operationUri = webserviceurl + "/bwworkflowapp/updateworkflowconfigurationworkflowapptitle";
            //$.ajax({
            //    url: operationUri,
            //    type: "POST", timeout: ajaxTimeout,
            //    data: data,
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (data) {
            //        if (data != 'SUCCESS') {
            //            displayAlertDialog(data);
            //        } else {
            //            workflowAppTitle = newWorkflowTitle;
            //            displayAlertDialog('The name of your organization has been updated successfully.');
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        displayAlertDialog('Error in my.js.cmdSaveWorkflowTitle(): ' + errorCode + ' ' + errorMessage);
            //    }
            //});
        } catch (e) {
            console.log('Exception in cmdSaveWorkflowTitle(): ' + e.message + ', ' + e.stack);
        }
    },

    // THIS IS THE ONLY PLACE WHERE WE SHOULD BE RENDERING THE FORM.
    getRequestFormHtml: function (bwRequestTypeId, thisIsAnOfflineRequest, ConfigurationModifiedDate_BwForm, source) {
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                console.log('In bwRequest.js.getRequestFormHtml(). THIS IS THE ONLY PLACE WHERE WE SHOULD BE RENDERING THE FORM. bwRequestTypeId: ' + bwRequestTypeId + ', source: ' + source);
                //alert('In bwRequest.js.getRequestFormHtml(). THIS IS THE ONLY PLACE WHERE WE SHOULD BE RENDERING THE FORM. bwRequestTypeId: ' + bwRequestTypeId + ', source: ' + source);

                if (!(thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) && !bwRequestTypeId) {

                    var msg = 'Error in bwRequest.js.getRequestFormHtml(). Not an offline request, so expected a value for bwRequestTypeId: ' + bwRequestTypeId + '. This process cannot continue. thisIsAnOfflineRequest: ' + thisIsAnOfflineRequest;
                    console.log(msg);
                    displayAlertDialog(msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }

                    reject(result);

                } else {

                    var bwFormHtml;

                    if (thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) {

                        console.log('');
                        console.log('******************************************');
                        console.log(' THIS is an OFFINE REQUEST.');
                        console.log('******************************************');
                        console.log('');

                        //alert('FORM>>: In bwRequest.js.getRequestFormHtml(). thisIsAnOfflineRequest. Rendering the top of the form div tag with the request attributes. id="budgetrequestform" xcx464367-1 THIS is an OFFINE REQUEST for rendering and it needs the div check etc like the other place...');

                        //html += '<div id="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttype="offlinerequest" bwformid="" bworgid="" bworgname="" >';

                        //// debugger;
                        //var bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_offlinerequest_Default');
                        //html += bwFormHtml;
                        //html += '</div>';

                        //results.html = html;
                        //resolve(results);

                        var msg = 'In bwRequest.js.getRequestFormHtml(). This is an offline request. Dev: More work to do here.';
                        console.log(msg);
                        displayAlertDialog(msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }

                        reject(result);

                    } else {

                        //// debugger;
                        // This is what our return data should look like. Of note is ConfigurationModifiedDate_BwForm, because we want otouse this new setting to make sure the user always sees the latest published form. 4-15-2022
                        //var results = {
                        //    BudgetRequests: brResult,
                        //    SupplmentalRequests: srResult,
                        //    RequestingUser: 'xx3',
                        //    ConfigurationModifiedDate_BwForm: ConfigurationModifiedDate_BwForm
                        //}

                        console.log('xcx12332661 this value may not have been reloaded: thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms));
                        //displayAlertDialog('xcx12332661 this value may not have been reloaded: thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms));

                        if (ConfigurationModifiedDate_BwForm) {
                            if (thiz.options.ActiveForms && (thiz.options.ActiveForms.length > 0)) {
                                for (var i = 0; i < thiz.options.ActiveForms.length; i++) {
                                    if (thiz.options.ActiveForms[i].bwRequestTypeId == bwRequestTypeId) {
                                        var configurationModifiedDate = new Date(ConfigurationModifiedDate_BwForm);
                                        var formModifiedDate = new Date(thiz.options.ActiveForms[i].Modified);
                                        if (configurationModifiedDate.getTime() === formModifiedDate.getTime()) { // This is the way to do the date comparison!
                                            console.log('DATES ARE THE SAME. No need to get a new bwForm json.');

                                            var selectedFormIndex = -1;
                                            if (thiz.options.ActiveForms && (thiz.options.ActiveForms.length > 0)) {
                                                for (var i = 0; i < thiz.options.ActiveForms.length; i++) {
                                                    if (thiz.options.ActiveForms[i].bwRequestTypeId == bwRequestTypeId) {
                                                        selectedFormIndex = i;
                                                        break;
                                                    }
                                                }
                                                if (selectedFormIndex == -1) {
                                                    console.log('In getRequestFormHtml(): thiz.options.ActiveForms.length = ' + thiz.options.ActiveForms.length + '. Could not find form with bwRequestTypeId: ' + bwRequestTypeId + '.');
                                                    bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                                } else {
                                                    bwFormHtml = thiz.options.ActiveForms[selectedFormIndex].bwFormHtml;
                                                }
                                            } else if ((thiz.options.ActiveForms == null) || (thiz.options.ActiveForms && (thiz.options.ActiveForms.length == 0))) {
                                                console.log('Error in getRequestFormHtml(): There are no active forms. thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms));
                                                var msg = 'Error: There is no form for this request type. You can continue with this default form here, but the Workflow Administrator or a Configuration Manager should go to Configuration > Forms to create a form for this request type.xcx2';
                                                $('.bwActiveMenu').bwActiveMenu('displayTopBarErrorMessage', msg);
                                                bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                            } else {
                                                console.log('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms.: ' + JSON.stringify(thiz.options.ActiveForms));
                                                alert('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms. length: ' + thiz.options.ActiveForms.length + ', ' + JSON.stringify(thiz.options.ActiveForms));
                                                results.message = '<span style="color:tomato;font-size:40pt;">Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms) + '</span>';
                                            }
                                            console.log('');
                                            console.log('******************************************');
                                            console.log('FORM>>: In bwRequest.js.getRequestFormHtml(). Adding the top of the form div tag id="budgetrequestform". xcx464367-2-1');
                                            console.log('******************************************');
                                            console.log('');
                                            var html = '';
                                            if (thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) {
                                                bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_offlinerequest_Default');
                                                html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttype="offlinerequest" bwformid="" bworgid="" bworgname="" >';
                                            } else {
                                                // bwFormHtml was populated above in this case.
                                                html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttypeid="' + bwRequestTypeId + '" bwformid="" bworgid="" bworgname="">';
                                            }
                                            html += bwFormHtml;
                                            html += '</div>';

                                            var result = {
                                                status: 'SUCCESS',
                                                message: '',
                                                html: html
                                            }

                                            resolve(result);

                                        } else {

                                            if (configurationModifiedDate.getTime() > formModifiedDate.getTime()) {
                                                console.log('THE FORM HAS BEEN UPDATED SINCE IT WAS LAST LOADED HERE. WE MUST GET THE FORMS AGAIN. configurationModifiedDate: ' + configurationModifiedDate + ', formModifiedDate: ' + formModifiedDate);

                                                //alert('In bwRequest.js.getRequestFormHtml(). Calling loadActiveForms. xcx44432-2.');
                                                thiz.loadActiveForms().then(function (results) {

                                                    if (results.status != 'SUCCESS') {

                                                        //var msg = 'Error in bwRequest.js.xx().xcx324235 ' + results.status + ', ' + results.message;
                                                        //console.log(msg);
                                                        //displayAlertDialog(msg);

                                                        var msg = 'Error in bwRequest.js.getRequestFormHtml(). xcx324235. ' + results.status + ', ' + results.message;
                                                        console.log(msg);
                                                        displayAlertDialog(msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }

                                                        reject(result);

                                                    } else {

                                                        //thiz.createRequestJson();
                                                        debugger;
                                                        var selectedFormIndex = -1;
                                                        if (thiz.options.ActiveForms && (thiz.options.ActiveForms.length > 0)) {
                                                            for (var i = 0; i < thiz.options.ActiveForms.length; i++) {
                                                                if (thiz.options.ActiveForms[i].bwRequestTypeId == bwRequestTypeId) {
                                                                    selectedFormIndex = i;
                                                                    break;
                                                                }
                                                            }
                                                            if (selectedFormIndex == -1) {
                                                                console.log('In getRequestFormHtml(): thiz.options.ActiveForms.length = ' + thiz.options.ActiveForms.length + '. Could not find form with bwRequestTypeId: ' + bwRequestTypeId + '.');
                                                                bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                                            } else {
                                                                bwFormHtml = thiz.options.ActiveForms[selectedFormIndex].bwFormHtml;
                                                            }
                                                        } else if ((thiz.options.ActiveForms == null) || (thiz.options.ActiveForms && (thiz.options.ActiveForms.length == 0))) {
                                                            console.log('Error in getRequestFormHtml(): There are no active forms. thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms));
                                                            var msg = 'Error: There is no form for this request type. You can continue with this default form here, but the Workflow Administrator or a Configuration Manager should go to Configuration > Forms to create a form for this request type.xcx2';
                                                            $('.bwActiveMenu').bwActiveMenu('displayTopBarErrorMessage', msg);
                                                            bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                                        } else {
                                                            console.log('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms.: ' + JSON.stringify(thiz.options.ActiveForms));
                                                            alert('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms. length: ' + thiz.options.ActiveForms.length + ', ' + JSON.stringify(thiz.options.ActiveForms));
                                                            results.message = '<span style="color:tomato;font-size:40pt;">Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms) + '</span>';
                                                        }
                                                        console.log('');
                                                        console.log('******************************************');
                                                        console.log('FORM>>: In bwRequest.js.getRequestFormHtml(). Adding the top of the form div tag id="budgetrequestform". xcx464367-2-2');
                                                        console.log('******************************************');
                                                        console.log('');
                                                        var html = '';
                                                        if (thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) {
                                                            bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_offlinerequest_Default');
                                                            html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttype="offlinerequest" bwformid="" bworgid="" bworgname="" >';
                                                        } else {
                                                            // bwFormHtml was populated above in this case.
                                                            html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttypeid="' + bwRequestTypeId + '" bwformid="" bworgid="" bworgname="">';
                                                        }
                                                        html += bwFormHtml;
                                                        html += '</div>';

                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: '',
                                                            html: html
                                                        }

                                                        resolve(result);

                                                    }

                                                }).catch(function (e) {

                                                    var msg = 'Exception in bwRequest.js.getRequestFormHtml.loadActiveForms(). xcx324235-2. ' + JSON.stringify(e);
                                                    console.log(msg);
                                                    displayAlertDialog(msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }

                                                    reject(result);

                                                });

                                            } else {

                                                console.log('THIS FORM IS UP TO DATE. NO RELOADING OF FORMS NECESSARY. configurationModifiedDate: ' + configurationModifiedDate + ', formModifiedDate: ' + formModifiedDate);

                                                var selectedFormIndex = -1;
                                                if (thiz.options.ActiveForms && (thiz.options.ActiveForms.length > 0)) {
                                                    for (var i = 0; i < thiz.options.ActiveForms.length; i++) {
                                                        if (thiz.options.ActiveForms[i].bwRequestTypeId == bwRequestTypeId) {
                                                            selectedFormIndex = i;
                                                            break;
                                                        }
                                                    }
                                                    if (selectedFormIndex == -1) {
                                                        console.log('In getRequestFormHtml(): thiz.options.ActiveForms.length = ' + thiz.options.ActiveForms.length + '. Could not find form with bwRequestTypeId: ' + bwRequestTypeId + '.');
                                                        bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                                    } else {
                                                        bwFormHtml = thiz.options.ActiveForms[selectedFormIndex].bwFormHtml;
                                                    }
                                                } else if ((thiz.options.ActiveForms == null) || (thiz.options.ActiveForms && (thiz.options.ActiveForms.length == 0))) {
                                                    console.log('Error in getRequestFormHtml(): There are no active forms. thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms));
                                                    var msg = 'Error: There is no form for this request type. You can continue with this default form here, but the Workflow Administrator or a Configuration Manager should go to Configuration > Forms to create a form for this request type.xcx2';
                                                    $('.bwActiveMenu').bwActiveMenu('displayTopBarErrorMessage', msg);
                                                    bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                                } else {
                                                    console.log('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms.: ' + JSON.stringify(thiz.options.ActiveForms));
                                                    alert('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms. length: ' + thiz.options.ActiveForms.length + ', ' + JSON.stringify(thiz.options.ActiveForms));
                                                    results.message = '<span style="color:tomato;font-size:40pt;">Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms) + '</span>';
                                                }
                                                console.log('');
                                                console.log('******************************************');
                                                console.log('FORM>>: In bwRequest.js.getRequestFormHtml(). Adding the top of the form div tag id="budgetrequestform". xcx464367-2-3');
                                                console.log('******************************************');
                                                console.log('');
                                                var html = '';
                                                if (thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) {
                                                    bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_offlinerequest_Default');
                                                    html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttype="offlinerequest" bwformid="" bworgid="" bworgname="" >';
                                                } else {
                                                    // bwFormHtml was populated above in this case.
                                                    html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttypeid="' + bwRequestTypeId + '" bwformid="" bworgid="" bworgname="">';
                                                }
                                                html += bwFormHtml;
                                                html += '</div>';

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: '',
                                                    html: html
                                                }

                                                resolve(result);

                                            }
                                        }
                                        break;
                                    }
                                }
                            }

                        } else {

                            console.log('THIS FORM IS UP TO DATE. NO RELOADING OF FORMS NECESSARY. configurationModifiedDate: ' + configurationModifiedDate + ', formModifiedDate: ' + formModifiedDate);

                            var selectedFormIndex = -1;
                            if (thiz.options.ActiveForms && (thiz.options.ActiveForms.length > 0)) {
                                for (var i = 0; i < thiz.options.ActiveForms.length; i++) {
                                    if (thiz.options.ActiveForms[i].bwRequestTypeId == bwRequestTypeId) {
                                        selectedFormIndex = i;
                                        break;
                                    }
                                }
                                if (selectedFormIndex == -1) {
                                    console.log('In getRequestFormHtml(): thiz.options.ActiveForms.length = ' + thiz.options.ActiveForms.length + '. Could not find form with bwRequestTypeId: ' + bwRequestTypeId + '.');
                                    bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');
                                } else {
                                    bwFormHtml = thiz.options.ActiveForms[selectedFormIndex].bwFormHtml;
                                }

                            } else if ((thiz.options.ActiveForms == null) || (thiz.options.ActiveForms && (thiz.options.ActiveForms.length == 0))) {


                                // 9-8-2024.
                                var msg = 'Error in bwRequest.js.getRequestFormHtml(): DEV: WE SHOULD BE LOADING THEM HERE!!!!!!!!!!!!! There are no active forms. thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms);
                                console.log(msg);
                                alert(msg);

                                //var msg = 'Error: There is no form for this request type. You can continue with this default form here, but the Workflow Administrator or a Configuration Manager should go to Configuration > Forms to create a form for this request type.xcx2';
                                $('.bwActiveMenu').bwActiveMenu('displayTopBarErrorMessage', msg);
                                bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_Default');







                            } else {
                                console.log('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms.: ' + JSON.stringify(thiz.options.ActiveForms));
                                alert('Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms. length: ' + thiz.options.ActiveForms.length + ', ' + JSON.stringify(thiz.options.ActiveForms));
                                results.message = '<span style="color:tomato;font-size:40pt;">Unexpected error in getRequestFormHtml(): Unexpected value for thiz.options.ActiveForms: ' + JSON.stringify(thiz.options.ActiveForms) + '</span>';
                            }
                            console.log('');
                            console.log('******************************************');
                            console.log('FORM>>: In bwRequest.js.getRequestFormHtml(). Adding the top of the form div tag id="budgetrequestform". xcx464367-2-4');
                            console.log('******************************************');
                            console.log('');
                            var html = '';
                            if (thisIsAnOfflineRequest && (thisIsAnOfflineRequest == true)) {
                                bwFormHtml = $('.bwAuthentication').bwAuthentication('option', 'bwFormHtml_offlinerequest_Default');
                                html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttype="offlinerequest" bwformid="" bworgid="" bworgname="" >';
                            } else {
                                // bwFormHtml was populated above in this case.
                                html += '<div id="budgetrequestform" class="budgetrequestform" align="left" bwrequesttitle="" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttypeid="' + bwRequestTypeId + '" bwformid="" bworgid="" bworgname="">';
                            }
                            html += bwFormHtml;
                            html += '</div>';

                            var result = {
                                status: 'SUCCESS',
                                message: '',
                                html: html
                            }

                            resolve(result);

                        }

                    }

                }

            } catch (e) {

                var msg = 'Exception in bwRequest.js.getRequestFormHtml():1: ' + e.message + ', ' + e.stack;
                console.log(msg);
                displayAlertDialog(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                reject(result);

            }
        })
    },


    displayRequestForm: function (budgetRequestId, requestDialogId, bwWorkflowTaskItemIdxx, selectedRaciRole, bwRequestJson) { // NEW 7-26-2022 - Breaking out from displayRequestFormDialog().
        try {
            console.log('In bwRequest.js.displayRequestForm(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //alert('In bwRequest.js.displayRequestForm(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;
            debugger;
            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            //var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            //var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            //if (!bwWorkflowTaskItemId) {
            //    alert('In displayRequestForm(). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //}

            var bwRequestJson2;
            if (bwRequestJson) {

                var msg = 'In bwRequest.js.displayRequestForm(). bwRequestJson has been passed. THIS MEANS IT IS A POPPED-OUT DIALOG being display, or being returned to the main browser window.. bwRequestJson: ' + JSON.stringify(bwRequestJson);
                console.log(msg);
                //alert(msg);

                bwRequestJson2 = bwRequestJson.bwRequestJson; // Reinitilizing at this level allows the variable value to persist after the web service call. 

            } else {
                console.log('In bwRequest.js.displayRequestForm(). No bwRequestJson has been passed. bwRequestJson: ' + JSON.stringify(bwRequestJson));
                //alert('In bwRequest.js.displayRequestForm(). No bwRequestJson has been passed. bwRequestJson: ' + JSON.stringify(bwRequestJson));

                bwRequestJson2 = bwRequestJson; // Reinitilizing at this level allows the variable value to persist after the web service call. 

            }

            debugger;

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            if (!(workflowAppId && participantId && activeStateIdentifier && budgetRequestId)) {

                var msg = 'Error in bwRequest.js.displayRequestForm(). Unexpected value for parameter(s). workflowAppId: ' + workflowAppId + ', participantId: ' + participantId + ', activeStateIdentifier: ' + activeStateIdentifier + ', budgetRequestId: ' + budgetRequestId;
                console.log(msg);
                displayAlertDialog(msg);

            } else {

                //
                // THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!
                //

                console.log('>>>>>>>>>>>>>>>>Step 2: In bwRequest.js.displayRequestForm(). Calling operationUri: ' + webserviceurl + '/getsinglebudgetrequest');
                //alert('>>>>>>>>>>>>>>>>Step 2: In bwRequest.js.displayRequestForm(). Calling operationUri: ' + webserviceurl + '/getsinglebudgetrequest bwRequestJson: ' + bwRequestJson);

                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwWorkflowAppId: workflowAppId,
                    bwBudgetRequestId: budgetRequestId//,
                    //isActive: true,
                    //bwRequestType: 'ALL'
                };
                debugger;
                $.ajax({
                    url: webserviceurl + '/getsinglebudgetrequest', // This needs to return QualifyingRoleIds. They RequestingUser has to qualify for each role being in the budget request org level or above.
                    type: 'POST',
                    data: data, //JSON.stringify(data),
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (results) {
                        try {
                            debugger;
                            console.log('>>>>>>>>>>>>>>>>Step 3: In bwRequest.js.displayRequestForm.getsinglebudgetrequest.success().');
                            //alert('>>>>>>>>>>>>>>>>Step 3: In bwRequest.js.displayRequestForm.getsinglebudgetrequest.success().');

                            console.log('In displayRequestForm(). THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!');
                            //alert('In displayRequestForm(). THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!');

                            if (results.status != 'SUCCESS') {

                                console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest.success(): ' + JSON.stringify(results));
                                displayAlertDialog('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest.success(): ' + JSON.stringify(results));

                            } else {
                                debugger;
                                var bwBudgetRequest = results.results.bwBudgetRequest;

                                var brData = results.results;

                                if (!bwBudgetRequest || !bwBudgetRequest.bwRequestJson || (bwBudgetRequest.bwRequestJson == '')) {

                                    var msg = 'INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx41202011 bwBudgetRequest.bwRequestJson: ' + bwBudgetRequest.bwRequestJson;
                                    console.log(msg);
                                    displayAlertDialog(msg);

                                } else {

                                    //
                                    // If bwRequestJson is provided, then we don't need to reach out to the database for that information. For example, when popping-out a window, we won't have to do this, just pass the bwRequestJson back and forth between window and dialog. 7-27-2022
                                    //
                                    if (bwRequestJson2) {

                                        var msg = 'In bwRequest.js.displayRequestForm(). bwRequestJson was provided so overwriting bwBudgetRequest.bwRequestJson. This must be from a popped-out window. SO WHY DID WE JUST CALL THE WEB SERVICE??? Maybe we can optimize this someday, but I already tried, and it is best to leave this until we properly address fine tuned caching and IndexDb.';
                                        console.log(msg);
                                        //alert(msg);

                                        //alert('SETTING bwBudgetRequest.bwRequestJson to ' + JSON.stringify(bwRequestJson2));

                                        bwBudgetRequest.bwRequestJson = JSON.stringify(bwRequestJson2);

                                    } else {


                                        if (!bwBudgetRequest.bwBudgetRequestId) {

                                            console.log('Error in bwRequest.js.populateRequestForm(). Invalid value for bwBudgetRequest.bwBudgetRequestId: ' + bwBudgetRequest.bwBudgetRequestId);
                                            displayAlertDialog('Error in bwRequest.js.populateRequestForm(). Invalid value for bwBudgetRequest.bwBudgetRequestId: ' + bwBudgetRequest.bwBudgetRequestId);

                                        } else {

                                            // Find the request in the thiz.options.lastSavedJson array. If it's there, replace it, otherwise, add it.
                                            // This also happens in saveAndPublishTheRequest().
                                            var lastSavedJsonIndex = -1;
                                            for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                                                if (!(thiz.options.lastSavedJson[i] && thiz.options.lastSavedJson[i].bwBudgetRequestId)) {
                                                    displayAlertDialog_Persistent('xcx12345-2 Error: Property [bwBudgetRequestId] does not exist: ' + JSON.stringify(thiz.options.lastSavedJson[i]) + ', thiz.options.lastSavedJson: ' + JSON.stringify(thiz.options.lastSavedJson));
                                                } else {
                                                    if (thiz.options.lastSavedJson[i].bwBudgetRequestId == bwBudgetRequest.bwBudgetRequestId) {
                                                        lastSavedJsonIndex = i;
                                                        break;
                                                    }
                                                }
                                            }

                                            //alert('xcx2314-1 Updating thiz.options.lastSavedJson. THIS IS IN THE WRONG SPOT.');
                                            if (lastSavedJsonIndex > -1) {
                                                thiz.options.lastSavedJson[lastSavedJsonIndex] = JSON.parse(bwBudgetRequest.bwRequestJson);
                                            } else {
                                                thiz.options.lastSavedJson.push(JSON.parse(bwBudgetRequest.bwRequestJson));
                                            }

                                            console.log('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check.');
                                            //alert('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check. lastSavedJsonIndex: ' + lastSavedJsonIndex + ', bwRequestJson: ' + JSON.stringify(bwBudgetRequest.bwRequestJson));
                                        }

                                    }

                                    if (!bwBudgetRequest.bwRequestTypeId) {
                                        //debugger;
                                        console.log('Had to correct the bwBudgetRequest.bwRequestTypeId... fix this eventually. xcx123357-1');
                                        alert('Had to correct the bwBudgetRequest.bwRequestTypeId... fix this eventually. xcx123357-1');
                                        var bwRequestTypeId = JSON.parse(bwBudgetRequest.bwRequestJson).bwRequestTypeId;
                                        bwBudgetRequest["bwRequestTypeId"] = bwRequestTypeId;

                                    }

                                    console.log('');
                                    console.log('********');
                                    console.log('In displayRequestForm(). bwBudgetRequest.bwRequestTypeId: ' + bwBudgetRequest.bwRequestTypeId);
                                    console.log('********');
                                    console.log('');

                                    if (!bwBudgetRequest.bwRequestTypeId) {

                                        console.log('Error: Invalid bwRequestTypeId. A Request Type has not been chosen for this request. Select from the available Request Types, then click the "Select Request Type" button. bwRequestTypeId: ' + bwBudgetRequest.bwRequestTypeId);

                                        var html = '';
                                        html += '        <span id="spanChangeRequestTypeDialogTitle2" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;">A Request Type has not been chosen for this request. Select from the available Request Types, then click the "Select Request Type" button.</span><br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <span id="spanChangeRequestTypeDialogContent" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;"></span><br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <div id="btnUserRoleDialogChangeRolexx" class="divSignInButton" onclick="$(\'.bwRequest\').bwRequest(\'assignRequestTypeToRequest\', \'' + budgetRequestId + '\', this);" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;">';
                                        html += '            Select Request Type';
                                        html += '        </div>';
                                        html += '        <br /><br />';
                                        $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = html;

                                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');

                                        console.log('Create the request type select element/drop down box. xcx3 bwEnabledRequestTypes: ' + JSON.stringify(bwEnabledRequestTypes));

                                        var html = '';
                                        html += '<select id="selectRequestTypeDropDown" onchange="" style=\'display:inline;border-color: whitesmoke; color: grey; font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 14pt; font-weight: bold; cursor: pointer;\'>'; // was .5em
                                        html += '<option value="" >Select a request type...</option>';

                                        var hasItemsInTheDropdown = false;
                                        for (var i = 0; i < bwEnabledRequestTypes.EnabledItems.length; i++) {
                                            if (bwEnabledRequestTypes.EnabledItems[i].SingletonName) {
                                                html += '<option value="' + bwEnabledRequestTypes.EnabledItems[i].bwRequestTypeId + '" >' + bwEnabledRequestTypes.EnabledItems[i].SingletonName + '</option>';
                                                hasItemsInTheDropdown = true;
                                            }
                                        }
                                        html += '</select>';

                                        if (hasItemsInTheDropdown == false) {
                                            html = '';
                                            html += '<span style="color:tomato;">THERE ARE NO AVAILABLE VALID REQUEST TYPES FOR THIS ORGANIZATION. Go to Configuration > Organization Settings, and make sure there is at least 1 request type with a SingletonName and PluralName.</span>';

                                            $('#' + requestDialogId).find('#btnUserRoleDialogChangeRolexx')[0].style.display = 'none'; // Hide the button.
                                            $('#' + requestDialogId).find('#spanChangeRequestTypeDialogTitle2').html(''); // Hide the button.
                                        }

                                        alert('Preparing to populate the form contents in element "spanChangeRequestTypeDialogContent". xcx3247');
                                        $('#' + requestDialogId).find('#spanChangeRequestTypeDialogContent')[0].innerHTML = html;

                                    } else {


                                        debugger;

                                        // 3-2-2024.
                                        console.log('Calling bwRequest.js.renderRequestForm() from displayRequestForm(). THIS IS THE ONLY PLACE THIS SHOULD BE HAPPENING. Yes, this is true. xcx1312424-1. 3-2-2024.');
                                        //thiz.renderRequestForm(brData, activeStateIdentifier, budgetRequestId, requestDialogId, participantId, workflowAppId, selectedRaciRole);
                                        thiz.renderRequestForm(bwBudgetRequest, activeStateIdentifier, requestDialogId, participantId, workflowAppId, selectedRaciRole, brData); // Getting the parameters more organized/standardized. 3-2-2024.





                                    }
                                }
                            }

                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestForm():2: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestForm():2: ' + e.message + ', ' + e.stack);
                        }
                    },
                    error: function (jqXHR, settings, errorThrown) {
                        debugger;

                        //if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                        //    console.log('HTTP 401 "Unauthorized".');
                        //    console.log('HTTP 401 "Unauthorized".');
                        //    console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        //    //alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        //    console.log('HTTP 401 "Unauthorized".');
                        //    console.log('HTTP 401 "Unauthorized".');

                        //} else {
                        console.log('Error in bwRequest.js.displayRequestForm():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        alert('Error in bwRequest.js.displayRequestForm():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        //}

                        $('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId); // Make sure the dialog is closed.


                    }
                });

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.displayRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayRequestForm(): ' + e.message + ', ' + e.stack);
        }
    },
    displayRequestForm_ForTrashBin: function (budgetRequestId, requestDialogId, bwWorkflowTaskItemIdxx, selectedRaciRole, bwRequestJson) { // NEW 7-26-2022 - Breaking out from displayRequestFormDialog().
        try {
            console.log('In bwRequest.js.displayRequestForm_ForTrashBin(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //alert('In bwRequest.js.displayRequestForm_ForTrashBin(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            //if (!bwWorkflowTaskItemId) {
            //    alert('In displayRequestForm_ForTrashBin(). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //}

            var bwRequestJson2;
            if (bwRequestJson) {

                var msg = 'In bwRequest.js.displayRequestForm_ForTrashBin(). bwRequestJson has been passed. THIS MEANS IT IS A POPPED-OUT DIALOG being display, or being returned to the main browser window.. bwRequestJson: ' + JSON.stringify(bwRequestJson);
                console.log(msg);
                //alert(msg);

                bwRequestJson2 = bwRequestJson.bwRequestJson; // Reinitilizing at this level allows the variable value to persist after the web service call. 

            } else {
                console.log('In bwRequest.js.displayRequestForm_ForTrashBin(). No bwRequestJson has been passed. bwRequestJson: ' + JSON.stringify(bwRequestJson));
                //alert('In bwRequest.js.displayRequestForm_ForTrashBin(). No bwRequestJson has been passed. bwRequestJson: ' + JSON.stringify(bwRequestJson));

                bwRequestJson2 = bwRequestJson; // Reinitilizing at this level allows the variable value to persist after the web service call. 

            }



            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            if (!(workflowAppId && participantId && activeStateIdentifier && budgetRequestId)) {

                var msg = 'Error in bwRequest.js.displayRequestForm_ForTrashBin(). Unexpected value for parameter(s). workflowAppId: ' + workflowAppId + ', participantId: ' + participantId + ', activeStateIdentifier: ' + activeStateIdentifier + ', budgetRequestId: ' + budgetRequestId;
                console.log(msg);
                displayAlertDialog(msg);

            } else {

                //
                // THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!
                //

                console.log('>>>>>>>>>>>>>>>>Step 2: In bwRequest.js.displayRequestForm_ForTrashBin(). Calling operationUri: ' + webserviceurl + '/getsinglebudgetrequest');
                //alert('>>>>>>>>>>>>>>>>Step 2: In bwRequest.js.displayRequestForm_ForTrashBin(). Calling operationUri: ' + webserviceurl + '/getsinglebudgetrequest bwRequestJson: ' + bwRequestJson);

                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwWorkflowAppId: workflowAppId,
                    bwBudgetRequestId: budgetRequestId,
                    isActive: true,
                    bwRequestType: 'ALL'
                };

                $.ajax({
                    url: webserviceurl + '/getsinglebudgetrequest', // This needs to return QualifyingRoleIds. They RequestingUser has to qualify for each role being in the budget request org level or above.
                    type: "POST",
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    error: function (jqXHR, settings, errorThrown) {

                        if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                            console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-2 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                            alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-2 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);

                        } else {
                            console.log('Error in bwRequest.js.displayRequestForm()():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                            alert('Error in bwRequest.js.displayRequestForm()():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        }

                    },
                    success: function (result) {
                        try {

                            console.log('>>>>>>>>>>>>>>>>Step 3: In bwRequest.js.displayRequestForm_ForTrashBin.getsinglebudgetrequest.success().');

                            console.log('In displayRequestForm_ForTrashBin(). THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!');

                            if (result.status != 'SUCCESS') {

                                console.log('Error in bwRequest.js.displayRequestForm_ForTrashBin.getsinglebudgetrequest.success(): ' + JSON.stringify(result));
                                displayAlertDialog('Error in bwRequest.js.displayRequestForm_ForTrashBin.getsinglebudgetrequest.success(): ' + JSON.stringify(result));

                            } else {

                                var brData = result.results;
                                debugger;
                                if (!brData.bwBudgetRequest || !brData.bwBudgetRequest.bwRequestJson || (brData.bwBudgetRequest.bwRequestJson == '')) {

                                    var msg = 'INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx41202011 brData.bwBudgetRequest.bwRequestJson: ' + brData.bwBudgetRequest.bwRequestJson;
                                    console.log(msg);
                                    displayAlertDialog(msg);

                                } else {

                                    //
                                    // If bwRequestJson is provided, then we don't need to reach out to the database for that information. For example, when popping-out a window, we won't have to do this, just pass the bwRequestJson back and forth between window and dialog. 7-27-2022
                                    //
                                    if (bwRequestJson2) {

                                        var msg = 'In bwRequest.js.displayRequestForm_ForTrashBin(). bwRequestJson was provided so overwriting brData.bwBudgetRequest.bwRequestJson. This must be from a popped-out window. SO WHY DID WE JUST CALL THE WEB SERVICE??? Maybe we can optimize this someday, but I already tried, and it is best to leave this until we properly address fine tuned caching and IndexDb.';
                                        console.log(msg);
                                        //alert(msg);

                                        //alert('SETTING brData.bwBudgetRequest.bwRequestJson to ' + JSON.stringify(bwRequestJson2));

                                        brData.bwBudgetRequest.bwRequestJson = JSON.stringify(bwRequestJson2);

                                    } else {


                                        if (!brData.bwBudgetRequest.bwBudgetRequestId) {

                                            console.log('Error in bwRequest.js.populateRequestForm(). Invalid value for brData.bwBudgetRequest.bwBudgetRequestId: ' + brData.bwBudgetRequest.bwBudgetRequestId);
                                            displayAlertDialog('Error in bwRequest.js.populateRequestForm(). Invalid value for brData.bwBudgetRequest.bwBudgetRequestId: ' + brData.bwBudgetRequest.bwBudgetRequestId);

                                        } else {

                                            // Find the request in the thiz.options.lastSavedJson array. If it's there, replace it, otherwise, add it.
                                            // This also happens in saveAndPublishTheRequest().
                                            var lastSavedJsonIndex = -1;
                                            for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                                                if (!(thiz.options.lastSavedJson[i] && thiz.options.lastSavedJson[i].bwBudgetRequestId)) {
                                                    displayAlertDialog_Persistent('xcx12345-2 Error: Property [bwBudgetRequestId] does not exist: ' + JSON.stringify(thiz.options.lastSavedJson[i]) + ', thiz.options.lastSavedJson: ' + JSON.stringify(thiz.options.lastSavedJson));
                                                } else {
                                                    if (thiz.options.lastSavedJson[i].bwBudgetRequestId == brData.bwBudgetRequest.bwBudgetRequestId) {
                                                        lastSavedJsonIndex = i;
                                                        break;
                                                    }
                                                }
                                            }

                                            //alert('xcx2314-1 Updating thiz.options.lastSavedJson. THIS IS IN THE WRONG SPOT.');
                                            if (lastSavedJsonIndex > -1) {
                                                thiz.options.lastSavedJson[lastSavedJsonIndex] = JSON.parse(brData.bwBudgetRequest.bwRequestJson);
                                            } else {
                                                thiz.options.lastSavedJson.push(JSON.parse(brData.bwBudgetRequest.bwRequestJson));
                                            }

                                            console.log('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check.');
                                            //alert('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check. lastSavedJsonIndex: ' + lastSavedJsonIndex + ', bwRequestJson: ' + JSON.stringify(brData.bwBudgetRequest.bwRequestJson));
                                        }

                                    }

                                    if (!brData.bwBudgetRequest.bwRequestTypeId) {
                                        //debugger;
                                        console.log('Had to correct the brData.bwBudgetRequest.bwRequestTypeId... fix this eventually. xcx123357-2');
                                        var bwRequestTypeId = JSON.parse(brData.bwBudgetRequest.bwRequestJson).bwRequestTypeId;
                                        brData.bwBudgetRequest["bwRequestTypeId"] = bwRequestTypeId;

                                    }

                                    console.log('');
                                    console.log('********');
                                    console.log('In displayRequestForm_ForTrashBin(). brData.bwBudgetRequest.bwRequestTypeId: ' + brData.bwBudgetRequest.bwRequestTypeId);
                                    console.log('********');
                                    console.log('');

                                    if (!brData.bwBudgetRequest.bwRequestTypeId) {

                                        console.log('Error: Invalid bwRequestTypeId. A Request Type has not been chosen for this request. Select from the available Request Types, then click the "Select Request Type" button. bwRequestTypeId: ' + brData.bwBudgetRequest.bwRequestTypeId);

                                        var html = '';
                                        html += '        <span id="spanChangeRequestTypeDialogTitle2" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;">A Request Type has not been chosen for this request. Select from the available Request Types, then click the "Select Request Type" button.</span><br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <span id="spanChangeRequestTypeDialogContent" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;"></span><br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <br /><br />';
                                        html += '        <div id="btnUserRoleDialogChangeRolexx" class="divSignInButton" onclick="$(\'.bwRequest\').bwRequest(\'assignRequestTypeToRequest\', \'' + budgetRequestId + '\', this);" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;">';
                                        html += '            Select Request Type';
                                        html += '        </div>';
                                        html += '        <br /><br />';
                                        $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = html;

                                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');

                                        console.log('Create the request type select element/drop down box. xcx3 bwEnabledRequestTypes: ' + JSON.stringify(bwEnabledRequestTypes));

                                        var html = '';
                                        html += '<select id="selectRequestTypeDropDown" onchange="" style=\'display:inline;border-color: whitesmoke; color: grey; font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 14pt; font-weight: bold; cursor: pointer;\'>'; // was .5em
                                        html += '<option value="" >Select a request type...</option>';

                                        var hasItemsInTheDropdown = false;
                                        for (var i = 0; i < bwEnabledRequestTypes.EnabledItems.length; i++) {
                                            if (bwEnabledRequestTypes.EnabledItems[i].SingletonName) {
                                                html += '<option value="' + bwEnabledRequestTypes.EnabledItems[i].bwRequestTypeId + '" >' + bwEnabledRequestTypes.EnabledItems[i].SingletonName + '</option>';
                                                hasItemsInTheDropdown = true;
                                            }
                                        }
                                        html += '</select>';

                                        if (hasItemsInTheDropdown == false) {
                                            html = '';
                                            html += '<span style="color:tomato;">THERE ARE NO AVAILABLE VALID REQUEST TYPES FOR THIS ORGANIZATION. Go to Configuration > Organization Settings, and make sure there is at least 1 request type with a SingletonName and PluralName.</span>';

                                            $('#' + requestDialogId).find('#btnUserRoleDialogChangeRolexx')[0].style.display = 'none'; // Hide the button.
                                            $('#' + requestDialogId).find('#spanChangeRequestTypeDialogTitle2').html(''); // Hide the button.
                                        }

                                        alert('Preparing to populate the form contents in element "spanChangeRequestTypeDialogContent". xcx3247');
                                        $('#' + requestDialogId).find('#spanChangeRequestTypeDialogContent')[0].innerHTML = html;

                                    } else {

                                        console.log('xcx12356 calling renderRequestForm_ForTrashBin().');
                                        thiz.renderRequestForm_ForTrashBin(brData, activeStateIdentifier, budgetRequestId, requestDialogId, participantId, workflowAppId, selectedRaciRole);

                                    }
                                }
                            }

                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestForm_ForTrashBin():2: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestForm_ForTrashBin():2: ' + e.message + ', ' + e.stack);
                        }
                    }
                });

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.displayRequestForm_ForTrashBin(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayRequestForm_ForTrashBin(): ' + e.message + ', ' + e.stack);
        }
    },
    renderRequestForm: function (bwBudgetRequest, activeStateIdentifier, requestDialogId, participantId, workflowAppId, selectedRaciRole, brData) {
        //
        // THIS IS THE ONLY PLACE WHERE WE RENDER THE FORM AND DISPLAY THE DIALOG. Revision: 12-16-2023. 1st revison: 1-15-2023.
        //
        try {
            var thiz = this;
            debugger;
            console.log('In bwRequest.js.renderRequestForm(). brData: ' + JSON.stringify(brData));
            //alert('In bwRequest.js.renderRequestForm(). selectedRaciRole: ' + selectedRaciRole + ', brData: ' + JSON.stringify(brData));

            console.log('In renderRequestForm(). bwBudgetRequest.BudgetWorkflowStatus: ' + bwBudgetRequest.BudgetWorkflowStatus);
            //displayAlertDialog_Persistent('In renderRequestForm(). brData: ' + JSON.stringify(brData));
            debugger;
            if (!bwBudgetRequest.bwWorkflowAppId || !bwBudgetRequest.bwBudgetRequestId) {

                alert('Error in renderRequestForm(). Unexpected value(s) for bwBudgetRequest.bwWorkflowAppId: ' + !bwBudgetRequest.bwWorkflowAppId + ', bwBudgetRequest.bwBudgetRequestId: ' + bwBudgetRequest.bwBudgetRequestId);
                displayAlertDialog('Error in renderRequestForm(). Unexpected value(s) for bwBudgetRequest.bwWorkflowAppId: ' + !bwBudgetRequest.bwWorkflowAppId + ', bwBudgetRequest.bwBudgetRequestId: ' + bwBudgetRequest.bwBudgetRequestId);

            } else {
                debugger;
                if (bwBudgetRequest.BudgetWorkflowStatus == 'NOT_SUBMITTED') {

                    console.log('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);
                    //alert('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);

                    var promise = thiz.getRequestFormHtml(bwBudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-1');
                    promise.then(function (results) {
                        debugger;
                        try {
                            //if (bwBudgetRequest.bwRequestType == 'recurringexpense') {
                            //    // debugger;
                            //    displayAlertDialog('xxxxxxxxcx34564544');
                            //}
                            if (results.status != 'SUCCESS') {

                                // We have an error!!
                                console.log('Error xcx342354235: ' + results.message);
                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;

                            } else {

                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                //
                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                //if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                //    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                //}
                                // end


                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwBudgetRequest.bwRequestTypeId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', bwBudgetRequest.bwFiscalYear);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', bwBudgetRequest.bwBudgetRequestId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', bwBudgetRequest.Title);
                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId); // Commented this out 10-7-2022. Populating below near where we create the role drop-down.
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', bwBudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                var bwOrgId = bwBudgetRequest.OrgId;
                                var bwOrgName = bwBudgetRequest.OrgName;

                                if (!(bwOrgId)) {
                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                }

                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                var functionalAreaId = bwBudgetRequest.FunctionalAreaId; // eg: 1;
                                var pmAccountId = bwBudgetRequest.ManagerId; // eg: 9;
                                var managerFriendlyName = bwBudgetRequest.ManagerFriendlyName;
                                var arStatus = bwBudgetRequest.ARStatus; // eg: 'Submitted';

                                //bwApprovalLevelWorkflowToken = bwBudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                // Get the request type SingletonName.
                                var requestType;
                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                    if (bwBudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                        requestType = bwEnabledRequestTypes[i];
                                        break;
                                    }
                                }

                                var html = '';

                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                                if (!requestType) {
                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + bwBudgetRequest.bwRequestTypeId + ' ';
                                } else {
                                    html += '                       New ' + requestType.SingletonName + ': ';
                                }

                                html += '&nbsp;<span xcx="xcx3567-1" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                                html += '</span>';
                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                }
                                //
                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                //

                                $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                // Display the instructions.
                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = 'Complete the form then click the "Submit" button.';

                                // Display the buttons.
                                //var html = '';

                                //html += '<button onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                                //html += '                        &nbsp;';

                                //html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                                //html += '                        &nbsp;';

                                //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                                //html += '                        &nbsp;';

                                //html += '                        <button xcx="xcx4242-3" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm">Close</button>';

                                //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-1');
                                thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest, null, html, 'xcx445566-1'); // 3-2-2024.


                                //
                                // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                //
                                console.log('Calling populateRequestForm(). xcx3452-2-1');
                                var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, true); //allowRequestModifications);
                                promise.then(function () {
                                    try {

                                        // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                        var canvas = document.getElementById("myCanvas");
                                        if (canvas) {
                                            // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                            var body = document.getElementsByTagName('body')[0];
                                            var clientWidth = body.scrollWidth;
                                            var clientHeight = Math.max(
                                                body.scrollHeight, document.documentElement.scrollHeight,
                                                body.offsetHeight, document.documentElement.offsetHeight,
                                                body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                            );
                                            // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                            // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                            // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                            canvas.width = clientWidth;
                                            canvas.height = clientHeight;
                                        }

                                        // If off the screen, re-position. 4-17-2022
                                        var left = document.getElementById(requestDialogId).getBoundingClientRect().left;
                                        if (left < 0) {
                                            console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-1 left: ' + left);
                                            alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-1 left: ' + left);
                                            $('#' + requestDialogId).dialog({
                                                position: { my: "center top", at: "center top", of: window }
                                            });
                                        }

                                        // This closes the in-browser request dialog, if this one is a popped-out window one. 8-15-2022
                                        if (window.opener) {
                                            var dialogId = 'divRequestFormDialog_' + bwBudgetRequest.bwBudgetRequestId;
                                            alert('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            console.log('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            window.opener.$('#' + dialogId).dialog('close');
                                        }

                                        // RIGHT-CLICK FUNCTIONALITY!!
                                        // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                        var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                        $(button).on('click', function (e) {
                                            e.preventDefault();
                                            e.stopImmediatePropagation();
                                            $(this).contextMenu();
                                        });

                                        console.log('Displaying elipses context menu for request without a workflow (new request).');
                                        //alert('Displaying elipses context menu for request without a workflow (new request). xcx1');
                                        // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                        $.contextMenu({
                                            selector: '.context-menu-newrequesteditor',
                                            callback: function (key, options) {
                                                var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                if (key == 'requestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requestjsondignostics') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                } else if (key == 'requestjsondb') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'viewbwbudgetrequestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                        //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                        thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requesthtmldb') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                } else if (key == 'viewworkflowjson') {
                                                    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                } else if (key == 'changetherequesttype') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                    // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                    //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'viewtaskjson') {
                                                    // This is for testing.
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'deletethisrequest') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, 'this New Request');
                                                    }
                                                } else if (key == 'setreminder') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {

                                                        var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                        if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                            $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request');
                                                        } else {

                                                            // The widget has not been instantiated, so doing that here.
                                                            var div = document.getElementById('divBwOneTimeRequestReminders');
                                                            if (div) {
                                                                div.remove(); // This gets rid of it so we can start fresh. 
                                                            }
                                                            div = document.createElement('div');
                                                            div.id = 'divBwOneTimeRequestReminders';
                                                            div.style.display = 'none';
                                                            document.body.appendChild(div); // Place at end of document.

                                                            $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                            $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request'); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                        }
                                                    }
                                                }
                                            },
                                            items: {
                                                "requestjson": {
                                                    name: "Request JSON", icon: "edit"
                                                },
                                                "requestjsondb": {
                                                    name: "Request JSON from Database", icon: "edit"
                                                },
                                                //"viewbwbudgetrequestjson": {
                                                //    name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                //},
                                                //"updatedailyoverduetasknotificationdate": {
                                                //    name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                //},
                                                //"viewtaskjson": {
                                                //    name: "Task JSON", icon: "edit"
                                                //},
                                                //"requestjsondignostics": {
                                                //    name: "Request JSON Diagnostics", icon: "edit"
                                                //},
                                                //"requesthtmldb": {
                                                //    name: "Request Form HTML from Database  xcx1-3", icon: "edit"
                                                //},
                                                //"viewworkflowjson": {
                                                //    name: "View Workflow Step/Role Json", icon: "edit"
                                                //},
                                                "changetherequesttype": {
                                                    name: "Change the Request Type", icon: "edit"
                                                },
                                                "deletethisrequest": {
                                                    name: "Delete this Request", icon: "edit"
                                                },
                                                "setreminder": {
                                                    name: "Set a One-Time Reminder", icon: "edit"
                                                }
                                            }
                                        });
                                        // End: This is our right-click context menu.

                                    } catch (e) {
                                        console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                        displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                    }
                                });

                            }
                        } catch (e) {
                            console.log('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            alert('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                        }
                    });

                } else {
                    debugger;
                    //
                    // This request has a workflow. bwBudgetRequest.BudgetWorkflowStatus != 'NOT_SUBMITTED'
                    //
                    //displayAlertDialog('xcx877097808 bwBudgetRequest: ' + JSON.stringify(bwBudgetRequest));

                    var workflowAppId2 = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                    var participantId2 = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                    var activeStateIdentifier2 = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                    var data = {
                        bwParticipantId_LoggedIn: participantId2,
                        bwActiveStateIdentifier: activeStateIdentifier2,
                        bwWorkflowAppId_LoggedIn: workflowAppId2,

                        bwWorkflowAppId: bwBudgetRequest.bwWorkflowAppId,
                        bwBudgetRequestId: bwBudgetRequest.bwBudgetRequestId
                        //WorkflowStepName: bwBudgetRequest.BudgetWorkflowStatus // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022 // BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                    };
                    //alert('In renderRequestForm(). xcx12325-1. Calling /workflowconfiguration5(). data: ' + JSON.stringify(data));
                    $.ajax({
                        url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                        type: "POST",
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        error: function (data, errorCode, errorMessage) {
                            debugger;
                            console.log('xcx23123-1 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);
                            displayAlertDialog('xcx23123-1 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);

                        },
                        success: function (result) {
                            try {
                                debugger;
                                if (result.status != 'SUCCESS') {

                                    console.log(result.message);
                                    displayAlertDialog(result.message);

                                } else {

                                    var workflow;
                                    if (!result.Workflow) {

                                        if (bwBudgetRequest.BudgetWorkflowStatus != 'NOT_SUBMITTED') {

                                            var msg = 'In bwRequest.js.displayRequestForm(). THERE IS NO WORKFLOW FOR THIS REQUEST TYPE. HOWEVER, BudgetWorkflowStatus SHOULD BE NOT_SUBMITTED. IT IS NOT. bwBudgetRequest.BudgetWorkflowStatus: ' + bwBudgetRequest.BudgetWorkflowStatus;
                                            console.log(msg);
                                            displayAlertDialog(msg);
                                            //displayAlertDialog_Persistent('In bwRequest.js.displayRequestForm(). brData: ' + JSON.stringify(brData));

                                        } else {

                                            // This request has no workflow.
                                            console.log('This request has no workflow. xcx4354376.');
                                            alert('This request has no workflow. xcx4354376.');

                                        }

                                    } else {

                                        workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                    }




                                    console.log('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');
                                    //alert('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');

                                    //
                                    // HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022
                                    //
                                    //var workflowParent = result.Workflow[0];
                                    //var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);




                                    //alert('xcx12313 result.Tasks: ' + JSON.stringify(result.Tasks));

                                    // The web service returns all tasks for this request. We want it to!!! This allows us to validate some things as well. Always nice to do this once in a while, as it adds to the stability of the system.
                                    var bwWorkflowTasks = []; //var bwWorkflowTasks = result.Tasks; // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                                    if (result.Tasks && result.Tasks.length) {
                                        for (var i = 0; i < result.Tasks.length; i++) {
                                            if (result.Tasks[i].WorkflowStepName == bwBudgetRequest.BudgetWorkflowStatus) {
                                                bwWorkflowTasks.push(result.Tasks[i]);
                                            } else {
                                                if ((result.Tasks[i].bwStatus == 'Completed') && (result.Tasks[i].bwPercentComplete == 100)) {
                                                    //
                                                    // AUDIT: We can use this to check that all previous Tasks were assigned and completed if we wish to.... like an Auditing step to ensure our data is complete and no messing around has happened.
                                                    //
                                                    console.log('AUDIT Success in bwRequest.js.displayRequestForm(). This task was completed for request "' + bwBudgetRequest.Title + '" [' + bwBudgetRequest.bwBudgetRequestId + ']. bwWorkflowTaskItemId: [' + result.Tasks[i].bwWorkflowTaskItemId + ']');
                                                } else {

                                                    console.log('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + bwBudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);
                                                    displayAlertDialog('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + bwBudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);

                                                }
                                            }
                                        }
                                    }





                                    console.log('In bwRequest.js.renderRequestForm(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + bwBudgetRequest.bwRequestTypeId);
                                    //alert('In bwRequest.js.displayRequestFormDialog(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + bwBudgetRequest.bwRequestTypeId);
                                    debugger; // THIS IS CRASHING IN THE METHOD!!!!!!!!!!!!!!!!!!!!

                                    var msg = 'In bwRequest.js.xx(). Calling getRequestFormHtml(). This method needs work.... .. ';
                                    console.log(msg);

                                    var promise = thiz.getRequestFormHtml(bwBudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-2');
                                    promise.then(function (results) {
                                        try {
                                            debugger;
                                            //if (bwBudgetRequest.bwRequestType == 'recurringexpense') {
                                            //    // debugger;
                                            //    displayAlertDialog('xxxxxxxxcx34564544');
                                            //}
                                            if (results.status != 'SUCCESS') {

                                                var msg = 'Error in bwRequest.js.renderRequestForm():xcx2344213: ' + results.status + ', ' + results.message;
                                                console.log(msg);
                                                displayAlertDialog(msg);

                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = msg;

                                            } else {

                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                                //
                                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                                if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                                    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                                }
                                                // end


                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwBudgetRequest.bwRequestTypeId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', bwBudgetRequest.bwFiscalYear);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', bwBudgetRequest.bwBudgetRequestId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', bwBudgetRequest.Title);

                                                // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId);

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', bwBudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                                var bwOrgId = bwBudgetRequest.OrgId;
                                                var bwOrgName = bwBudgetRequest.OrgName;

                                                if (!(bwOrgId)) {
                                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                }

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                                var functionalAreaId = bwBudgetRequest.FunctionalAreaId; // eg: 1;
                                                var pmAccountId = bwBudgetRequest.ManagerId; // eg: 9;
                                                var managerFriendlyName = bwBudgetRequest.ManagerFriendlyName;
                                                var arStatus = bwBudgetRequest.ARStatus; // eg: 'Submitted';

                                                bwApprovalLevelWorkflowToken = bwBudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                                // Get the request type SingletonName.
                                                var requestType;
                                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                                    if (bwBudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                                        requestType = bwEnabledRequestTypes[i];
                                                        break;
                                                    }
                                                }

                                                var html = '';

                                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';

                                                console.log('xcx213124154 requestType: ' + requestType);

                                                if (!requestType) {
                                                    console.log('xcx213124154 NO requestType: ' + requestType);
                                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + bwBudgetRequest.bwRequestTypeId + ': ';
                                                } else {
                                                    console.log('xcx213124154 FOUND requestType: ' + requestType);
                                                    html += '                       ' + requestType.SingletonName + ': ';
                                                }
                                                debugger;
                                                html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                                                html += bwBudgetRequest.Title;
                                                html += '                       </span>';
                                                //html += '&nbsp;<span xcx="xcx3567-2" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '&nbsp;<span xcx="xcx3567-2-1-1" id="spanNewRequestEllipsesButton" class="spanButton2 context_menu_requestformellipses" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '</span>';
                                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                                }







                                                //
                                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                                //

                                                //if (result.Workflow.length == 0) {

                                                //    console.log('ERROR: Cannot locate workflow: ' + bwBudgetRequest.bwWorkflowId);
                                                //    displayAlertDialog('ERROR: Cannot locate workflow: ' + bwBudgetRequest.bwWorkflowId);
                                                //    var instructions = '';
                                                //    instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + bwBudgetRequest.bwWorkflowId + '. <span style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'reassignOrphanedRequestToAnActiveWorkflow\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');">Click here to reassign to an active workflow for this "' + bwBudgetRequest.bwRequestType + '".</a></span>';
                                                //    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                //} else {
                                                // Get the workflow step.
                                                var stepIndex = null;
                                                var stepName = null;

                                                if (workflow) {
                                                    for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                                        stepName = workflow.Steps.Step[i]["@Name"];
                                                        if (stepName == bwBudgetRequest.BudgetWorkflowStatus) {
                                                            stepIndex = i;
                                                            break;
                                                        }
                                                    }
                                                }

                                                // RIGHT-CLICK FUNCTIONALITY!!
                                                // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                                var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                                $(button).on('click', function (e) {
                                                    e.preventDefault();
                                                    e.stopImmediatePropagation();
                                                    $(this).contextMenu();
                                                });

                                                var developerModeEnabled = $('.bwAuthentication').bwAuthentication('option', 'developerModeEnabled');





                                                if (developerModeEnabled == true) {

                                                    // The full drop down menu with all the options.
                                                    console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-1');
                                                    alert('Displaying elipses context menu for request without a workflow (new request). xcx214-1');

                                                    // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                    $.contextMenu({
                                                        selector: '.context_menu_requestformellipses',
                                                        callback: function (key, options) {
                                                            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                            var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                            var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                            if (key == 'requestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'requestjsondignostics') {
                                                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                            } else if (key == 'requestjsondb') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'viewbwbudgetrequestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                    //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                                    thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'requesthtmldb') {
                                                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                            } else if (key == 'viewworkflowjson') {
                                                                thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                            } else if (key == 'changetherequesttype') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'deletethisrequest') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                }
                                                            } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                                // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                                //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                                }
                                                            } else if (key == 'viewtaskjson') {
                                                                // This is for testing.
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                                }
                                                            }
                                                        },
                                                        items: {
                                                            "requestjson": {
                                                                name: "Request JSON (scraped2) xcx2", icon: "edit"
                                                            },
                                                            "requestjsondb": {
                                                                name: "Request JSON from Database", icon: "edit"
                                                            },
                                                            "viewbwbudgetrequestjson": {
                                                                name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                            },
                                                            "updatedailyoverduetasknotificationdate": {
                                                                name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                            },
                                                            "viewtaskjson": {
                                                                name: "Task JSON", icon: "edit"
                                                            },
                                                            "requestjsondignostics": {
                                                                name: "Request JSON Diagnostics", icon: "edit"
                                                            },
                                                            "requesthtmldb": {
                                                                name: "Request Form HTML from Database xcx1-4", icon: "edit"
                                                            },
                                                            "viewworkflowjson": {
                                                                name: "View Workflow Step/Role Json", icon: "edit"
                                                            },
                                                            "changetherequesttype": {
                                                                name: "Change the Request Type", icon: "edit"
                                                            }
                                                            ,
                                                            "deletethisrequest": {
                                                                name: "Delete this Requestxcx2", icon: "edit"
                                                            }
                                                        }
                                                    });
                                                    // End: This is our right-click context menu.

                                                } else {

                                                    // Only the options in the drop down that the user needs.
                                                    console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-2');
                                                    //alert('Displaying elipses context menu for request without a workflow (new request). xcx214-2');









                                                    // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                    $.contextMenu({
                                                        selector: '.context_menu_requestformellipses',
                                                        callback: function (key, options) {
                                                            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                            var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                            var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;

                                                            if (key == 'changetherequesttype') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'deletethisrequest') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                }
                                                            } else if (key == 'setreminder') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {

                                                                    var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                                    if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                                        $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle);
                                                                    } else {

                                                                        // The widget has not been instantiated, so doing that here.
                                                                        var div = document.getElementById('divBwOneTimeRequestReminders');
                                                                        if (div) {
                                                                            div.remove(); // This gets rid of it so we can start fresh. 
                                                                        }
                                                                        div = document.createElement('div');
                                                                        div.id = 'divBwOneTimeRequestReminders';
                                                                        div.style.display = 'none';
                                                                        document.body.appendChild(div); // Place at end of document.

                                                                        $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                                        $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                                    }
                                                                }
                                                            } else if (key == 'removeworkflow') {

                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(removeworkflow). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {

                                                                    var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                    var bwRequestTypeId = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttypeid');

                                                                    thiz.displayRequestWorkflowAuditTrailDialog(bwRequestTitle, '', bwRequestTypeId, bwBudgetRequestId, '', true); // displayTheRemoveWorkflowButton parameter set to true.

                                                                }
                                                            }

                                                        },
                                                        items: {

                                                            "removeworkflow": {
                                                                name: "Remove from workflow", icon: "edit"
                                                            },
                                                            "changetherequesttype": {
                                                                name: "Change the Request Type", icon: "edit"
                                                            },
                                                            "deletethisrequest": {
                                                                name: "Delete this Request", icon: "edit"
                                                            },
                                                            "setreminder": {
                                                                name: "Set a One-Time Reminder", icon: "edit"
                                                            }
                                                        }
                                                    });
                                                    // End: This is our right-click context menu.



                                                }

                                                if (stepIndex == null) {

                                                    if (!workflow) {

                                                        //
                                                        // THIS REQUEST TYPE HAS NO WORKFLOW. For example, the "CONTACT" request type has no workflow. 10-30-2023.
                                                        //

                                                        var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-4');

                                                                //
                                                                // COME BACK HERE AND FIX!!!!!!!!!!!!!!! WHEN INVALID WORKFLOW STEP, THE FORM DOES NOT RENDER, EVEN IN READ-ONLY MODE. 1-5-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                //
                                                                //var msg = 'Error in bwRequest.js.renderRequestForm(). Invalid workflow step. The step "' + bwBudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs.';

                                                                //displayAlertDialog(msg); // We need a remediation step for the user here. If this is an issue, contact support@budgetworkflow.com. workflow.Steps.Step: ' + JSON.stringify(workflow.Steps.Step));
                                                                //console.log(msg);
                                                                //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                                                                //// Display the buttons.
                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-2', false, 'ERROR');

                                                                // Display the instructions.
                                                                //var instructions = 'Invalid workflow step. The step "' + bwBudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs. Select the Revise/Revert button to restart the request workflow.';
                                                                //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;



                                                                //
                                                                // 10-4-2022 copied from elsewhere
                                                                //
                                                                //var workflowStepHtml = '';
                                                                ////var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                ////if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                ////    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                ////} else {
                                                                ////    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                ////}

                                                                //workflowStepHtml += '<span style="font-weight:bold;">';
                                                                ////workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                ////workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                //workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                //workflowStepHtml += '       Workflow step: [missing]'; // + stepFriendlyName;
                                                                //workflowStepHtml += '   </span>';
                                                                //workflowStepHtml += '</span>';
                                                                //workflowStepHtml += '<br />';

                                                                //$('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                                //
                                                                // end: 10-4-2022 copied from elsewhere
                                                                //


                                                                //
                                                                // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                                //
                                                                //var checklists = JSON.parse(bwBudgetRequest.bwRequestJson).Checklists;
                                                                //if (checklists) {
                                                                //    var checklistsHtml = '';
                                                                //    checklistsHtml += 'Completed checklist(s):';
                                                                //    checklistsHtml += '<br />';
                                                                //    for (var i = 0; i < checklists.length; i++) {
                                                                //        var checklist = JSON.parse(checklists[i]);
                                                                //        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                //        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + bwBudgetRequest.ProjectTitle + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                //        checklistsHtml += '<br />';
                                                                //    }
                                                                //    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                //} else {
                                                                //    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                //}
                                                                //
                                                                //

                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm().xcx123123435-22: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm().xcx123123435-22: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });




                                                    } else {










                                                        // 7-17-2023.
                                                        // The following code snippet exists here and also in another place below. 10-11-2022
                                                        //
                                                        // Display the buttons.
                                                        //
                                                        //if (!RolesData.WorkflowStep.Assign) {
                                                        //// debugger;
                                                        //
                                                        // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                        //




                                                        //
                                                        //
                                                        //
                                                        // // 7-27-2023 OLD OLD OLD FORCED ALLOW MODIFICATIONS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                        //
                                                        //
                                                        //
                                                        var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-4');

                                                                //
                                                                // COME BACK HERE AND FIX!!!!!!!!!!!!!!! WHEN INVALID WORKFLOW STEP, THE FORM DOES NOT RENDER, EVEN IN READ-ONLY MODE. 1-5-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                //
                                                                var msg = 'Error in bwRequest.js.renderRequestForm(). Invalid workflow step. The step "' + bwBudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs.';

                                                                displayAlertDialog(msg); // We need a remediation step for the user here. If this is an issue, contact support@budgetworkflow.com. workflow.Steps.Step: ' + JSON.stringify(workflow.Steps.Step));
                                                                console.log(msg);
                                                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                                                                //// Display the buttons.
                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-2', false, 'ERROR');

                                                                // Display the instructions.
                                                                var instructions = 'Invalid workflow step. The step "' + bwBudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs. Select the Revise/Revert button to restart the request workflow.';
                                                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;



                                                                //
                                                                // 10-4-2022 copied from elsewhere
                                                                //
                                                                var workflowStepHtml = '';
                                                                //var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                //if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                //    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                //} else {
                                                                //    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                //}

                                                                workflowStepHtml += '<span style="font-weight:bold;">';
                                                                //workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                //workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                workflowStepHtml += '       Workflow step: [missing]'; // + stepFriendlyName;
                                                                workflowStepHtml += '   </span>';
                                                                workflowStepHtml += '</span>';
                                                                workflowStepHtml += '<br />';

                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                                //
                                                                // end: 10-4-2022 copied from elsewhere
                                                                //


                                                                //
                                                                // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                                //
                                                                var checklists = JSON.parse(bwBudgetRequest.bwRequestJson).Checklists;
                                                                if (checklists) {
                                                                    var checklistsHtml = '';
                                                                    checklistsHtml += 'Completed checklist(s):';
                                                                    checklistsHtml += '<br />';
                                                                    for (var i = 0; i < checklists.length; i++) {
                                                                        var checklist = JSON.parse(checklists[i]);
                                                                        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + bwBudgetRequest.ProjectTitle + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                        checklistsHtml += '<br />';
                                                                    }
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                } else {
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                }
                                                                //
                                                                //

                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm().xcx123123435: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm().xcx123123435: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });

                                                    }

                                                } else {


                                                    ////
                                                    //// Here we check if the workflow has been completed/Done. If it is done, just display the request in it's read-only state.
                                                    ////
                                                    //if (workflow.Steps.Step[stepIndex]["@Name"] == 'Done') {

                                                    //    // For example, workflow.Steps.Step[stepIndex]: {"@Name":"Done","@MasterState":"Approved","@FriendlyName":"Completed (Done)",
                                                    //    console.log('This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".');

                                                    //    var selectedOrganization = $('.bwAuthentication').bwAuthentication('getSelectedOrganization');
                                                    //    //alert('Dev: working to determine if this is a workflow administrator. selectedOrganization: ' + JSON.stringify(selectedOrganization));
                                                    //    if ((selectedOrganization.OrganizationRole == 'owner') || (selectedOrganization.OrganizationRole == 'configurationmanager')) {
                                                    //        console.log('The authenticated user is the owner or configurationmanager, therefore setting allowRequestModifications to true. This request is Completed (Done), but there should still be a way to make final changes, and the owner or configurationmanager should be able to do that.');
                                                    //        allowRequestModifications = true;
                                                    //    }

                                                    //    // The following code snippet exists here and also in another place below. 10-11-2022
                                                    //    //
                                                    //    // Display the buttons.
                                                    //    //
                                                    //    //if (!RolesData.WorkflowStep.Assign) {
                                                    //    //// debugger;
                                                    //    //
                                                    //    // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                    //    //
                                                    //    var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                    //    promise.then(function () {
                                                    //        try {

                                                    //            // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                    //            var canvas = document.getElementById("myCanvas");
                                                    //            if (canvas) {
                                                    //                // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                    //                var body = document.getElementsByTagName('body')[0];
                                                    //                var clientWidth = body.scrollWidth;
                                                    //                var clientHeight = Math.max(
                                                    //                            body.scrollHeight, document.documentElement.scrollHeight,
                                                    //                            body.offsetHeight, document.documentElement.offsetHeight,
                                                    //                            body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                    //                        );
                                                    //                // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                    //                // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                    //                // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                    //                canvas.width = clientWidth;
                                                    //                canvas.height = clientHeight;
                                                    //            }


                                                    //            thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-4');


                                                    //            //
                                                    //            // 10-4-2022 copied from elsewhere
                                                    //            //
                                                    //            var workflowStepHtml = '';
                                                    //            var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                    //            if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                    //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                    //            } else {
                                                    //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                    //            }

                                                    //            workflowStepHtml += '<span style="font-weight:bold;">';
                                                    //            workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                    //            workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                    //            workflowStepHtml += '   </span>';
                                                    //            workflowStepHtml += '</span>';
                                                    //            workflowStepHtml += '<br />';

                                                    //            $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                    //            //
                                                    //            // end: 10-4-2022 copied from elsewhere
                                                    //            //


                                                    //            //
                                                    //            // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                    //            //
                                                    //            var checklists = JSON.parse(bwBudgetRequest.bwRequestJson).Checklists;
                                                    //            if (checklists) {
                                                    //                var checklistsHtml = '';
                                                    //                checklistsHtml += 'Completed checklist(s):';
                                                    //                checklistsHtml += '<br />';
                                                    //                for (var i = 0; i < checklists.length; i++) {
                                                    //                    var checklist = JSON.parse(checklists[i]);
                                                    //                    checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                    //                    checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + bwBudgetRequest.ProjectTitle + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                    //                    checklistsHtml += '<br />';
                                                    //                }
                                                    //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                    //            } else {
                                                    //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                    //            }
                                                    //            //
                                                    //            //

                                                    //        } catch (e) {
                                                    //            console.log('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                    //            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                    //        }
                                                    //    });

                                                    //    //
                                                    //    // Display the instructions.
                                                    //    //
                                                    //    html = 'This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".';
                                                    //    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = html; // First, we clear the element.
                                                    //    // end: Display the instructions.

                                                    //} else {

                                                    //alert('cx12321 this user has these qualifying roles for this org id. '); // brData.RequestingUser.RoleIds

                                                    // 10-7-2022
                                                    var RolesData = {
                                                        status: null,
                                                        message: '',
                                                        RequestingUser: {
                                                            ParticipantRole: brData.RequestingUser.ParticipantRole, // Options include 'Forest Administrator', 'owner', 'archiveviewer', 'reportviewer', 'configurationmanager', and 'participant'.
                                                            QualifyingRolesInThisOrg: brData.RequestingUser.RoleIds, // All qualifying roles for this user, based upon the OrgId in the bwBudgetRequest. If this includes 'ADMIN', then the Workflow Administrator.
                                                            AssignedRolesForThisWorkflowStep: [] //  The array contains { Role: 'xx', RoleName: 'xx' }. <<<<<<<<<FIX<<<<<<<<<<<<<<<< There are the specifically assigned qualifying roles for this user at this workflow step. 'Completed' Task roles have been removed.
                                                        },
                                                        WorkflowAdmin: {
                                                            OnBehalfOfRolesForThisWorkflowStep: [] // All of the remaining roles, if this user is a Workflow Administrator (ADMIN). 'Completed' Task roles have been removed.
                                                        },
                                                        WorkflowStep: {
                                                            AssignedRole: {
                                                                Role: null, // This is our final result.
                                                                RoleName: null,
                                                                OnBehalfOf: null, // If "On behalf of...", then this will be true.
                                                                bwWorkflowTaskItemId: null
                                                            },
                                                            AllRolesInThisWorkflowStep: [], // All of the roles for this workflow step.
                                                            BwWorkflowTask_Table: bwWorkflowTasks, // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } } // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022
                                                            Assign: null // This is the Assign section of the selected workflow step. Used throughout. Replaced previously called assign.
                                                        }
                                                    }
                                                    // debugger;



                                                    //alert('If this is the tenant "owner", add the "ADMIN" role. xcx883356 RolesData.RequestingUser: ' + JSON.stringify(RolesData.RequestingUser));

                                                    //
                                                    // Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                    //
                                                    if (RolesData.RequestingUser.ParticipantRole == 'owner') {
                                                        if (!RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {
                                                            RolesData.RequestingUser.QualifyingRolesInThisOrg.push('ADMIN');
                                                            alert('This user is an owner, so adding the ADMIN role to RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + 'ADMIN');
                                                        }
                                                    }
                                                    //
                                                    // end: Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                    //

                                                    //
                                                    // Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.          // THIS FIGURES OUT THE ROLES that the user plays with this request, at this stage of the workflow. 
                                                    //
                                                    if (!workflow.Steps.Step[stepIndex].Assign) {
                                                        if (workflow.Steps.Step[stepIndex].Inform) {
                                                            var tmpSelectedRole = workflow.Steps.Step[stepIndex].Inform["@Role"];
                                                            RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                    console.log('xcx1234123-1 This user has the assignment for this role in the workflow step. Adding it to RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                }
                                                                //assign = workflow.Steps.Step[stepIndex].OnStart.Inform; // Set this for the user.
                                                            }
                                                            //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                            //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                            //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                            //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                            //        alert('xcx1234123-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                            //    }
                                                            //}
                                                        } else {
                                                            alert('NOT INFORM ROLE xcx346754234');
                                                        }
                                                    } else {

                                                        if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) { // When only 1, the length is undefined.
                                                            // More than 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                            for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign.length; i++) {
                                                                var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign[i]["@Role"];
                                                                RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                                //alert('xcx44445 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                        console.log('xcx1234123-3 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            // Only 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                            var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign["@Role"];
                                                            RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                //alert('xcx1234123-4 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                            }
                                                        }
                                                        //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                        //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                        //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                        //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                        //        alert('xcx1234123-2-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                        //    }
                                                        //}

                                                    }
                                                    //
                                                    // end: Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.  
                                                    //
                                                    //displayAlertDialog('RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep);




                                                    //
                                                    // Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                    //
                                                    var BwWorkflowTask_Table = []; // Initialize this array and load it. This is all the tasks in the BwWorkflowTask table for this request.
                                                    for (var i = 0; i < RolesData.WorkflowStep.BwWorkflowTask_Table.length; i++) {
                                                        BwWorkflowTask_Table.push(RolesData.WorkflowStep.BwWorkflowTask_Table[i].bwAssignedToRaciRoleAbbreviation);
                                                    }

                                                    if (BwWorkflowTask_Table.length == 0) {

                                                        // Do we need to do anything? No, I don't think so... 7-6-2023.


                                                    } else {

                                                        // Compare the workflow step with the BwWorkflowTask table to see if any tasks are missing in the BwWorkflowTask table.
                                                        var missingFrom_BwWorkflowTask_Table = [];
                                                        for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                            if (BwWorkflowTask_Table.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                                // It is in the list, 
                                                            } else {
                                                                // It is not in the list.
                                                                console.log('AUDIT Error in bwRequest.js.displayRequestForm(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                                displayAlertDialog('AUDIT Error in bwRequest.js.displayRequestForm(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table)); // + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                                missingFrom_BwWorkflowTask_Table.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                            }
                                                        }

                                                        // Compare the workflow step with the BwWorkflowTask table to see if any tasks are superfluous in the BwWorkflowTask table.
                                                        var superfluousIn_BwWorkflowTask_Table = [];
                                                        for (var i = 0; i < BwWorkflowTask_Table.length; i++) {
                                                            if (RolesData.WorkflowStep.AllRolesInThisWorkflowStep.indexOf(BwWorkflowTask_Table[i]) > -1) {
                                                                // It is in the list, 
                                                            } else {
                                                                // It is not in the list.
                                                                superfluousIn_BwWorkflowTask_Table.push(BwWorkflowTask_Table[i]);
                                                            }
                                                        }

                                                        console.log('AUDIT Note: Comparing workflowTasks with existingTasks to make sure all tasks have been created, and also that there aren\'t too many existing tasks. Any errors will be list immediately below this line in the console. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep) + ', missingFrom_BwWorkflowTask_Table: ' + JSON.stringify(missingFrom_BwWorkflowTask_Table) + ', superfluousIn_BwWorkflowTask_Table: ' + JSON.stringify(superfluousIn_BwWorkflowTask_Table));

                                                        if ((missingFrom_BwWorkflowTask_Table.length > 0) || (superfluousIn_BwWorkflowTask_Table.length > 0)) {

                                                            var msg = 'AUDIT Error in bwRequest.js.displayRequestForm(): Unexpected tasks for Request ' + bwBudgetRequest.bwBudgetRequestId + '. missingFrom_BwWorkflowTask_Table: ' + missingFrom_BwWorkflowTask_Table + ', superfluousIn_BwWorkflowTask_Table: ' + superfluousIn_BwWorkflowTask_Table;
                                                            console.log(msg);
                                                            displayAlertDialog(msg);

                                                        }

                                                    }
                                                    //
                                                    // End: Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                    //






                                                    //
                                                    // Step 3: Populate RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                    //
                                                    console.log('xcx1231234234 RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                    //alert('xcx1231234234RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                    if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                        // Add the "On behalf of..." roles for the ADMIN.
                                                        for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                            if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                                // Do nothing, already have this role in the RequestingUser.AssignedRolesForThisWorkflowStep array.
                                                            } else {
                                                                // Add to the RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep array.
                                                                //debugger; // this needs to be pushed like: { Role: xx, RoleName: xx } // 12-22-2022 or does it????? Hmmmmm......
                                                                RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                                //alert('xcx1234123-4-2 PUSHED INTO RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                            }
                                                        }
                                                    }
                                                    //
                                                    // end: Step 3: Populate RequestingUser.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                    //
                                                    //alert('xcx21312 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                    //displayAlertDialog('RolesData.WorkflowStep.BwWorkflowTask_Table: ' + JSON.stringify(RolesData.WorkflowStep.BwWorkflowTask_Table));

                                                    //
                                                    // Step 4: Remove all roles where the Task has already been completed, and populate bwWorkflowTaskItemId.
                                                    //
                                                    for (var t = 0; t < RolesData.WorkflowStep.BwWorkflowTask_Table.length; t++) {

                                                        for (var a = 0; a < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; a++) {
                                                            if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a]) {
                                                                if ((RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') && (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwPercentComplete == 100)) {
                                                                    // Remove it.
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.splice(a, 1); // delete leaves a null, so we have to use splice.
                                                                    //alert('Removing task as it has been completed by: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                } else {
                                                                    // Leave it. Add the bwWorkflowTaskItemId.
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a] = {
                                                                        Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                        RoleName: null,
                                                                        bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                    }
                                                                    //alert('Adding Task as it has not been completed: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                }
                                                                break;
                                                            }
                                                        }

                                                        //debugger; // ISNT THIS WHERE WE FIX IT????????????????? <<<<<<<<<<<<<<<<< 12-22-2022
                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                            for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i]) {
                                                                    if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') {
                                                                        // Remove it.
                                                                        RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.splice(i, 1); // delete leaves a null, so we have to use splice.
                                                                    } else {
                                                                        debugger; // ???? IT SHOULD BE HITTING HERE??? <<<<<<<<<<<<<<<<<<<<<<<
                                                                        // Leave it. Add the bwWorkflowTaskItemId.
                                                                        RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i] = {
                                                                            Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                            RoleName: null,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //
                                                    // end: Step 4: Remove all roles where the Task has already been completed.         
                                                    //

                                                    //alert('STEP 5 coming up. xcx21312-2 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));

                                                    //
                                                    // Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                    //
                                                    // debugger;
                                                    if (selectedRaciRole && (selectedRaciRole != 'undefined')) { // This gets passed when the RACI Role drop down gets changed... comes from selectedRaciRole_OnChange or some method like that... 

                                                        for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                            if (selectedRaciRole == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                RolesData.WorkflowStep.AssignedRole = {
                                                                    Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role,
                                                                    RoleName: null, // This will get populated a bit lower in this code.
                                                                    OnBehalfOf: false,
                                                                    bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                };
                                                                RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                console.log('xcx23423-1 found matching role. Set RolesData.WorkflowStep.AssignedRole.Role: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                break;
                                                            }
                                                        }
                                                        if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                    if (selectedRaciRole == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                        RolesData.WorkflowStep.AssignedRole = {
                                                                            Role: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role,
                                                                            RoleName: null, // This will get populated a bit lower in this code.
                                                                            OnBehalfOf: true,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                        };
                                                                        RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                        console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    } else {

                                                        if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length > 0) {
                                                            RolesData.WorkflowStep.AssignedRole = {
                                                                Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].Role, // Pick the first one.
                                                                RoleName: null, // This will get populated a bit lower in this code.
                                                                OnBehalfOf: false,
                                                                bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].bwWorkflowTaskItemId
                                                            };
                                                            RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                            console.log('xcx23423-3 found role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                        }
                                                        if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length > 0) {

                                                                    //alert('xcx123123 pick the first one...');
                                                                    console.log('xcx123123 pick the first one...');
                                                                    // debugger;





                                                                    // 7-6-2023.
                                                                    var tmpRole, tmpBwWorkflowTaskItemId;
                                                                    if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0]) {
                                                                        tmpRole = 'ADMIN';
                                                                        tmpBwWorkflowTaskItemId = '';
                                                                    } else {
                                                                        tmpRole = RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].Role;
                                                                        tmpBwWorkflowTaskItemId = RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].bwWorkflowTaskItemId;
                                                                    }


                                                                    // end 7-6-2023.





                                                                    RolesData.WorkflowStep.AssignedRole = {
                                                                        Role: tmpRole, // Pick the first one.
                                                                        RoleName: null, // This will get populated a bit lower in this code.
                                                                        OnBehalfOf: true,
                                                                        bwWorkflowTaskItemId: tmpBwWorkflowTaskItemId
                                                                    };
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                    console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //
                                                    // end: Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                    //

                                                    if (!RolesData.WorkflowStep.AssignedRole.Role) {

                                                        //
                                                        // THERE IS NO ASSIGNED ROLE IN THIS STEP.
                                                        //
                                                        console.log('No roles have been asigned to this user.');
                                                        debugger;
                                                        var html;
                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                            // The code should never get here, because the Workflow Administrator (ADMIN) gets assigned roles like "On behalf of...". 10-26-2022.
                                                            html = 'No roles have been asigned to this user, but as an ADMIN you can edit this request.';
                                                        } else {
                                                            html = 'No roles have been asigned to this user. xcx23234.';
                                                        }
                                                        $('#' + requestDialogId).find('#budgetrequestform').find('#spanRequestForm_Instructions').html(html);


                                                        //var html = '';

                                                        //html += 'THERE IS NO ASSIGN ROLE IN THIS STEP. This is probably because this means the ADMIN has to intervene to move the workflow along.';
                                                        //html += '<button title="adminMoveWorkflowToNextStep" class="BwButton350" onclick="$(\'.bwRequest\').bwRequest(\'adminMoveWorkflowToNextStep\');">ADMIN - MOVE TO NEXT STEP</button>';
                                                        //html += '<br />';

                                                        //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequestId, bwRequestTypeId, html, 'xcx445566-5');


                                                    } else {

                                                        // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId); // 10-7-2022

                                                        //alert('Just set the value in [budgetrequestform] for bwworkflowtaskitemid: ' + RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId);



                                                        //
                                                        // Step 6: Populate "RoleName" for all roles.
                                                        //
                                                        if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) {
                                                            for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                // Populate RoleName for AssignedRole.
                                                                if (RolesData.WorkflowStep.AssignedRole.Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                    //assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    //RolesData.WorkflowStep.AssignedRole.RoleName = assign["@RoleName"]; // Populate the RoleName.
                                                                    RolesData.WorkflowStep.AssignedRole.RoleName = RolesData.WorkflowStep.Assign["@RoleName"]; // Populate the RoleName.
                                                                }
                                                                // Populate RoleName for RequestingUser.AssignedRolesForThisWorkflowStep.
                                                                for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                    if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                        break;
                                                                    }
                                                                }
                                                                // Populate RoleName for WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                    for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                        if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                            RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        //
                                                        // end: Step 6: Populate "RoleName" for all roles.
                                                        //

                                                    }




                                                    var RolesData2 = {
                                                        RequestingUser: RolesData.RequestingUser,
                                                        WorkflowAdmin: RolesData.WorkflowAdmin,
                                                        WorkflowStep: {
                                                            AssignedRole: RolesData.WorkflowStep.AssignedRole,
                                                            AllRolesInThisWorkflowStep: RolesData.WorkflowStep.AllRolesInThisWorkflowStep
                                                        }
                                                    };

                                                    console.log('xcx3243 RolesData: ' + JSON.stringify(RolesData2)); // THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.');
                                                    //alert('xcx3243 RolesData2: ' + JSON.stringify(RolesData2));

                                                    //
                                                    // Display the buttons.
                                                    //
                                                    if (!RolesData.WorkflowStep.Assign) {
                                                        // debugger;
                                                        //
                                                        // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                        //
                                                        var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                var canvas = document.getElementById("myCanvas");
                                                                if (canvas) {
                                                                    // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                    var body = document.getElementsByTagName('body')[0];
                                                                    var clientWidth = body.scrollWidth;
                                                                    var clientHeight = Math.max(
                                                                        body.scrollHeight, document.documentElement.scrollHeight,
                                                                        body.offsetHeight, document.documentElement.offsetHeight,
                                                                        body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                    );
                                                                    // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                    // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                    // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                    canvas.width = clientWidth;
                                                                    canvas.height = clientHeight;
                                                                }

                                                                var html = '';
                                                                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

                                                                thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-6-1', false, RolesData.WorkflowStep.Assign);







                                                                // 10-4-2022 copied from elsewhere

                                                                var workflowStepHtml = '';
                                                                var stepFriendlyName; // Should be able to remove this at some pointin the future.
                                                                if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                } else {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                }

                                                                workflowStepHtml += '<span style="font-weight:bold;">';
                                                                workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                workflowStepHtml += '   </span>';
                                                                workflowStepHtml += '</span>';
                                                                workflowStepHtml += '<br />';

                                                                // spanRequestForm_WorkflowAndRoleDetails
                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;

                                                                // 10-4-2022 copied from elsewhere



                                                                console.log('xcx987070-1 Display the checklists here... 10-25-2022');

                                                                //
                                                                // Display the checklists here... 10-25-2022
                                                                //
                                                                var checklists = JSON.parse(bwBudgetRequest.bwRequestJson).Checklists;
                                                                if (checklists) {
                                                                    var checklistsHtml = '';
                                                                    checklistsHtml += 'Completed checklist(s):';
                                                                    checklistsHtml += '<br />';
                                                                    for (var i = 0; i < checklists.length; i++) {
                                                                        var checklist = JSON.parse(checklists[i]);
                                                                        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + bwBudgetRequest.ProjectTitle + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                        checklistsHtml += '<br />';
                                                                    }
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                } else {
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                }
                                                                //
                                                                //



                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });

                                                    } else {



                                                        //// This just handles whether it is an array or not. Maybe it will go away someday... 12-21-2022
                                                        //var assign;

                                                        //if (RolesData.WorkflowStep.Assign.length) {
                                                        //    if (RolesData.WorkflowStep.Assign.length == 1) {
                                                        //        assign = RolesData.WorkflowStep.Assign[0];
                                                        //    } else {
                                                        //        displayAlertDialog('Error in bwRequest.js.displayRequestForm(). xcx112233 Invalid value for RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                        //    }
                                                        //} else {
                                                        //    assign = RolesData.WorkflowStep.Assign;
                                                        //}



                                                        if (!RolesData.WorkflowStep.Assign) {
                                                            alert('xcx112233 NO VALUE FOR RolesData.WorkflowStep.Assign HERE..??????');
                                                        }





                                                        //
                                                        // The user plays a role in the workflow, so we render the form for them here, with the correct buttons, etc.
                                                        //
                                                        var allowRequestModifications = RolesData.WorkflowStep.Assign["@AllowRequestModifications"];
                                                        console.log('');
                                                        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                        console.log('The user plays a role in the workflow. allowRequestModifications: ' + allowRequestModifications + ', RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                        console.log('');
                                                        //
                                                        // We need to check if there is user(s) assigned in this role. Ajax call! 12-24-2021.
                                                        //
                                                        var onBehalfOf_RoleId = RolesData.WorkflowStep.Assign["@Role"];
                                                        var onBehalfOf_RoleName = RolesData.WorkflowStep.Assign["@RoleName"];
                                                        debugger;
                                                        $.ajax({
                                                            url: thiz.options.operationUriPrefix + "_bw/UserRole2/" + workflowAppId + "/" + onBehalfOf_RoleId, // pass workflowAppId, as well as roleId in order to get the list of users who belong to the role.
                                                            dataType: "json",
                                                            contentType: "application/json",
                                                            type: "Get",
                                                            success: function (result) {
                                                                try {
                                                                    //
                                                                    // Display the role members.
                                                                    //
                                                                    // debugger;
                                                                    var html = '';
                                                                    var roleMember_participantId = '';
                                                                    var roleMember_participantEmail = '';
                                                                    var roleMember_participantFriendlyName = '';

                                                                    if (result.length > 0) {
                                                                        // Participants were found that fill this role.
                                                                        roleMember_participantId = result[0].bwParticipantId;
                                                                        roleMember_participantEmail = result[0].bwParticipantEmail;
                                                                        roleMember_participantFriendlyName = result[0].bwParticipantFriendlyName;
                                                                    } else {
                                                                        // No participants were found that fill this role.
                                                                    }

                                                                    var roleMember = {
                                                                        roleMember_participantId: roleMember_participantId,
                                                                        roleMember_participantEmail: roleMember_participantEmail,
                                                                        roleMember_participantFriendlyName: roleMember_participantFriendlyName
                                                                    }

                                                                    var stepName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                    var stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];

                                                                    // 
                                                                    // THIS IS THE ONLY PLACE WHERE THE BUTTONS ARE CREATED AT THE TOP OF A REQUEST FORM FOR WORKFLOW PARTICIPANTS. They reflect the workflow step json Actions section. 12-23-2021.
                                                                    // 
                                                                    //

                                                                    if (!allowRequestModifications || allowRequestModifications == 'undefined') {
                                                                        allowRequestModifications = false;
                                                                    } else {

                                                                    }


                                                                    //
                                                                    // Display the instructions. New version 12-29-2021
                                                                    //
                                                                    var instructions = '';

                                                                    var workflowStepHtml = '';
                                                                    var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                    if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                    } else {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                    }

                                                                    workflowStepHtml += '<span style="font-weight:bold;">';
                                                                    workflowStepHtml += '   <span xcx="342352-1-yy" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + bwBudgetRequest.Title + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\');">';
                                                                    workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                    workflowStepHtml += '   </span>';
                                                                    workflowStepHtml += '</span>';
                                                                    workflowStepHtml += '<br />';






                                                                    //alert('xcx555867 selectedRaciRole: ' + selectedRaciRole + ', selectedRoles: ' + JSON.stringify(selectedRoles) + ', assign["@Role"]: ' + assign["@Role"]);


                                                                    //alert('xcx5554 bwWorkflowTasks: ' + JSON.stringify(bwWorkflowTasks));


                                                                    var roleDropDown_html = '';

                                                                    if (!(brData.RequestingUser.RoleIds.includes('ADMIN') || selectedRaciRole)) {

                                                                        // This user does not belong to a role present in this workflow step.
                                                                        roleDropDown_html += 'This user does not belong to a role present in this workflow step'; // This is the whole sentence that will be displayed.

                                                                    } else {

                                                                        //
                                                                        // Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022
                                                                        //

                                                                        console.log('Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022');

                                                                        //alert('xcx123124 RolesData.WorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep));

                                                                        // Assigned Roles:
                                                                        //displayAlertDialog('xcx235366 RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep));

                                                                        // This user belongs to these Roles:
                                                                        //displayAlertDialog('xcx235366 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));

                                                                        // This user can act On Behalf Of these Roles:
                                                                        //displayAlertDialog('xcx235366 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                                        roleDropDown_html += '<select xcx="34234-1" id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'selectedRaciRole_OnChange\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;" >';

                                                                        for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                            if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {

                                                                                // FUDGE
                                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                    if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                        if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName) {
                                                                                            if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == 'ADMIN') {
                                                                                                RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = 'Workflow Administrator';
                                                                                            } else {
                                                                                                alert('In xcx32536(). No RoleName value for Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        alert('xcx1214-1 INVALID VALUE(S) FOR Role and/or RoleName while creating the role drop-down.');
                                                                                    }
                                                                                }
                                                                                // end: FUDGE

                                                                                // This is the selected option in the drop down.
                                                                                roleDropDown_html += '<option xcx="34234-1-1" style="font-size:30pt;" selected value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                                roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                                roleDropDown_html += '</option>';

                                                                            } else {

                                                                                var msg = 'xcx2312 i: ' + i + ', RoleName/Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')';
                                                                                console.log(msg);

                                                                                roleDropDown_html += '<option xcx="34234-1-2" style="font-size:30pt;" value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                                roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                                roleDropDown_html += '</option>';
                                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                    alert('xcx1214-2 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                                }

                                                                            }
                                                                        }
                                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // This user is a Workflow Administrator (ADMIN).
                                                                            for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                                if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                    // This is the selected option in the drop down.
                                                                                    roleDropDown_html += '<option xcx="34234-1-3" style="font-size:30pt;" selected value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                                    roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                                    roleDropDown_html += '</option>';
                                                                                    if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                        debugger;
                                                                                        alert('xcx1214-3 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');

                                                                                    }

                                                                                } else {
                                                                                    roleDropDown_html += '<option xcx="34234-1-4" style="font-size:30pt;" value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                                    roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                                    roleDropDown_html += '</option>';
                                                                                    if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                        alert('xcx1214-4 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        roleDropDown_html += '</select>';
                                                                        //
                                                                        // end: Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 2-6-2022
                                                                        //


                                                                        //alert('xcx231234213 Is this where we need to display checklists??????');



                                                                        if (allowRequestModifications == true) {
                                                                            instructions += '<table style="float:right;width:85%;">';

                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                            instructions += workflowStepHtml;
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';

                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                            instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-1
                                                                            //instructions += '       </td>';
                                                                            //instructions += '   </tr>';
                                                                            //instructions += '   <tr>';
                                                                            //instructions += '       <td>';
                                                                            instructions += '<div style="float:right">' + roleDropDown_html + '</div>'; // float this to the right so that if it wraps it still looks Ok. 2-12-2022
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';
                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td>';
                                                                            instructions += '           You are allowed to modify this request.';
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';
                                                                            instructions += '</table>';

                                                                            //instructions += 'Your role  as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are allowed to modify this request.';
                                                                        } else {
                                                                            instructions += '<table style="float:right;width:85%;">';

                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                            instructions += workflowStepHtml;
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';

                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                            instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-2
                                                                            //instructions += '       </td>';
                                                                            //instructions += '   </tr>';
                                                                            //instructions += '   <tr>';
                                                                            //instructions += '       <td>';
                                                                            instructions += '<div style="float:right">' + roleDropDown_html + '</div>';
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';
                                                                            instructions += '   <tr>';
                                                                            instructions += '       <td>';
                                                                            instructions += '           You are not allowed to modify this request, but you can add comments.';
                                                                            instructions += '       </td>';
                                                                            instructions += '   </tr>';
                                                                            instructions += '</table>';


                                                                            //instructions += 'Your role as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are not allowed to modify this request.';
                                                                        }

                                                                    }
                                                                    //
                                                                    // end: New code to integrate the drop down into the sentence better. 2-6-2022
                                                                    //

                                                                    instructions += '<br />';

                                                                    //instructions += '<span style="cursor:pointer;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequests[0].ProjectTitle + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\');">';
                                                                    //instructions += 'Current workflow step: ' + stepFriendlyName;
                                                                    //instructions += '</span>';
                                                                    //if (workflow.Steps.Step[stepIndex]["@Timeout"]) {
                                                                    //    instructions += '&nbsp;(' + workflow.Steps.Step[stepIndex]["@Timeout"] + ' ' + workflow.Steps.Step[stepIndex]["@TimeoutUnits"] + ')';
                                                                    //}
                                                                    //instructions += '&nbsp;';
                                                                    //var raciTooltip = 'RACI: ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'R = Responsible (also Recommender)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'I = Informed (also Informee)  ';
                                                                    //instructions += '<br />';
                                                                    //var tmpRaciRoleString = '';
                                                                    //if (!assign) {
                                                                    //    tmpRaciRoleString = 'NO ASSIGN STEP IN THE WORKFLOW xcx342878';
                                                                    //} else {
                                                                    //    // debugger;
                                                                    //    var roleCategory = assign["@RoleCategory"];
                                                                    //    if (!(roleCategory == 'Approver' || roleCategory == 'Collaborator' || roleCategory == 'Informed')) {
                                                                    //        // Unexpected value for RoleCategory
                                                                    //        tmpRaciRoleString = 'Unexpected value for RoleCategory: ' + roleCategory + '.xcx49964';
                                                                    //    } else {
                                                                    //        switch (roleCategory) {
                                                                    //            case 'Approver':
                                                                    //                tmpRaciRoleString = '<span style="font-weight:bold;color:tomato;">Approver</span>/Collaborator/Informed';
                                                                    //                break;
                                                                    //            case 'Collaborator':
                                                                    //                tmpRaciRoleString = 'Approver/<span style="font-weight:bold;color:tomato;">Collaborator</span>/Informed';
                                                                    //                break;
                                                                    //            case 'Informed':
                                                                    //                tmpRaciRoleString = 'Approver/Collaborator/<span style="font-weight:bold;color:tomato;">Informed</span>';
                                                                    //                break;
                                                                    //        }
                                                                    //    }
                                                                    //}

                                                                    $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = instructions;
                                                                    //
                                                                    // End: Display the instructions.
                                                                    //

                                                                    //alert('The role drop-down has been displayed.');
                                                                    console.log('>>>>>>>>>>>>>>>>> The role drop-down has been displayed.');
                                                                    // debugger;



                                                                    //
                                                                    // Double check here to make sure the right item is selected in the drop-down for the role.
                                                                    //
                                                                    var dropDownElement = $('#' + requestDialogId).find('#selectedRaciRole')[0];
                                                                    var selectedValue = $(dropDownElement).find('option:selected').val();
                                                                    if (!selectedValue) {

                                                                        alert('xcx12312-1 Error: The role drop-down does not have a selected value. This process cannot continue.');
                                                                        displayAlertDialog('Error: The role drop-down does not have a selected value. This process cannot continue.');

                                                                    } else {

                                                                        var selected_indropdown_bwWorkflowTaskItemId = $(dropDownElement).find('option:selected').attr('bwworkflowtaskitemid');
                                                                        var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                        if (selected_indropdown_bwWorkflowTaskItemId && form_bwWorkflowTaskItemId && (selected_indropdown_bwWorkflowTaskItemId == form_bwWorkflowTaskItemId)) {
                                                                            // All is well, do nothing.

                                                                            //alert('In xcx34234(). Setting value for selected_indropdown_bwWorkflowTaskItemId and setting [bwWorkflowTaskItemId] in [budgetrequestform]: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                        } else {
                                                                            // Something is up. happened again 11-08-2022
                                                                            //alert('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                            displayAlertDialog('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId + ', request title: ' + 'xcx21312' + ', workflow step: ' + stepFriendlyName + ', bwBudgetRequest.bwRequestJson: ' + JSON.stringify(bwBudgetRequest.bwRequestJson));
                                                                        }


                                                                        //if (bwWorkflowTaskItemId) {
                                                                        //    if (bwWorkflowTaskItemId != selected_indropdown_bwWorkflowTaskItemId) {
                                                                        //        alert('Error: xcx12423 bwWorkflowTaskItemId does not match with selected_indropdown_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);
                                                                        //    } else {
                                                                        //        // Do nothing, the budgetrequestform should be populated.
                                                                        //        var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                        //        if (bwWorkflowTaskItemId != form_bwWorkflowTaskItemId) {
                                                                        //            alert('Error: xcx12423 bwWorkflowTaskItemId does not match with form_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                        //        }
                                                                        //    }
                                                                        //} else {
                                                                        //    // This assumes that the budgetrequestform is not present. We will check!
                                                                        //    var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                        //    if (form_bwWorkflowTaskItemId) {
                                                                        //        alert('Error: xcx12423 form_bwWorkflowTaskItemId is present. Unrecoverable error. form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                        //    } else {
                                                                        //        // This is what we expect, so just store the value in the form.
                                                                        //        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', selected_indropdown_bwWorkflowTaskItemId);

                                                                        //        alert('xcx214234 role drop down has been rendered. selectedRaciRole: ' + selectedRaciRole + ', assign["@Role"]: ' + assign["@Role"] + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                        //    }
                                                                        //}

                                                                    }
                                                                    //
                                                                    // end: Double check here to make sure the right item is selected in the drop-down for the role.
                                                                    //



                                                                    $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                                                    // 2-11-2022 REMOVED THIS FOR NOW, MAY PUT BACK FOR TESTING>?
                                                                    //
                                                                    // Display details in the error section. 
                                                                    //
                                                                    //var html = '';
                                                                    //html += '<table>';

                                                                    //if (brData.RequestingUser.ParticipantRole == 'owner') { // You are the owner of this budget request system.
                                                                    //    html += '  <tr>';
                                                                    //    html += '    <td colspan="2">This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-1:';
                                                                    //    html += '    ' + brData.RequestingUser.ParticipantRole + ' - '; // + '</td>';
                                                                    //    html += '    <span onclick="$(\'.bwRequest\').bwRequest(\'viewThisBudgetRequestSystemDetailsDialog\');" style="text-decoration:underline;cursor:pointer;" title="xClick here to view details about this budget request system...">';
                                                                    //    html += '    You are the owner of this budget request system.xcx1';
                                                                    //    html += '    </span>';
                                                                    //    html += ' - Role: ' + assign["@RoleName"];
                                                                    //    html += '    </td>';
                                                                    //    html += '  </tr>';

                                                                    //} else {
                                                                    //    html += '  <tr>';
                                                                    //    html += '    <td>This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-2:</td>';
                                                                    //    html += '    <td>' + brData.RequestingUser.ParticipantRole + ' - Role: ' + assign["@RoleName"] + '</td>';
                                                                    //    html += '  </tr>';
                                                                    //}

                                                                    //html += '</table>';

                                                                    //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = html;
                                                                    //
                                                                    // end: Display details in the error section. 
                                                                    //





                                                                    //
                                                                    // Checklists.
                                                                    //
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // First we clear the element.

                                                                    //var cond = RolesData.WorkflowStep.Assign["@Cond"];

                                                                    if (RolesData.WorkflowStep.Assign["@Checklists"]) {
                                                                        var WorkflowStep_Assign_Checklists = RolesData.WorkflowStep.Assign["@Checklists"];
                                                                        console.log('xcx31241 This workflow assignment has checklists. WorkflowStep_Assign_Checklists: ' + JSON.stringify(WorkflowStep_Assign_Checklists));

                                                                        //if (cond) {

                                                                        //    // Remove duplicates. cond needs to be converted to JSON someday.
                                                                        //    console.log('I HATE THIS BUT I AM GOING TO REMOVE DUPLICATES HERE. BAD PRACTICE!!!!!!!!!!!!!!!!!!!!!!!! 4-16-2020.');

                                                                        //    if (cond && cond.split('$ChecklistsRequired~')[1]) {
                                                                        //        var checklistGuidArray = cond.split('$ChecklistsRequired~')[1].split(',');
                                                                        //        if (checklistGuidArray) {
                                                                        //            for (var i1 = 0; i1 < checklistGuidArray.length; i1++) {
                                                                        //                if (!newChecklistsArray.includes(checklistGuidArray[i1])) newChecklistsArray.push(checklistGuidArray[i1]);
                                                                        //            }
                                                                        //            cond = '$ChecklistsRequired~' + newChecklistsArray.toString();
                                                                        //        }
                                                                        //    }
                                                                        //}

                                                                        var BudgetRequest_bwRequestJson_Checklists = JSON.parse(bwBudgetRequest.bwRequestJson).Checklists; // These are the checklists that have already been saved in the request.

                                                                        // Populate checklistsAlreadyCompleted.
                                                                        var checklistsAlreadyCompleted = [];
                                                                        for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                            // Check if it has been saved/completed already.
                                                                            if (BudgetRequest_bwRequestJson_Checklists) {
                                                                                for (var j = 0; j < BudgetRequest_bwRequestJson_Checklists.length; j++) {
                                                                                    var brChecklist = JSON.parse(BudgetRequest_bwRequestJson_Checklists[j]);
                                                                                    if (brChecklist.bwChecklistTemplatesId == WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId) {
                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brChecklist.bwChecklistTemplatesId,
                                                                                            html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + bwBudgetRequest.ProjectTitle + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + brChecklist.Title + '</span>'
                                                                                        }
                                                                                        checklistsAlreadyCompleted.push(checklistJson); // Already completed, so put in this array.
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        // Populate checklistsRemainingToBeCompleted.
                                                                        var checklistsRemainingToBeCompleted = [];
                                                                        for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                            var checklistHasAlreadyBeenCompleted = false;
                                                                            for (var j = 0; j < checklistsAlreadyCompleted.length; j++) {
                                                                                if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == checklistsAlreadyCompleted[j].bwChecklistTemplatesId) {
                                                                                    checklistHasAlreadyBeenCompleted = true;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (checklistHasAlreadyBeenCompleted != true) {
                                                                                for (var j = 0; j < brData.OrganizationChecklists.length; j++) { // OrganizationChecklists
                                                                                    if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                        var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;
                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brData.OrganizationChecklists[j].bwChecklistTemplatesId,
                                                                                            html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.OrganizationChecklists[j].bwChecklistTemplatesId + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</span>'
                                                                                        }
                                                                                        checklistsRemainingToBeCompleted.push(checklistJson); // The checklists remaining to be completed get stored in this array.
                                                                                    }
                                                                                }
                                                                            }
                                                                        }


                                                                        var checklistsHtml = '';

                                                                        checklistsHtml += '<div>';

                                                                        // Display "All checklists". Everyone sees this list.
                                                                        thiz.options.Checklists = brData.OrganizationChecklists; //[]; // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                        if (brData.Checklists.length > 0) {
                                                                            if (brData.Checklists.length == 1) {
                                                                                checklistsHtml += 'Checklist to be completed for this request: ';
                                                                            } else {
                                                                                checklistsHtml += 'Checklists to be completed for this request: '; // 12-31-2022 // brData.Checklists[j]
                                                                            }

                                                                            checklistsHtml += '<ul>';
                                                                            alert('xcx213421 brData.Checklists: ' + JSON.stringify(brData.Checklists));
                                                                            debugger;
                                                                            for (var i = 0; i < brData.Checklists.length; i++) {
                                                                                for (var j = 0; j < brData.OrganizationChecklists.length; j++) {
                                                                                    if (brData.Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                        var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;

                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brData.Checklists[i].bwChecklistTemplatesId,
                                                                                            html: '<li style="cursor:pointer;text-decoration:underline;text-align:left;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.Checklists[i].bwChecklistTemplatesId + '\', \'' + String(bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + bwBudgetRequest.Title + '\', \'' + bwBudgetRequest.bwRequestType + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</li>'
                                                                                        }

                                                                                        checklistsHtml += checklistJson.html;
                                                                                        thiz.options.Checklists.push(brData.Checklists[i]); // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                                    }
                                                                                }
                                                                            }
                                                                            checklistsHtml += '</ul>';

                                                                            checklistsHtml += '</div>';
                                                                        }

                                                                        //if (cond) {

                                                                        //console.log('xcx99223 In bwRequest.xx(). cond: ' + JSON.stringify(cond));

                                                                        if ((checklistsAlreadyCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0)) {

                                                                            checklistsHtml += '<div>';

                                                                            // Display "Completed Checklists".
                                                                            if (checklistsAlreadyCompleted.length > 0) {
                                                                                if (checklistsAlreadyCompleted.length == 1) {
                                                                                    checklistsHtml += 'Completed checklist: ';
                                                                                } else {
                                                                                    checklistsHtml += 'Completed checklists: ';
                                                                                }
                                                                                //checklistsAlreadyCompleted = thiz.removeDuplicates(JSON.parse(JSON.stringify(checklistsAlreadyCompleted)));
                                                                                for (var i = 0; i < checklistsAlreadyCompleted.length; i++) {
                                                                                    checklistsHtml += '<span xcx="xcx99205476" style="white-space:nowrap;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                                                                    checklistsHtml += '&nbsp;' + checklistsAlreadyCompleted[i].html;
                                                                                    checklistsHtml += '</span>';
                                                                                    checklistsHtml += '<br />';
                                                                                }
                                                                            }

                                                                            // Display "Checklists to be completed".
                                                                            if (checklistsRemainingToBeCompleted.length > 0) {
                                                                                checklistsHtml += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                                                                checklistsHtml += '&nbsp;';
                                                                                if (checklistsRemainingToBeCompleted.length == 1) {
                                                                                    checklistsHtml += 'Complete the following checklist before you Approve: ';
                                                                                } else {
                                                                                    checklistsHtml += 'Complete the following checklist(s) before you Approve: ';
                                                                                }

                                                                                checklistsHtml += '<ul>';
                                                                                for (var i = 0; i < checklistsRemainingToBeCompleted.length; i++) {

                                                                                    checklistsHtml += '<li style="cursor:pointer;text-decoration:underline;text-align:left;" >' + checklistsRemainingToBeCompleted[i].html + '</li>'

                                                                                }
                                                                                checklistsHtml += '</ul>';

                                                                                checklistsHtml += '<br />';

                                                                            }

                                                                            checklistsHtml += '</div>';

                                                                        }

                                                                        $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                    }

                                                                    //$('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                    //
                                                                    // end: Display checklists.
                                                                    //




                                                                    //
                                                                    // Display the buttons.
                                                                    //
                                                                    thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequest.bwBudgetRequestId, bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-7', false, RolesData.WorkflowStep.Assign, RolesData.RequestingUser, roleMember, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, allowRequestModifications, checklistsRemainingToBeCompleted);
                                                                    //
                                                                    // end: Display the buttons.
                                                                    //






                                                                    //
                                                                    // Display the instructions.
                                                                    //
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = ''; // First, we clear the element.

                                                                    instructions = '';
                                                                    if (RolesData.WorkflowStep.Assign && RolesData.WorkflowStep.Assign["@Instructions"]) {
                                                                        instructions += RolesData.WorkflowStep.Assign["@Instructions"]; // The workflow had "Instructions" specified.
                                                                        //instructions += 'WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1';
                                                                        console.log('WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1');
                                                                    } else {

                                                                        console.log('In bwRequest.js.xx(). COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1');
                                                                        //instructions += ' - COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1';

                                                                    }
                                                                    if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length > 0) {
                                                                        instructions += 'Complete the required checklists before approving this request.';
                                                                        instructions += '<br />';
                                                                    }
                                                                    if (instructions && (instructions != 'undefined')) {
                                                                        console.log('');
                                                                        console.log('**********');
                                                                        console.log('In bwRequest.js.renderRequestForm(). Displaying instructions from the workflow JSON in the request form header. instructions: ' + instructions);
                                                                        console.log('**********');
                                                                        console.log('');
                                                                        $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                                        //alert('The instructions have been displayed.');
                                                                        console.log('The instructions have been displayed.');
                                                                        // debugger;

                                                                    }
                                                                    // end: Display the instructions.


                                                                    //
                                                                    //
                                                                    // Started integration of closeouts today. 1-13-2024.
                                                                    //
                                                                    //

                                                                    // We need to check if closeouts are enabled for this request type.

                                                                    // bwEnabledRequestTypes
                                                                    //var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');
                                                                    //displayAlertDialog('xcx213124321 requestType: ' + JSON.stringify(requestType));
                                                                    if (requestType.closeoutsEnabled == true) {

                                                                        var closeoutHtml = '';
                                                                        closeoutHtml += '<br />';
                                                                        // <a href="/about/test.html"
                                                                        debugger;
                                                                        closeoutHtml += '<span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayCloseoutInDialog\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.Title + '\');" xcx="xcx2134213-1" >View closeout.</span>';
                                                                        $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += closeoutHtml;

                                                                    } else {

                                                                        //
                                                                        // 1-17-2024 We don't need to show that closeouts arent enabled.
                                                                        //

                                                                        //var closeoutHtml = '';
                                                                        //closeoutHtml += '<br />';
                                                                        //// <a href="/about/test.html"
                                                                        //debugger;
                                                                        //closeoutHtml += 'xcx12123123 closeouts not enabled';
                                                                        //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += closeoutHtml;

                                                                    }

                                                                    //
                                                                    //
                                                                    // end: Started integration of closeouts today. 1-13-2024.
                                                                    //
                                                                    //


                                                                    //
                                                                    //
                                                                    // Started integration of supplementals today. 4-6-2024.
                                                                    //
                                                                    //

                                                                    var supplementalHtml = '';
                                                                    //alert('xcx33346 requestType.supplementalsEnabled: ' + requestType.supplementalsEnabled);

                                                                    if (bwBudgetRequest.IsSupplementalRequest && (bwBudgetRequest.IsSupplementalRequest == true)) {
                                                                        supplementalHtml += '<br /><br />';
                                                                        supplementalHtml += 'THIS IS A SUPPLEMENTAL TO REQUEST [' + bwBudgetRequest.RelatedBudgetRequestId + ']';
                                                                        supplementalHtml += '<br />';
                                                                    }

                                                                    if (requestType.supplementalsEnabled == true) {

                                                                        // Our gold outlined drop area.
                                                                        supplementalHtml += '<br /><br />';
                                                                        supplementalHtml += `<div allow="clipboard-read;clipboard-write;" contenteditable="true" class="FormCreateASupplementalRequestButton_Dropzone" style="height:100%;border:1px solid goldenrod;background-color:#f6f6f6;color:gray;font-size:10pt;padding:5px 15px 5px 15px;float:right;color:goldenrod;">Drag-and-drop to add Supplementals here.</div>`;
                                                                        supplementalHtml += '<br /><br />';

                                                                        //debugger;
                                                                        //// Our list of supplementals.
                                                                        //var supplementalCount = brData.SupplementalRequests.length;
                                                                        //supplementalHtml += '<span style="text-decoration:none;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displaySupplementalInDialog\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.Title + '\');" xcx="xcx2134213" >Currently there are ' + supplementalCount + ' supplementals for this request.</span>';
                                                                        //supplementalHtml += '<br /><br />';

                                                                        if (brData && brData.SupplementalRequests && brData.SupplementalRequests.length && (brData.SupplementalRequests.length > 0)) {
                                                                            for (var i = 0; i < brData.SupplementalRequests.length; i++) {
                                                                                supplementalHtml += '<div>';
                                                                                supplementalHtml += '   <span style="text-decoration:underline;cursor:pointer;" ';
                                                                                debugger;

                                                                                // showRowHoverDetails: function (bwBudgetRequest, task, hoverElement) {
                                                                                supplementalHtml += 'onmouseenter="$(\'.bwCoreComponent\').bwCoreComponent(\'showRowHoverDetails\', \'' + encodeURIComponent(JSON.stringify(brData.SupplementalRequests[i])) + '\', \'' + '' + '\', this);" ';
                                                                                supplementalHtml += 'onmouseleave="$(\'.bwCoreComponent\').bwCoreComponent(\'hideRowHoverDetails\');" ';

                                                                                supplementalHtml += ' onclick="$(\'.bwRequest\').bwRequest(\'displayArInDialog\',\'https://budgetworkflow.com\', \'' + brData.SupplementalRequests[i].bwBudgetRequestId + '\', \'' + brData.SupplementalRequests[i].Title + '\', \'Test 1\', \'' + brData.SupplementalRequests[i].Title + '\');" >';
                                                                                supplementalHtml += brData.SupplementalRequests[i].Title + ' "' + brData.SupplementalRequests[i].ProjectTitle.substring(0, 15) + '"...</span>';

                                                                                supplementalHtml += '<img src="/images/trashbin.png" style="height:20px;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'removeSupplementalFromARequest\', \'' + brData.SupplementalRequests[i].bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwBudgetRequestId + '\');">';
                                                                                supplementalHtml += '</div>';
                                                                            }
                                                                        }






                                                                        //supplementalHtml += '<span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displaySupplementalInDialog\', \'' + bwBudgetRequest.bwBudgetRequestId + '\', \'' + bwBudgetRequest.bwRequestTypeId + '\', \'' + bwBudgetRequest.Title + '\');" xcx="xcx2134213" >[spanCreateSupplementalRequestButtonPlaceholder]</span>';

                                                                        //supplementalHtml += '<br />';
                                                                        // THIS IS A DROP ZONE FOR EXECUTIVE SUMMARIES. THIS IS HOW WE ADD SUPPLEMENTALS. <<<<<<<< 4-6-2024.
                                                                        //supplementalHtml += '<input allow="clipboard-read;clipboard-write;" contenteditable="true" class="FormCreateASupplementalRequestButton_Dropzone" onclick="cmdCreateSupplementalAr(\'' + 'budgetRequestId' + '\', \'' + 'functionalAreaId' + '\', \'' + 'pmAccountId' + '\', \'' + 'brTitle' + '\');" type="button" name="SupplementalAr" id="btnSupplementalAr" value="New Supplemental Request" />';
                                                                        //supplementalHtml += '<input class="FormCreateASupplementalRequestButton_Dropzone" onclick="cmdCreateSupplementalAr(\'' + 'budgetRequestId' + '\', \'' + 'functionalAreaId' + '\', \'' + 'pmAccountId' + '\', \'' + 'brTitle' + '\');" type="button" name="SupplementalAr" id="btnSupplementalAr" value="New Supplemental Request" />';

                                                                        //supplementalHtml += '<div allow="clipboard-read;clipboard-write;" contenteditable="true" class="FormCreateASupplementalRequestButton_Dropzone" onclick="cmdCreateSupplementalAr(\'' + 'budgetRequestId' + '\', \'' + 'functionalAreaId' + '\', \'' + 'pmAccountId' + '\', \'' + 'brTitle' + '\');" type="button" name="SupplementalAr" id="btnSupplementalAr" >New Supplemental Request</div>';



                                                                        $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += supplementalHtml;

                                                                        var dropzone = $('#' + requestDialogId).find('.FormCreateASupplementalRequestButton_Dropzone')[0];


                                                                        //
                                                                        // BROWSER COMPATIBILITY FOR DRAG-AND-DROP and RIGHT-CLICK to PASTE.
                                                                        //

                                                                        // BRAVE has full support:
                                                                        //      - Drag and drop to paste (invokes the drop event) - DataTransfer
                                                                        //      - Right click to paste (invokes the paste event) - ClipboardData

                                                                        // FIREFOX has partial support:
                                                                        //      - Drag and drop to paste <<< NO SUPPORT/DOESNT WORK >>> STILL DOESNT WORK AFTER NEW CHANGES TO BACKGROUND IMAGE.
                                                                        //      - Right click to paste (invokes the paste event) - ClipboardData

                                                                        // FIXED >>> EDGE has full support: The issue was the image!!!! I made it a background-image to circumvent this behaviour. 11-27-2023.
                                                                        //      - Drag and drop to paste (invokes the drop event) - DataTransfer
                                                                        //      - Right click to paste <<< NO SUPPORT/DOESNT WORK. The right-click context-menu paste option displays but is disabled.

                                                                        // FIXED >>> CHROME has full support: The issue was the image!!!! I made it a background-image to circumvent this behaviour. 11-27-2023.
                                                                        //      - Drag and drop to paste (invokes the drop event) - DataTransfer
                                                                        //      - Right click to paste <<< NO SUPPORT/DOESNT WORK. The right-click context-menu paste option displays but is disabled.

                                                                        // SAFARI
                                                                        //
                                                                        //

                                                                        // CHROME on MacOs
                                                                        //
                                                                        //

                                                                        // BRAVE on MacOs
                                                                        //
                                                                        //
                                                                        //

                                                                        // READ THIS FIRST: >>>>>>>>> https://www.javascripttutorial.net/web-apis/javascript-drag-and-drop/ <<<<<<<<<<

                                                                        dropzone.addEventListener('dragenter', function (e) {
                                                                            try {
                                                                                console.log('In bwRequest.js.renderRequestForm.dropzone.dragenter().');
                                                                                //alert('In renderAndPopulateAttachmentsxx.dropzone.dragenter().');
                                                                                e.preventDefault();
                                                                            } catch (e) {
                                                                                var msg = 'Exception in bwRequest.js.renderRequestForm.dropzone.dragenter(): ' + e.message + ', ' + e.stack;
                                                                                console.log(msg);
                                                                                alert(msg);
                                                                            }
                                                                        });

                                                                        dropzone.addEventListener('dragover', function (e) {
                                                                            try {
                                                                                console.log('In bwRequest.js.renderRequestForm.dropzone.dragover().');
                                                                                //alert('In renderAndPopulateAttachmentsxx.dropzone.dragover().');
                                                                                e.preventDefault();
                                                                            } catch (e) {
                                                                                var msg = 'Exception in bwRequest.js.renderRequestForm.dropzone.drop(): ' + e.message + ', ' + e.stack;
                                                                                console.log(msg);
                                                                                alert(msg);
                                                                            }
                                                                        });

                                                                        dropzone.addEventListener('drop', function (e) {
                                                                            try {
                                                                                console.log('In bwRequest.js.renderRequestForm.dropzone.drop().');
                                                                                displayAlertDialog_Persistent('In bwRequest.js.renderRequestForm.dropzone.drop().');
                                                                                e.preventDefault();

                                                                                var gotData;
                                                                                if (e.clipboardData) {
                                                                                    console.log('In bwRequest.js.renderRequestForm.dropzone.drop(). Object is event.clipboardData.');
                                                                                    gotData = true;
                                                                                } else if (e.dataTransfer) {
                                                                                    console.log('In bwRequest.js.renderRequestForm.dropzone.drop(). Object is event.dataTransfer.');
                                                                                    gotData = true;
                                                                                } else if (window.clipboardData) {
                                                                                    console.log('In bwRequest.js.renderRequestForm.dropzone.drop(). Object is window.clipboardData.');
                                                                                    gotData = true;
                                                                                } else {

                                                                                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                                                                                        alert('FIREFOX BROWSER CANNOT DRAG-AND-DROP EXTERNAL FILES. THERE IS A WORK-AROUND: Please right click on your source file, and choose "COPY". Subsequently, right click here and choose "PASTE".');
                                                                                    } else {
                                                                                        alert('Error in bwRequest.js.renderRequestForm.dropzone.drop(). Could not find a valid DataTransfer object. e: ' + JSON.stringify(e) + ', navigator.userAgent: ' + navigator.userAgent);
                                                                                    }

                                                                                }

                                                                                if (gotData == true) {
                                                                                    //thiz.dodrop(e, bwBudgetRequestId);


                                                                                    var sourceElement_bwBudgetRequestId = e.dataTransfer.getData('text/plain');

                                                                                    var destinationElement_bwBudgetRequestId = $(e.target).closest('.budgetrequestform').attr('bwbudgetrequestid');

                                                                                    var html = '';

                                                                                    html += '<table style="width:100%;">';
                                                                                    html += '   <tr>';
                                                                                    html += '       <td style="width:90%;">';
                                                                                    html += '           <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:30pt;font-weight:bold;">Add Supplemental/Addendum Request</span>';
                                                                                    html += '           <br />';
                                                                                    html += '       </td>';
                                                                                    html += '       <td style="width:9%;"></td>';
                                                                                    html += '       <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                                                                    html += '           <span class="dialogXButton" style="font-size:30pt;font-weight:bold;" onclick="$(\'#bwRequest_AddSupplementalToRequestDialog\').dialog(\'close\');">X</span>';
                                                                                    html += '       </td>';
                                                                                    html += '   </tr>';
                                                                                    html += '</table>';
                                                                                    html += '<input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';

                                                                                    html += '<table>';
                                                                                    html += '   <tr>';
                                                                                    html += '       <td></td>';
                                                                                    html += '       <td style="text-align:left;">';
                                                                                    html += '           <span id="spanThereAreChangesToPublishText51" style="font-style:italic;color:black;font-size:20pt;">';
                                                                                    //html += '';
                                                                                    html += 'Confirm that you want to add the supplemental/addendum:';
                                                                                    html += '           </span>'; //<input value=" There are unsaved changes. Enter a description here and click Save..." type="text" id="txtNewWorkflowDescription" style="width:450px;color:grey;font-style:italic;padding:5px 5px 5px 5px;" onkeyup="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'NewWorkflowDescriptionTextBox_Onkeyup\');" />';
                                                                                    html += '       </td>';
                                                                                    html += '       <td></td>';
                                                                                    html += '   </tr>';
                                                                                    html += '</table>';

                                                                                    html += '<br />';
                                                                                    html += '<div id="bwRequest_PermanentlyDeleteRequestDialog_PermanentlyDeleteRequestxxx" class="divDialogButton" onclick="$(\'.bwRequest\').bwRequest(\'addSupplementalToRequest\', \'' + sourceElement_bwBudgetRequestId + '\', \'' + destinationElement_bwBudgetRequestId + '\');" >';
                                                                                    html += 'Add Supplemental';
                                                                                    html += '</div>';
                                                                                    html += '<br />';
                                                                                    html += '<div class="divDialogButton" onclick="$(\'#bwRequest_AddSupplementalToRequestDialog\').dialog(\'close\');">';
                                                                                    html += 'Close/Cancel';
                                                                                    html += '</div>';
                                                                                    html += '<br /><br />';

                                                                                    var div = document.getElementById('bwRequest_AddSupplementalToRequestDialog');

                                                                                    if (!div) {
                                                                                        div = document.createElement('div');
                                                                                        div.id = 'bwRequest_AddSupplementalToRequestDialog';
                                                                                        div.style.display = 'none';
                                                                                        document.body.appendChild(div); // to place at end of document
                                                                                    }
                                                                                    div.innerHTML = html;

                                                                                    $("#bwRequest_AddSupplementalToRequestDialog").dialog({
                                                                                        modal: false,
                                                                                        resizable: false,
                                                                                        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                                                                                        position: {
                                                                                            my: "middle top+12",
                                                                                            at: "middle top",
                                                                                            of: window
                                                                                        },
                                                                                        width: '1200',
                                                                                        dialogClass: 'no-close', // No close button in the upper right corner.
                                                                                        hide: false, // This means when hiding just disappear with no effects.
                                                                                        open: function () {
                                                                                            try {

                                                                                            } catch (e) {
                                                                                                console.log('Exception in xx.bwRequest_AddSupplementalToRequestDialog.open(): ' + e.message + ', ' + e.stack);
                                                                                                displayAlertDialog('Exception in xx.bwRequest_AddSupplementalToRequestDialog.open(): ' + e.message + ', ' + e.stack);
                                                                                            }
                                                                                        },
                                                                                        close: function () {
                                                                                            $('#bwRequest_AddSupplementalToRequestDialog').dialog('destroy');
                                                                                        }

                                                                                    });
                                                                                    //$('#divConfigureBusinessModelNotificationsDialog2-1').dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();

                                                                                } else {
                                                                                    alert('Error in bwRequest.js.renderRequestForm.dropzone.drop(). Could not find a valid DataTransfer object.');
                                                                                }

                                                                            } catch (e) {
                                                                                var msg = 'Exception in bwRequest.js.renderRequestForm.dropzone.drop(): ' + e.message + ', ' + e.stack;
                                                                                console.log(msg);
                                                                                alert(msg);
                                                                            }
                                                                        });

                                                                        //dropzone.addEventListener('paste', function (e) {
                                                                        //    try {
                                                                        //        console.log('In renderAndPopulateAttachments.dropzone.paste().');
                                                                        //        alert('In renderAndPopulateAttachments.dropzone.paste().');
                                                                        //        e.preventDefault();

                                                                        //        var gotData;
                                                                        //        if (e.clipboardData) {
                                                                        //            console.log('In renderAndPopulateAttachments.dropzone.paste(). Object is event.clipboardData.');
                                                                        //            gotData = true;
                                                                        //        } else if (e.dataTransfer) {
                                                                        //            console.log('In renderAndPopulateAttachments.dropzone.paste(). Object is event.dataTransfer.');
                                                                        //            gotData = true;
                                                                        //        } else if (window.clipboardData) {
                                                                        //            console.log('In renderAndPopulateAttachments.dropzone.paste(). Object is window.clipboardData.');
                                                                        //            gotData = true;
                                                                        //        } else {

                                                                        //            if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
                                                                        //                alert('FIREFOX BROWSER CANNOT DRAG-AND-DROP EXTERNAL FILES. THERE IS A WORK-AROUND: Please right click on your source file, and choose "COPY". Subsequently, right click here and choose "PASTE".');
                                                                        //            } else {
                                                                        //                alert('Error in bwAttachments.js.dropzone.paste(). Could not find a valid DataTransfer object. e: ' + JSON.stringify(e) + ', navigator.userAgent: ' + navigator.userAgent);
                                                                        //            }

                                                                        //        }

                                                                        //        if (gotData == true) {
                                                                        //            thiz.dodrop(e, bwBudgetRequestId);
                                                                        //        } else {
                                                                        //            alert('Error in bwAttachments.js.dropzone.paste(). Could not find a valid DataTransfer object.');
                                                                        //        }

                                                                        //    } catch (e) {
                                                                        //        var msg = 'Exception in bwAttachments.js.dropzone.paste(): ' + e.message + ', ' + e.stack;
                                                                        //        console.log(msg);
                                                                        //        alert(msg);
                                                                        //    }
                                                                        //});

                                                                    } else {

                                                                        //
                                                                        // 1-19-2024 We don't need to show that supplementals arent enabled.
                                                                        //

                                                                    }

                                                                    //
                                                                    //
                                                                    // end: Started integration of supplementals today. 4-6-2024.
                                                                    //
                                                                    //


                                                                    //
                                                                    // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                                                    //
                                                                    //alert('Calling populateRequestForm(). xcx3452-2-2 bwBudgetRequest.bwRequestJson XXX: ' + JSON.stringify(bwBudgetRequest.bwRequestJson));
                                                                    console.log('Calling populateRequestForm(). xcx3452-2-2 bwBudgetRequest.bwRequestJson: ' + JSON.stringify(bwBudgetRequest.bwRequestJson));
                                                                    var promise = thiz.populateRequestForm(requestDialogId, bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                                    promise.then(function () {
                                                                        try {

                                                                            // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                            var canvas = document.getElementById("myCanvas");
                                                                            if (canvas) {
                                                                                // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                                var body = document.getElementsByTagName('body')[0];
                                                                                var clientWidth = body.scrollWidth;
                                                                                var clientHeight = Math.max(
                                                                                    body.scrollHeight, document.documentElement.scrollHeight,
                                                                                    body.offsetHeight, document.documentElement.offsetHeight,
                                                                                    body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                                );
                                                                                // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                                // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                                // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                                canvas.width = clientWidth;
                                                                                canvas.height = clientHeight;
                                                                            }

                                                                            // If off the screen, re-position. 4-17-2022
                                                                            var o = $('#' + requestDialogId).dialog().closest('.ui-dialog').offset();
                                                                            //alert("Top: " + o.top + " Left : " + o.left);
                                                                            //var left = document.getElementById(requestDialogId + '_Parent').getBoundingClientRect().left;
                                                                            if (o.left < 0) {
                                                                                console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-2 left: ' + o.left);
                                                                                //alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-2 left: ' + o.left);
                                                                                $('#' + requestDialogId).dialog({
                                                                                    position: {
                                                                                        //my: "center top", at: "center top+200", of: window
                                                                                        my: "center top", at: "center top", of: window
                                                                                    }
                                                                                });
                                                                            }

                                                                            // This closes the in-browser request dialog, if this one is a popped-out window one.
                                                                            try {
                                                                                // This is in a try-catch because if the link comes from an email client, you get this error: [Blocked a frame with origin "https://shareandcollaborate.com" from accessing a cross-origin frame.]
                                                                                if (window.opener) {
                                                                                    var dialogId = 'divRequestFormDialog_' + bwBudgetRequest.bwBudgetRequestId;
                                                                                    console.log('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                    //alert('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                    window.opener.$('#' + dialogId).dialog('close');
                                                                                }
                                                                            } catch (e) { }

                                                                        } catch (e) {
                                                                            console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                        }
                                                                    });

                                                                } catch (e) {
                                                                    console.log('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                    displayAlertDialog('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                    alert('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                }

                                                            },
                                                            error: function (data) {
                                                                var msg;
                                                                if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                                                                    msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                                                                } else {
                                                                    msg = JSON.stringify(data);
                                                                }
                                                                displayAlertDialog('Error in bwRequest.js.renderRequestForm.UserRole2.fail():1: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                                                                console.log('Error in bwRequest.js.renderRequestForm.UserRole2.fail():1: ' + JSON.stringify(data));
                                                                alert('Error in bwRequest.js.renderRequestForm.UserRole2.fail():1: ' + msg);
                                                            }
                                                        });

                                                        //}
                                                    }

                                                }
                                                //}

                                                //
                                                // Render the bwLocationPicker.js widget here.
                                                //
                                                var options = {
                                                    bwTenantId: tenantId,
                                                    bwWorkflowAppId: workflowAppId,
                                                    bwParticipantId: participantId,
                                                    bwParticipantEmail: participantEmail,
                                                    bwParticipantFriendlyName: participantFriendlyName,
                                                    bwEnabledRequestTypes: bwEnabledRequestTypes,
                                                    bwOrgId: bwOrgId,
                                                    bwOrgName: bwOrgName
                                                };
                                                var $bwLocationPicker = $('#' + requestDialogId).find('#divBwLocationPicker').bwLocationPicker(options);

                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                            displayAlertDialog_Persistent('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                        }
                                    });

                                    //}

                                }

                            } catch (e) {
                                console.log('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                            }
                        }
                    });
                }

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
        }
    },
    renderRequestForm_ForTrashBin: function (brData, activeStateIdentifier, budgetRequestId, requestDialogId, participantId, workflowAppId, selectedRaciRole) {
        // THIS IS THE ONLY PLACE WHERE WE RENDER THE FORM. 1-15-2023
        try {
            var thiz = this;

            console.log('In renderRequestForm_ForTrashBin(). brData: ' + JSON.stringify(brData));

            //alert('In renderRequestForm_ForTrashBin(). DEV: WORK TO BE DONE HERE. brData: ' + JSON.stringify(brData));

            if (!brData.bwBudgetRequest.bwWorkflowAppId || !brData.bwBudgetRequest.bwBudgetRequestId) {

                alert('Error in renderRequestForm(). Unexpected value(s) for brData.bwBudgetRequest.bwWorkflowAppId: ' + !brData.bwBudgetRequest.bwWorkflowAppId + ', brData.bwBudgetRequest.bwBudgetRequestId: ' + brData.bwBudgetRequest.bwBudgetRequestId);
                displayAlertDialog('Error in renderRequestForm(). Unexpected value(s) for brData.bwBudgetRequest.bwWorkflowAppId: ' + !brData.bwBudgetRequest.bwWorkflowAppId + ', brData.bwBudgetRequest.bwBudgetRequestId: ' + brData.bwBudgetRequest.bwBudgetRequestId);

            } else {

                if (brData.bwBudgetRequest.BudgetWorkflowStatus == 'NOT_SUBMITTED') {

                    console.log('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);
                    //alert('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);

                    var promise = thiz.getRequestFormHtml(brData.bwBudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-3');
                    promise.then(function (results) {
                        try {
                            //if (brData.bwBudgetRequest.bwRequestType == 'recurringexpense') {
                            //    // debugger;
                            //    displayAlertDialog('xxxxxxxxcx34564544');
                            //}
                            if (results.message != null) {

                                // We have an error!!
                                console.log('Error: ' + results.message);
                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;

                            } else {

                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                //
                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                //if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                //    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                //}
                                // end


                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', brData.bwBudgetRequest.bwRequestTypeId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', brData.bwBudgetRequest.bwFiscalYear);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', brData.bwBudgetRequest.bwBudgetRequestId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', brData.bwBudgetRequest.Title);
                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId); // Commented this out 10-7-2022. Populating below near where we create the role drop-down.
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', brData.bwBudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                var bwOrgId = brData.bwBudgetRequest.OrgId;
                                var bwOrgName = brData.bwBudgetRequest.OrgName;

                                if (!(bwOrgId)) {
                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                }

                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                var functionalAreaId = brData.bwBudgetRequest.FunctionalAreaId; // eg: 1;
                                var pmAccountId = brData.bwBudgetRequest.ManagerId; // eg: 9;
                                var managerFriendlyName = brData.bwBudgetRequest.ManagerFriendlyName;
                                var arStatus = brData.bwBudgetRequest.ARStatus; // eg: 'Submitted';

                                //bwApprovalLevelWorkflowToken = brData.bwBudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                // Get the request type SingletonName.
                                var requestType;
                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                    if (brData.bwBudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                        requestType = bwEnabledRequestTypes[i];
                                        break;
                                    }
                                }

                                var html = '';

                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                                if (!requestType) {
                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + brData.bwBudgetRequest.bwRequestTypeId + ' ';
                                } else {
                                    html += '                       New ' + requestType.SingletonName + ': ';
                                }

                                html += '&nbsp;<span xcx="xcx3567-1" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                                html += '</span>';
                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                }
                                //
                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                //

                                $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                // Display the instructions.
                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = 'Complete the form then click the "Submit" button.';

                                // Display the buttons.
                                //var html = '';

                                //html += '<button onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                                //html += '                        &nbsp;';

                                //html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                                //html += '                        &nbsp;';

                                //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                                //html += '                        &nbsp;';

                                //html += '                        <button xcx="xcx4242-3" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm">Close</button>';





                                thiz.renderRequestFormButtons(requestDialogId, brData.bwBudgetRequest.bwBudgetRequestId, brData.bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-1-2');







                                //
                                // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                //
                                console.log('Calling populateRequestForm(). xcx3452-2-1');
                                var promise = thiz.populateRequestForm(requestDialogId, brData.bwBudgetRequest.bwRequestJson, true); //allowRequestModifications);
                                promise.then(function () {
                                    try {

                                        // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                        var canvas = document.getElementById("myCanvas");
                                        if (canvas) {
                                            // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                            var body = document.getElementsByTagName('body')[0];
                                            var clientWidth = body.scrollWidth;
                                            var clientHeight = Math.max(
                                                body.scrollHeight, document.documentElement.scrollHeight,
                                                body.offsetHeight, document.documentElement.offsetHeight,
                                                body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                            );
                                            // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                            // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                            // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                            canvas.width = clientWidth;
                                            canvas.height = clientHeight;
                                        }

                                        // If off the screen, re-position. 4-17-2022
                                        var left = document.getElementById(requestDialogId).getBoundingClientRect().left;
                                        if (left < 0) {
                                            console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-3 left: ' + left);
                                            alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-3 left: ' + left);
                                            $('#' + requestDialogId).dialog({
                                                position: { my: "center top", at: "center top", of: window }
                                            });
                                        }

                                        // This closes the in-browser request dialog, if this one is a popped-out window one. 8-15-2022
                                        if (window.opener) {
                                            var dialogId = 'divRequestFormDialog_' + brData.bwBudgetRequest.bwBudgetRequestId;
                                            alert('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            console.log('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            window.opener.$('#' + dialogId).dialog('close');
                                        }

                                        // RIGHT-CLICK FUNCTIONALITY!!
                                        // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                        var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                        $(button).on('click', function (e) {
                                            e.preventDefault();
                                            e.stopImmediatePropagation();
                                            $(this).contextMenu();
                                        });

                                        console.log('Displaying elipses context menu for request without a workflow (new request).');
                                        //alert('Displaying elipses context menu for request without a workflow (new request). xcx1');
                                        // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                        $.contextMenu({
                                            selector: '.context-menu-newrequesteditor',
                                            callback: function (key, options) {
                                                var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                if (key == 'requestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requestjsondignostics') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                } else if (key == 'requestjsondb') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'viewbwbudgetrequestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                        //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                        thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requesthtmldb') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                } else if (key == 'viewworkflowjson') {
                                                    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                } else if (key == 'changetherequesttype') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                    // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                    //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'viewtaskjson') {
                                                    // This is for testing.
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'deletethisrequest') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, 'this New Request');
                                                    }
                                                } else if (key == 'setreminder') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {

                                                        var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                        if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                            $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request');
                                                        } else {

                                                            // The widget has not been instantiated, so doing that here.
                                                            var div = document.getElementById('divBwOneTimeRequestReminders');
                                                            if (div) {
                                                                div.remove(); // This gets rid of it so we can start fresh. 
                                                            }
                                                            div = document.createElement('div');
                                                            div.id = 'divBwOneTimeRequestReminders';
                                                            div.style.display = 'none';
                                                            document.body.appendChild(div); // Place at end of document.

                                                            $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                            $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request'); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                        }
                                                    }
                                                }
                                            },
                                            items: {
                                                "requestjson": {
                                                    name: "Request JSON", icon: "edit"
                                                },
                                                "requestjsondb": {
                                                    name: "Request JSON from Database", icon: "edit"
                                                },
                                                //"viewbwbudgetrequestjson": {
                                                //    name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                //},
                                                //"updatedailyoverduetasknotificationdate": {
                                                //    name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                //},
                                                //"viewtaskjson": {
                                                //    name: "Task JSON", icon: "edit"
                                                //},
                                                //"requestjsondignostics": {
                                                //    name: "Request JSON Diagnostics", icon: "edit"
                                                //},
                                                //"requesthtmldb": {
                                                //    name: "Request Form HTML from Database  xcx1-3", icon: "edit"
                                                //},
                                                //"viewworkflowjson": {
                                                //    name: "View Workflow Step/Role Json", icon: "edit"
                                                //},
                                                //"changetherequesttype": {
                                                //    name: "Change the Request Type", icon: "edit"
                                                //}
                                                "deletethisrequest": {
                                                    name: "Delete this Request", icon: "edit"
                                                },
                                                "setreminder": {
                                                    name: "Set a One-Time Reminder", icon: "edit"
                                                }
                                            }
                                        });
                                        // End: This is our right-click context menu.

                                    } catch (e) {
                                        console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                        displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                    }
                                });

                            }
                        } catch (e) {
                            console.log('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            alert('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                        }
                    });

                } else {

                    //
                    // This request has a workflow. brData.bwBudgetRequest.BudgetWorkflowStatus != 'NOT_SUBMITTED'
                    //
                    //displayAlertDialog('xcx877097808 brData.bwBudgetRequest: ' + JSON.stringify(brData.bwBudgetRequest));
                    var data = {
                        bwParticipantId_LoggedIn: participantId,
                        bwActiveStateIdentifier: activeStateIdentifier,
                        bwWorkflowAppId_LoggedIn: workflowAppId,

                        bwWorkflowAppId: workflowAppId,
                        bwBudgetRequestId: budgetRequestId
                        //WorkflowStepName: brData.bwBudgetRequest.BudgetWorkflowStatus // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022 // BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                    };
                    console.log('In ??(). xcx12325-2. Calling /workflowconfiguration5().');
                    $.ajax({
                        url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                        type: "POST",
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        error: function (data, errorCode, errorMessage) {

                            console.log('xcx23123-2 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);
                            displayAlertDialog('xcx23123-2 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);

                        },
                        success: function (result) {
                            try {

                                if (result.status != 'SUCCESS') {

                                    console.log(result.message);
                                    displayAlertDialog(result.message);

                                } else {

                                    console.log('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');
                                    //alert('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');

                                    //
                                    // HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022
                                    //
                                    var workflowParent = result.Workflow[0];
                                    var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                    //alert('xcx12313 result.Tasks: ' + JSON.stringify(result.Tasks));

                                    // The web service returns all tasks for this request. We want it to!!! This allows us to validate some things as well. Always nice to do this once in a while, as it adds to the stability of the system.
                                    var bwWorkflowTasks = []; //var bwWorkflowTasks = result.Tasks; // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                                    for (var i = 0; i < result.Tasks.length; i++) {
                                        if (result.Tasks[i].WorkflowStepName == brData.bwBudgetRequest.BudgetWorkflowStatus) {
                                            bwWorkflowTasks.push(result.Tasks[i]);
                                        } else {
                                            if ((result.Tasks[i].bwStatus == 'Completed') && (result.Tasks[i].bwPercentComplete == 100)) {
                                                //
                                                // AUDIT: We can use this to check that all previous Tasks were assigned and completed if we wish to.... like an Auditing step to ensure our data is complete and no messing around has happened.
                                                //
                                                console.log('AUDIT Success in bwRequest.js.displayRequestForm(). This task was completed for request "' + brData.bwBudgetRequest.Title + '" [' + brData.bwBudgetRequest.bwBudgetRequestId + ']. bwWorkflowTaskItemId: [' + result.Tasks[i].bwWorkflowTaskItemId + ']');
                                            } else {

                                                console.log('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + brData.bwBudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);
                                                displayAlertDialog('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + brData.bwBudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);

                                            }
                                        }
                                    }






                                    console.log('In bwRequest.js.renderRequestForm(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + brData.bwBudgetRequest.bwRequestTypeId);
                                    //alert('In bwRequest.js.displayRequestFormDialog(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + brData.bwBudgetRequest.bwRequestTypeId);

                                    var promise = thiz.getRequestFormHtml(brData.bwBudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-4');
                                    promise.then(function (results) {
                                        try {
                                            //// debugger;
                                            //if (brData.bwBudgetRequest.bwRequestType == 'recurringexpense') {
                                            //    // debugger;
                                            //    displayAlertDialog('xxxxxxxxcx34564544');
                                            //}
                                            if (results.message != null) {

                                                // We have an error!!
                                                console.log('Error: ' + results.message);
                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;

                                            } else {

                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                                //
                                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                                if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                                    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                                }
                                                // end


                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', brData.bwBudgetRequest.bwRequestTypeId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', brData.bwBudgetRequest.bwFiscalYear);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', brData.bwBudgetRequest.bwBudgetRequestId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', brData.bwBudgetRequest.Title);

                                                // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId);

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', brData.bwBudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                                var bwOrgId = brData.bwBudgetRequest.OrgId;
                                                var bwOrgName = brData.bwBudgetRequest.OrgName;

                                                if (!(bwOrgId)) {
                                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                }

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                                var functionalAreaId = brData.bwBudgetRequest.FunctionalAreaId; // eg: 1;
                                                var pmAccountId = brData.bwBudgetRequest.ManagerId; // eg: 9;
                                                var managerFriendlyName = brData.bwBudgetRequest.ManagerFriendlyName;
                                                var arStatus = brData.bwBudgetRequest.ARStatus; // eg: 'Submitted';

                                                bwApprovalLevelWorkflowToken = brData.bwBudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                                // Get the request type SingletonName.
                                                var requestType;
                                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                                    if (brData.bwBudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                                        requestType = bwEnabledRequestTypes[i];
                                                        break;
                                                    }
                                                }

                                                var html = '';

                                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';

                                                if (!requestType) {
                                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + brData.bwBudgetRequest.bwRequestTypeId + ': ';
                                                } else {
                                                    html += '                       ' + requestType.SingletonName + ': ';
                                                }

                                                html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                                                html += brData.bwBudgetRequest.Title;
                                                html += '                       </span>';
                                                //html += '&nbsp;<span xcx="xcx3567-2" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '&nbsp;<span xcx="xcx3567-2-2" id="spanNewRequestEllipsesButton" class="spanButton2 context_menu_requestformellipses" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '</span>';
                                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                                }







                                                //
                                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                                //

                                                if (result.Workflow.length == 0) {

                                                    console.log('ERROR: Cannot locate workflow: ' + brData.bwBudgetRequest.bwWorkflowId);
                                                    displayAlertDialog('ERROR: Cannot locate workflow: ' + brData.bwBudgetRequest.bwWorkflowId);
                                                    var instructions = '';
                                                    instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.bwBudgetRequest.bwWorkflowId + '. <span style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'reassignOrphanedRequestToAnActiveWorkflow\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\');">Click here to reassign to an active workflow for this "' + brData.bwBudgetRequest.bwRequestType + '".</a></span>';
                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                } else {
                                                    // Get the workflow step.
                                                    var stepIndex = null;
                                                    var stepName = null;
                                                    for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                                        stepName = workflow.Steps.Step[i]["@Name"];
                                                        if (stepName == brData.bwBudgetRequest.BudgetWorkflowStatus) {
                                                            stepIndex = i;
                                                            break;
                                                        }
                                                    }

                                                    // RIGHT-CLICK FUNCTIONALITY!!
                                                    // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                                    var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                                    $(button).on('click', function (e) {
                                                        e.preventDefault();
                                                        e.stopImmediatePropagation();
                                                        $(this).contextMenu();
                                                    });

                                                    var developerModeEnabled = $('.bwAuthentication').bwAuthentication('option', 'developerModeEnabled');

                                                    if (developerModeEnabled == true) {
                                                        // The full drop down menu with all the options.
                                                        console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-1');
                                                        alert('Displaying elipses context menu for request without a workflow (new request). xcx214-1');
                                                        // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                        $.contextMenu({
                                                            selector: '.context_menu_requestformellipses',
                                                            callback: function (key, options) {
                                                                var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                                var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                                if (key == 'requestjson') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'requestjsondignostics') {
                                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                                } else if (key == 'requestjsondb') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'viewbwbudgetrequestjson') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                        //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                                        thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'requesthtmldb') {
                                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                                } else if (key == 'viewworkflowjson') {
                                                                    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                                } else if (key == 'changetherequesttype') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'deletethisrequest') {
                                                                    var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                    }
                                                                } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                                    // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                                    //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                    if (!bwWorkflowTaskItemId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                    } else {
                                                                        thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                                    }
                                                                } else if (key == 'viewtaskjson') {
                                                                    // This is for testing.
                                                                    if (!bwWorkflowTaskItemId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                    } else {
                                                                        thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                                    }
                                                                }
                                                            },
                                                            items: {
                                                                "requestjson": {
                                                                    name: "Request JSON (scraped2) xcx2", icon: "edit"
                                                                },
                                                                "requestjsondb": {
                                                                    name: "Request JSON from Database", icon: "edit"
                                                                },
                                                                "viewbwbudgetrequestjson": {
                                                                    name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                                },
                                                                "updatedailyoverduetasknotificationdate": {
                                                                    name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                                },
                                                                "viewtaskjson": {
                                                                    name: "Task JSON", icon: "edit"
                                                                },
                                                                "requestjsondignostics": {
                                                                    name: "Request JSON Diagnostics", icon: "edit"
                                                                },
                                                                "requesthtmldb": {
                                                                    name: "Request Form HTML from Database xcx1-4", icon: "edit"
                                                                },
                                                                "viewworkflowjson": {
                                                                    name: "View Workflow Step/Role Json", icon: "edit"
                                                                },
                                                                "changetherequesttype": {
                                                                    name: "Change the Request Type", icon: "edit"
                                                                }
                                                                ,
                                                                "deletethisrequest": {
                                                                    name: "Delete this Requestxcx2", icon: "edit"
                                                                }
                                                            }
                                                        });
                                                        // End: This is our right-click context menu.

                                                    } else {
                                                        // Only the options in the drop down that the user needs.
                                                        console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-2');
                                                        //alert('Displaying elipses context menu for request without a workflow (new request). xcx214-2');
                                                        // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                        $.contextMenu({
                                                            selector: '.context_menu_requestformellipses',
                                                            callback: function (key, options) {
                                                                var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                                var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;

                                                                if (key == 'requestjson') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'requestjsondb') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                                    // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                                    //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                    if (!bwWorkflowTaskItemId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                    } else {
                                                                        thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                                    }
                                                                } else if (key == 'changetherequesttype') {
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                    }
                                                                } else if (key == 'deletethisrequest') {
                                                                    var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {
                                                                        thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                    }
                                                                } else if (key == 'setreminder') {
                                                                    var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                    if (!bwBudgetRequestId) {
                                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                    } else {

                                                                        var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                                        if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                                            $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle);
                                                                        } else {

                                                                            // The widget has not been instantiated, so doing that here.
                                                                            var div = document.getElementById('divBwOneTimeRequestReminders');
                                                                            if (div) {
                                                                                div.remove(); // This gets rid of it so we can start fresh. 
                                                                            }
                                                                            div = document.createElement('div');
                                                                            div.id = 'divBwOneTimeRequestReminders';
                                                                            div.style.display = 'none';
                                                                            document.body.appendChild(div); // Place at end of document.

                                                                            $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                                            $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                                        }
                                                                    }
                                                                }

                                                            },
                                                            items: {
                                                                "requestjson": {
                                                                    name: "Request JSON (scraped) xcx231234-2", icon: "edit"
                                                                },
                                                                "requestjsondb": {
                                                                    name: "Request JSON (from database)", icon: "edit"
                                                                },
                                                                "updatedailyoverduetasknotificationdate": {
                                                                    name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                                },
                                                                "changetherequesttype": {
                                                                    name: "Change the Request Type", icon: "edit"
                                                                },
                                                                "deletethisrequest": {
                                                                    name: "Delete this Request", icon: "edit"
                                                                },
                                                                "setreminder": {
                                                                    name: "Set a One-Time Reminder", icon: "edit"
                                                                }
                                                            }
                                                        });
                                                        // End: This is our right-click context menu.


                                                    }

                                                    if (stepIndex == null) {

                                                        //
                                                        // COME BACK HERE AND FIX!!!!!!!!!!!!!!! WHEN INVALID WORKFLOW STEP, THE FORM DOES NOT RENDER, EVEN IN READ-ONLY MODE. 1-5-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                        //


                                                        // This is an invalid.
                                                        displayAlertDialog('Error: Invalid workflow status xcx12435-2. Could not find the stepName to match brData.bwBudgetRequest.BudgetWorkflowStatus: ' + brData.bwBudgetRequest.BudgetWorkflowStatus);
                                                        $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'INVALIDWORKFLOWSTATUS  brData.bwBudgetRequest.BudgetWorkflowStatus:' + brData.bwBudgetRequest.BudgetWorkflowStatus + ', participantRoles: ' + brData.RequestingUser.ParticipantRole + ', RACI role: ' + selectedRole + ', orgId: ' + brData.RequestingUser.OrgId;
                                                        // Display the buttons.
                                                        var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                        thiz.renderRequestFormButtons(requestDialogId, brData.bwBudgetRequest.bwBudgetRequestId, brData.bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-2', false, 'ERROR');
                                                        // Display the instructions.
                                                        var instructions = 'xNOINSTRUCTIONSINVALIDWORKFLOWSTATUS';
                                                        $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                    } else {


                                                        ////
                                                        //// Here we check if the workflow has been completed/Done. If it is done, just display the request in it's read-only state.
                                                        ////
                                                        //if (workflow.Steps.Step[stepIndex]["@Name"] == 'Done') {

                                                        //    // For example, workflow.Steps.Step[stepIndex]: {"@Name":"Done","@MasterState":"Approved","@FriendlyName":"Completed (Done)",
                                                        //    console.log('This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".');

                                                        //    var selectedOrganization = $('.bwAuthentication').bwAuthentication('getSelectedOrganization');
                                                        //    //alert('Dev: working to determine if this is a workflow administrator. selectedOrganization: ' + JSON.stringify(selectedOrganization));
                                                        //    if ((selectedOrganization.OrganizationRole == 'owner') || (selectedOrganization.OrganizationRole == 'configurationmanager')) {
                                                        //        console.log('The authenticated user is the owner or configurationmanager, therefore setting allowRequestModifications to true. This request is Completed (Done), but there should still be a way to make final changes, and the owner or configurationmanager should be able to do that.');
                                                        //        allowRequestModifications = true;
                                                        //    }

                                                        //    // The following code snippet exists here and also in another place below. 10-11-2022
                                                        //    //
                                                        //    // Display the buttons.
                                                        //    //
                                                        //    //if (!RolesData.WorkflowStep.Assign) {
                                                        //    //// debugger;
                                                        //    //
                                                        //    // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                        //    //
                                                        //    var promise = thiz.populateRequestForm(requestDialogId, brData.bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                        //    promise.then(function () {
                                                        //        try {

                                                        //            // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                        //            var canvas = document.getElementById("myCanvas");
                                                        //            if (canvas) {
                                                        //                // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                        //                var body = document.getElementsByTagName('body')[0];
                                                        //                var clientWidth = body.scrollWidth;
                                                        //                var clientHeight = Math.max(
                                                        //                            body.scrollHeight, document.documentElement.scrollHeight,
                                                        //                            body.offsetHeight, document.documentElement.offsetHeight,
                                                        //                            body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                        //                        );
                                                        //                // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                        //                // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                        //                // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                        //                canvas.width = clientWidth;
                                                        //                canvas.height = clientHeight;
                                                        //            }


                                                        //            thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-4');


                                                        //            //
                                                        //            // 10-4-2022 copied from elsewhere
                                                        //            //
                                                        //            var workflowStepHtml = '';
                                                        //            var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                        //            if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                        //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                        //            } else {
                                                        //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                        //            }

                                                        //            workflowStepHtml += '<span style="font-weight:bold;">';
                                                        //            workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                        //            workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                        //            workflowStepHtml += '   </span>';
                                                        //            workflowStepHtml += '</span>';
                                                        //            workflowStepHtml += '<br />';

                                                        //            $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                        //            //
                                                        //            // end: 10-4-2022 copied from elsewhere
                                                        //            //


                                                        //            //
                                                        //            // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                        //            //
                                                        //            var checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;
                                                        //            if (checklists) {
                                                        //                var checklistsHtml = '';
                                                        //                checklistsHtml += 'Completed checklist(s):';
                                                        //                checklistsHtml += '<br />';
                                                        //                for (var i = 0; i < checklists.length; i++) {
                                                        //                    var checklist = JSON.parse(checklists[i]);
                                                        //                    checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                        //                    checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                        //                    checklistsHtml += '<br />';
                                                        //                }
                                                        //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                        //            } else {
                                                        //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                        //            }
                                                        //            //
                                                        //            //

                                                        //        } catch (e) {
                                                        //            console.log('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                        //            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                        //        }
                                                        //    });

                                                        //    //
                                                        //    // Display the instructions.
                                                        //    //
                                                        //    html = 'This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".';
                                                        //    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = html; // First, we clear the element.
                                                        //    // end: Display the instructions.

                                                        //} else {

                                                        //alert('cx12321 this user has these qualifying roles for this org id. '); // brData.RequestingUser.RoleIds

                                                        // 10-7-2022
                                                        var RolesData = {
                                                            status: null,
                                                            message: '',
                                                            RequestingUser: {
                                                                ParticipantRole: brData.RequestingUser.ParticipantRole, // Options include 'Forest Administrator', 'owner', 'archiveviewer', 'reportviewer', 'configurationmanager', and 'participant'.
                                                                QualifyingRolesInThisOrg: brData.RequestingUser.RoleIds, // All qualifying roles for this user, based upon the OrgId in the bwBudgetRequest. If this includes 'ADMIN', then the Workflow Administrator.
                                                                AssignedRolesForThisWorkflowStep: [] //  The array contains { Role: 'xx', RoleName: 'xx' }. <<<<<<<<<FIX<<<<<<<<<<<<<<<< There are the specifically assigned qualifying roles for this user at this workflow step. 'Completed' Task roles have been removed.
                                                            },
                                                            WorkflowAdmin: {
                                                                OnBehalfOfRolesForThisWorkflowStep: [] // All of the remaining roles, if this user is a Workflow Administrator (ADMIN). 'Completed' Task roles have been removed.
                                                            },
                                                            WorkflowStep: {
                                                                AssignedRole: {
                                                                    Role: null, // This is our final result.
                                                                    RoleName: null,
                                                                    OnBehalfOf: null, // If "On behalf of...", then this will be true.
                                                                    bwWorkflowTaskItemId: null
                                                                },
                                                                AllRolesInThisWorkflowStep: [], // All of the roles for this workflow step.
                                                                BwWorkflowTask_Table: bwWorkflowTasks, // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } } // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022
                                                                Assign: null // This is the Assign section of the selected workflow step. Used throughout. Replaced previously called assign.
                                                            }
                                                        }
                                                        // debugger;



                                                        //alert('If this is the tenant "owner", add the "ADMIN" role. xcx883356 RolesData.RequestingUser: ' + JSON.stringify(RolesData.RequestingUser));

                                                        //
                                                        // Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                        //
                                                        if (RolesData.RequestingUser.ParticipantRole == 'owner') {
                                                            if (!RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {
                                                                RolesData.RequestingUser.QualifyingRolesInThisOrg.push('ADMIN');
                                                                alert('This user is an owner, so adding the ADMIN role to RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + 'ADMIN');
                                                            }
                                                        }
                                                        //
                                                        // end: Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                        //

                                                        //
                                                        // Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.          // THIS FIGURES OUT THE ROLES that the user plays with this request, at this stage of the workflow. 
                                                        //
                                                        if (!workflow.Steps.Step[stepIndex].Assign) {
                                                            if (workflow.Steps.Step[stepIndex].Inform) {
                                                                var tmpSelectedRole = workflow.Steps.Step[stepIndex].Inform["@Role"];
                                                                RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                        console.log('xcx1234123-1 This user has the assignment for this role in the workflow step. Adding it to RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                    }
                                                                    //assign = workflow.Steps.Step[stepIndex].OnStart.Inform; // Set this for the user.
                                                                }
                                                                //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                                //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                                //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                                //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                                //        alert('xcx1234123-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                                //    }
                                                                //}
                                                            } else {
                                                                alert('NOT INFORM ROLE xcx346754234');
                                                            }
                                                        } else {

                                                            if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) { // When only 1, the length is undefined.
                                                                // More than 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                                for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign.length; i++) {
                                                                    var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign[i]["@Role"];
                                                                    RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                                    //alert('xcx44445 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));
                                                                    if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                        if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                            RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                            console.log('xcx1234123-3 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                        }
                                                                    }
                                                                }
                                                            } else {
                                                                // Only 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                                var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign["@Role"];
                                                                RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                    //alert('xcx1234123-4 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                }
                                                            }
                                                            //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                            //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                            //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                            //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                            //        alert('xcx1234123-2-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                            //    }
                                                            //}

                                                        }
                                                        //
                                                        // end: Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.  
                                                        //
                                                        //displayAlertDialog('RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep);




                                                        ////
                                                        //// Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                        ////
                                                        //var BwWorkflowTask_Table = []; // Initialize this array and load it. This is all the tasks in the BwWorkflowTask table for this request.
                                                        //for (var i = 0; i < RolesData.WorkflowStep.BwWorkflowTask_Table.length; i++) {
                                                        //    BwWorkflowTask_Table.push(RolesData.WorkflowStep.BwWorkflowTask_Table[i].bwAssignedToRaciRoleAbbreviation);
                                                        //}

                                                        //// Compare the workflow step with the BwWorkflowTask table to see if any tasks are missing in the BwWorkflowTask table.
                                                        //var missingFrom_BwWorkflowTask_Table = [];
                                                        //for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                        //    if (BwWorkflowTask_Table.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                        //        // It is in the list, 
                                                        //    } else {
                                                        //        // It is not in the list.
                                                        //        console.log('AUDIT Error in bwRequest.js.renderRequestForm_ForTrashBin(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                        //        displayAlertDialog('AUDIT Error in bwRequest.js.renderRequestForm_ForTrashBin(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table)); // + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                        //        missingFrom_BwWorkflowTask_Table.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                        //    }
                                                        //}

                                                        //// Compare the workflow step with the BwWorkflowTask table to see if any tasks are superfluous in the BwWorkflowTask table.
                                                        //var superfluousIn_BwWorkflowTask_Table = [];
                                                        //for (var i = 0; i < BwWorkflowTask_Table.length; i++) {
                                                        //    if (RolesData.WorkflowStep.AllRolesInThisWorkflowStep.indexOf(BwWorkflowTask_Table[i]) > -1) {
                                                        //        // It is in the list, 
                                                        //    } else {
                                                        //        // It is not in the list.
                                                        //        superfluousIn_BwWorkflowTask_Table.push(BwWorkflowTask_Table[i]);
                                                        //    }
                                                        //}

                                                        //console.log('AUDIT Note: Comparing workflowTasks with existingTasks to make sure all tasks have been created, and also that there aren\'t too many existing tasks. Any errors will be list immediately below this line in the console. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep) + ', missingFrom_BwWorkflowTask_Table: ' + JSON.stringify(missingFrom_BwWorkflowTask_Table) + ', superfluousIn_BwWorkflowTask_Table: ' + JSON.stringify(superfluousIn_BwWorkflowTask_Table));

                                                        //if ((missingFrom_BwWorkflowTask_Table.length > 0) || (superfluousIn_BwWorkflowTask_Table.length > 0)) {

                                                        //    var msg = 'AUDIT Error in bwRequest.js.displayRequestForm(): Unexpected tasks for Request ' + budgetRequestId + '. missingFrom_BwWorkflowTask_Table: ' + missingFrom_BwWorkflowTask_Table + ', superfluousIn_BwWorkflowTask_Table: ' + superfluousIn_BwWorkflowTask_Table;
                                                        //    console.log(msg);
                                                        //    displayAlertDialog(msg);

                                                        //}
                                                        ////
                                                        //// End: Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                        ////






                                                        //
                                                        // Step 3: Populate RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                        //
                                                        console.log('xcx1231234234 RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                        //alert('xcx1231234234RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                            // Add the "On behalf of..." roles for the ADMIN.
                                                            for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                                if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                                    // Do nothing, already have this role in the RequestingUser.AssignedRolesForThisWorkflowStep array.
                                                                } else {
                                                                    // Add to the RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep array.
                                                                    //debugger; // this needs to be pushed like: { Role: xx, RoleName: xx } // 12-22-2022 or does it????? Hmmmmm......
                                                                    RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                                    //alert('xcx1234123-4-2 PUSHED INTO RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                                }
                                                            }
                                                        }
                                                        //
                                                        // end: Step 3: Populate RequestingUser.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                        //
                                                        //alert('xcx21312 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                        //displayAlertDialog('RolesData.WorkflowStep.BwWorkflowTask_Table: ' + JSON.stringify(RolesData.WorkflowStep.BwWorkflowTask_Table));

                                                        //
                                                        // Step 4: Remove all roles where the Task has already been completed, and populate bwWorkflowTaskItemId.
                                                        //
                                                        for (var t = 0; t < RolesData.WorkflowStep.BwWorkflowTask_Table.length; t++) {

                                                            for (var a = 0; a < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; a++) {
                                                                if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a]) {
                                                                    if ((RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') && (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwPercentComplete == 100)) {
                                                                        // Remove it.
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.splice(a, 1); // delete leaves a null, so we have to use splice.
                                                                        //alert('Removing task as it has been completed by: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                    } else {
                                                                        // Leave it. Add the bwWorkflowTaskItemId.
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a] = {
                                                                            Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                            RoleName: null,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                        }
                                                                        //alert('Adding Task as it has not been completed: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                    }
                                                                    break;
                                                                }
                                                            }

                                                            //debugger; // ISNT THIS WHERE WE FIX IT????????????????? <<<<<<<<<<<<<<<<< 12-22-2022
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                    if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i]) {
                                                                        if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') {
                                                                            // Remove it.
                                                                            RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.splice(i, 1); // delete leaves a null, so we have to use splice.
                                                                        } else {
                                                                            debugger; // ???? IT SHOULD BE HITTING HERE??? <<<<<<<<<<<<<<<<<<<<<<<
                                                                            // Leave it. Add the bwWorkflowTaskItemId.
                                                                            RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i] = {
                                                                                Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                                RoleName: null,
                                                                                bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                            }
                                                                        }
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        //
                                                        // end: Step 4: Remove all roles where the Task has already been completed.         
                                                        //

                                                        //alert('STEP 5 coming up. xcx21312-2 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));

                                                        //
                                                        // Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                        //
                                                        // debugger;
                                                        if (selectedRaciRole && (selectedRaciRole != 'undefined')) { // This gets passed when the RACI Role drop down gets changed... comes from selectedRaciRole_OnChange or some method like that... 

                                                            for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                if (selectedRaciRole == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                    RolesData.WorkflowStep.AssignedRole = {
                                                                        Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role,
                                                                        RoleName: null, // This will get populated a bit lower in this code.
                                                                        OnBehalfOf: false,
                                                                        bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                    };
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                    console.log('xcx23423-1 found matching role. Set RolesData.WorkflowStep.AssignedRole.Role: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                    break;
                                                                }
                                                            }
                                                            if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                    for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                        if (selectedRaciRole == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                            RolesData.WorkflowStep.AssignedRole = {
                                                                                Role: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role,
                                                                                RoleName: null, // This will get populated a bit lower in this code.
                                                                                OnBehalfOf: true,
                                                                                bwWorkflowTaskItemId: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                            };
                                                                            RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                            console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        } else {

                                                            if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length > 0) {
                                                                RolesData.WorkflowStep.AssignedRole = {
                                                                    Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].Role, // Pick the first one.
                                                                    RoleName: null, // This will get populated a bit lower in this code.
                                                                    OnBehalfOf: false,
                                                                    bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].bwWorkflowTaskItemId
                                                                };
                                                                RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                console.log('xcx23423-3 found role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                            }
                                                            if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                    if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length > 0) {

                                                                        //alert('xcx123123 pick the first one...');
                                                                        console.log('xcx123123 pick the first one...');
                                                                        // debugger;

                                                                        RolesData.WorkflowStep.AssignedRole = {
                                                                            Role: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].Role, // Pick the first one.
                                                                            RoleName: null, // This will get populated a bit lower in this code.
                                                                            OnBehalfOf: true,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].bwWorkflowTaskItemId
                                                                        };
                                                                        RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                        console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        //
                                                        // end: Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                        //

                                                        if (!RolesData.WorkflowStep.AssignedRole.Role) {

                                                            //
                                                            // THERE IS NO ASSIGNED ROLE IN THIS STEP.
                                                            //
                                                            console.log('No roles have been asigned to this user. xcx4326665.');

                                                            var html;
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                // The code should never get here, because the Workflow Administrator (ADMIN) gets assigned roles like "On behalf of...". 10-26-2022.
                                                                html = 'No roles have been asigned to this user, but as an ADMIN you can edit this request.';
                                                            } else {
                                                                html = 'No roles have been asigned to this user. xcx2342355.';
                                                            }
                                                            $('#' + requestDialogId).find('#budgetrequestform').find('#spanRequestForm_Instructions').html(html);


                                                            //var html = '';

                                                            //html += 'THERE IS NO ASSIGN ROLE IN THIS STEP. This is probably because this means the ADMIN has to intervene to move the workflow along.';
                                                            //html += '<button title="adminMoveWorkflowToNextStep" class="BwButton350" onclick="$(\'.bwRequest\').bwRequest(\'adminMoveWorkflowToNextStep\');">ADMIN - MOVE TO NEXT STEP</button>';
                                                            //html += '<br />';

                                                            //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequestId, bwRequestTypeId, html, 'xcx445566-5');


                                                        } else {

                                                            // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                            $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId); // 10-7-2022

                                                            //alert('Just set the value in [budgetrequestform] for bwworkflowtaskitemid: ' + RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId);



                                                            //
                                                            // Step 6: Populate "RoleName" for all roles.
                                                            //

                                                            for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                // Populate RoleName for AssignedRole.
                                                                if (RolesData.WorkflowStep.AssignedRole.Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                    //assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    //RolesData.WorkflowStep.AssignedRole.RoleName = assign["@RoleName"]; // Populate the RoleName.
                                                                    RolesData.WorkflowStep.AssignedRole.RoleName = RolesData.WorkflowStep.Assign["@RoleName"]; // Populate the RoleName.
                                                                }
                                                                // Populate RoleName for RequestingUser.AssignedRolesForThisWorkflowStep.
                                                                for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                    if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                        break;
                                                                    }
                                                                }
                                                                // Populate RoleName for WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                    for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                        if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                            RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            //
                                                            // end: Step 6: Populate "RoleName" for all roles.
                                                            //

                                                        }




                                                        var RolesData2 = {
                                                            RequestingUser: RolesData.RequestingUser,
                                                            WorkflowAdmin: RolesData.WorkflowAdmin,
                                                            WorkflowStep: {
                                                                AssignedRole: RolesData.WorkflowStep.AssignedRole,
                                                                AllRolesInThisWorkflowStep: RolesData.WorkflowStep.AllRolesInThisWorkflowStep
                                                            }
                                                        };

                                                        console.log('xcx3243 RolesData: ' + JSON.stringify(RolesData2)); // THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.');
                                                        //alert('xcx3243 RolesData2: ' + JSON.stringify(RolesData2));

                                                        //
                                                        // Display the buttons.
                                                        //
                                                        if (!RolesData.WorkflowStep.Assign) {
                                                            // debugger;
                                                            //
                                                            // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                            //
                                                            var promise = thiz.populateRequestForm(requestDialogId, brData.bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                            promise.then(function () {
                                                                try {

                                                                    // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                    var canvas = document.getElementById("myCanvas");
                                                                    if (canvas) {
                                                                        // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                        var body = document.getElementsByTagName('body')[0];
                                                                        var clientWidth = body.scrollWidth;
                                                                        var clientHeight = Math.max(
                                                                            body.scrollHeight, document.documentElement.scrollHeight,
                                                                            body.offsetHeight, document.documentElement.offsetHeight,
                                                                            body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                        );
                                                                        // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                        // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                        // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                        canvas.width = clientWidth;
                                                                        canvas.height = clientHeight;
                                                                    }

                                                                    var html = '';
                                                                    html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

                                                                    thiz.renderRequestFormButtons(requestDialogId, brData.bwBudgetRequest.bwBudgetRequestId, brData.bwBudgetRequest.bwRequestTypeId, html, 'xcx445566-6-2', false, RolesData.WorkflowStep.Assign);







                                                                    // 10-4-2022 copied from elsewhere

                                                                    var workflowStepHtml = '';
                                                                    var stepFriendlyName; // Should be able to remove this at some pointin the future.
                                                                    if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                    } else {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                    }

                                                                    workflowStepHtml += '<span style="font-weight:bold;">';
                                                                    workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.bwBudgetRequest.Title + '\', \'' + String(brData.bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.bwBudgetRequest.bwRequestTypeId + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\');">';
                                                                    workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                    workflowStepHtml += '   </span>';
                                                                    workflowStepHtml += '</span>';
                                                                    workflowStepHtml += '<br />';

                                                                    // spanRequestForm_WorkflowAndRoleDetails
                                                                    $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;

                                                                    // 10-4-2022 copied from elsewhere



                                                                    displayAlertDialog('xcx987070-2 Display the checklists here... 10-25-2022');

                                                                    //
                                                                    // Display the checklists here... 10-25-2022
                                                                    //
                                                                    var checklists = JSON.parse(brData.bwBudgetRequest.bwRequestJson).Checklists;
                                                                    if (checklists) {
                                                                        var checklistsHtml = '';
                                                                        checklistsHtml += 'Completed checklist(s):';
                                                                        checklistsHtml += '<br />';
                                                                        for (var i = 0; i < checklists.length; i++) {
                                                                            var checklist = JSON.parse(checklists[i]);
                                                                            checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                            checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.bwBudgetRequest.ProjectTitle + '\', \'' + brData.bwBudgetRequest.Title + '\', \'' + brData.bwBudgetRequest.bwRequestType + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                            checklistsHtml += '<br />';
                                                                        }
                                                                        $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                    } else {
                                                                        $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                    }
                                                                    //
                                                                    //



                                                                } catch (e) {
                                                                    console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                                    displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                                }
                                                            });

                                                        } else {



                                                            //// This just handles whether it is an array or not. Maybe it will go away someday... 12-21-2022
                                                            //var assign;

                                                            //if (RolesData.WorkflowStep.Assign.length) {
                                                            //    if (RolesData.WorkflowStep.Assign.length == 1) {
                                                            //        assign = RolesData.WorkflowStep.Assign[0];
                                                            //    } else {
                                                            //        displayAlertDialog('Error in bwRequest.js.displayRequestForm(). xcx112233 Invalid value for RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                            //    }
                                                            //} else {
                                                            //    assign = RolesData.WorkflowStep.Assign;
                                                            //}



                                                            if (!RolesData.WorkflowStep.Assign) {
                                                                alert('xcx112233 NO VALUE FOR RolesData.WorkflowStep.Assign HERE..??????');
                                                            }





                                                            //
                                                            // The user plays a role in the workflow, so we render the form for them here, with the correct buttons, etc.
                                                            //
                                                            var allowRequestModifications = RolesData.WorkflowStep.Assign["@AllowRequestModifications"];
                                                            console.log('');
                                                            console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                            console.log('The user plays a role in the workflow. allowRequestModifications: ' + allowRequestModifications + ', RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                            console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                            console.log('');
                                                            //
                                                            // We need to check if there is user(s) assigned in this role. Ajax call! 12-24-2021.
                                                            //
                                                            var onBehalfOf_RoleId = RolesData.WorkflowStep.Assign["@Role"];
                                                            var onBehalfOf_RoleName = RolesData.WorkflowStep.Assign["@RoleName"];
                                                            $.ajax({
                                                                url: thiz.options.operationUriPrefix + "odata/UserRole2/" + workflowAppId + "/" + onBehalfOf_RoleId, // pass workflowAppId, as well as roleId in order to get the list of users who belong to the role.
                                                                dataType: "json",
                                                                contentType: "application/json",
                                                                type: "Get"
                                                            }).done(function (result) {
                                                                try {
                                                                    //
                                                                    // Display the role members.
                                                                    //
                                                                    // debugger;
                                                                    var html = '';
                                                                    var roleMember_participantId = '';
                                                                    var roleMember_participantEmail = '';
                                                                    var roleMember_participantFriendlyName = '';

                                                                    if (result.length > 0) {
                                                                        // Participants were found that fill this role.
                                                                        roleMember_participantId = result[0].bwParticipantId;
                                                                        roleMember_participantEmail = result[0].bwParticipantEmail;
                                                                        roleMember_participantFriendlyName = result[0].bwParticipantFriendlyName;
                                                                    } else {
                                                                        // No participants were found that fill this role.
                                                                    }

                                                                    var roleMember = {
                                                                        roleMember_participantId: roleMember_participantId,
                                                                        roleMember_participantEmail: roleMember_participantEmail,
                                                                        roleMember_participantFriendlyName: roleMember_participantFriendlyName
                                                                    }

                                                                    var stepName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                    var stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];

                                                                    // 
                                                                    // THIS IS THE ONLY PLACE WHERE THE BUTTONS ARE CREATED AT THE TOP OF A REQUEST FORM FOR WORKFLOW PARTICIPANTS. They reflect the workflow step json Actions section. 12-23-2021.
                                                                    // 
                                                                    //

                                                                    if (!allowRequestModifications || allowRequestModifications == 'undefined') {
                                                                        allowRequestModifications = false;
                                                                    } else {

                                                                    }


                                                                    //
                                                                    // Display the instructions. New version 12-29-2021
                                                                    //
                                                                    var instructions = '';

                                                                    var workflowStepHtml = '';
                                                                    var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                    if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                    } else {
                                                                        stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                    }

                                                                    workflowStepHtml += '<span style="font-weight:bold;">';
                                                                    workflowStepHtml += '   <span xcx="342352-1-xx" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.bwBudgetRequest.Title + '\', \'' + String(brData.bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.bwBudgetRequest.bwRequestTypeId + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\');">';
                                                                    workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                    workflowStepHtml += '   </span>';
                                                                    workflowStepHtml += '</span>';
                                                                    workflowStepHtml += '<br />';



                                                                    //alert('xcx555867 selectedRaciRole: ' + selectedRaciRole + ', selectedRoles: ' + JSON.stringify(selectedRoles) + ', assign["@Role"]: ' + assign["@Role"]);


                                                                    //alert('xcx5554 bwWorkflowTasks: ' + JSON.stringify(bwWorkflowTasks));


                                                                    var roleDropDown_html = '';

                                                                    if (!(brData.RequestingUser.RoleIds.includes('ADMIN') || selectedRaciRole)) {

                                                                        // This user does not belong to a role present in this workflow step.
                                                                        roleDropDown_html += 'This user does not belong to a role present in this workflow step'; // This is the whole sentence that will be displayed.

                                                                    } else {


                                                                        ////
                                                                        //// Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022
                                                                        ////

                                                                        //console.log('Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022');

                                                                        ////alert('xcx123124 RolesData.WorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep));

                                                                        //// Assigned Roles:
                                                                        ////displayAlertDialog('xcx235366 RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep));

                                                                        //// This user belongs to these Roles:
                                                                        ////displayAlertDialog('xcx235366 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));

                                                                        //// This user can act On Behalf Of these Roles:
                                                                        ////displayAlertDialog('xcx235366 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                                        //roleDropDown_html += '<select xcx="34234-1" id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;" >';

                                                                        //for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                        //    if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {

                                                                        //        // FUDGE
                                                                        //        if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                        //            if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                        //                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName) {
                                                                        //                    if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == 'ADMIN') {
                                                                        //                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = 'Workflow Administrator';
                                                                        //                    } else {
                                                                        //                        alert('In xcx32536(). No RoleName value for Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role);
                                                                        //                    }
                                                                        //                }
                                                                        //            } else {
                                                                        //                alert('xcx1214-2 In renderRequestForm_ForTrashBin(). INVALID VALUE(S) FOR Role and/or RoleName while creating the role drop-down.');
                                                                        //            }
                                                                        //        }
                                                                        //        // end: FUDGE

                                                                        //        // This is the selected option in the drop down.
                                                                        //        roleDropDown_html += '<option xcx="34234-1-1" style="font-size:30pt;" selected value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                        //        roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                        //        roleDropDown_html += '</option>';

                                                                        //    } else {

                                                                        //        var msg = 'xcx2312 i: ' + i + ', RoleName/Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')';
                                                                        //        console.log(msg);

                                                                        //        roleDropDown_html += '<option xcx="34234-1-2" style="font-size:30pt;" value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                        //        roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                        //        roleDropDown_html += '</option>';
                                                                        //        if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                        //            alert('xcx1214-2 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                        //        }

                                                                        //    }
                                                                        //}
                                                                        //if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // This user is a Workflow Administrator (ADMIN).
                                                                        //    for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                        //        if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                        //            // This is the selected option in the drop down.
                                                                        //            roleDropDown_html += '<option xcx="34234-1-3" style="font-size:30pt;" selected value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                        //            roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                        //            roleDropDown_html += '</option>';
                                                                        //            if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                        //                alert('xcx1214-3 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                        //            }

                                                                        //        } else {
                                                                        //            roleDropDown_html += '<option xcx="34234-1-4" style="font-size:30pt;" value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                        //            roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                        //            roleDropDown_html += '</option>';
                                                                        //            if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                        //                alert('xcx1214-4 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                        //            }
                                                                        //        }
                                                                        //    }
                                                                        //}
                                                                        //roleDropDown_html += '</select>';
                                                                        ////
                                                                        //// end: Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 2-6-2022
                                                                        ////


                                                                        //alert('xcx231234213 Is this where we need to display checklists??????');

                                                                        //alert('xcx1214-2 In renderRequestForm_ForTrashBin().');

                                                                        //if (allowRequestModifications == true) {
                                                                        //    instructions += '<table style="float:right;width:85%;">';

                                                                        //    instructions += '   <tr>';
                                                                        //    instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        //    instructions += workflowStepHtml;
                                                                        //    instructions += '       </td>';
                                                                        //    instructions += '   </tr>';

                                                                        //    instructions += '   <tr>';
                                                                        //    instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        //    instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-1
                                                                        //    //instructions += '       </td>';
                                                                        //    //instructions += '   </tr>';
                                                                        //    //instructions += '   <tr>';
                                                                        //    //instructions += '       <td>';
                                                                        //    instructions += '<div style="float:right">' + roleDropDown_html + '</div>'; // float this to the right so that if it wraps it still looks Ok. 2-12-2022
                                                                        //    instructions += '       </td>';
                                                                        //    instructions += '   </tr>';
                                                                        //    instructions += '   <tr>';
                                                                        //    instructions += '       <td>';
                                                                        //    instructions += '           You are allowed to modify this request.';
                                                                        //    instructions += '       </td>';
                                                                        //    instructions += '   </tr>';
                                                                        //    instructions += '</table>';

                                                                        //    //instructions += 'Your role  as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are allowed to modify this request.';
                                                                        //} else {
                                                                        instructions += '<table style="float:right;width:85%;">';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += workflowStepHtml;
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-2
                                                                        //instructions += '       </td>';
                                                                        //instructions += '   </tr>';
                                                                        //instructions += '   <tr>';
                                                                        //instructions += '       <td>';
                                                                        instructions += '<div style="float:right">' + roleDropDown_html + '</div>';
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td>';
                                                                        instructions += '           You are not allowed to modify this request, but you can add comments.';
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '</table>';


                                                                        //instructions += 'Your role as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are not allowed to modify this request.';
                                                                        //}

                                                                    }
                                                                    //
                                                                    // end: New code to integrate the drop down into the sentence better. 2-6-2022
                                                                    //

                                                                    instructions += '<br />';

                                                                    //instructions += '<span style="cursor:pointer;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequests[0].ProjectTitle + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\');">';
                                                                    //instructions += 'Current workflow step: ' + stepFriendlyName;
                                                                    //instructions += '</span>';
                                                                    //if (workflow.Steps.Step[stepIndex]["@Timeout"]) {
                                                                    //    instructions += '&nbsp;(' + workflow.Steps.Step[stepIndex]["@Timeout"] + ' ' + workflow.Steps.Step[stepIndex]["@TimeoutUnits"] + ')';
                                                                    //}
                                                                    //instructions += '&nbsp;';
                                                                    //var raciTooltip = 'RACI: ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'R = Responsible (also Recommender)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                    //raciTooltip += '\n';
                                                                    //raciTooltip += 'I = Informed (also Informee)  ';
                                                                    //instructions += '<br />';
                                                                    //var tmpRaciRoleString = '';
                                                                    //if (!assign) {
                                                                    //    tmpRaciRoleString = 'NO ASSIGN STEP IN THE WORKFLOW xcx342878';
                                                                    //} else {
                                                                    //    // debugger;
                                                                    //    var roleCategory = assign["@RoleCategory"];
                                                                    //    if (!(roleCategory == 'Approver' || roleCategory == 'Collaborator' || roleCategory == 'Informed')) {
                                                                    //        // Unexpected value for RoleCategory
                                                                    //        tmpRaciRoleString = 'Unexpected value for RoleCategory: ' + roleCategory + '.xcx49964';
                                                                    //    } else {
                                                                    //        switch (roleCategory) {
                                                                    //            case 'Approver':
                                                                    //                tmpRaciRoleString = '<span style="font-weight:bold;color:tomato;">Approver</span>/Collaborator/Informed';
                                                                    //                break;
                                                                    //            case 'Collaborator':
                                                                    //                tmpRaciRoleString = 'Approver/<span style="font-weight:bold;color:tomato;">Collaborator</span>/Informed';
                                                                    //                break;
                                                                    //            case 'Informed':
                                                                    //                tmpRaciRoleString = 'Approver/Collaborator/<span style="font-weight:bold;color:tomato;">Informed</span>';
                                                                    //                break;
                                                                    //        }
                                                                    //    }
                                                                    //}

                                                                    $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = instructions;
                                                                    //
                                                                    // End: Display the instructions.
                                                                    //

                                                                    //alert('The role drop-down has been displayed.');
                                                                    console.log('>>>>>>>>>>>>>>>>> The role drop-down has been displayed.');
                                                                    // debugger;



                                                                    ////
                                                                    //// Double check here to make sure the right item is selected in the drop-down for the role.
                                                                    ////
                                                                    //var dropDownElement = $('#' + requestDialogId).find('#selectedRaciRole')[0];
                                                                    //var selectedValue = $(dropDownElement).find('option:selected').val();
                                                                    //if (!selectedValue) {

                                                                    //    alert('xcx12312-2 In renderRequestForm_ForTrashBin(). Error: The role drop-down does not have a selected value. This process cannot continue.');
                                                                    //    displayAlertDialog('Error in renderRequestForm_ForTrashBin(): The role drop-down does not have a selected value. This process cannot continue.');

                                                                    //} else {

                                                                    //    var selected_indropdown_bwWorkflowTaskItemId = $(dropDownElement).find('option:selected').attr('bwworkflowtaskitemid');
                                                                    //    var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    //    if (selected_indropdown_bwWorkflowTaskItemId && form_bwWorkflowTaskItemId && (selected_indropdown_bwWorkflowTaskItemId == form_bwWorkflowTaskItemId)) {
                                                                    //        // All is well, do nothing.

                                                                    //        //alert('In xcx34234(). Setting value for selected_indropdown_bwWorkflowTaskItemId and setting [bwWorkflowTaskItemId] in [budgetrequestform]: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                    //    } else {
                                                                    //        // Something is up. happened again 11-08-2022
                                                                    //        //alert('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                    //        displayAlertDialog('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId + ', request title: ' + 'xcx21312' + ', workflow step: ' + stepFriendlyName + ', brData.BudgetRequest.bwRequestJson: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));
                                                                    //    }


                                                                    //    //if (bwWorkflowTaskItemId) {
                                                                    //    //    if (bwWorkflowTaskItemId != selected_indropdown_bwWorkflowTaskItemId) {
                                                                    //    //        alert('Error: xcx12423 bwWorkflowTaskItemId does not match with selected_indropdown_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);
                                                                    //    //    } else {
                                                                    //    //        // Do nothing, the budgetrequestform should be populated.
                                                                    //    //        var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    //    //        if (bwWorkflowTaskItemId != form_bwWorkflowTaskItemId) {
                                                                    //    //            alert('Error: xcx12423 bwWorkflowTaskItemId does not match with form_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                    //    //        }
                                                                    //    //    }
                                                                    //    //} else {
                                                                    //    //    // This assumes that the budgetrequestform is not present. We will check!
                                                                    //    //    var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    //    //    if (form_bwWorkflowTaskItemId) {
                                                                    //    //        alert('Error: xcx12423 form_bwWorkflowTaskItemId is present. Unrecoverable error. form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                    //    //    } else {
                                                                    //    //        // This is what we expect, so just store the value in the form.
                                                                    //    //        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', selected_indropdown_bwWorkflowTaskItemId);

                                                                    //    //        alert('xcx214234 role drop down has been rendered. selectedRaciRole: ' + selectedRaciRole + ', assign["@Role"]: ' + assign["@Role"] + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                    //    //    }
                                                                    //    //}

                                                                    //}
                                                                    ////
                                                                    //// end: Double check here to make sure the right item is selected in the drop-down for the role.
                                                                    ////



                                                                    $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                                                    // 2-11-2022 REMOVED THIS FOR NOW, MAY PUT BACK FOR TESTING>?
                                                                    //
                                                                    // Display details in the error section. 
                                                                    //
                                                                    //var html = '';
                                                                    //html += '<table>';

                                                                    //if (brData.RequestingUser.ParticipantRole == 'owner') { // You are the owner of this budget request system.
                                                                    //    html += '  <tr>';
                                                                    //    html += '    <td colspan="2">This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-1:';
                                                                    //    html += '    ' + brData.RequestingUser.ParticipantRole + ' - '; // + '</td>';
                                                                    //    html += '    <span onclick="$(\'.bwRequest\').bwRequest(\'viewThisBudgetRequestSystemDetailsDialog\');" style="text-decoration:underline;cursor:pointer;" title="xClick here to view details about this budget request system...">';
                                                                    //    html += '    You are the owner of this budget request system.xcx1';
                                                                    //    html += '    </span>';
                                                                    //    html += ' - Role: ' + assign["@RoleName"];
                                                                    //    html += '    </td>';
                                                                    //    html += '  </tr>';

                                                                    //} else {
                                                                    //    html += '  <tr>';
                                                                    //    html += '    <td>This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-2:</td>';
                                                                    //    html += '    <td>' + brData.RequestingUser.ParticipantRole + ' - Role: ' + assign["@RoleName"] + '</td>';
                                                                    //    html += '  </tr>';
                                                                    //}

                                                                    //html += '</table>';

                                                                    //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = html;
                                                                    //
                                                                    // end: Display details in the error section. 
                                                                    //





                                                                    //
                                                                    // Checklists.
                                                                    //
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // First we clear the element.

                                                                    //var cond = RolesData.WorkflowStep.Assign["@Cond"];

                                                                    if (RolesData.WorkflowStep.Assign["@Checklists"]) {
                                                                        var WorkflowStep_Assign_Checklists = RolesData.WorkflowStep.Assign["@Checklists"];
                                                                        console.log('xcx31241 This workflow assignment has checklists. WorkflowStep_Assign_Checklists: ' + JSON.stringify(WorkflowStep_Assign_Checklists));

                                                                        //if (cond) {

                                                                        //    // Remove duplicates. cond needs to be converted to JSON someday.
                                                                        //    console.log('I HATE THIS BUT I AM GOING TO REMOVE DUPLICATES HERE. BAD PRACTICE!!!!!!!!!!!!!!!!!!!!!!!! 4-16-2020.');

                                                                        //    if (cond && cond.split('$ChecklistsRequired~')[1]) {
                                                                        //        var checklistGuidArray = cond.split('$ChecklistsRequired~')[1].split(',');
                                                                        //        if (checklistGuidArray) {
                                                                        //            for (var i1 = 0; i1 < checklistGuidArray.length; i1++) {
                                                                        //                if (!newChecklistsArray.includes(checklistGuidArray[i1])) newChecklistsArray.push(checklistGuidArray[i1]);
                                                                        //            }
                                                                        //            cond = '$ChecklistsRequired~' + newChecklistsArray.toString();
                                                                        //        }
                                                                        //    }
                                                                        //}

                                                                        var BudgetRequest_bwRequestJson_Checklists = JSON.parse(brData.bwBudgetRequest.bwRequestJson).Checklists; // These are the checklists that have already been saved in the request.

                                                                        // Populate checklistsAlreadyCompleted.
                                                                        var checklistsAlreadyCompleted = [];
                                                                        for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                            // Check if it has been saved/completed already.
                                                                            if (BudgetRequest_bwRequestJson_Checklists) {
                                                                                for (var j = 0; j < BudgetRequest_bwRequestJson_Checklists.length; j++) {
                                                                                    var brChecklist = JSON.parse(BudgetRequest_bwRequestJson_Checklists[j]);
                                                                                    if (brChecklist.bwChecklistTemplatesId == WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId) {
                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brChecklist.bwChecklistTemplatesId,
                                                                                            html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + brData.bwBudgetRequest.ProjectTitle + '\', \'' + brData.bwBudgetRequest.Title + '\', \'' + brData.bwBudgetRequest.bwRequestType + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + brChecklist.Title + '</span>'
                                                                                        }
                                                                                        checklistsAlreadyCompleted.push(checklistJson); // Already completed, so put in this array.
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        // Populate checklistsRemainingToBeCompleted.
                                                                        var checklistsRemainingToBeCompleted = [];
                                                                        for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                            var checklistHasAlreadyBeenCompleted = false;
                                                                            for (var j = 0; j < checklistsAlreadyCompleted.length; j++) {
                                                                                if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == checklistsAlreadyCompleted[j].bwChecklistTemplatesId) {
                                                                                    checklistHasAlreadyBeenCompleted = true;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            if (checklistHasAlreadyBeenCompleted != true) {
                                                                                for (var j = 0; j < brData.OrganizationChecklists.length; j++) { // OrganizationChecklists
                                                                                    if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                        var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;
                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brData.OrganizationChecklists[j].bwChecklistTemplatesId,
                                                                                            html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.OrganizationChecklists[j].bwChecklistTemplatesId + '\', \'' + String(brData.bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.bwBudgetRequest.Title + '\', \'' + brData.bwBudgetRequest.bwRequestType + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</span>'
                                                                                        }
                                                                                        checklistsRemainingToBeCompleted.push(checklistJson); // The checklists remaining to be completed get stored in this array.
                                                                                    }
                                                                                }
                                                                            }
                                                                        }


                                                                        var checklistsHtml = '';

                                                                        checklistsHtml += '<div>';

                                                                        // Display "All checklists". Everyone sees this list.
                                                                        thiz.options.Checklists = brData.OrganizationChecklists; //[]; // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                        if (brData.Checklists.length > 0) {
                                                                            if (brData.Checklists.length == 1) {
                                                                                checklistsHtml += 'Checklist to be completed for this request: ';
                                                                            } else {
                                                                                checklistsHtml += 'Checklists to be completed for this request: '; // 12-31-2022 // brData.Checklists[j]
                                                                            }

                                                                            checklistsHtml += '<ul>';
                                                                            alert('xcx213421 brData.Checklists: ' + JSON.stringify(brData.Checklists));
                                                                            debugger;
                                                                            for (var i = 0; i < brData.Checklists.length; i++) {
                                                                                for (var j = 0; j < brData.OrganizationChecklists.length; j++) {
                                                                                    if (brData.Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                        var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;

                                                                                        var checklistJson = {
                                                                                            bwChecklistTemplatesId: brData.Checklists[i].bwChecklistTemplatesId,
                                                                                            html: '<li style="cursor:pointer;text-decoration:underline;text-align:left;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.Checklists[i].bwChecklistTemplatesId + '\', \'' + String(brData.bwBudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.bwBudgetRequest.Title + '\', \'' + brData.bwBudgetRequest.bwRequestType + '\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\', \'' + brData.bwBudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</li>'
                                                                                        }

                                                                                        checklistsHtml += checklistJson.html;
                                                                                        thiz.options.Checklists.push(brData.Checklists[i]); // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                                    }
                                                                                }
                                                                            }
                                                                            checklistsHtml += '</ul>';

                                                                            checklistsHtml += '</div>';
                                                                        }

                                                                        //if (cond) {

                                                                        //console.log('xcx99223 In bwRequest.xx(). cond: ' + JSON.stringify(cond));

                                                                        if ((checklistsAlreadyCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0)) {

                                                                            checklistsHtml += '<div>';

                                                                            // Display "Completed Checklists".
                                                                            if (checklistsAlreadyCompleted.length > 0) {
                                                                                if (checklistsAlreadyCompleted.length == 1) {
                                                                                    checklistsHtml += 'Completed checklist: ';
                                                                                } else {
                                                                                    checklistsHtml += 'Completed checklists: ';
                                                                                }
                                                                                //checklistsAlreadyCompleted = thiz.removeDuplicates(JSON.parse(JSON.stringify(checklistsAlreadyCompleted)));
                                                                                for (var i = 0; i < checklistsAlreadyCompleted.length; i++) {
                                                                                    checklistsHtml += '<span xcx="xcx99205476" style="white-space:nowrap;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                                                                    checklistsHtml += '&nbsp;' + checklistsAlreadyCompleted[i].html;
                                                                                    checklistsHtml += '</span>';
                                                                                    checklistsHtml += '<br />';
                                                                                }
                                                                            }

                                                                            // Display "Checklists to be completed".
                                                                            if (checklistsRemainingToBeCompleted.length > 0) {
                                                                                checklistsHtml += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                                                                checklistsHtml += '&nbsp;';
                                                                                if (checklistsRemainingToBeCompleted.length == 1) {
                                                                                    checklistsHtml += 'Complete the following checklist before you Approve: ';
                                                                                } else {
                                                                                    checklistsHtml += 'Complete the following checklist(s) before you Approve: ';
                                                                                }

                                                                                checklistsHtml += '<ul>';
                                                                                for (var i = 0; i < checklistsRemainingToBeCompleted.length; i++) {

                                                                                    checklistsHtml += '<li style="cursor:pointer;text-decoration:underline;text-align:left;" >' + checklistsRemainingToBeCompleted[i].html + '</li>'

                                                                                }
                                                                                checklistsHtml += '</ul>';

                                                                                checklistsHtml += '<br />';

                                                                            }

                                                                            checklistsHtml += '</div>';

                                                                        }

                                                                        $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                    }

                                                                    //$('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                    //
                                                                    // end: Display checklists.
                                                                    //




                                                                    //
                                                                    // Display the buttons.
                                                                    //
                                                                    //thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-7', false, RolesData.WorkflowStep.Assign, RolesData.RequestingUser, roleMember, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, allowRequestModifications, checklistsRemainingToBeCompleted);

                                                                    //alert('xcx12341242 trying to render the Recover button... does it work? Is this the right place? 4-19-2023.');
                                                                    // 4-19-2023
                                                                    var html = '';

                                                                    // "Permanently delete this request" button.
                                                                    html += '                        <button style="width:370px;color:tomato;padding: 7px 5px 5px 5px;" onclick="$(\'.bwRequest\').bwRequest(\'permanentlyDeleteThisRequestFromTheTrashbin\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\');" title="Permanently delete this request." class="BwButton250ForRequestForm"><span style="text-align:right;cursor:pointer;font-size:30pt;">X</span> Permanently Delete this Request</button>';
                                                                    html += '                        &nbsp;';

                                                                    // "Recover from the trashbin" button. 
                                                                    html += '                        <button style="width:320px;color:green;padding: 0 5px 5px 5px;" onclick="$(\'.bwRequest\').bwRequest(\'recoverFromTheTrashBin\', \'' + brData.bwBudgetRequest.bwBudgetRequestId + '\');" title="♻ Recover from the TrashBin." class="BwButton250ForRequestForm"><span style="text-align:right;cursor:pointer;font-size:30pt;">♻</span> Recover from the TrashBin</button>';
                                                                    html += '                        &nbsp;';

                                                                    $('#' + requestDialogId).find('#spanRequestForm_Buttons')[0].innerHTML = html;



                                                                    //
                                                                    // end: Display the buttons.
                                                                    //






                                                                    //
                                                                    // Display the instructions.
                                                                    //
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = ''; // First, we clear the element.

                                                                    instructions = '';
                                                                    if (RolesData.WorkflowStep.Assign && RolesData.WorkflowStep.Assign["@Instructions"]) {
                                                                        instructions += RolesData.WorkflowStep.Assign["@Instructions"]; // The workflow had "Instructions" specified.
                                                                        //instructions += 'WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1';
                                                                        console.log('WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1');
                                                                    } else {

                                                                        console.log('In bwRequest.js.xx(). COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1');
                                                                        //instructions += ' - COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1';

                                                                    }
                                                                    if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length > 0) {
                                                                        instructions += 'Complete the required checklists before approving this request.';
                                                                        instructions += '<br />';
                                                                    }
                                                                    if (instructions && (instructions != 'undefined')) {
                                                                        console.log('');
                                                                        console.log('**********');
                                                                        console.log('In bwRequest.js.renderRequestForm(). Displaying instructions from the workflow JSON in the request form header. instructions: ' + instructions);
                                                                        console.log('**********');
                                                                        console.log('');
                                                                        $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                                        //alert('The instructions have been displayed.');
                                                                        console.log('The instructions have been displayed.');
                                                                        // debugger;

                                                                    }
                                                                    // end: Display the instructions.

                                                                    //
                                                                    // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                                                    //
                                                                    //alert('Calling populateRequestForm(). xcx3452-2-2 brData.BudgetRequest.bwRequestJson XXX: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));
                                                                    console.log('Calling populateRequestForm(). xcx3452-2-2 brData.bwBudgetRequest.bwRequestJson: ' + JSON.stringify(brData.bwBudgetRequest.bwRequestJson));
                                                                    var promise = thiz.populateRequestForm(requestDialogId, brData.bwBudgetRequest.bwRequestJson, allowRequestModifications);
                                                                    promise.then(function () {
                                                                        try {

                                                                            // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                            var canvas = document.getElementById("myCanvas");
                                                                            if (canvas) {
                                                                                // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                                var body = document.getElementsByTagName('body')[0];
                                                                                var clientWidth = body.scrollWidth;
                                                                                var clientHeight = Math.max(
                                                                                    body.scrollHeight, document.documentElement.scrollHeight,
                                                                                    body.offsetHeight, document.documentElement.offsetHeight,
                                                                                    body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                                );
                                                                                // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                                // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                                // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                                canvas.width = clientWidth;
                                                                                canvas.height = clientHeight;
                                                                            }

                                                                            // If off the screen, re-position. 4-17-2022
                                                                            var left = document.getElementById(requestDialogId).getBoundingClientRect().left;
                                                                            if (left < 0) {
                                                                                console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-4 left: ' + left);
                                                                                alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-4 left: ' + left);
                                                                                $('#' + requestDialogId).dialog({
                                                                                    position: {
                                                                                        my: "center top", at: "center top+200", of: window
                                                                                    }
                                                                                });
                                                                            }

                                                                            // This closes the in-browser request dialog, if this one is a popped-out window one.
                                                                            try {
                                                                                // This is in a try-catch because if the link comes from an email client, you get this error: [Blocked a frame with origin "https://shareandcollaborate.com" from accessing a cross-origin frame.]
                                                                                if (window.opener) {
                                                                                    var dialogId = 'divRequestFormDialog_' + brData.bwBudgetRequest.bwBudgetRequestId;
                                                                                    console.log('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                    //alert('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                    window.opener.$('#' + dialogId).dialog('close');
                                                                                }
                                                                            } catch (e) { }

                                                                        } catch (e) {
                                                                            console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                        }
                                                                    });

                                                                } catch (e) {
                                                                    console.log('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                    displayAlertDialog('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                    alert('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                }
                                                            }).fail(function (data) {
                                                                var msg;
                                                                if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                                                                    msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                                                                } else {
                                                                    msg = JSON.stringify(data);
                                                                }
                                                                displayAlertDialog('Error in bwRequest.js.renderRequestForm.UserRole2.fail():2: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                                                                console.log('Error in bwRequest.js.renderRequestForm.UserRole2.fail():2: ' + JSON.stringify(data));
                                                                alert('Error in bwRequest.js.renderRequestForm.UserRole2.fail():2: ' + msg);
                                                            });

                                                            //}
                                                        }

                                                    }
                                                }

                                                //
                                                // Render the bwLocationPicker.js widget here.
                                                //
                                                var options = {
                                                    bwTenantId: tenantId,
                                                    bwWorkflowAppId: workflowAppId,
                                                    bwParticipantId: participantId,
                                                    bwParticipantEmail: participantEmail,
                                                    bwParticipantFriendlyName: participantFriendlyName,
                                                    bwEnabledRequestTypes: bwEnabledRequestTypes,
                                                    bwOrgId: bwOrgId,
                                                    bwOrgName: bwOrgName
                                                };
                                                var $bwLocationPicker = $('#' + requestDialogId).find('#divBwLocationPicker').bwLocationPicker(options);

                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                        }
                                    });
                                }
                            } catch (e) {
                                console.log('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                            }
                        }
                    });
                }

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
        }
    },

    renderRequestForm_old: function (brData, activeStateIdentifier, budgetRequestId, requestDialogId, participantId, workflowAppId, selectedRaciRole) {
        //
        // THIS IS THE ONLY PLACE WHERE WE RENDER THE FORM AND DISPLAY THE DIALOG. Revision: 12-16-2023. 1st revison: 1-15-2023.
        //
        try {
            var thiz = this;

            console.log('In renderRequestForm_old(). brData: ' + JSON.stringify(brData));
            //alert('In renderRequestForm(). brData.BudgetRequest.BudgetWorkflowStatus: ' + brData.BudgetRequest.BudgetWorkflowStatus);
            //displayAlertDialog_Persistent('In renderRequestForm(). brData: ' + JSON.stringify(brData));

            if (!brData.BudgetRequest.bwWorkflowAppId || !brData.BudgetRequest.bwBudgetRequestId) {

                alert('Error in renderRequestForm(). Unexpected value(s) for brData.BudgetRequest.bwWorkflowAppId: ' + !brData.BudgetRequest.bwWorkflowAppId + ', brData.BudgetRequest.bwBudgetRequestId: ' + brData.BudgetRequest.bwBudgetRequestId);
                displayAlertDialog('Error in renderRequestForm(). Unexpected value(s) for brData.BudgetRequest.bwWorkflowAppId: ' + !brData.BudgetRequest.bwWorkflowAppId + ', brData.BudgetRequest.bwBudgetRequestId: ' + brData.BudgetRequest.bwBudgetRequestId);

            } else {

                if (brData.BudgetRequest.BudgetWorkflowStatus == 'NOT_SUBMITTED') {

                    console.log('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);
                    alert('In bwRequest.js.displayRequestForm(). THIS MUST BE A NEW REQUEST xcx3434 brData.BudgetWorkflowStatus: ' + brData.BudgetWorkflowStatus);

                    var promise = thiz.getRequestFormHtml(brData.BudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-5');
                    promise.then(function (results) {
                        try {
                            //if (brData.BudgetRequest.bwRequestType == 'recurringexpense') {
                            //    // debugger;
                            //    displayAlertDialog('xxxxxxxxcx34564544');
                            //}
                            if (results.message != null) {

                                // We have an error!!
                                console.log('Error: ' + results.message);
                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;

                            } else {

                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                //
                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                //if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                //    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                //}
                                // end


                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', brData.BudgetRequest.bwRequestTypeId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', brData.BudgetRequest.bwFiscalYear);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', brData.BudgetRequest.bwBudgetRequestId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', brData.BudgetRequest.Title);
                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId); // Commented this out 10-7-2022. Populating below near where we create the role drop-down.
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', brData.BudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                var bwOrgId = brData.BudgetRequest.OrgId;
                                var bwOrgName = brData.BudgetRequest.OrgName;

                                if (!(bwOrgId)) {
                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                }

                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                var functionalAreaId = brData.BudgetRequest.FunctionalAreaId; // eg: 1;
                                var pmAccountId = brData.BudgetRequest.ManagerId; // eg: 9;
                                var managerFriendlyName = brData.BudgetRequest.ManagerFriendlyName;
                                var arStatus = brData.BudgetRequest.ARStatus; // eg: 'Submitted';

                                //bwApprovalLevelWorkflowToken = brData.BudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                // Get the request type SingletonName.
                                var requestType;
                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                    if (brData.BudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                        requestType = bwEnabledRequestTypes[i];
                                        break;
                                    }
                                }

                                var html = '';

                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                                if (!requestType) {
                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + brData.BudgetRequest.bwRequestTypeId + ' ';
                                } else {
                                    html += '                       New ' + requestType.SingletonName + ': ';
                                }

                                html += '&nbsp;<span xcx="xcx3567-1" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                                html += '</span>';
                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                }
                                //
                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                //

                                $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = '';
                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                // Display the instructions.
                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = 'Complete the form then click the "Submit" button.';

                                // Display the buttons.
                                //var html = '';

                                //html += '<button onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                                //html += '                        &nbsp;';

                                //html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                                //html += '                        &nbsp;';

                                //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';

                                //html += '                        &nbsp;';

                                //html += '                        <button xcx="xcx4242-3" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm">Close</button>';

                                //thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-1');
                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest, null, html, 'xcx445566-1'); // 3-2-2024.


                                //
                                // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                //
                                console.log('Calling populateRequestForm(). xcx3452-2-1');
                                var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, true); //allowRequestModifications);
                                promise.then(function () {
                                    try {

                                        // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                        var canvas = document.getElementById("myCanvas");
                                        if (canvas) {
                                            // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                            var body = document.getElementsByTagName('body')[0];
                                            var clientWidth = body.scrollWidth;
                                            var clientHeight = Math.max(
                                                body.scrollHeight, document.documentElement.scrollHeight,
                                                body.offsetHeight, document.documentElement.offsetHeight,
                                                body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                            );
                                            // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                            // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                            // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                            canvas.width = clientWidth;
                                            canvas.height = clientHeight;
                                        }

                                        // If off the screen, re-position. 4-17-2022
                                        var left = document.getElementById(requestDialogId).getBoundingClientRect().left;
                                        if (left < 0) {
                                            console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-1 left: ' + left);
                                            alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-1 left: ' + left);
                                            $('#' + requestDialogId).dialog({
                                                position: { my: "center top", at: "center top", of: window }
                                            });
                                        }

                                        // This closes the in-browser request dialog, if this one is a popped-out window one. 8-15-2022
                                        if (window.opener) {
                                            var dialogId = 'divRequestFormDialog_' + brData.BudgetRequest.bwBudgetRequestId;
                                            alert('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            console.log('xcx999334-3 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                            window.opener.$('#' + dialogId).dialog('close');
                                        }

                                        // RIGHT-CLICK FUNCTIONALITY!!
                                        // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                        var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                        $(button).on('click', function (e) {
                                            e.preventDefault();
                                            e.stopImmediatePropagation();
                                            $(this).contextMenu();
                                        });

                                        console.log('Displaying elipses context menu for request without a workflow (new request).');
                                        //alert('Displaying elipses context menu for request without a workflow (new request). xcx1');
                                        // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                        $.contextMenu({
                                            selector: '.context-menu-newrequesteditor',
                                            callback: function (key, options) {
                                                var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                if (key == 'requestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requestjsondignostics') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                } else if (key == 'requestjsondb') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'viewbwbudgetrequestjson') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                        //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                        thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'requesthtmldb') {
                                                    displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                } else if (key == 'viewworkflowjson') {
                                                    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                } else if (key == 'changetherequesttype') {
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                    }
                                                } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                    // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                    //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'viewtaskjson') {
                                                    // This is for testing.
                                                    if (!bwWorkflowTaskItemId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                    } else {
                                                        thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                    }
                                                } else if (key == 'deletethisrequest') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {
                                                        thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, 'this New Request');
                                                    }
                                                } else if (key == 'setreminder') {
                                                    //var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                    if (!bwBudgetRequestId) {
                                                        displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                    } else {

                                                        var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                        if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                            $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request');
                                                        } else {

                                                            // The widget has not been instantiated, so doing that here.
                                                            var div = document.getElementById('divBwOneTimeRequestReminders');
                                                            if (div) {
                                                                div.remove(); // This gets rid of it so we can start fresh. 
                                                            }
                                                            div = document.createElement('div');
                                                            div.id = 'divBwOneTimeRequestReminders';
                                                            div.style.display = 'none';
                                                            document.body.appendChild(div); // Place at end of document.

                                                            $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                            $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, 'this New Request'); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                        }
                                                    }
                                                }
                                            },
                                            items: {
                                                "requestjson": {
                                                    name: "Request JSON", icon: "edit"
                                                },
                                                "requestjsondb": {
                                                    name: "Request JSON from Database", icon: "edit"
                                                },
                                                //"viewbwbudgetrequestjson": {
                                                //    name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                //},
                                                //"updatedailyoverduetasknotificationdate": {
                                                //    name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                //},
                                                //"viewtaskjson": {
                                                //    name: "Task JSON", icon: "edit"
                                                //},
                                                //"requestjsondignostics": {
                                                //    name: "Request JSON Diagnostics", icon: "edit"
                                                //},
                                                //"requesthtmldb": {
                                                //    name: "Request Form HTML from Database  xcx1-3", icon: "edit"
                                                //},
                                                //"viewworkflowjson": {
                                                //    name: "View Workflow Step/Role Json", icon: "edit"
                                                //},
                                                "changetherequesttype": {
                                                    name: "Change the Request Type", icon: "edit"
                                                },
                                                "deletethisrequest": {
                                                    name: "Delete this Request", icon: "edit"
                                                },
                                                "setreminder": {
                                                    name: "Set a One-Time Reminder", icon: "edit"
                                                }
                                            }
                                        });
                                        // End: This is our right-click context menu.

                                    } catch (e) {
                                        console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                        displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-1: ' + e.message + ', ' + e.stack);
                                    }
                                });

                            }
                        } catch (e) {
                            console.log('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                            alert('Exception in bwRequest.js.renderRequestForm():21-1-2: ' + e.message + ', ' + e.stack);
                        }
                    });

                } else {

                    //
                    // This request has a workflow. brData.BudgetRequest.BudgetWorkflowStatus != 'NOT_SUBMITTED'
                    //
                    //displayAlertDialog('xcx877097808 brData.BudgetRequest: ' + JSON.stringify(brData.BudgetRequest));
                    var data = {
                        bwParticipantId_LoggedIn: participantId,
                        bwActiveStateIdentifier: activeStateIdentifier,
                        bwWorkflowAppId_LoggedIn: workflowAppId,

                        bwWorkflowAppId: workflowAppId,
                        bwBudgetRequestId: budgetRequestId
                        //WorkflowStepName: brData.BudgetRequest.BudgetWorkflowStatus // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022 // BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                    };
                    //alert('In renderRequestForm(). xcx12325-1. Calling /workflowconfiguration5().');
                    $.ajax({
                        url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                        type: "POST",
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        error: function (data, errorCode, errorMessage) {

                            console.log('xcx23123-2 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);
                            displayAlertDialog('xcx23123-2 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);

                        },
                        success: function (result) {
                            try {

                                if (result.status != 'SUCCESS') {

                                    console.log(result.message);
                                    displayAlertDialog(result.message);

                                } else {

                                    var workflow;
                                    if (!result.Workflow) {

                                        if (brData.BudgetRequest.BudgetWorkflowStatus != 'NOT_SUBMITTED') {

                                            console.log('In bwRequest.js.displayRequestForm(). THERE IS NO WORKFLOW FOR THIS REQUEST TYPE. HOWEVER, BudgetWorkflowStatus SHOULD BE NOT_SUBMITTED. IT IS NOT. brData.BudgetRequest.BudgetWorkflowStatus: ' + brData.BudgetRequest.BudgetWorkflowStatus);
                                            alert('In bwRequest.js.displayRequestForm(). THERE IS NO WORKFLOW FOR THIS REQUEST TYPE. HOWEVER, BudgetWorkflowStatus SHOULD BE NOT_SUBMITTED. IT IS NOT. brData.BudgetRequest.BudgetWorkflowStatus: ' + brData.BudgetRequest.BudgetWorkflowStatus);
                                            displayAlertDialog_Persistent('In bwRequest.js.displayRequestForm(). brData: ' + JSON.stringify(brData));

                                        } else {

                                            // This request has no workflow.
                                            console.log('This request has no workflow. xcx4354376.');
                                            alert('This request has no workflow. xcx4354376.');

                                        }

                                    } else {

                                        workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                    }




                                    console.log('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');
                                    //alert('HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022');

                                    //
                                    // HERE WE GO! WE HAVE A GOOD WORKFLOW JSON. This is the only place we should be creating a header for a form!!!! 2-11-2022
                                    //
                                    //var workflowParent = result.Workflow[0];
                                    //var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);




                                    //alert('xcx12313 result.Tasks: ' + JSON.stringify(result.Tasks));

                                    // The web service returns all tasks for this request. We want it to!!! This allows us to validate some things as well. Always nice to do this once in a while, as it adds to the stability of the system.
                                    var bwWorkflowTasks = []; //var bwWorkflowTasks = result.Tasks; // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } }
                                    if (result.Tasks && result.Tasks.length) {
                                        for (var i = 0; i < result.Tasks.length; i++) {
                                            if (result.Tasks[i].WorkflowStepName == brData.BudgetRequest.BudgetWorkflowStatus) {
                                                bwWorkflowTasks.push(result.Tasks[i]);
                                            } else {
                                                if ((result.Tasks[i].bwStatus == 'Completed') && (result.Tasks[i].bwPercentComplete == 100)) {
                                                    //
                                                    // AUDIT: We can use this to check that all previous Tasks were assigned and completed if we wish to.... like an Auditing step to ensure our data is complete and no messing around has happened.
                                                    //
                                                    console.log('AUDIT Success in bwRequest.js.displayRequestForm(). This task was completed for request "' + brData.BudgetRequest.Title + '" [' + brData.BudgetRequest.bwBudgetRequestId + ']. bwWorkflowTaskItemId: [' + result.Tasks[i].bwWorkflowTaskItemId + ']');
                                                } else {

                                                    console.log('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + brData.BudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);
                                                    displayAlertDialog('AUDIT Error in bwRequest.js.displayRequestForm(): An unfinished task exists for this request which does not match the current workflow step of: ' + brData.BudgetRequest.BudgetWorkflowStatus + '. The mismatched step is ' + result.Tasks[i].WorkflowStepName);

                                                }
                                            }
                                        }
                                    }





                                    console.log('In bwRequest.js.renderRequestForm(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + brData.BudgetRequest.bwRequestTypeId);
                                    //alert('In bwRequest.js.displayRequestFormDialog(). xcx235-4 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + brData.BudgetRequest.bwRequestTypeId);

                                    var promise = thiz.getRequestFormHtml(brData.BudgetRequest.bwRequestTypeId, null, brData.ConfigurationModifiedDate_BwForm, 'xcx23452-6');
                                    promise.then(function (results) {
                                        try {
                                            //// debugger;
                                            //if (brData.BudgetRequest.bwRequestType == 'recurringexpense') {
                                            //    // debugger;
                                            //    displayAlertDialog('xxxxxxxxcx34564544');
                                            //}
                                            if (results.message != null) {

                                                // We have an error!!
                                                console.log('Error: ' + results.message);
                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;

                                            } else {

                                                $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;

                                                //
                                                // Get rid of this uneeded piece... It is the View workflow/participants link at the top which gets displayed again below.
                                                if ($('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink') && $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0]) {
                                                    $('#' + requestDialogId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
                                                }
                                                // end


                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', brData.BudgetRequest.bwRequestTypeId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwfiscalyear', brData.BudgetRequest.bwFiscalYear);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', brData.BudgetRequest.bwBudgetRequestId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', brData.BudgetRequest.Title);

                                                // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', bwWorkflowTaskItemId);

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowstatus_bwworkflowstepname', brData.BudgetRequest.BudgetWorkflowStatus); // This needs to match, it is how we locate the step. //'Assign Budget'; // renamed to "Admin".

                                                var bwOrgId = brData.BudgetRequest.OrgId;
                                                var bwOrgName = brData.BudgetRequest.OrgName;

                                                if (!(bwOrgId)) {
                                                    console.log('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                    alert('FATAL ERROR in bwRequest.js.renderRequestForm(). Empty values for org. bwOrgId: ' + bwOrgId + ', bwOrgName: ' + bwOrgName);
                                                }

                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                                $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                                var functionalAreaId = brData.BudgetRequest.FunctionalAreaId; // eg: 1;
                                                var pmAccountId = brData.BudgetRequest.ManagerId; // eg: 9;
                                                var managerFriendlyName = brData.BudgetRequest.ManagerFriendlyName;
                                                var arStatus = brData.BudgetRequest.ARStatus; // eg: 'Submitted';

                                                bwApprovalLevelWorkflowToken = brData.BudgetRequest.bwApprovalLevelWorkflowToken; // global declared in my.js

                                                // Get the request type SingletonName.
                                                var requestType;
                                                var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                                                for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                                    if (brData.BudgetRequest.bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                                        requestType = bwEnabledRequestTypes[i];
                                                        break;
                                                    }
                                                }

                                                var html = '';

                                                html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';

                                                if (!requestType) {
                                                    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + brData.BudgetRequest.bwRequestTypeId + ': ';
                                                } else {
                                                    html += '                       ' + requestType.SingletonName + ': ';
                                                }

                                                html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                                                html += brData.BudgetRequest.Title;
                                                html += '                       </span>';
                                                //html += '&nbsp;<span xcx="xcx3567-2" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '&nbsp;<span xcx="xcx3567-2-1-2" id="spanNewRequestEllipsesButton" class="spanButton2 context_menu_requestformellipses" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                html += '</span>';
                                                if ($('#' + requestDialogId).find('#spanRequestForm_Title') && $('#' + requestDialogId).find('#spanRequestForm_Title')[0]) {
                                                    $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;
                                                }







                                                //
                                                // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                                //

                                                //if (result.Workflow.length == 0) {

                                                //    console.log('ERROR: Cannot locate workflow: ' + brData.BudgetRequest.bwWorkflowId);
                                                //    displayAlertDialog('ERROR: Cannot locate workflow: ' + brData.BudgetRequest.bwWorkflowId);
                                                //    var instructions = '';
                                                //    instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequest.bwWorkflowId + '. <span style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'reassignOrphanedRequestToAnActiveWorkflow\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\');">Click here to reassign to an active workflow for this "' + brData.BudgetRequest.bwRequestType + '".</a></span>';
                                                //    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                //} else {
                                                // Get the workflow step.
                                                var stepIndex = null;
                                                var stepName = null;

                                                if (workflow) {
                                                    for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                                        stepName = workflow.Steps.Step[i]["@Name"];
                                                        if (stepName == brData.BudgetRequest.BudgetWorkflowStatus) {
                                                            stepIndex = i;
                                                            break;
                                                        }
                                                    }
                                                }

                                                // RIGHT-CLICK FUNCTIONALITY!!
                                                // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                                var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                                $(button).on('click', function (e) {
                                                    e.preventDefault();
                                                    e.stopImmediatePropagation();
                                                    $(this).contextMenu();
                                                });

                                                var developerModeEnabled = $('.bwAuthentication').bwAuthentication('option', 'developerModeEnabled');





                                                if (developerModeEnabled == true) {
                                                    // The full drop down menu with all the options.
                                                    console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-1');
                                                    alert('Displaying elipses context menu for request without a workflow (new request). xcx214-1');
                                                    // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                    $.contextMenu({
                                                        selector: '.context_menu_requestformellipses',
                                                        callback: function (key, options) {
                                                            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                            var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                            var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                            if (key == 'requestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'requestjsondignostics') {
                                                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                            } else if (key == 'requestjsondb') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'viewbwbudgetrequestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                    //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                                    thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'requesthtmldb') {
                                                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                            } else if (key == 'viewworkflowjson') {
                                                                thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                            } else if (key == 'changetherequesttype') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'deletethisrequest') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                }
                                                            } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                                // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                                //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                                }
                                                            } else if (key == 'viewtaskjson') {
                                                                // This is for testing.
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                                }
                                                            }
                                                        },
                                                        items: {
                                                            "requestjson": {
                                                                name: "Request JSON (scraped2) xcx2", icon: "edit"
                                                            },
                                                            "requestjsondb": {
                                                                name: "Request JSON from Database", icon: "edit"
                                                            },
                                                            "viewbwbudgetrequestjson": {
                                                                name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                            },
                                                            "updatedailyoverduetasknotificationdate": {
                                                                name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                            },
                                                            "viewtaskjson": {
                                                                name: "Task JSON", icon: "edit"
                                                            },
                                                            "requestjsondignostics": {
                                                                name: "Request JSON Diagnostics", icon: "edit"
                                                            },
                                                            "requesthtmldb": {
                                                                name: "Request Form HTML from Database xcx1-4", icon: "edit"
                                                            },
                                                            "viewworkflowjson": {
                                                                name: "View Workflow Step/Role Json", icon: "edit"
                                                            },
                                                            "changetherequesttype": {
                                                                name: "Change the Request Type", icon: "edit"
                                                            }
                                                            ,
                                                            "deletethisrequest": {
                                                                name: "Delete this Requestxcx2", icon: "edit"
                                                            }
                                                        }
                                                    });
                                                    // End: This is our right-click context menu.

                                                } else {

                                                    // Only the options in the drop down that the user needs.
                                                    console.log('Displaying elipses context menu for request with a workflow (new request). xcx214-2');
                                                    //alert('Displaying elipses context menu for request without a workflow (new request). xcx214-2');
                                                    // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                    $.contextMenu({
                                                        selector: '.context_menu_requestformellipses',
                                                        callback: function (key, options) {
                                                            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                                                            var bwWorkflowTaskItemId = $(this).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                            var requestDialogId2 = 'divRequestFormDialog_' + bwBudgetRequestId;

                                                            if (key == 'requestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewScrapedBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'requestjsondb') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(requestjsondb). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'viewbwbudgetrequestjson') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewbwbudgetrequestjson). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    //thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                                                                    //alert('This functionality is incomplete. Coming soon! xcx12143254.');
                                                                    thiz.viewDatabaseBwRequestJson2(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'viewtaskjson') {
                                                                // This is for testing.
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(viewtaskjson). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.viewTaskJsonInDialog(bwWorkflowTaskItemId);
                                                                }
                                                            } else if (key == 'viewworkflowjson') {
                                                                thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                            } else if (key == 'updatedailyoverduetasknotificationdate') {
                                                                // This is for testing overdue tasks timer, or just for re-sending overdue task notifications.
                                                                //alert('bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                if (!bwWorkflowTaskItemId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(updatedailyoverduetasknotificationdate). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                                                                } else {
                                                                    thiz.displayUpdateDailyOverdueTaskNotificationDateDialog(bwWorkflowTaskItemId);
                                                                }
                                                            } else if (key == 'changetherequesttype') {
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(changetherequesttype). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.changeTheRequestTypeForARequest(bwBudgetRequestId);
                                                                }
                                                            } else if (key == 'deletethisrequest') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {
                                                                    thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
                                                                }
                                                            } else if (key == 'setreminder') {
                                                                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                                                                if (!bwBudgetRequestId) {
                                                                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(setreminder). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
                                                                } else {

                                                                    var tmpWidget = $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders();
                                                                    if (tmpWidget && tmpWidget.length && (tmpWidget.length == 1)) {
                                                                        $('.bwOneTimeRequestReminders').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle);
                                                                    } else {

                                                                        // The widget has not been instantiated, so doing that here.
                                                                        var div = document.getElementById('divBwOneTimeRequestReminders');
                                                                        if (div) {
                                                                            div.remove(); // This gets rid of it so we can start fresh. 
                                                                        }
                                                                        div = document.createElement('div');
                                                                        div.id = 'divBwOneTimeRequestReminders';
                                                                        div.style.display = 'none';
                                                                        document.body.appendChild(div); // Place at end of document.

                                                                        $(div).bwOneTimeRequestReminders({}); // Instantiate the widget.

                                                                        $('.bwOneTimeRequestReminders:first').bwOneTimeRequestReminders('cmdDisplaySetBudgetRequestReminderDialog', bwBudgetRequestId, bwRequestTitle); // Call the method "cmdDisplaySetBudgetRequestReminderDialog".

                                                                    }
                                                                }
                                                            }

                                                        },
                                                        items: {
                                                            "requestjson": {
                                                                name: "Request JSON (scraped) xcx231234-3", icon: "edit"
                                                            },
                                                            "requestjsondb": {
                                                                name: "Request JSON (from database)", icon: "edit"
                                                            },
                                                            "viewbwbudgetrequestjson": {
                                                                name: "Request JSON (bwBudgetRequest)", icon: "edit"
                                                            },
                                                            "viewtaskjson": {
                                                                name: "Task JSON", icon: "edit"
                                                            },
                                                            "viewworkflowjson": {
                                                                name: "View Workflow Step/Role Json", icon: "edit"
                                                            },
                                                            "updatedailyoverduetasknotificationdate": {
                                                                name: "Update DailyOverdueTaskNotificationDate", icon: "edit"
                                                            },
                                                            "changetherequesttype": {
                                                                name: "Change the Request Type", icon: "edit"
                                                            },
                                                            "deletethisrequest": {
                                                                name: "Delete this Request", icon: "edit"
                                                            },
                                                            "setreminder": {
                                                                name: "Set a One-Time Reminder", icon: "edit"
                                                            }
                                                        }
                                                    });
                                                    // End: This is our right-click context menu.


                                                }

                                                if (stepIndex == null) {

                                                    if (!workflow) {

                                                        //
                                                        // THIS REQUEST TYPE HAS NO WORKFLOW. For example, the "CONTACT" request type has no workflow. 10-30-2023.
                                                        //

                                                        var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-4');

                                                                //
                                                                // COME BACK HERE AND FIX!!!!!!!!!!!!!!! WHEN INVALID WORKFLOW STEP, THE FORM DOES NOT RENDER, EVEN IN READ-ONLY MODE. 1-5-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                //
                                                                //var msg = 'Error in bwRequest.js.renderRequestForm(). Invalid workflow step. The step "' + brData.BudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs.';

                                                                //displayAlertDialog(msg); // We need a remediation step for the user here. If this is an issue, contact support@budgetworkflow.com. workflow.Steps.Step: ' + JSON.stringify(workflow.Steps.Step));
                                                                //console.log(msg);
                                                                //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                                                                //// Display the buttons.
                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-2', false, 'ERROR');

                                                                // Display the instructions.
                                                                //var instructions = 'Invalid workflow step. The step "' + brData.BudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs. Select the Revise/Revert button to restart the request workflow.';
                                                                //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;



                                                                //
                                                                // 10-4-2022 copied from elsewhere
                                                                //
                                                                //var workflowStepHtml = '';
                                                                ////var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                ////if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                ////    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                ////} else {
                                                                ////    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                ////}

                                                                //workflowStepHtml += '<span style="font-weight:bold;">';
                                                                ////workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                ////workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                //workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                //workflowStepHtml += '       Workflow step: [missing]'; // + stepFriendlyName;
                                                                //workflowStepHtml += '   </span>';
                                                                //workflowStepHtml += '</span>';
                                                                //workflowStepHtml += '<br />';

                                                                //$('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                                //
                                                                // end: 10-4-2022 copied from elsewhere
                                                                //


                                                                //
                                                                // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                                //
                                                                //var checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;
                                                                //if (checklists) {
                                                                //    var checklistsHtml = '';
                                                                //    checklistsHtml += 'Completed checklist(s):';
                                                                //    checklistsHtml += '<br />';
                                                                //    for (var i = 0; i < checklists.length; i++) {
                                                                //        var checklist = JSON.parse(checklists[i]);
                                                                //        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                //        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                //        checklistsHtml += '<br />';
                                                                //    }
                                                                //    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                //} else {
                                                                //    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                //}
                                                                //
                                                                //

                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm().xcx123123435-22: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm().xcx123123435-22: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });




                                                    } else {










                                                        // 7-17-2023.
                                                        // The following code snippet exists here and also in another place below. 10-11-2022
                                                        //
                                                        // Display the buttons.
                                                        //
                                                        //if (!RolesData.WorkflowStep.Assign) {
                                                        //// debugger;
                                                        //
                                                        // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                        //




                                                        //
                                                        //
                                                        //
                                                        // // 7-27-2023 OLD OLD OLD FORCED ALLOW MODIFICATIONS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                        //
                                                        //
                                                        //
                                                        var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-4');

                                                                //
                                                                // COME BACK HERE AND FIX!!!!!!!!!!!!!!! WHEN INVALID WORKFLOW STEP, THE FORM DOES NOT RENDER, EVEN IN READ-ONLY MODE. 1-5-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                //
                                                                var msg = 'Error in bwRequest.js.renderRequestForm(). Invalid workflow step. The step "' + brData.BudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs.';

                                                                displayAlertDialog(msg); // We need a remediation step for the user here. If this is an issue, contact support@budgetworkflow.com. workflow.Steps.Step: ' + JSON.stringify(workflow.Steps.Step));
                                                                console.log(msg);
                                                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                                                                //// Display the buttons.
                                                                //var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                //thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-2', false, 'ERROR');

                                                                // Display the instructions.
                                                                var instructions = 'Invalid workflow step. The step "' + brData.BudgetRequest.BudgetWorkflowStatus + '" must have been renamed or removed from the workflow for xxxs. Select the Revise/Revert button to restart the request workflow.';
                                                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;



                                                                //
                                                                // 10-4-2022 copied from elsewhere
                                                                //
                                                                var workflowStepHtml = '';
                                                                //var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                //if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                //    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                //} else {
                                                                //    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                //}

                                                                workflowStepHtml += '<span style="font-weight:bold;">';
                                                                //workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                //workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                workflowStepHtml += '       Workflow step: [missing]'; // + stepFriendlyName;
                                                                workflowStepHtml += '   </span>';
                                                                workflowStepHtml += '</span>';
                                                                workflowStepHtml += '<br />';

                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                                //
                                                                // end: 10-4-2022 copied from elsewhere
                                                                //


                                                                //
                                                                // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                                //
                                                                var checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;
                                                                if (checklists) {
                                                                    var checklistsHtml = '';
                                                                    checklistsHtml += 'Completed checklist(s):';
                                                                    checklistsHtml += '<br />';
                                                                    for (var i = 0; i < checklists.length; i++) {
                                                                        var checklist = JSON.parse(checklists[i]);
                                                                        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                        checklistsHtml += '<br />';
                                                                    }
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                } else {
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                }
                                                                //
                                                                //

                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm().xcx123123435: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm().xcx123123435: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });

                                                    }

                                                } else {


                                                    ////
                                                    //// Here we check if the workflow has been completed/Done. If it is done, just display the request in it's read-only state.
                                                    ////
                                                    //if (workflow.Steps.Step[stepIndex]["@Name"] == 'Done') {

                                                    //    // For example, workflow.Steps.Step[stepIndex]: {"@Name":"Done","@MasterState":"Approved","@FriendlyName":"Completed (Done)",
                                                    //    console.log('This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".');

                                                    //    var selectedOrganization = $('.bwAuthentication').bwAuthentication('getSelectedOrganization');
                                                    //    //alert('Dev: working to determine if this is a workflow administrator. selectedOrganization: ' + JSON.stringify(selectedOrganization));
                                                    //    if ((selectedOrganization.OrganizationRole == 'owner') || (selectedOrganization.OrganizationRole == 'configurationmanager')) {
                                                    //        console.log('The authenticated user is the owner or configurationmanager, therefore setting allowRequestModifications to true. This request is Completed (Done), but there should still be a way to make final changes, and the owner or configurationmanager should be able to do that.');
                                                    //        allowRequestModifications = true;
                                                    //    }

                                                    //    // The following code snippet exists here and also in another place below. 10-11-2022
                                                    //    //
                                                    //    // Display the buttons.
                                                    //    //
                                                    //    //if (!RolesData.WorkflowStep.Assign) {
                                                    //    //// debugger;
                                                    //    //
                                                    //    // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                    //    //
                                                    //    var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, allowRequestModifications);
                                                    //    promise.then(function () {
                                                    //        try {

                                                    //            // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                    //            var canvas = document.getElementById("myCanvas");
                                                    //            if (canvas) {
                                                    //                // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                    //                var body = document.getElementsByTagName('body')[0];
                                                    //                var clientWidth = body.scrollWidth;
                                                    //                var clientHeight = Math.max(
                                                    //                            body.scrollHeight, document.documentElement.scrollHeight,
                                                    //                            body.offsetHeight, document.documentElement.offsetHeight,
                                                    //                            body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                    //                        );
                                                    //                // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                    //                // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                    //                // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                    //                canvas.width = clientWidth;
                                                    //                canvas.height = clientHeight;
                                                    //            }


                                                    //            thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-4');


                                                    //            //
                                                    //            // 10-4-2022 copied from elsewhere
                                                    //            //
                                                    //            var workflowStepHtml = '';
                                                    //            var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                    //            if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                    //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                    //            } else {
                                                    //                stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                    //            }

                                                    //            workflowStepHtml += '<span style="font-weight:bold;">';
                                                    //            workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                    //            workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                    //            workflowStepHtml += '   </span>';
                                                    //            workflowStepHtml += '</span>';
                                                    //            workflowStepHtml += '<br />';

                                                    //            $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;
                                                    //            //
                                                    //            // end: 10-4-2022 copied from elsewhere
                                                    //            //


                                                    //            //
                                                    //            // Display the checklists here... 10-25-2022 <<<<<<<<< copied from elsewhere 11-8-2022
                                                    //            //
                                                    //            var checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;
                                                    //            if (checklists) {
                                                    //                var checklistsHtml = '';
                                                    //                checklistsHtml += 'Completed checklist(s):';
                                                    //                checklistsHtml += '<br />';
                                                    //                for (var i = 0; i < checklists.length; i++) {
                                                    //                    var checklist = JSON.parse(checklists[i]);
                                                    //                    checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                    //                    checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                    //                    checklistsHtml += '<br />';
                                                    //                }
                                                    //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                    //            } else {
                                                    //                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                    //            }
                                                    //            //
                                                    //            //

                                                    //        } catch (e) {
                                                    //            console.log('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                    //            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.populateRequestForm.then():xcx21312-2: ' + e.message + ', ' + e.stack);
                                                    //        }
                                                    //    });

                                                    //    //
                                                    //    // Display the instructions.
                                                    //    //
                                                    //    html = 'This request has completed the workflow with a status of "' + workflow.Steps.Step[stepIndex]["@MasterState"] + '".';
                                                    //    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = html; // First, we clear the element.
                                                    //    // end: Display the instructions.

                                                    //} else {

                                                    //alert('cx12321 this user has these qualifying roles for this org id. '); // brData.RequestingUser.RoleIds

                                                    // 10-7-2022
                                                    var RolesData = {
                                                        status: null,
                                                        message: '',
                                                        RequestingUser: {
                                                            ParticipantRole: brData.RequestingUser.ParticipantRole, // Options include 'Forest Administrator', 'owner', 'archiveviewer', 'reportviewer', 'configurationmanager', and 'participant'.
                                                            QualifyingRolesInThisOrg: brData.RequestingUser.RoleIds, // All qualifying roles for this user, based upon the OrgId in the bwBudgetRequest. If this includes 'ADMIN', then the Workflow Administrator.
                                                            AssignedRolesForThisWorkflowStep: [] //  The array contains { Role: 'xx', RoleName: 'xx' }. <<<<<<<<<FIX<<<<<<<<<<<<<<<< There are the specifically assigned qualifying roles for this user at this workflow step. 'Completed' Task roles have been removed.
                                                        },
                                                        WorkflowAdmin: {
                                                            OnBehalfOfRolesForThisWorkflowStep: [] // All of the remaining roles, if this user is a Workflow Administrator (ADMIN). 'Completed' Task roles have been removed.
                                                        },
                                                        WorkflowStep: {
                                                            AssignedRole: {
                                                                Role: null, // This is our final result.
                                                                RoleName: null,
                                                                OnBehalfOf: null, // If "On behalf of...", then this will be true.
                                                                bwWorkflowTaskItemId: null
                                                            },
                                                            AllRolesInThisWorkflowStep: [], // All of the roles for this workflow step.
                                                            BwWorkflowTask_Table: bwWorkflowTasks, // These are all the tasks for this request. BwWorkflowTask.find({ bwRelatedItemId: bwBudgetRequestId, TaskType: 'BUDGET_REQUEST_WORKFLOW_TASK', TrashBin: { $ne: true } } // ADD WorkflowStepName TO THIS QUERY!!!!! 12-30-2022
                                                            Assign: null // This is the Assign section of the selected workflow step. Used throughout. Replaced previously called assign.
                                                        }
                                                    }
                                                    // debugger;



                                                    //alert('If this is the tenant "owner", add the "ADMIN" role. xcx883356 RolesData.RequestingUser: ' + JSON.stringify(RolesData.RequestingUser));

                                                    //
                                                    // Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                    //
                                                    if (RolesData.RequestingUser.ParticipantRole == 'owner') {
                                                        if (!RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) {
                                                            RolesData.RequestingUser.QualifyingRolesInThisOrg.push('ADMIN');
                                                            alert('This user is an owner, so adding the ADMIN role to RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + 'ADMIN');
                                                        }
                                                    }
                                                    //
                                                    // end: Step 1: If this is the tenant "owner", add the "ADMIN" role.
                                                    //

                                                    //
                                                    // Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.          // THIS FIGURES OUT THE ROLES that the user plays with this request, at this stage of the workflow. 
                                                    //
                                                    if (!workflow.Steps.Step[stepIndex].Assign) {
                                                        if (workflow.Steps.Step[stepIndex].Inform) {
                                                            var tmpSelectedRole = workflow.Steps.Step[stepIndex].Inform["@Role"];
                                                            RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                    console.log('xcx1234123-1 This user has the assignment for this role in the workflow step. Adding it to RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                }
                                                                //assign = workflow.Steps.Step[stepIndex].OnStart.Inform; // Set this for the user.
                                                            }
                                                            //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                            //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                            //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                            //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                            //        alert('xcx1234123-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                            //    }
                                                            //}
                                                        } else {
                                                            alert('NOT INFORM ROLE xcx346754234');
                                                        }
                                                    } else {

                                                        if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) { // When only 1, the length is undefined.
                                                            // More than 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                            for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign.length; i++) {
                                                                var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign[i]["@Role"];
                                                                RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                                //alert('xcx44445 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                        console.log('xcx1234123-3 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            // Only 1. Step 1: Check to see if the user has the same role as in the workflow.
                                                            var tmpSelectedRole = workflow.Steps.Step[stepIndex].Assign["@Role"];
                                                            RolesData.WorkflowStep.AllRolesInThisWorkflowStep.push(tmpSelectedRole);
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.indexOf(tmpSelectedRole) > -1) { // Check to see if the user has the same role as in the workflow.
                                                                if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes(tmpSelectedRole)) RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push(tmpSelectedRole); // Did we add it to the array already? If not, add it.
                                                                //alert('xcx1234123-4 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + tmpSelectedRole);
                                                            }
                                                        }
                                                        //// Step 2: If this is the tenant "owner", add the "ADMIN" role.
                                                        //if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                        //    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.includes('ADMIN')) {
                                                        //        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.push('ADMIN'); // Did we add it to the array already? If not, add it.
                                                        //        alert('xcx1234123-2-2 PUSHED INTO RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + 'ADMIN');
                                                        //    }
                                                        //}

                                                    }
                                                    //
                                                    // end: Step 2: Populate RolesData.WorkflowStep.AllRolesInThisWorkflowStep and RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.  
                                                    //
                                                    //displayAlertDialog('RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep);




                                                    //
                                                    // Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                    //
                                                    var BwWorkflowTask_Table = []; // Initialize this array and load it. This is all the tasks in the BwWorkflowTask table for this request.
                                                    for (var i = 0; i < RolesData.WorkflowStep.BwWorkflowTask_Table.length; i++) {
                                                        BwWorkflowTask_Table.push(RolesData.WorkflowStep.BwWorkflowTask_Table[i].bwAssignedToRaciRoleAbbreviation);
                                                    }

                                                    if (BwWorkflowTask_Table.length == 0) {

                                                        // Do we need to do anything? No, I don't think so... 7-6-2023.


                                                    } else {

                                                        // Compare the workflow step with the BwWorkflowTask table to see if any tasks are missing in the BwWorkflowTask table.
                                                        var missingFrom_BwWorkflowTask_Table = [];
                                                        for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                            if (BwWorkflowTask_Table.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                                // It is in the list, 
                                                            } else {
                                                                // It is not in the list.
                                                                console.log('AUDIT Error in bwRequest.js.displayRequestForm(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                                displayAlertDialog('AUDIT Error in bwRequest.js.displayRequestForm(). missingFrom_BwWorkflowTask_Table: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i] + '. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table)); // + ', result.Tasks: ' + JSON.stringify(result.Tasks));
                                                                missingFrom_BwWorkflowTask_Table.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                            }
                                                        }

                                                        // Compare the workflow step with the BwWorkflowTask table to see if any tasks are superfluous in the BwWorkflowTask table.
                                                        var superfluousIn_BwWorkflowTask_Table = [];
                                                        for (var i = 0; i < BwWorkflowTask_Table.length; i++) {
                                                            if (RolesData.WorkflowStep.AllRolesInThisWorkflowStep.indexOf(BwWorkflowTask_Table[i]) > -1) {
                                                                // It is in the list, 
                                                            } else {
                                                                // It is not in the list.
                                                                superfluousIn_BwWorkflowTask_Table.push(BwWorkflowTask_Table[i]);
                                                            }
                                                        }

                                                        console.log('AUDIT Note: Comparing workflowTasks with existingTasks to make sure all tasks have been created, and also that there aren\'t too many existing tasks. Any errors will be list immediately below this line in the console. BwWorkflowTask_Table: ' + JSON.stringify(BwWorkflowTask_Table) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep) + ', missingFrom_BwWorkflowTask_Table: ' + JSON.stringify(missingFrom_BwWorkflowTask_Table) + ', superfluousIn_BwWorkflowTask_Table: ' + JSON.stringify(superfluousIn_BwWorkflowTask_Table));

                                                        if ((missingFrom_BwWorkflowTask_Table.length > 0) || (superfluousIn_BwWorkflowTask_Table.length > 0)) {

                                                            var msg = 'AUDIT Error in bwRequest.js.displayRequestForm(): Unexpected tasks for Request ' + budgetRequestId + '. missingFrom_BwWorkflowTask_Table: ' + missingFrom_BwWorkflowTask_Table + ', superfluousIn_BwWorkflowTask_Table: ' + superfluousIn_BwWorkflowTask_Table;
                                                            console.log(msg);
                                                            displayAlertDialog(msg);

                                                        }

                                                    }
                                                    //
                                                    // End: Step 2.5: AUDIT STEP: Compare RolesData.WorkflowStep.AllRolesInThisWorkflowStep with RolesData.WorkflowStep.BwWorkflowTask_Table to make sure there are no missing or orphaned Tasks.
                                                    //






                                                    //
                                                    // Step 3: Populate RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                    //
                                                    console.log('xcx1231234234 RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                    //alert('xcx1231234234RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep) + ', RolesData.WorkflowStep.AllRolesInThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep.AllRolesInThisWorkflowStep));
                                                    if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                        // Add the "On behalf of..." roles for the ADMIN.
                                                        for (var i = 0; i < RolesData.WorkflowStep.AllRolesInThisWorkflowStep.length; i++) {
                                                            if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.indexOf(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]) > -1) {
                                                                // Do nothing, already have this role in the RequestingUser.AssignedRolesForThisWorkflowStep array.
                                                            } else {
                                                                // Add to the RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep array.
                                                                //debugger; // this needs to be pushed like: { Role: xx, RoleName: xx } // 12-22-2022 or does it????? Hmmmmm......
                                                                RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.push(RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                                //alert('xcx1234123-4-2 PUSHED INTO RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + RolesData.WorkflowStep.AllRolesInThisWorkflowStep[i]);
                                                            }
                                                        }
                                                    }
                                                    //
                                                    // end: Step 3: Populate RequestingUser.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.         
                                                    //
                                                    //alert('xcx21312 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                    //displayAlertDialog('RolesData.WorkflowStep.BwWorkflowTask_Table: ' + JSON.stringify(RolesData.WorkflowStep.BwWorkflowTask_Table));

                                                    //
                                                    // Step 4: Remove all roles where the Task has already been completed, and populate bwWorkflowTaskItemId.
                                                    //
                                                    for (var t = 0; t < RolesData.WorkflowStep.BwWorkflowTask_Table.length; t++) {

                                                        for (var a = 0; a < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; a++) {
                                                            if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a]) {
                                                                if ((RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') && (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwPercentComplete == 100)) {
                                                                    // Remove it.
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.splice(a, 1); // delete leaves a null, so we have to use splice.
                                                                    //alert('Removing task as it has been completed by: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                } else {
                                                                    // Leave it. Add the bwWorkflowTaskItemId.
                                                                    RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[a] = {
                                                                        Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                        RoleName: null,
                                                                        bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                    }
                                                                    //alert('Adding Task as it has not been completed: ' + RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation);
                                                                }
                                                                break;
                                                            }
                                                        }

                                                        //debugger; // ISNT THIS WHERE WE FIX IT????????????????? <<<<<<<<<<<<<<<<< 12-22-2022
                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                            for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i]) {
                                                                    if (RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwStatus == 'Completed') {
                                                                        // Remove it.
                                                                        RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.splice(i, 1); // delete leaves a null, so we have to use splice.
                                                                    } else {
                                                                        debugger; // ???? IT SHOULD BE HITTING HERE??? <<<<<<<<<<<<<<<<<<<<<<<
                                                                        // Leave it. Add the bwWorkflowTaskItemId.
                                                                        RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i] = {
                                                                            Role: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwAssignedToRaciRoleAbbreviation, // This is our final result.
                                                                            RoleName: null,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowStep.BwWorkflowTask_Table[t].bwWorkflowTaskItemId
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    }

                                                    //
                                                    // end: Step 4: Remove all roles where the Task has already been completed.         
                                                    //

                                                    //alert('STEP 5 coming up. xcx21312-2 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));

                                                    //
                                                    // Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                    //
                                                    // debugger;
                                                    if (selectedRaciRole && (selectedRaciRole != 'undefined')) { // This gets passed when the RACI Role drop down gets changed... comes from selectedRaciRole_OnChange or some method like that... 

                                                        for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                            if (selectedRaciRole == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                RolesData.WorkflowStep.AssignedRole = {
                                                                    Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role,
                                                                    RoleName: null, // This will get populated a bit lower in this code.
                                                                    OnBehalfOf: false,
                                                                    bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                };
                                                                RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                console.log('xcx23423-1 found matching role. Set RolesData.WorkflowStep.AssignedRole.Role: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                break;
                                                            }
                                                        }
                                                        if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                    if (selectedRaciRole == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                        RolesData.WorkflowStep.AssignedRole = {
                                                                            Role: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role,
                                                                            RoleName: null, // This will get populated a bit lower in this code.
                                                                            OnBehalfOf: true,
                                                                            bwWorkflowTaskItemId: RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId
                                                                        };
                                                                        RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                        console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role + '.');
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    } else {

                                                        if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length && RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length > 0) {
                                                            RolesData.WorkflowStep.AssignedRole = {
                                                                Role: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].Role, // Pick the first one.
                                                                RoleName: null, // This will get populated a bit lower in this code.
                                                                OnBehalfOf: false,
                                                                bwWorkflowTaskItemId: RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[0].bwWorkflowTaskItemId
                                                            };
                                                            RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                            console.log('xcx23423-3 found role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                        }
                                                        if (!RolesData.WorkflowStep.AssignedRole.Role) {
                                                            if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length && RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length > 0) {

                                                                    //alert('xcx123123 pick the first one...');
                                                                    console.log('xcx123123 pick the first one...');
                                                                    // debugger;





                                                                    // 7-6-2023.
                                                                    var tmpRole, tmpBwWorkflowTaskItemId;
                                                                    if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0]) {
                                                                        tmpRole = 'ADMIN';
                                                                        tmpBwWorkflowTaskItemId = '';
                                                                    } else {
                                                                        tmpRole = RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].Role;
                                                                        tmpBwWorkflowTaskItemId = RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[0].bwWorkflowTaskItemId;
                                                                    }


                                                                    // end 7-6-2023.





                                                                    RolesData.WorkflowStep.AssignedRole = {
                                                                        Role: tmpRole, // Pick the first one.
                                                                        RoleName: null, // This will get populated a bit lower in this code.
                                                                        OnBehalfOf: true,
                                                                        bwWorkflowTaskItemId: tmpBwWorkflowTaskItemId
                                                                    };
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign;
                                                                    console.log('xcx23423-2 found matching role. Set RolesData.WorkflowStep.AssignedRole: ' + RolesData.WorkflowStep.AssignedRole.Role);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    //
                                                    // end: Step 5: Populate RolesData.WorkflowStep.AssignedRole.    
                                                    //

                                                    if (!RolesData.WorkflowStep.AssignedRole.Role) {

                                                        //
                                                        // THERE IS NO ASSIGNED ROLE IN THIS STEP.
                                                        //
                                                        console.log('No roles have been asigned to this user.');

                                                        var html;
                                                        if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                            // The code should never get here, because the Workflow Administrator (ADMIN) gets assigned roles like "On behalf of...". 10-26-2022.
                                                            html = 'No roles have been asigned to this user, but as an ADMIN you can edit this request.';
                                                        } else {
                                                            html = 'No roles have been asigned to this user. xcx666432.';
                                                        }
                                                        $('#' + requestDialogId).find('#budgetrequestform').find('#spanRequestForm_Instructions').html(html);


                                                        //var html = '';

                                                        //html += 'THERE IS NO ASSIGN ROLE IN THIS STEP. This is probably because this means the ADMIN has to intervene to move the workflow along.';
                                                        //html += '<button title="adminMoveWorkflowToNextStep" class="BwButton350" onclick="$(\'.bwRequest\').bwRequest(\'adminMoveWorkflowToNextStep\');">ADMIN - MOVE TO NEXT STEP</button>';
                                                        //html += '<br />';

                                                        //thiz.renderRequestFormButtons(requestDialogId, bwBudgetRequestId, bwRequestTypeId, html, 'xcx445566-5');


                                                    } else {

                                                        // 10-5-2022 WE NEED TO GET THE CORRECT bwWorkflowTaskItemId. THIS IS SET LATER IN THE CODE DOWN BELOW!!!!!!!!!!!!! After we figure out which role the drop-down is going to display.
                                                        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId); // 10-7-2022

                                                        //alert('Just set the value in [budgetrequestform] for bwworkflowtaskitemid: ' + RolesData.WorkflowStep.AssignedRole.bwWorkflowTaskItemId);



                                                        //
                                                        // Step 6: Populate "RoleName" for all roles.
                                                        //
                                                        if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) {
                                                            for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                // Populate RoleName for AssignedRole.
                                                                if (RolesData.WorkflowStep.AssignedRole.Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                    //assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    RolesData.WorkflowStep.Assign = workflow.Steps.Step[stepIndex].Assign[x]; // Select the step into the assign variable. 
                                                                    //RolesData.WorkflowStep.AssignedRole.RoleName = assign["@RoleName"]; // Populate the RoleName.
                                                                    RolesData.WorkflowStep.AssignedRole.RoleName = RolesData.WorkflowStep.Assign["@RoleName"]; // Populate the RoleName.
                                                                }
                                                                // Populate RoleName for RequestingUser.AssignedRolesForThisWorkflowStep.
                                                                for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                    if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                        RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                        break;
                                                                    }
                                                                }
                                                                // Populate RoleName for WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.
                                                                if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // User is a Workflow Administrator (ADMIN).
                                                                    for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                        if (RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                            RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName = workflow.Steps.Step[stepIndex].Assign[x]["@RoleName"];
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        //
                                                        // end: Step 6: Populate "RoleName" for all roles.
                                                        //

                                                    }




                                                    var RolesData2 = {
                                                        RequestingUser: RolesData.RequestingUser,
                                                        WorkflowAdmin: RolesData.WorkflowAdmin,
                                                        WorkflowStep: {
                                                            AssignedRole: RolesData.WorkflowStep.AssignedRole,
                                                            AllRolesInThisWorkflowStep: RolesData.WorkflowStep.AllRolesInThisWorkflowStep
                                                        }
                                                    };

                                                    console.log('xcx3243 RolesData: ' + JSON.stringify(RolesData2)); // THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.');
                                                    //alert('xcx3243 RolesData2: ' + JSON.stringify(RolesData2));

                                                    //
                                                    // Display the buttons.
                                                    //
                                                    if (!RolesData.WorkflowStep.Assign) {
                                                        // debugger;
                                                        //
                                                        // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it for them here. 12-25-2021
                                                        //
                                                        var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, allowRequestModifications);
                                                        promise.then(function () {
                                                            try {

                                                                // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                var canvas = document.getElementById("myCanvas");
                                                                if (canvas) {
                                                                    // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                    var body = document.getElementsByTagName('body')[0];
                                                                    var clientWidth = body.scrollWidth;
                                                                    var clientHeight = Math.max(
                                                                        body.scrollHeight, document.documentElement.scrollHeight,
                                                                        body.offsetHeight, document.documentElement.offsetHeight,
                                                                        body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                    );
                                                                    // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                    // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                    // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                    canvas.width = clientWidth;
                                                                    canvas.height = clientHeight;
                                                                }

                                                                var html = '';
                                                                html += '<button xcx="xcx4242-2" onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;'; // Close button.

                                                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-6-1', false, RolesData.WorkflowStep.Assign);







                                                                // 10-4-2022 copied from elsewhere

                                                                var workflowStepHtml = '';
                                                                var stepFriendlyName; // Should be able to remove this at some pointin the future.
                                                                if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                } else {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                }

                                                                workflowStepHtml += '<span style="font-weight:bold;">';
                                                                workflowStepHtml += '   <span xcx="342352-1-2" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                workflowStepHtml += '   </span>';
                                                                workflowStepHtml += '</span>';
                                                                workflowStepHtml += '<br />';

                                                                // spanRequestForm_WorkflowAndRoleDetails
                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = workflowStepHtml;

                                                                // 10-4-2022 copied from elsewhere



                                                                displayAlertDialog('xcx987070-3 Display the checklists here... 10-25-2022');

                                                                //
                                                                // Display the checklists here... 10-25-2022
                                                                //
                                                                var checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;
                                                                if (checklists) {
                                                                    var checklistsHtml = '';
                                                                    checklistsHtml += 'Completed checklist(s):';
                                                                    checklistsHtml += '<br />';
                                                                    for (var i = 0; i < checklists.length; i++) {
                                                                        var checklist = JSON.parse(checklists[i]);
                                                                        checklistsHtml += '<span xcx="xcx8822567" style="cursor:pointer;text-decoration:underline;" ';
                                                                        checklistsHtml += 'onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + checklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklist.Title + '</span>';
                                                                        checklistsHtml += '<br />';
                                                                    }
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;
                                                                } else {
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // There are no checklists to display.
                                                                }
                                                                //
                                                                //



                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-3: ' + e.message + ', ' + e.stack);
                                                            }
                                                        });

                                                    } else {



                                                        //// This just handles whether it is an array or not. Maybe it will go away someday... 12-21-2022
                                                        //var assign;

                                                        //if (RolesData.WorkflowStep.Assign.length) {
                                                        //    if (RolesData.WorkflowStep.Assign.length == 1) {
                                                        //        assign = RolesData.WorkflowStep.Assign[0];
                                                        //    } else {
                                                        //        displayAlertDialog('Error in bwRequest.js.displayRequestForm(). xcx112233 Invalid value for RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                        //    }
                                                        //} else {
                                                        //    assign = RolesData.WorkflowStep.Assign;
                                                        //}



                                                        if (!RolesData.WorkflowStep.Assign) {
                                                            alert('xcx112233 NO VALUE FOR RolesData.WorkflowStep.Assign HERE..??????');
                                                        }





                                                        //
                                                        // The user plays a role in the workflow, so we render the form for them here, with the correct buttons, etc.
                                                        //
                                                        var allowRequestModifications = RolesData.WorkflowStep.Assign["@AllowRequestModifications"];
                                                        console.log('');
                                                        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                        console.log('The user plays a role in the workflow. allowRequestModifications: ' + allowRequestModifications + ', RolesData.WorkflowStep.Assign: ' + JSON.stringify(RolesData.WorkflowStep.Assign));
                                                        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
                                                        console.log('');
                                                        //
                                                        // We need to check if there is user(s) assigned in this role. Ajax call! 12-24-2021.
                                                        //
                                                        var onBehalfOf_RoleId = RolesData.WorkflowStep.Assign["@Role"];
                                                        var onBehalfOf_RoleName = RolesData.WorkflowStep.Assign["@RoleName"];
                                                        $.ajax({
                                                            url: thiz.options.operationUriPrefix + "odata/UserRole2/" + workflowAppId + "/" + onBehalfOf_RoleId, // pass workflowAppId, as well as roleId in order to get the list of users who belong to the role.
                                                            dataType: "json",
                                                            contentType: "application/json",
                                                            type: "Get"
                                                        }).done(function (result) {
                                                            try {
                                                                //
                                                                // Display the role members.
                                                                //
                                                                // debugger;
                                                                var html = '';
                                                                var roleMember_participantId = '';
                                                                var roleMember_participantEmail = '';
                                                                var roleMember_participantFriendlyName = '';

                                                                if (result.length > 0) {
                                                                    // Participants were found that fill this role.
                                                                    roleMember_participantId = result[0].bwParticipantId;
                                                                    roleMember_participantEmail = result[0].bwParticipantEmail;
                                                                    roleMember_participantFriendlyName = result[0].bwParticipantFriendlyName;
                                                                } else {
                                                                    // No participants were found that fill this role.
                                                                }

                                                                var roleMember = {
                                                                    roleMember_participantId: roleMember_participantId,
                                                                    roleMember_participantEmail: roleMember_participantEmail,
                                                                    roleMember_participantFriendlyName: roleMember_participantFriendlyName
                                                                }

                                                                var stepName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                var stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];

                                                                // 
                                                                // THIS IS THE ONLY PLACE WHERE THE BUTTONS ARE CREATED AT THE TOP OF A REQUEST FORM FOR WORKFLOW PARTICIPANTS. They reflect the workflow step json Actions section. 12-23-2021.
                                                                // 
                                                                //

                                                                if (!allowRequestModifications || allowRequestModifications == 'undefined') {
                                                                    allowRequestModifications = false;
                                                                } else {

                                                                }


                                                                //
                                                                // Display the instructions. New version 12-29-2021
                                                                //
                                                                var instructions = '';

                                                                var workflowStepHtml = '';
                                                                var stepFriendlyName; // Should be able to remove this at some point in the future.
                                                                if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                } else {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                }

                                                                workflowStepHtml += '<span style="font-weight:bold;">';
                                                                workflowStepHtml += '   <span xcx="342352-1-yy" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\');">';
                                                                workflowStepHtml += '       Workflow step: ' + stepFriendlyName;
                                                                workflowStepHtml += '   </span>';
                                                                workflowStepHtml += '</span>';
                                                                workflowStepHtml += '<br />';






                                                                //alert('xcx555867 selectedRaciRole: ' + selectedRaciRole + ', selectedRoles: ' + JSON.stringify(selectedRoles) + ', assign["@Role"]: ' + assign["@Role"]);


                                                                //alert('xcx5554 bwWorkflowTasks: ' + JSON.stringify(bwWorkflowTasks));


                                                                var roleDropDown_html = '';

                                                                if (!(brData.RequestingUser.RoleIds.includes('ADMIN') || selectedRaciRole)) {

                                                                    // This user does not belong to a role present in this workflow step.
                                                                    roleDropDown_html += 'This user does not belong to a role present in this workflow step'; // This is the whole sentence that will be displayed.

                                                                } else {

                                                                    //
                                                                    // Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022
                                                                    //

                                                                    console.log('Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 10-7-2022');

                                                                    //alert('xcx123124 RolesData.WorkflowStep: ' + JSON.stringify(RolesData.WorkflowStep));

                                                                    // Assigned Roles:
                                                                    //displayAlertDialog('xcx235366 RolesData.RequestingUser.AssignedRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.RequestingUser.AssignedRolesForThisWorkflowStep));

                                                                    // This user belongs to these Roles:
                                                                    //displayAlertDialog('xcx235366 RolesData.RequestingUser.QualifyingRolesInThisOrg: ' + JSON.stringify(RolesData.RequestingUser.QualifyingRolesInThisOrg));

                                                                    // This user can act On Behalf Of these Roles:
                                                                    //displayAlertDialog('xcx235366 RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep: ' + JSON.stringify(RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep));


                                                                    roleDropDown_html += '<select xcx="34234-1" id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'selectedRaciRole_OnChange\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;" >';

                                                                    for (var i = 0; i < RolesData.RequestingUser.AssignedRolesForThisWorkflowStep.length; i++) {
                                                                        if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {

                                                                            // FUDGE
                                                                            if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                    if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName) {
                                                                                        if (RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role == 'ADMIN') {
                                                                                            RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName = 'Workflow Administrator';
                                                                                        } else {
                                                                                            alert('In xcx32536(). No RoleName value for Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    alert('xcx1214-1 INVALID VALUE(S) FOR Role and/or RoleName while creating the role drop-down.');
                                                                                }
                                                                            }
                                                                            // end: FUDGE

                                                                            // This is the selected option in the drop down.
                                                                            roleDropDown_html += '<option xcx="34234-1-1" style="font-size:30pt;" selected value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                            roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                            roleDropDown_html += '</option>';

                                                                        } else {

                                                                            var msg = 'xcx2312 i: ' + i + ', RoleName/Role: ' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')';
                                                                            console.log(msg);

                                                                            roleDropDown_html += '<option xcx="34234-1-2" style="font-size:30pt;" value="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-4">';
                                                                            roleDropDown_html += RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role + ')'; // This entry means that even if the user is an ADMIN (Workflow Administrator), they also fill this role in the organization... so don't bother putting [ADMIN] because they will not be doing this on behalf of a user, ans they are in their own role. 2-6-2022 Does this need more testing??
                                                                            roleDropDown_html += '</option>';
                                                                            if (!RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].RoleName || !RolesData.RequestingUser.AssignedRolesForThisWorkflowStep[i].Role) {
                                                                                alert('xcx1214-2 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                            }

                                                                        }
                                                                    }
                                                                    if (RolesData.RequestingUser.QualifyingRolesInThisOrg.includes('ADMIN')) { // This user is a Workflow Administrator (ADMIN).
                                                                        for (var i = 0; i < RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep.length; i++) {
                                                                            if (RolesData.WorkflowStep.AssignedRole.Role == RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                // This is the selected option in the drop down.
                                                                                roleDropDown_html += '<option xcx="34234-1-3" style="font-size:30pt;" selected value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                                roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                                roleDropDown_html += '</option>';
                                                                                if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                    debugger;
                                                                                    alert('xcx1214-3 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');

                                                                                }

                                                                            } else {
                                                                                roleDropDown_html += '<option xcx="34234-1-4" style="font-size:30pt;" value="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + '" bwworkflowtaskitemid="' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].bwWorkflowTaskItemId + '"  xcx="xcx554-7">';
                                                                                roleDropDown_html += 'On behalf of "' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName + ' (' + RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role + ')"';
                                                                                roleDropDown_html += '</option>';
                                                                                if (!RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].RoleName || !RolesData.WorkflowAdmin.OnBehalfOfRolesForThisWorkflowStep[i].Role) {
                                                                                    alert('xcx1214-4 INVALID VALUES FOR Role and/or RoleName while creating the role drop-down.');
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    roleDropDown_html += '</select>';
                                                                    //
                                                                    // end: Role drop-down. THIS IS THE ONLY SPOT THIS SHOULD BE RENDERED. 2-6-2022
                                                                    //


                                                                    //alert('xcx231234213 Is this where we need to display checklists??????');



                                                                    if (allowRequestModifications == true) {
                                                                        instructions += '<table style="float:right;width:85%;">';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += workflowStepHtml;
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-1
                                                                        //instructions += '       </td>';
                                                                        //instructions += '   </tr>';
                                                                        //instructions += '   <tr>';
                                                                        //instructions += '       <td>';
                                                                        instructions += '<div style="float:right">' + roleDropDown_html + '</div>'; // float this to the right so that if it wraps it still looks Ok. 2-12-2022
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td>';
                                                                        instructions += '           You are allowed to modify this request.';
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '</table>';

                                                                        //instructions += 'Your role  as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are allowed to modify this request.';
                                                                    } else {
                                                                        instructions += '<table style="float:right;width:85%;">';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += workflowStepHtml;
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';

                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td style="text-align:left;font-weight:normal;">';
                                                                        instructions += '           Your role as ' + RolesData.WorkflowStep.Assign["@RoleCategory"] + ': ' + RolesData.WorkflowStep.Assign["@Role"]; // xcx2134234-2
                                                                        //instructions += '       </td>';
                                                                        //instructions += '   </tr>';
                                                                        //instructions += '   <tr>';
                                                                        //instructions += '       <td>';
                                                                        instructions += '<div style="float:right">' + roleDropDown_html + '</div>';
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '   <tr>';
                                                                        instructions += '       <td>';
                                                                        instructions += '           You are not allowed to modify this request, but you can add comments.';
                                                                        instructions += '       </td>';
                                                                        instructions += '   </tr>';
                                                                        instructions += '</table>';


                                                                        //instructions += 'Your role as ' + assign["@RoleCategory"] + ': ' + roleDropDown_html + '. <br />You are not allowed to modify this request.';
                                                                    }

                                                                }
                                                                //
                                                                // end: New code to integrate the drop down into the sentence better. 2-6-2022
                                                                //

                                                                instructions += '<br />';

                                                                //instructions += '<span style="cursor:pointer;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequests[0].ProjectTitle + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\');">';
                                                                //instructions += 'Current workflow step: ' + stepFriendlyName;
                                                                //instructions += '</span>';
                                                                //if (workflow.Steps.Step[stepIndex]["@Timeout"]) {
                                                                //    instructions += '&nbsp;(' + workflow.Steps.Step[stepIndex]["@Timeout"] + ' ' + workflow.Steps.Step[stepIndex]["@TimeoutUnits"] + ')';
                                                                //}
                                                                //instructions += '&nbsp;';
                                                                //var raciTooltip = 'RACI: ';
                                                                //raciTooltip += '\n';
                                                                //raciTooltip += 'R = Responsible (also Recommender)  ';
                                                                //raciTooltip += '\n';
                                                                //raciTooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                //raciTooltip += '\n';
                                                                //raciTooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                //raciTooltip += '\n';
                                                                //raciTooltip += 'I = Informed (also Informee)  ';
                                                                //instructions += '<br />';
                                                                //var tmpRaciRoleString = '';
                                                                //if (!assign) {
                                                                //    tmpRaciRoleString = 'NO ASSIGN STEP IN THE WORKFLOW xcx342878';
                                                                //} else {
                                                                //    // debugger;
                                                                //    var roleCategory = assign["@RoleCategory"];
                                                                //    if (!(roleCategory == 'Approver' || roleCategory == 'Collaborator' || roleCategory == 'Informed')) {
                                                                //        // Unexpected value for RoleCategory
                                                                //        tmpRaciRoleString = 'Unexpected value for RoleCategory: ' + roleCategory + '.xcx49964';
                                                                //    } else {
                                                                //        switch (roleCategory) {
                                                                //            case 'Approver':
                                                                //                tmpRaciRoleString = '<span style="font-weight:bold;color:tomato;">Approver</span>/Collaborator/Informed';
                                                                //                break;
                                                                //            case 'Collaborator':
                                                                //                tmpRaciRoleString = 'Approver/<span style="font-weight:bold;color:tomato;">Collaborator</span>/Informed';
                                                                //                break;
                                                                //            case 'Informed':
                                                                //                tmpRaciRoleString = 'Approver/Collaborator/<span style="font-weight:bold;color:tomato;">Informed</span>';
                                                                //                break;
                                                                //        }
                                                                //    }
                                                                //}

                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = instructions;
                                                                //
                                                                // End: Display the instructions.
                                                                //

                                                                //alert('The role drop-down has been displayed.');
                                                                console.log('>>>>>>>>>>>>>>>>> The role drop-down has been displayed.');
                                                                // debugger;



                                                                //
                                                                // Double check here to make sure the right item is selected in the drop-down for the role.
                                                                //
                                                                var dropDownElement = $('#' + requestDialogId).find('#selectedRaciRole')[0];
                                                                var selectedValue = $(dropDownElement).find('option:selected').val();
                                                                if (!selectedValue) {

                                                                    alert('xcx12312-1 Error: The role drop-down does not have a selected value. This process cannot continue.');
                                                                    displayAlertDialog('Error: The role drop-down does not have a selected value. This process cannot continue.');

                                                                } else {

                                                                    var selected_indropdown_bwWorkflowTaskItemId = $(dropDownElement).find('option:selected').attr('bwworkflowtaskitemid');
                                                                    var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    if (selected_indropdown_bwWorkflowTaskItemId && form_bwWorkflowTaskItemId && (selected_indropdown_bwWorkflowTaskItemId == form_bwWorkflowTaskItemId)) {
                                                                        // All is well, do nothing.

                                                                        //alert('In xcx34234(). Setting value for selected_indropdown_bwWorkflowTaskItemId and setting [bwWorkflowTaskItemId] in [budgetrequestform]: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                    } else {
                                                                        // Something is up. happened again 11-08-2022
                                                                        //alert('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                        displayAlertDialog('Unrecoverable error. Invalid values for bwWorkflowTaskItemId, either in the drop-down or in the form. selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId + ', request title: ' + 'xcx21312' + ', workflow step: ' + stepFriendlyName + ', brData.BudgetRequest.bwRequestJson: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));
                                                                    }


                                                                    //if (bwWorkflowTaskItemId) {
                                                                    //    if (bwWorkflowTaskItemId != selected_indropdown_bwWorkflowTaskItemId) {
                                                                    //        alert('Error: xcx12423 bwWorkflowTaskItemId does not match with selected_indropdown_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);
                                                                    //    } else {
                                                                    //        // Do nothing, the budgetrequestform should be populated.
                                                                    //        var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    //        if (bwWorkflowTaskItemId != form_bwWorkflowTaskItemId) {
                                                                    //            alert('Error: xcx12423 bwWorkflowTaskItemId does not match with form_bwWorkflowTaskItemId. Unrecoverable error. bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                    //        }
                                                                    //    }
                                                                    //} else {
                                                                    //    // This assumes that the budgetrequestform is not present. We will check!
                                                                    //    var form_bwWorkflowTaskItemId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');
                                                                    //    if (form_bwWorkflowTaskItemId) {
                                                                    //        alert('Error: xcx12423 form_bwWorkflowTaskItemId is present. Unrecoverable error. form_bwWorkflowTaskItemId: ' + form_bwWorkflowTaskItemId);
                                                                    //    } else {
                                                                    //        // This is what we expect, so just store the value in the form.
                                                                    //        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowtaskitemid', selected_indropdown_bwWorkflowTaskItemId);

                                                                    //        alert('xcx214234 role drop down has been rendered. selectedRaciRole: ' + selectedRaciRole + ', assign["@Role"]: ' + assign["@Role"] + ', selected_indropdown_bwWorkflowTaskItemId: ' + selected_indropdown_bwWorkflowTaskItemId);

                                                                    //    }
                                                                    //}

                                                                }
                                                                //
                                                                // end: Double check here to make sure the right item is selected in the drop-down for the role.
                                                                //



                                                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = '';

                                                                // 2-11-2022 REMOVED THIS FOR NOW, MAY PUT BACK FOR TESTING>?
                                                                //
                                                                // Display details in the error section. 
                                                                //
                                                                //var html = '';
                                                                //html += '<table>';

                                                                //if (brData.RequestingUser.ParticipantRole == 'owner') { // You are the owner of this budget request system.
                                                                //    html += '  <tr>';
                                                                //    html += '    <td colspan="2">This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-1:';
                                                                //    html += '    ' + brData.RequestingUser.ParticipantRole + ' - '; // + '</td>';
                                                                //    html += '    <span onclick="$(\'.bwRequest\').bwRequest(\'viewThisBudgetRequestSystemDetailsDialog\');" style="text-decoration:underline;cursor:pointer;" title="xClick here to view details about this budget request system...">';
                                                                //    html += '    You are the owner of this budget request system.xcx1';
                                                                //    html += '    </span>';
                                                                //    html += ' - Role: ' + assign["@RoleName"];
                                                                //    html += '    </td>';
                                                                //    html += '  </tr>';

                                                                //} else {
                                                                //    html += '  <tr>';
                                                                //    html += '    <td>This participant: ' + participantFriendlyName + ' (' + participantEmail + '). participantRolesXCX1-2:</td>';
                                                                //    html += '    <td>' + brData.RequestingUser.ParticipantRole + ' - Role: ' + assign["@RoleName"] + '</td>';
                                                                //    html += '  </tr>';
                                                                //}

                                                                //html += '</table>';

                                                                //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = html;
                                                                //
                                                                // end: Display details in the error section. 
                                                                //





                                                                //
                                                                // Checklists.
                                                                //
                                                                $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = ''; // First we clear the element.

                                                                //var cond = RolesData.WorkflowStep.Assign["@Cond"];

                                                                if (RolesData.WorkflowStep.Assign["@Checklists"]) {
                                                                    var WorkflowStep_Assign_Checklists = RolesData.WorkflowStep.Assign["@Checklists"];
                                                                    console.log('xcx31241 This workflow assignment has checklists. WorkflowStep_Assign_Checklists: ' + JSON.stringify(WorkflowStep_Assign_Checklists));

                                                                    //if (cond) {

                                                                    //    // Remove duplicates. cond needs to be converted to JSON someday.
                                                                    //    console.log('I HATE THIS BUT I AM GOING TO REMOVE DUPLICATES HERE. BAD PRACTICE!!!!!!!!!!!!!!!!!!!!!!!! 4-16-2020.');

                                                                    //    if (cond && cond.split('$ChecklistsRequired~')[1]) {
                                                                    //        var checklistGuidArray = cond.split('$ChecklistsRequired~')[1].split(',');
                                                                    //        if (checklistGuidArray) {
                                                                    //            for (var i1 = 0; i1 < checklistGuidArray.length; i1++) {
                                                                    //                if (!newChecklistsArray.includes(checklistGuidArray[i1])) newChecklistsArray.push(checklistGuidArray[i1]);
                                                                    //            }
                                                                    //            cond = '$ChecklistsRequired~' + newChecklistsArray.toString();
                                                                    //        }
                                                                    //    }
                                                                    //}

                                                                    var BudgetRequest_bwRequestJson_Checklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists; // These are the checklists that have already been saved in the request.

                                                                    // Populate checklistsAlreadyCompleted.
                                                                    var checklistsAlreadyCompleted = [];
                                                                    for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                        // Check if it has been saved/completed already.
                                                                        if (BudgetRequest_bwRequestJson_Checklists) {
                                                                            for (var j = 0; j < BudgetRequest_bwRequestJson_Checklists.length; j++) {
                                                                                var brChecklist = JSON.parse(BudgetRequest_bwRequestJson_Checklists[j]);
                                                                                if (brChecklist.bwChecklistTemplatesId == WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId) {
                                                                                    var checklistJson = {
                                                                                        bwChecklistTemplatesId: brChecklist.bwChecklistTemplatesId,
                                                                                        html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequest.ProjectTitle + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + brChecklist.Title + '</span>'
                                                                                    }
                                                                                    checklistsAlreadyCompleted.push(checklistJson); // Already completed, so put in this array.
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                    // Populate checklistsRemainingToBeCompleted.
                                                                    var checklistsRemainingToBeCompleted = [];
                                                                    for (var i = 0; i < WorkflowStep_Assign_Checklists.length; i++) {
                                                                        var checklistHasAlreadyBeenCompleted = false;
                                                                        for (var j = 0; j < checklistsAlreadyCompleted.length; j++) {
                                                                            if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == checklistsAlreadyCompleted[j].bwChecklistTemplatesId) {
                                                                                checklistHasAlreadyBeenCompleted = true;
                                                                                break;
                                                                            }
                                                                        }
                                                                        if (checklistHasAlreadyBeenCompleted != true) {
                                                                            for (var j = 0; j < brData.OrganizationChecklists.length; j++) { // OrganizationChecklists
                                                                                if (WorkflowStep_Assign_Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                    var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;
                                                                                    var checklistJson = {
                                                                                        bwChecklistTemplatesId: brData.OrganizationChecklists[j].bwChecklistTemplatesId,
                                                                                        html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.OrganizationChecklists[j].bwChecklistTemplatesId + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</span>'
                                                                                    }
                                                                                    checklistsRemainingToBeCompleted.push(checklistJson); // The checklists remaining to be completed get stored in this array.
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    var checklistsHtml = '';

                                                                    checklistsHtml += '<div>';

                                                                    // Display "All checklists". Everyone sees this list.
                                                                    thiz.options.Checklists = brData.OrganizationChecklists; //[]; // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                    if (brData.Checklists.length > 0) {
                                                                        if (brData.Checklists.length == 1) {
                                                                            checklistsHtml += 'Checklist to be completed for this request: ';
                                                                        } else {
                                                                            checklistsHtml += 'Checklists to be completed for this request: '; // 12-31-2022 // brData.Checklists[j]
                                                                        }

                                                                        checklistsHtml += '<ul>';
                                                                        alert('xcx213421 brData.Checklists: ' + JSON.stringify(brData.Checklists));
                                                                        debugger;
                                                                        for (var i = 0; i < brData.Checklists.length; i++) {
                                                                            for (var j = 0; j < brData.OrganizationChecklists.length; j++) {
                                                                                if (brData.Checklists[i].bwChecklistTemplatesId == brData.OrganizationChecklists[j].bwChecklistTemplatesId) {
                                                                                    var checklistTitle = JSON.parse(brData.OrganizationChecklists[j].ChecklistJson).Title;

                                                                                    var checklistJson = {
                                                                                        bwChecklistTemplatesId: brData.Checklists[i].bwChecklistTemplatesId,
                                                                                        html: '<li style="cursor:pointer;text-decoration:underline;text-align:left;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.Checklists[i].bwChecklistTemplatesId + '\', \'' + String(brData.BudgetRequest.ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequest.Title + '\', \'' + brData.BudgetRequest.bwRequestType + '\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwWorkflowId + '\', \'' + bwOrgId + '\');">' + checklistTitle + '</li>'
                                                                                    }

                                                                                    checklistsHtml += checklistJson.html;
                                                                                    thiz.options.Checklists.push(brData.Checklists[i]); // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                                }
                                                                            }
                                                                        }
                                                                        checklistsHtml += '</ul>';

                                                                        checklistsHtml += '</div>';
                                                                    }

                                                                    //if (cond) {

                                                                    //console.log('xcx99223 In bwRequest.xx(). cond: ' + JSON.stringify(cond));

                                                                    if ((checklistsAlreadyCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0) || (checklistsRemainingToBeCompleted.length > 0)) {

                                                                        checklistsHtml += '<div>';

                                                                        // Display "Completed Checklists".
                                                                        if (checklistsAlreadyCompleted.length > 0) {
                                                                            if (checklistsAlreadyCompleted.length == 1) {
                                                                                checklistsHtml += 'Completed checklist: ';
                                                                            } else {
                                                                                checklistsHtml += 'Completed checklists: ';
                                                                            }
                                                                            //checklistsAlreadyCompleted = thiz.removeDuplicates(JSON.parse(JSON.stringify(checklistsAlreadyCompleted)));
                                                                            for (var i = 0; i < checklistsAlreadyCompleted.length; i++) {
                                                                                checklistsHtml += '<span xcx="xcx99205476" style="white-space:nowrap;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                                                                checklistsHtml += '&nbsp;' + checklistsAlreadyCompleted[i].html;
                                                                                checklistsHtml += '</span>';
                                                                                checklistsHtml += '<br />';
                                                                            }
                                                                        }

                                                                        // Display "Checklists to be completed".
                                                                        if (checklistsRemainingToBeCompleted.length > 0) {
                                                                            checklistsHtml += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                                                            checklistsHtml += '&nbsp;';
                                                                            if (checklistsRemainingToBeCompleted.length == 1) {
                                                                                checklistsHtml += 'Complete the following checklist before you Approve: ';
                                                                            } else {
                                                                                checklistsHtml += 'Complete the following checklist(s) before you Approve: ';
                                                                            }

                                                                            checklistsHtml += '<ul>';
                                                                            for (var i = 0; i < checklistsRemainingToBeCompleted.length; i++) {

                                                                                checklistsHtml += '<li style="cursor:pointer;text-decoration:underline;text-align:left;" >' + checklistsRemainingToBeCompleted[i].html + '</li>'

                                                                            }
                                                                            checklistsHtml += '</ul>';

                                                                            checklistsHtml += '<br />';

                                                                        }

                                                                        checklistsHtml += '</div>';

                                                                    }

                                                                    $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                }

                                                                //$('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = checklistsHtml;

                                                                //
                                                                // end: Display checklists.
                                                                //




                                                                //
                                                                // Display the buttons.
                                                                //
                                                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequest.bwBudgetRequestId, brData.BudgetRequest.bwRequestTypeId, html, 'xcx445566-7', false, RolesData.WorkflowStep.Assign, RolesData.RequestingUser, roleMember, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, allowRequestModifications, checklistsRemainingToBeCompleted);
                                                                //
                                                                // end: Display the buttons.
                                                                //






                                                                //
                                                                // Display the instructions.
                                                                //
                                                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = ''; // First, we clear the element.

                                                                instructions = '';
                                                                if (RolesData.WorkflowStep.Assign && RolesData.WorkflowStep.Assign["@Instructions"]) {
                                                                    instructions += RolesData.WorkflowStep.Assign["@Instructions"]; // The workflow had "Instructions" specified.
                                                                    //instructions += 'WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1';
                                                                    console.log('WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-1');
                                                                } else {

                                                                    console.log('In bwRequest.js.xx(). COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1');
                                                                    //instructions += ' - COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-1';

                                                                }
                                                                if (checklistsRemainingToBeCompleted && checklistsRemainingToBeCompleted.length > 0) {
                                                                    instructions += 'Complete the required checklists before approving this request.';
                                                                    instructions += '<br />';
                                                                }
                                                                if (instructions && (instructions != 'undefined')) {
                                                                    console.log('');
                                                                    console.log('**********');
                                                                    console.log('In bwRequest.js.renderRequestForm(). Displaying instructions from the workflow JSON in the request form header. instructions: ' + instructions);
                                                                    console.log('**********');
                                                                    console.log('');
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                                                    //alert('The instructions have been displayed.');
                                                                    console.log('The instructions have been displayed.');
                                                                    // debugger;

                                                                }
                                                                // end: Display the instructions.


                                                                //
                                                                //
                                                                // Started integration of closeouts today. 1-13-2024.
                                                                //
                                                                //

                                                                // We need to check if closeouts are enabled for this request type.

                                                                // bwEnabledRequestTypes
                                                                //var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');
                                                                //displayAlertDialog('xcx213124321 requestType: ' + JSON.stringify(requestType));
                                                                if (requestType.closeoutsEnabled == true) {

                                                                    var closeoutHtml = '';
                                                                    closeoutHtml += '<br />';
                                                                    // <a href="/about/test.html"
                                                                    debugger;
                                                                    closeoutHtml += '<span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayCloseoutInDialog\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.Title + '\');" xcx="xcx2134213-2" >[spanViewCloseoutButtonPlaceholder] View closeout.</span>';
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += closeoutHtml;

                                                                } else {

                                                                    //
                                                                    // 1-17-2024 We don't need to show that closeouts arent enabled.
                                                                    //

                                                                    //var closeoutHtml = '';
                                                                    //closeoutHtml += '<br />';
                                                                    //// <a href="/about/test.html"
                                                                    //debugger;
                                                                    //closeoutHtml += 'xcx12123123 closeouts not enabled';
                                                                    //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += closeoutHtml;

                                                                }

                                                                //
                                                                //
                                                                // end: Started integration of closeouts today. 1-13-2024.
                                                                //
                                                                //


                                                                //
                                                                //
                                                                // Started integration of closeouts today. 1-19-2024.
                                                                //
                                                                //
                                                                if (requestType.supplementalsEnabled == true) {

                                                                    var supplementalHtml = '';
                                                                    supplementalHtml += '<br />';
                                                                    supplementalHtml += '<span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displaySupplementalInDialog\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.Title + '\');" xcx="xcx2134213" >[list of supplementals]</span>';
                                                                    supplementalHtml += '<br />';
                                                                    supplementalHtml += '<span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displaySupplementalInDialog\', \'' + brData.BudgetRequest.bwBudgetRequestId + '\', \'' + brData.BudgetRequest.bwRequestTypeId + '\', \'' + brData.BudgetRequest.Title + '\');" xcx="xcx2134213" >[spanCreateSupplementalRequestButtonPlaceholder]</span>';
                                                                    $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML += supplementalHtml;

                                                                } else {

                                                                    //
                                                                    // 1-19-2024 We don't need to show that supplementals arent enabled.
                                                                    //

                                                                }

                                                                //
                                                                //
                                                                // end: Started integration of closeouts today. 1-19-2024.
                                                                //
                                                                //


                                                                //
                                                                // Regardless whether the user is a participant in the workflow, or they just want to look at the request, we render it here. 12-25-2021
                                                                //
                                                                //alert('Calling populateRequestForm(). xcx3452-2-2 brData.BudgetRequest.bwRequestJson XXX: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));
                                                                console.log('Calling populateRequestForm(). xcx3452-2-2 brData.BudgetRequest.bwRequestJson: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));
                                                                var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequest.bwRequestJson, allowRequestModifications);
                                                                promise.then(function () {
                                                                    try {

                                                                        // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                        var canvas = document.getElementById("myCanvas");
                                                                        if (canvas) {
                                                                            // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                            var body = document.getElementsByTagName('body')[0];
                                                                            var clientWidth = body.scrollWidth;
                                                                            var clientHeight = Math.max(
                                                                                body.scrollHeight, document.documentElement.scrollHeight,
                                                                                body.offsetHeight, document.documentElement.offsetHeight,
                                                                                body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                            );
                                                                            // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                            // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                            // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                            canvas.width = clientWidth;
                                                                            canvas.height = clientHeight;
                                                                        }

                                                                        // If off the screen, re-position. 4-17-2022
                                                                        var o = $('#' + requestDialogId).dialog().closest('.ui-dialog').offset();
                                                                        //alert("Top: " + o.top + " Left : " + o.left);
                                                                        //var left = document.getElementById(requestDialogId + '_Parent').getBoundingClientRect().left;
                                                                        if (o.left < 0) {
                                                                            console.log('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-2 left: ' + o.left);
                                                                            //alert('THE AR DIALOG has been displayed too far to the left. xcxRepositioning here...xcx23214-2 left: ' + o.left);
                                                                            $('#' + requestDialogId).dialog({
                                                                                position: {
                                                                                    //my: "center top", at: "center top+200", of: window
                                                                                    my: "center top", at: "center top", of: window
                                                                                }
                                                                            });
                                                                        }

                                                                        // This closes the in-browser request dialog, if this one is a popped-out window one.
                                                                        try {
                                                                            // This is in a try-catch because if the link comes from an email client, you get this error: [Blocked a frame with origin "https://shareandcollaborate.com" from accessing a cross-origin frame.]
                                                                            if (window.opener) {
                                                                                var dialogId = 'divRequestFormDialog_' + brData.BudgetRequest.bwBudgetRequestId;
                                                                                console.log('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                //alert('xcx999334-2 Should be closing dialog window.opener.dialogId: ' + dialogId);
                                                                                window.opener.$('#' + dialogId).dialog('close');
                                                                            }
                                                                        } catch (e) { }

                                                                    } catch (e) {
                                                                        console.log('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                        displayAlertDialog('Exception in bwRequest.js.renderRequestForm.populateRequestForm.then():xcx21312-4: ' + e.message + ', ' + e.stack);
                                                                    }
                                                                });

                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                                alert('Exception in bwRequest.js.renderRequestForm.UserRole2.done(): ' + e.message + ', ' + e.stack);
                                                            }
                                                        }).fail(function (data) {
                                                            var msg;
                                                            if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                                                                msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                                                            } else {
                                                                msg = JSON.stringify(data);
                                                            }
                                                            displayAlertDialog('Error in bwRequest.js.renderRequestForm.UserRole2.fail():3: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                                                            console.log('Error in bwRequest.js.renderRequestForm.UserRole2.fail():3: ' + JSON.stringify(data));
                                                            alert('Error in bwRequest.js.renderRequestForm.UserRole2.fail():3: ' + msg);
                                                        });

                                                        //}
                                                    }

                                                }
                                                //}

                                                //
                                                // Render the bwLocationPicker.js widget here.
                                                //
                                                var options = {
                                                    bwTenantId: tenantId,
                                                    bwWorkflowAppId: workflowAppId,
                                                    bwParticipantId: participantId,
                                                    bwParticipantEmail: participantEmail,
                                                    bwParticipantFriendlyName: participantFriendlyName,
                                                    bwEnabledRequestTypes: bwEnabledRequestTypes,
                                                    bwOrgId: bwOrgId,
                                                    bwOrgName: bwOrgName
                                                };
                                                var $bwLocationPicker = $('#' + requestDialogId).find('#divBwLocationPicker').bwLocationPicker(options);

                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                            displayAlertDialog_Persistent('Exception in bwRequest.js.renderRequestForm():21-1:requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack);
                                        }
                                    });

                                    //}

                                }

                            } catch (e) {
                                console.log('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in bwRequest.js.renderRequestForm():265: ' + e.message + ', ' + e.stack);
                            }
                        }
                    });
                }

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderRequestForm(): ' + e.message + ', ' + e.stack);
        }
    },

    //
    // Display and populate the "New Request" form.
    //
    displayCreateRequestForm: function (bwRequestTypeId) {
        try {
            console.log('In bwRequest.js.displayCreateRequestForm(). bwRequestTypeId: ' + bwRequestTypeId);
            //alert('In bwRequest.js.displayCreateRequestForm(). bwRequestTypeId: ' + bwRequestTypeId);
            var thiz = this;

            //
            // This only happens when the user creates a new request.
            //

            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            try {
                $('#FormsEditorToolbox').dialog('close');
            } catch (e) {
            }

            // THIS IS A GREAT OPPORTUNITY TO CLEAR THE CIRCLE DIALOGS!!!!>>>>>>>>>>>>>>>>>>>>>>
            $('#divBwCircleDialog').bwCircleDialog('setWidgetOptionValue', 'OnResizeDisplayValues', null);

            if (!bwRequestTypeId) { // 11-22-2021

                bwRequestTypeId = $('.bwAuthentication').bwAuthentication('option', 'LastSelected_bwRequestTypeId');

                if (!bwRequestTypeId) {
                    //
                    // This can happen for a newly provisioned tenant. 11-8-2023.
                    //
                    var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes');
                    var bwRequestType = bwEnabledRequestTypes.EnabledItems[0]; // Pick the first one.
                    bwRequestTypeId = bwRequestType.bwRequestTypeId;
                }

                console.log('In bwRequest.js.displayCreateRequestForm(). Setting bwRequestTypeId to LastSelected_bwRequestTypeId: ' + bwRequestTypeId);

            }

            if (participantId) {

                var canvas = document.getElementById("myCanvas");
                if (canvas) {
                    var ctx = canvas.getContext("2d");
                    ctx.clearRect(0, 0, canvas.width, canvas.height); // clear the canvas of it's lines
                    canvas.style.zIndex = -1;
                }

                console.log('In bwRequest.js.displayCreateRequestForm(). xcx235-1 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + bwRequestTypeId);

                var promise = this.getRequestFormHtml(bwRequestTypeId, false, null, 'xcx23452-7'); // THIS IS THE DEFAULT request type, but it is HARDCODED SO CHANGE THIS <<<<<<<<<
                promise.then(function (results) {
                    try {

                        if (results.status != 'SUCCESS') {

                            var msg = 'Error in bwRequest.js.displayCreateRequestForm(): ' + results.status + ', ' + results.message;
                            console.log(msg);
                            displayAlertDialog(msg);

                        } else {

                            console.log('We were displaying the form here with displayAlertDialog() or some reason. I commented it out. 7-10-2023.');

                            console.log('xcx2131234-2 populating [divPageContent1].');
                            console.log('xcx2131234-2 populating [divPageContent1].');
                            console.log('xcx2131234-2 populating [divPageContent1].');
                            //alert('xcx2131234-2 populating [divPageContent1].');
                            $('#divPageContent1').html(results.html); // 8-19-2022

                            // Populate the bwrequesttitle attribute for the form. This way we can find it again, even if multiple .budgetrequestform dialogs are displayed.
                            var newRequestForm = $('#divPageContent1').find('.budgetrequestform')[0];
                            $(newRequestForm).attr('bwrequesttitle', 'New');





                            var developerModeEnabled = $('.bwAuthentication').bwAuthentication('option', 'developerModeEnabled');

                            if (developerModeEnabled == true) {
                                // 10-3-2023
                                var xx = '<div id="xcx11111" style="float:left;vertical-align:top;">PIN AND ELLIPSES</div>';
                                $('#divPageContent1').prepend(xx);
                            }





                            console.log('In bwRequest.js.displayCreateRequestForm(). Setting form element xdFormLayout width to 750px.');
                            document.getElementsByClassName('xdFormLayout')[0].style.width = '750px'; // 3-21-2023 This works for a New Request. Also doing this in the forms editor.




                            var openrequest;
                            var tmpParam1 = $('.bwAuthentication').bwAuthentication('getUrlParams')['openrequest'];
                            if (tmpParam1 && tmpParam1.toString() && tmpParam1.toString().split('#')[0]) {
                                openrequest = $('.bwAuthentication').bwAuthentication('getUrlParams')['openrequest'].toString().split('#')[0];
                            }

                            if (openrequest) {

                                var bwBudgetRequestId;
                                try {
                                    console.log('UUUUUUUUUUUUUUUUUUUUUUUUUUUUU xcx213123-1');
                                    console.log('xcx234324324-6 getUrlParams [request]');
                                    console.log('UUUUUUUUUUUUUUUUUUUUUUUUUUUUU  xcx213123-2');
                                    bwBudgetRequestId = $('.bwAuthentication').bwAuthentication('getUrlParams')['request'].toString().split('#')[0];
                                } catch (e) {
                                }

                                var bwWorkflowTaskItemId;
                                try {
                                    bwWorkflowTaskItemId = $('.bwAuthentication').bwAuthentication('getUrlParams')['taskid'].toString().split('#')[0];
                                } catch (e) {
                                }

                                console.log('Calling scrapeBwRequestJson() of window.opener.. xcx23436-1 bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestTypeId: ' + bwRequestType.bwRequestTypeId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                                // Scrape the JSON from the originating request form.
                                console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-3');
                                var promise = window.opener.$('.bwRequest').bwRequest('scrapeBwRequestJson', bwBudgetRequestId);
                                promise.then(function (bwRequestJson) {

                                    try {

                                        alert('Returning from scrapeBwRequestJson(). xcx2131241-3');

                                        var dialogId = 'divRequestFormDialog_' + bwBudgetRequestId;
                                        alert('xcx999334-1 Should be closing dialog dialogId: ' + dialogId);
                                        //window.opener.$('#' + dialogId).dialog('close');

                                        if (bwWorkflowTaskItemId) {
                                            console.log('Calling populateRequestForm for a popped-out window.... bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', bwRequestJson: ' + JSON.stringify(bwRequestJson));
                                            thiz.populateRequestForm('divPageContent1', JSON.stringify(bwRequestJson), true);
                                        } else {
                                            console.log('Calling populateNewRequestForm for a popped-out window.... bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', bwRequestJson: ' + JSON.stringify(bwRequestJson));
                                            thiz.populateNewRequestForm('divPageContent1', bwRequestTypeId, JSON.stringify(bwRequestJson));
                                        }

                                    } catch (e) {
                                        console.log('Exception in displayCreateRequestForm.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                                        displayAlertDialog('Exception in displayCreateRequestForm.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                                        document.getElementById('txtDisplayJsonDialogJSON').innerHTML = 'Exception in displayCreateRequestForm.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                                    }

                                }).catch(function (result) {

                                    console.log('In displayCreateRequestForm(). Promise returned exception: ' + result.message);
                                    displayAlertMessage('In displayCreateRequestForm(). Promise returned exception: ' + result.message);

                                });

                            } else {

                                console.log('In bwRequest.js.displayCreateRequestForm(). Calling populateNewRequestForm() to display the New Request screen. The user must have clicked the "New Request" button in the left menu.');
                                //alert('In bwRequest.js.displayCreateRequestForm(). Calling populateNewRequestForm() to display the New Request screen. The user must have clicked the "New Request" button in the left menu.');

                                thiz.populateNewRequestForm('divPageContent1', bwRequestTypeId);

                            }

                        }

                    } catch (e) {
                        console.log('Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack);
                        alert('Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack);
                        // debugger; // DISPLAY THIS ON THE FORM!!!!!!!!!!
                        document.getElementById('divPageContent1').innerHTML = 'Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack;
                        document.getElementById('divRequestFormDialogContent').innerHTML = 'Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack;
                    }
                });

            } else {

                // The user is not logged in, so create an offline request.

                displayAlertDialog('xcx235-2 getting ready to call getRequestFormHtml(). bwRequestTypeId: ' + bwRequestTypeId + ', participantId: ' + participantId);

                var promise = this.getRequestFormHtml(bwRequestTypeId, false, null, 'xcx23452-8');
                promise.then(function (results) {
                    try {

                        if (results.message != null) {
                            // We have an error!!
                            document.getElementById('divPageContent1').innerHTML = results.message;
                            document.getElementById('divRequestFormDialogContent').innerHTML = results.message;
                        } else {

                            if (bwRequestType == 'offlinerequest') {

                                document.getElementById('ArDialog').innerHTML = results.html;

                                alert('xcx3253634758');

                                alert('Calling populateNewRequestForm_IndexDb(). xcx23436-1');
                                thiz.populateNewRequestForm_IndexDb('ArDialog', bwRequestType);
                            } else {
                                document.getElementById('divPageContent1').innerHTML = results.html;
                                document.getElementById('divRequestFormDialogContent').innerHTML = results.html;

                                alert('Calling populateNewRequestForm(). xcx23436-2');
                                thiz.populateNewRequestForm('divPageContent1', bwRequestType);

                            }

                        }
                    } catch (e) {
                        console.log('Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack);
                        // debugger; // DISPLAY THIS ON THE FORM!!!!!!!!!!
                        document.getElementById('divPageContent1').innerHTML = 'Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack;
                        document.getElementById('divRequestFormDialogContent').innerHTML = 'Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack;
                    }
                });
            }
        } catch (e) {
            console.log('Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack);
        }
    },
    // Display and populate the "New Request" form.
    displayCreateRequestFormForMobile: function (bwRequestType) {
        try {
            // debugger;
            console.log('In displayCreateRequestFormForMobile().');
            alert('In displayCreateRequestFormForMobile().');
            var thiz = this;

            //try {
            //    $('#FormsEditorToolbox').dialog('close');
            //} catch (e) { }

            //// THIS IS A GREAT OPPORTUNITY TO CLEAR THE CIRCLE DIALOGS!!!!>>>>>>>>>>>>>>>>>>>>>>
            //$('#divCircleDialog').bwCircleDialog('setXx', 'OnResizeDisplayValues', null);

            //$('#bwQuickLaunchMenuTd').css({
            //    width: '0'
            //}); // This gets rid of the jumping around.
            //$('#liWelcome').hide();
            //$('#liArchive').hide();
            //$('#liSummaryReport').hide();
            //$('#liConfiguration').hide();
            //$('#liHelp').hide();
            //$('#liNewRequest').show();
            //renderLeftButtons('divNewRequestPageLeftButtons');
            if (participantId) {
                // The user is logged in.
                //var promise = this.renderRequestFormHtml_SmallScreen('divPageContent1');
                //// debugger;


                var canvas = document.getElementById("myCanvas");
                if (canvas) {
                    var ctx = canvas.getContext("2d");
                    ctx.clearRect(0, 0, canvas.width, canvas.height); // clear the canvas of it's lines
                    canvas.style.zIndex = -1;
                }

                //var promise = this.renderRequestFormHtml_CapitalPlan_ExistingRequestScreen('divPageContent1');
                //var promise = this.renderRequestFormHtml_CapitalPlan_NewRequestScreen('divPageContent1');
                //var promise = this.getRequestFormHtml_CapitalPlan('divNewRequest'); //'divPageContent1');
                // debugger;
                alert('xcx235-3 getting ready to call getRequestFormHtml(). bwRequestType: ' + bwRequestType);
                //var bwRequestType = 'budgetrequest';
                var promise = this.getRequestFormHtml(bwRequestType.bwRequestTypeId, false, null, 'xcx23452-9'); // THIS IS THE DEFAULT request type, but it is HARDCODED SO CHANGE THIS <<<<<<<<<
                promise.then(function (results) {
                    try {
                        //// debugger; // MAKE SURE THE HTML IS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        if (results.message != null) {
                            // We have an error!!
                            document.getElementById('welcomePageNewRequestTab').innerHTML = results.message;
                        } else {
                            document.getElementById('welcomePageNewRequestTab').innerHTML = results.html;
                            //document.getElementById('divRequestFormDialogContent').innerHTML = html;


                            alert('Calling populateNewRequestForm(). xcx23436-3');
                            thiz.populateNewRequestForm('welcomePageNewRequestTab', bwRequestType);

                            //
                            // BRING THE BELOW BACK SOON!!!!!!!!!!!!!!!!!!!!!!!!!!!! 5-18-2020
                            //var x = BWMData;
                            //if (!BWMData[0]) {
                            //    // debugger; // 2-11-2020 2-23pm ast
                            //    var y = 'BAD'; // If we are here, we need to load BWMData. There may be a better place to do this, but for now we will do this here.
                            //    // debugger;
                            //    $('#divBwCoreComponent').bwCoreComponent('loadWorkflowAppConfigurationDetails9');
                            //    //loadWorkflowAppConfigurationDetails9
                            //}

                            //window.onresize = thiz.requestWindow_OnResize; //(); //reportWindowSize;
                        }
                    } catch (e) {
                        console.log('Exception in displayCreateRequestFormForMobile(): ' + e.message + ', ' + e.stack);
                        // debugger; // DISPLAY THIS ON THE FORM!!!!!!!!!!
                        document.getElementById('welcomePageNewRequestTab').innerHTML = 'Exception in displayCreateRequestFormForMobile(): ' + e.message + ', ' + e.stack;
                        //document.getElementById('divRequestFormDialogContent').innerHTML = 'Exception in displayCreateRequestForm(): ' + e.message + ', ' + e.stack;
                    }
                });
            } else {
                // The user is not logged in, so create an offline request.


                // debugger;
                this.renderCreateRequestFullFormOffline();
                this.renderNewRequestForm();
            }
        } catch (e) {
            console.log('Exception in displayCreateRequestFormForMobile(): ' + e.message + ', ' + e.stack);
        }
    },

    initializeRequestFormWidgets: function (requestDialogId, bwRequestJson, allowRequestModifications, attachmentsAreStoredInIndexDb, formWidget_CustomRenderingInstructions, methodIsPassingElementNoDialogId) { // attachmentsAreStoredInIndexDb is being passed to the bwAttachments widget...
        try {
            //
            // This is only called by populateNewRequestForm() or populateRequestForm(). Very similar to code to scrapeBwRequestJson().
            //
            // Added this to cludge things along.... some conversion to do in th efuture. The idea is to always keep everything in this one method. methodIsPassingElementNoDialogId. 11-7-2023.
            //
            console.log('In bwRequest.js.initializeRequestFormWidgets(). formWidget_CustomRenderingInstructions: ' + JSON.stringify(formWidget_CustomRenderingInstructions));


            //alert('In bwRequest.js.initializeRequestFormWidgets(). requestDialogId: ' + requestDialogId + ', formWidget_CustomRenderingInstructions: ' + JSON.stringify(formWidget_CustomRenderingInstructions));


            if (!(methodIsPassingElementNoDialogId && (methodIsPassingElementNoDialogId == true))) {

                var erroredElementName;

                // To begin with, create an array of required fields.
                var widgetsWithRequiredFields = [];
                var widgetsWithRequiredFieldsTemp = $('#' + requestDialogId).find('.ToggleRequiredAsterisk-On');
                for (var i = 0; i < widgetsWithRequiredFieldsTemp.length; i++) {
                    var widgetname = widgetsWithRequiredFieldsTemp[i].closest('.xdTableOffsetRow').getAttribute('bwwidgetname');
                    widgetsWithRequiredFields.push(widgetname);
                }

                // The widgets are instantiated by looking at the class named "bwwidgetname".
                var formElements = $('#' + requestDialogId).find('[bwwidgetname]');

                // Then we have to make an array of bwwidgetname... this is the list of form widgets on the form.
                var widgetNames = [];
                for (var i = 0; i < formElements.length; i++) {
                    var formWidgetName = formElements[i].getAttribute('bwwidgetname');
                    widgetNames.push(formWidgetName);
                }

                console.log('In bwRequest.js.initializeRequestFormWidgets(). Found these form elements in requestDialogId: ' + requestDialogId + ', ' + JSON.stringify(widgetNames));
                //alert('In bwRequest.js.initializeRequestFormWidgets(). Found these form elements in requestDialogId: ' + requestDialogId + ', ' + JSON.stringify(widgetNames));

                for (var i = 0; i < widgetNames.length; i++) {

                    // Find this tr element: <tr class="xdTableOffsetRow " draggable="true" bwwidgetname="ProjectTitle" id="draggablerow_1">
                    var elementForInstantiatingTheWidget = $('#' + requestDialogId).find('[bwwidgetname="' + widgetNames[i] + '"]'); //[0]; // ADDED [0] index selection 4-19-2023 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // To find out if this is a required "field/widget", look for this, for example: <span class="ToggleRequiredAsterisk-On" title="Select this asterick to make this a required field." onclick="$('.bwFormsEditor').bwFormsEditor('toggleFormRequiredField', this);">*</span>
                    var renderAsARequiredField = false;
                    if (widgetsWithRequiredFields.indexOf(widgetNames[i]) > -1) {
                        renderAsARequiredField = true;
                    }

                    var jsonString = '{"' + widgetNames[i] + '": 0}'; // Doing it this way so we create a node named with the name of the widget.
                    var jsonData = JSON.parse(jsonString); // Doing it this way so we create a node named with the name of the widget.
                    // Now we need to add the other data that a form widget might need to know.
                    jsonData["bwWorkflowAppId"] = bwRequestJson.bwWorkflowAppId;
                    jsonData["bwBudgetRequestId"] = bwRequestJson.bwBudgetRequestId;
                    jsonData["requestDialogId"] = requestDialogId;
                    jsonData[widgetNames[i]] = bwRequestJson[widgetNames[i]]; // Doing it this way so we create a node named with the name of the widget.

                    console.log('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with jsonData: ' + JSON.stringify(jsonData));
                    //displayAlertDialog('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with jsonData: ' + JSON.stringify(jsonData));
                    //alert('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with displayContext = "form", xcx123123123-1, jsonData: ' + JSON.stringify(jsonData));


                    // displayContext allows us to render depending on where this widget is going. Possible values:
                    //      - 'form'. This is when the invoice widget is displayed in a request form, along with other form widgets. If no value is specified, then the default is 'form'.
                    //      - 'dialog'. This is when the invoice widget is displayed in it's own dialog. This happens when the user is viewing a request, and clicks the magnifying glass button invoking viewInLargeWindow().
                    //      - 'window'. This is when the user selects the '↸' button to view in a popped-out window, invoking LaunchIntoSeparateWindow().
                    //      - 'printed_invoice1'. This is when the user selects the 'Issue Invoice' button when viewing a request, invoking issueInvoice().

                    var widgetOptions;
                    debugger;
                    if (formWidget_CustomRenderingInstructions && (formWidget_CustomRenderingInstructions[0].bwInvoiceGrid.CustomRenderingInstruction == 'RENDER_FOR_PRINTED_INVOICE')) {

                        widgetOptions = {
                            displayContext: 'printed_invoice1',
                            jsonData: jsonData, // this only send the data required for the particular widget.
                            allowRequestModifications: allowRequestModifications,
                            bwRequestJson: bwRequestJson,
                            renderAsARequiredField: renderAsARequiredField,
                            customRenderingInstruction: formWidget_CustomRenderingInstructions[0].bwInvoiceGrid.CustomRenderingInstruction // formWidget_CustomRenderingInstructions is an array of custom instructions for the form widgets. Currently only has bwInvoiceGrid in there.... 12-18-2023.
                            //attachmentsAreStoredInIndexDb: attachmentsAreStoredInIndexDb // attachmentsAreStoredInIndexDb is being passed to the bwAttachments widget... need to know if using file services of IndexDb.
                        };

                    } else {

                        widgetOptions = {
                            displayContext: 'form',
                            jsonData: jsonData, // this only send the data required for the particular widget.
                            allowRequestModifications: allowRequestModifications,
                            bwRequestJson: bwRequestJson,
                            renderAsARequiredField: renderAsARequiredField,
                            customRenderingInstructions: formWidget_CustomRenderingInstructions
                            //attachmentsAreStoredInIndexDb: attachmentsAreStoredInIndexDb // attachmentsAreStoredInIndexDb is being passed to the bwAttachments widget... need to know if using file services of IndexDb.
                        };

                    }



                    //var widgetName = widgetNames[i];
                    erroredElementName = widgetNames[i];
                    //if (elementForInstantiatingTheWidget && (elementForInstantiatingTheWidget.length == 1)) { // && $(elementForInstantiatingTheWidget)[widgetName]) {
                    //    $(elementForInstantiatingTheWidget)[widgetName](widgetOptions); // Instantiate the form widget. This calls _create(). Like: $('.bwWidget:first').bwWidget(widgetOptions);
                    //} else {
                    //    alert('xcx1234234235 Failed to instantiate widget for elementForInstantiatingTheWidget.length: ' + elementForInstantiatingTheWidget.length + ', invoking widget widgetName: [' + widgetName + ']. I think this error only happens on the Ipad 2<<<<<<<<!! We need to figure out how to dynamiccally call/instantiate a widget on Safari Ipad 2.');
                    //}


                    if (!widgetNames[i]) {

                        var msg = 'In bwRequest.js.initializeRequestFormWidgets(). Invalid value for widgetNames[i]: ' + widgetNames[i];
                        console.log(msg);
                        displayAlertDialog(msg);

                    } else {


                        //if (!elementForInstantiatingTheWidget) {
                        //    var msg = 'xcx112233 Critical error. Search for ' + '[bwwidgetname="' + widgetNames[i] + '"]' + ' failed in the DOM.';
                        //}

                        try {

                            //alert('Instantiating widgetNames[i]: ' + widgetNames[i] + ' with widgetOptions: ' + JSON.stringify(widgetOptions));

                            $(elementForInstantiatingTheWidget)[widgetNames[i]](widgetOptions); // Instantiate the form widget. This calls _create(). Like: $('.bwWidget:first').bwWidget(widgetOptions);
                        } catch (e) {

                            //if (widgetNames[i] == 'bwAttachments') {


                            //    //var msg = 'xcx123445 elementForInstantiatingTheWidget: ' + JSON.stringify(elementForInstantiatingTheWidget);
                            //    //displayAlertDialog(msg);


                            //    $(elementForInstantiatingTheWidget).bwAttachments({}); //widgetOptions);


                            //} else {

                            var msg = 'xcx1234234235-1 Failed to instantiate widget for elementForInstantiatingTheWidget.length: ' + elementForInstantiatingTheWidget.length + ', invoking widget widgetNames[i]: [' + widgetNames[i] + ']. elementForInstantiatingTheWidget.html(): ' + $(elementForInstantiatingTheWidget)[0].outerHTML + '. I think this error only happens on the Ipad 2<<<<<<<<!! We need to figure out how to dynamiccally call/instantiate a widget on Safari Ipad 2. Exception: ' + e.message + ', ' + e.stack;
                            //var msg = 'xcx1234234235 I think this error only happens on the Ipad 2. widgetNames[i]: ' + widgetNames[i] + ', Exception: ' + e.message + ', ' + e.stack;

                            console.log(msg);
                            //displayAlertDialog(msg); // 12-26-2023. NO LONGER DISPLAYING THIS message to the user. Currently it stubmled on ProjectTitle.js, which I believe has been depracated/removed/renamed. A remnant on the form defiinition.


                            //}

                        }

                    }

                }

            } else {

                // Yes this is a lot of code in the method which is duplicated. CLean it up someday. 

                var erroredElementName;

                // To begin with, create an array of required fields.
                var widgetsWithRequiredFields = [];
                var widgetsWithRequiredFieldsTemp = $(requestDialogId).find('.ToggleRequiredAsterisk-On');
                for (var i = 0; i < widgetsWithRequiredFieldsTemp.length; i++) {
                    var widgetname = widgetsWithRequiredFieldsTemp[i].closest('.xdTableOffsetRow').getAttribute('bwwidgetname');
                    widgetsWithRequiredFields.push(widgetname);
                }

                // The widgets are instantiated by looking at the class named "bwwidgetname".
                var formElements = $(requestDialogId).find('[bwwidgetname]');

                // Then we have to make an array of bwwidgetname... this is the list of form widgets on the form.
                var widgetNames = [];
                for (var i = 0; i < formElements.length; i++) {
                    var formWidgetName = formElements[i].getAttribute('bwwidgetname');
                    widgetNames.push(formWidgetName);
                }

                console.log('In bwRequest.js.initializeRequestFormWidgets(). Found these form elements in xcx123123123: ' + JSON.stringify(widgetNames));

                for (var i = 0; i < widgetNames.length; i++) {

                    // Find this tr element: <tr class="xdTableOffsetRow " draggable="true" bwwidgetname="ProjectTitle" id="draggablerow_1">
                    var elementForInstantiatingTheWidget = $(requestDialogId).find('[bwwidgetname="' + widgetNames[i] + '"]'); //[0]; // ADDED [0] index selection 4-19-2023 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

                    // To find out if this is a required "field/widget", look for this, for example: <span class="ToggleRequiredAsterisk-On" title="Select this asterick to make this a required field." onclick="$('.bwFormsEditor').bwFormsEditor('toggleFormRequiredField', this);">*</span>
                    var renderAsARequiredField = false;
                    if (widgetsWithRequiredFields.indexOf(widgetNames[i]) > -1) {
                        renderAsARequiredField = true;
                    }

                    var jsonString = '{"' + widgetNames[i] + '": 0}'; // Doing it this way so we create a node named with the name of the widget.
                    var jsonData = JSON.parse(jsonString); // Doing it this way so we create a node named with the name of the widget.
                    // Now we need to add the other data that a form widget might need to know.
                    jsonData["bwWorkflowAppId"] = bwRequestJson.bwWorkflowAppId;
                    jsonData["bwBudgetRequestId"] = bwRequestJson.bwBudgetRequestId;


                    console.log('In bwRequest.js.initializeRequestFormWidgets(). COMMENTED THIS LINE OUT 11- 7-2023. xcx2131313123.');
                    //jsonData["requestDialogId"] = requestDialogId; // COMMENTED THIS LINE OUT 11-7-2023. xcx2131313123.



                    jsonData[widgetNames[i]] = bwRequestJson[widgetNames[i]]; // Doing it this way so we create a node named with the name of the widget.

                    console.log('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with jsonData: ' + JSON.stringify(jsonData));
                    //displayAlertDialog('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with jsonData: ' + JSON.stringify(jsonData));
                    //alert('In bwRequest.js.initializeRequestFormWidgets(). Instantiating widget ' + widgetNames[i] + ' with displayContext = "form", xcx123123123-2, jsonData: ' + JSON.stringify(jsonData));


                    // displayContext allows us to render depending on where this widget is going. Possible values:
                    //      - 'form'. This is when the invoice widget is displayed in a request form, along with other form widgets. If no value is specified, then the default is 'form'.
                    //      - 'dialog'. This is when the invoice widget is displayed in it's own dialog. This happens when the user is viewing a request, and clicks the magnifying glass button invoking viewInLargeWindow().
                    //      - 'window'. This is when the user selects the '↸' button to view in a popped-out window, invoking LaunchIntoSeparateWindow().
                    //      - 'printed_invoice1'. This is when the user selects the 'Issue Invoice' button when viewing a request, invoking issueInvoice().








                    var widgetOptions = {
                        displayContext: 'form',
                        jsonData: jsonData, // this only send the data required for the particular widget.
                        allowRequestModifications: allowRequestModifications,
                        bwRequestJson: bwRequestJson,
                        renderAsARequiredField: renderAsARequiredField,
                        customRenderingInstructions: formWidget_CustomRenderingInstructions
                        //attachmentsAreStoredInIndexDb: attachmentsAreStoredInIndexDb // attachmentsAreStoredInIndexDb is being passed to the bwAttachments widget... need to know if using file services of IndexDb.
                    };

                    //var widgetName = widgetNames[i];
                    erroredElementName = widgetNames[i];
                    //if (elementForInstantiatingTheWidget && (elementForInstantiatingTheWidget.length == 1)) { // && $(elementForInstantiatingTheWidget)[widgetName]) {
                    //    $(elementForInstantiatingTheWidget)[widgetName](widgetOptions); // Instantiate the form widget. This calls _create(). Like: $('.bwWidget:first').bwWidget(widgetOptions);
                    //} else {
                    //    alert('xcx1234234235 Failed to instantiate widget for elementForInstantiatingTheWidget.length: ' + elementForInstantiatingTheWidget.length + ', invoking widget widgetName: [' + widgetName + ']. I think this error only happens on the Ipad 2<<<<<<<<!! We need to figure out how to dynamiccally call/instantiate a widget on Safari Ipad 2.');
                    //}


                    if (!widgetNames[i]) {

                        var msg = 'In bwRequest.js.initializeRequestFormWidgets(). Invalid value for widgetNames[i]: ' + widgetNames[i];
                        console.log(msg);
                        displayAlertDialog(msg);

                    } else {


                        //if (!elementForInstantiatingTheWidget) {
                        //    var msg = 'xcx112233 Critical error. Search for ' + '[bwwidgetname="' + widgetNames[i] + '"]' + ' failed in the DOM.';
                        //}

                        try {

                            //alert('Instantiating widgetNames[i]: ' + widgetNames[i] + ' with widgetOptions: ' + JSON.stringify(widgetOptions));

                            $(elementForInstantiatingTheWidget)[widgetNames[i]](widgetOptions); // Instantiate the form widget. This calls _create(). Like: $('.bwWidget:first').bwWidget(widgetOptions);
                        } catch (e) {

                            //if (widgetNames[i] == 'bwAttachments') {


                            //    //var msg = 'xcx123445 elementForInstantiatingTheWidget: ' + JSON.stringify(elementForInstantiatingTheWidget);
                            //    //displayAlertDialog(msg);


                            //    $(elementForInstantiatingTheWidget).bwAttachments({}); //widgetOptions);


                            //} else {

                            var msg = 'xcx1234234235-2 Failed to instantiate widget for elementForInstantiatingTheWidget.length: ' + elementForInstantiatingTheWidget.length + ', invoking widget widgetNames[i]: [' + widgetNames[i] + ']. elementForInstantiatingTheWidget.html(): ' + $(elementForInstantiatingTheWidget)[0].outerHTML + '. I think this error only happens on the Ipad 2<<<<<<<<!! We need to figure out how to dynamiccally call/instantiate a widget on Safari Ipad 2. Exception: ' + e.message + ', ' + e.stack;
                            //var msg = 'xcx1234234235 I think this error only happens on the Ipad 2. widgetNames[i]: ' + widgetNames[i] + ', Exception: ' + e.message + ', ' + e.stack;

                            console.log(msg);
                            displayAlertDialog(msg);


                            //}

                        }

                    }

                }

            }

        } catch (e) {

            var msg = 'Exception in bwRequest.js.initializeRequestFormWidgets(). It is possible that the bwFormHtml is trying to instantiate a form widget which no longer exists, or has been renamed. >>>>> erroredElementName: [' + erroredElementName + ']. To validate that this is an issue and to fix it, go to "Configuration > Forms" with the role of "Configuration Manager": ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);
            if (methodIsPassingElementNoDialogId != true) {
                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;
            } else {
                $(requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;
            }

        }
    },

    populateNewRequestForm: function () { // elementId, bwRequestTypeId_fornewrequests, bwRequestJson) { // 1-12-2022 added bwRequestJson
        try {
            //
            // Called from displayCreateRequestForm(). displayCreateRequestForm populates the attributes for the budgetrequestform class in this form.
            //
            //
            // This only happens when a user creates a new request. Re-write of this method happened on 11-7-2023. Now using bwAuthentication.options.NEW_REQUEST_LastSavedJson.
            //

            console.log('In bwRequest.js.populateNewRequestForm().');
            //alert('In bwRequest.js.populateNewRequestForm().'); 
            var thiz = this;

            var theUserIsCreatingANewRequest = false;
            var forms = $(document).find('.budgetrequestform');
            var newRequestForm;
            for (var i = 0; i < forms.length; i++) {
                var bwrequesttitle = $(forms[i]).attr('bwrequesttitle'); // These 2 attributes should already be populated: bwrequesttypeid, bwrequesttitle.
                if (bwrequesttitle == 'New') { // This makes sure we can find and regularly save the contents of the NEW REQUEST form, if it is open/displayed.
                    theUserIsCreatingANewRequest = true;
                    newRequestForm = forms[i];
                    break;
                }
            }

            if (!newRequestForm) {

                var msg = 'In bwRequest.js.populateNewRequestForm(). Could not find an existing NEW REQUEST form. This method must have been called by mistake.';
                console.log(msg);
                displayAlertDialog(msg);

            } else {

                var bwRequestTitle = $(newRequestForm).attr('bwrequesttitle');
                var bwRequestTypeId = $(newRequestForm).attr('bwrequesttypeid');

                var lastSavedJson = $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson');

                var bwRequestJson2;
                if (lastSavedJson) {
                    bwRequestJson2 = lastSavedJson;
                } else {
                    bwRequestJson2 = {};
                }

                var bwBudgetRequestId;
                if (lastSavedJson) {
                    bwBudgetRequestId = lastSavedJson.bwBudgetRequestId;
                    $(newRequestForm).attr('bwbudgetrequestid', bwBudgetRequestId); // Set the form attribute.
                }
                //var bwBudgetRequestId = $(newRequestForm).attr('bwbudgetrequestid');

                console.log('In bwRequest.js.populateNewRequestForm(). xcx21312312-1 should we be calling populateAttachments here?<<<<<<<<<<<<<< bwRequestTitle: ' + bwRequestTitle + ', bwRequestTypeId: ' + bwRequestTypeId + ', bwBudgetRequestId: ' + bwBudgetRequestId);

                if ((bwRequestTitle == 'New') && bwRequestTypeId && bwBudgetRequestId) {



                    console.log('FOUND THE NEW REQUEST form. It has already been initialized. MORE CODING TO DO HERE. bwBudgetRequestId: ' + bwBudgetRequestId + ', lastSavedJson: ' + JSON.stringify(lastSavedJson));

                    //alert('FOUND THE NEW REQUEST form. It has already been initialized. MORE CODING TO DO HERE. bwBudgetRequestId: ' + bwBudgetRequestId + ', lastSavedJson: ' + JSON.stringify(lastSavedJson));


                    //alert('In bwRequest.js.populateNewRequestForm(). xcx21312312-2 should we be calling populateAttachments here?<<<<<<<<<<<<<<');
                    //if (!lastSavedJson) {


                    //} else {



                    //}

                } else if ((bwRequestTitle == 'New') && bwRequestTypeId && !bwBudgetRequestId) {

                    var msg = 'In bwRequest.js.populateNewRequestForm(). INITIALIZING the NEW REQUEST form here.';
                    console.log(msg);
                    //alert(msg);

                    //
                    //
                    // THE USER HAS JUST DISPLAYED THE NEW REQUEST SCREEN. WE NEED TO INITIALIZE THE FORM.
                    //
                    //

                    // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
                    // need to have this already so we can identify which budget request the file attachments belong to.
                    bwBudgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                    $(newRequestForm).attr('bwbudgetrequestid', bwBudgetRequestId);


                } else {

                    alert('Error in xx(). xcx21312423. Invalid values for ther NEW REQUEST form. Fatal error.');

                }
                // These 2 attributes should already be populated: bwrequesttypeid, bwrequesttitle.

                //var lastSavedJson = $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson');


                debugger;

                this.initializeRequestFormWidgets(newRequestForm, bwRequestJson2, true, null, null, true); // This is only called by populateNewRequestForm() or populateRequestForm().


                $(newRequestForm).find('#spanViewWorkflowParticipantsLink').html('');
                //$('#' + elementId).find('#spanNewRequestEllipsesButton')[0].innerHTML = '';
                $(newRequestForm).find('#spanRequestForm_WorkflowAndRoleDetails').html('');
                $(newRequestForm).find('#spanRequestForm_Checklists').html('');
                $(newRequestForm).find('#spanRequestForm_Error').html('');

                // Display the instructions.
                $(newRequestForm).find('#spanRequestForm_Instructions').html('Complete the form then click the "Submit" button.');



                // Display the buttons.
                var html = '';

                console.log('COMMENTED THIS OUT 3-4-2024. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< COMMENTED OUT THE INITIAL FORM BUTTONS. Is this ok? so far...');
                // COMMENTED THIS OUT 3-4-2024. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                //html += '<button onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
                //html += '                        &nbsp;';

                //html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
                //html += '                        &nbsp;';

                //// 1-13-2022
                ////html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + 'divNewRequest' + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                //html += '                        <button name="startWorkflowButton" xcx="xcx22354235-3" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';


                //html += '                        &nbsp;';
                ////html += '                        <button onclick="RenderContentForButton(\'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';
                //html += '                        <button onclick="$(\'.bwActiveMenu\').bwActiveMenu(\'RenderContentForButton\', \'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';



                // We are now passing the object and not just specific values. Since this is a new request, we only need these 2 properties. 3-2-2024.
                var bwBudgetRequest = {
                    bwBudgetRequestId: bwBudgetRequestId,
                    bwRequestTypeId: bwRequestTypeId
                }
                //thiz.renderRequestFormButtons(newRequestForm, bwBudgetRequestId, bwRequestTypeId, html, 'xcx445566-8', true);
                thiz.renderRequestFormButtons(newRequestForm, bwBudgetRequest, null, html, 'xcx445566-8', true);








                //
                // Now formulate the GUI!
                //
                var html = '';
                //// debugger;
                var requestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // bwEnabledRequestTypes.EnabledItems;




                //if (requestTypes.length == 1) { // If there is only one, don't display as a drop down, just as plain text.

                //    var requestType = requestTypes[0].bwRequestTypeId; //[1];
                //    //var yy = requestType.length;
                //    //var begin = yy - 1;
                //    //var end = yy;
                //    //if (requestType.substring(begin, end) == 's') {
                //    //    requestType = requestType.substring(0, begin);
                //    //}

                //    html += '<span style="font-size: 200%;"><strong>New </strong><span style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>' + requestTypes[0].SingletonName + '</span></span>';
                //    html += '&nbsp;&nbsp;<span id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired

                //    //document.getElementById('spanRequestForm_Title').innerHTML = html;
                //    $('#' + elementId).find('#spanRequestForm_Title')[0].innerHTML = html;

                //    alert('>>>>> calling bwRequest.js.displayCreateRequestForm() xcx987654 <<<<<<');
                //    thiz.displayCreateRequestForm(requestType);






                //} else { // There is more than 1, so we have to display as a drop down.


                console.log('DEV: Need to work on bwRequestTypeId integration here a bit more...');

                console.log('Create the request type select element/drop down box. xcx1');

                //
                // Create the request type select element/drop down box. Updated code here 3-24-2023.
                //
                html += '<span style="font-size: 200%;"><strong>New </strong>';
                html += '   <select id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>'; // was .5em


                for (var i = 0; i < requestTypes.length; i++) {
                    //if (bwRequestTypeId) {
                    if (requestTypes[i].bwRequestTypeId == bwRequestTypeId) { // Selected
                        html += '<option value="' + requestTypes[i].bwRequestTypeId + '" selected >' + requestTypes[i].SingletonName + '</option>';

                        //console.log('>>>>>>>>>>>>>>>>>>>> Setting budgetrequestform attribute bwrequesttypeid: ' + bwRequestTypeId);
                        //$('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

                    } else { // Not selected
                        html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
                    }
                    //} else {
                    //    html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
                    //}
                }

                html += '   </select>';
                html += '</span>';
                //
                // end: Create the request type select element/drop down box.
                //



                // Removed the button. Don't need it on a new request!!!!!??? 2-11-2023
                //html += '<span style="font-size: 200%;">&nbsp;<span xcx="xcx3567-3" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span></span>'; // xdTextBoxRequired




                $(newRequestForm).find('#spanRequestForm_Title').html(html);


                // Now hook up the change event for the drop down. Modified 3-24-2023.

                $(newRequestForm).find('#selectNewRequestFormRequestTypeDropDown').change(function () {
                    try {
                        console.log('In selectNewRequestFormRequestTypeDropDown.change(). xcx12346-1-1');
                        //alert('In selectNewRequestFormRequestTypeDropDown.change(). xcx12346-1-1');

                        // As we do in the index.js.timedCheckForAlertsForIosBadgeUpdateUsingTitle() method, we first save anything the user has entered into the NEW REQUEST form.
                        var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                        promise.then(function (results) {
                            try {

                                if (results.status != 'SUCCESS') {

                                    var msg = 'Error in bwRequest.js.populateNewRequestForm.bwRequest.scrapeBwRequestJson():2. ' + results.status + ': ' + results.message;
                                    console.log(msg);
                                    displayAlertDialog(msg);

                                } else {

                                    var errorElement = $(newRequestForm).find('#spanRequestForm_Error')[0];
                                    if (errorElement) {
                                        $(errorElement).html('Saving...');
                                        setTimeout(function () {
                                            $(errorElement).html('&nbsp;');
                                        }, 4000);
                                    } else {
                                        alert('xcx1231231 UPDATING/SAVING bwRequestJson: ' + JSON.stringify(results.bwRequestJson));
                                    }
                                    $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson', results.bwRequestJson); // Save the value.





                                    $('#divTopBar_Long').html(''); // Clear any error message in the top bar.

                                    var strRequestType = $(newRequestForm).find('#selectNewRequestFormRequestTypeDropDown option:selected').text();
                                    var strBwRequestTypeId = $(newRequestForm).find('#selectNewRequestFormRequestTypeDropDown option:selected').val();

                                    var requestType = {
                                        Abbreviation: strBwRequestTypeId,
                                        RequestType: strRequestType,
                                        bwRequestTypeId: strBwRequestTypeId
                                    }

                                    console.log('In selectNewRequestFormRequestTypeDropDown.change(). requestType: ' + JSON.stringify(requestType));

                                    var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                                    var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                                    // Save the selected value back to the database so that it remembers the last selected request type.
                                    data = {
                                        bwParticipantId: participantId,
                                        bwWorkflowAppId: workflowAppId,
                                        LastSelected_bwRequestTypeId: requestType.bwRequestTypeId
                                    };
                                    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
                                    $.ajax({
                                        url: operationUri,
                                        type: "POST",
                                        data: data,
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        success: function (results) {
                                            try {
                                                if (results.status != 'SUCCESS') {

                                                    var msg = 'Error in bwRequest.js.populateNewRequestForm.selectNewRequestFormRequestTypeDropDown.change.updateuserconfigurationselectednewrequestscreenrequesttype.success(). ' + results.status + ', ' + results.message;
                                                    console.log(msg);
                                                    displayAlertDialog(msg);

                                                } else {

                                                    $('.bwAuthentication').bwAuthentication('option', 'LastSelected_bwRequestTypeId', requestType.bwRequestTypeId); // Update the value in bwAuthentication in case we need to use it again.

                                                    //
                                                    // This is where we decide which form to display. Add the other forms starting 1-21-2020
                                                    //
                                                    $(newRequestForm).attr('bwrequesttypeid', requestType.bwRequestTypeId); // Need to do this because this is where we look to get the workflow.

                                                    thiz.displayCreateRequestForm(requestType.bwRequestTypeId);

                                                    //
                                                    // Get the JSON from bwAuthentication to populate this. This is all part of how we save the new request form when the user navigates throughout the application.
                                                    //
                                                    // NEW_REQUEST_LastSavedJson
                                                    //
                                                    var bwRequestJson = $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson');

                                                    thiz.populateNewRequestForm('divPageContent1', requestType.bwRequestTypeId, JSON.stringify(bwRequestJson));






                                                    try {
                                                        // This element may not always exist depending on the form design.
                                                        if (requestType.Abbreviation == 'recurringexpense') {
                                                            // Recurring Expense was selected. Display the section!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                            $(newRequestForm).find('#trNewRequestRecurringExpenseSection').show();
                                                            $(newRequestForm).find('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                                                        } else {
                                                            $(newRequestForm).find('#trNewRequestRecurringExpenseSection').hide();
                                                        }
                                                    } catch (e) {
                                                        $(newRequestForm).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack;
                                                        displayAlertDialog('Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack);
                                                    }
                                                }
                                            } catch (e) {
                                                console.log('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
                                                $(newRequestForm).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack;
                                                displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
                                            }
                                        },
                                        error: function (data, errorCode, errorMessage) {
                                            console.log('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
                                            displayAlertDialog('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
                                            $(newRequestForm).find('#spanRequestForm_Error')[0].innerHTML = 'Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage;
                                        }
                                    });

                                }

                            } catch (e) {
                                console.log('Exception in timedCheckForAlertsForIosBadgeUpdateUsingTitle():8: ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in timedCheckForAlertsForIosBadgeUpdateUsingTitle():8: ' + e.message + ', ' + e.stack);
                            }
                        }).catch(function (e) {

                            console.log('Exception in timedCheckForAlertsForIosBadgeUpdateUsingTitle():7: ' + JSON.stringify(e));
                            displayAlertDialog('Exception in timedCheckForAlertsForIosBadgeUpdateUsingTitle():7: ' + JSON.stringify(e));

                        });

                    } catch (e) {
                        console.log('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
                        $(newRequestForm).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack;
                        displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
                    }
                });

                // RIGHT-CLICK FUNCTIONALITY!!
                // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                var button = $(newRequestForm).find('#spanNewRequestEllipsesButton')[0];
                $(button).on('click', function (e) {
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    $(this).contextMenu();
                });

































            }



















            ////var thisIsANewRequestThatHasntBeenSavedYet = false;

            ////
            ////If the bwRequestJson has the bwBudgetRequestId, then use that. Otherwise, create a new one.
            ////
            //var _budgetRequestId;
            //var bwRequestJson2;
            //if (bwRequestJson) {
            //    bwRequestJson2 = JSON.parse(bwRequestJson);
            //    if (bwRequestJson2 && bwRequestJson2.bwBudgetRequestId) {
            //        _budgetRequestId = bwRequestJson2.bwBudgetRequestId;
            //    } else {
            //        // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
            //        // need to have this already so we can identify which budget request the file attachments belong to.
            //        _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            //            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            //            return v.toString(16);
            //        });
            //        //thisIsANewRequestThatHasntBeenSavedYet = true;
            //    }


            //} else {
            //    // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
            //    // need to have this already so we can identify which budget request the file attachments belong to.
            //    _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            //        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            //        return v.toString(16);
            //    });
            //    //thisIsANewRequestThatHasntBeenSavedYet = true;

            //    bwRequestJson2 = {
            //        bwBudgetRequestId: _budgetRequestId
            //    }
            //}





            ////
            //// ADDED HERE 5-4-2023. The "New Request" screen needed the "Do you need to save chANGES" CHECK.
            ////
            //// Find the request in the thiz.options.lastSavedJson array. If it's there, replace it, otherwise, add it.
            //// This also happens in saveAndPublishTheRequest().
            //var lastSavedJsonIndex = -1;
            //for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
            //    if (!(thiz.options.lastSavedJson[i] && thiz.options.lastSavedJson[i].bwBudgetRequestId)) {
            //        displayAlertDialog_Persistent('xcx12345-2 Error: Property [bwBudgetRequestId] does not exist: ' + JSON.stringify(thiz.options.lastSavedJson[i]) + ', thiz.options.lastSavedJson: ' + JSON.stringify(thiz.options.lastSavedJson));
            //    } else {
            //        if (thiz.options.lastSavedJson[i].bwBudgetRequestId == _budgetRequestId) {
            //            lastSavedJsonIndex = i;
            //            break;
            //        }
            //    }
            //}

            ////alert('xcx2314-1 Updating thiz.options.lastSavedJson. THIS IS IN THE WRONG SPOT.');
            //if (lastSavedJsonIndex > -1) {
            //    thiz.options.lastSavedJson[lastSavedJsonIndex] = JSON.parse(brData.BudgetRequest.bwRequestJson);
            //} else {
            //    //thiz.options.lastSavedJson.push(JSON.parse(bwRequestJson2));
            //    thiz.options.lastSavedJson.push(bwRequestJson2);
            //}

            //console.log('In bwRequest.js.populateNewRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check.');
            ////alert('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check. lastSavedJsonIndex: ' + lastSavedJsonIndex + ', bwRequestJson: ' + JSON.stringify(brData.BudgetRequest.bwRequestJson));

            ////
            //// end: ADDED HERE 5-4-2023. The "New Request" screen needed the "Do you need to save chANGES" CHECK.
            ////









            //// 1-2-2022
            //if (!$('#' + elementId).find('#budgetrequestform')[0]) {
            //    displayAlertDialog('ERROR >>>>>> NO budgetrequestform. elementId: ' + elementId); // + ', bwRequestTypeId: ' + JSON.stringify(bwRequestTypeId));
            //}





            //$('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', _budgetRequestId);
            //$('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', 'New');



            //// 1-13-2022
            ////alert('JSON xcx1243: ' + JSON.stringify(bwRequestJson));

            //var bwRequestTypeId;
            //if (bwRequestJson2 && bwRequestJson2.bwRequestTypeId) {
            //    bwRequestTypeId = bwRequestJson2.bwRequestTypeId;

            //    console.log('SETTING FORM ATTRIBUTE xcx1436-1 bwRequestTypeId: ' + bwRequestTypeId);
            //    $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

            //} else {

            //    // For new requests, we just pass in the value for bwRequestTypeId_fornewrequests, since no json exists for the request yet.
            //    console.log('IS THIS A NEW REQUEST IN A POPPED_OUT WINDOW? For new requests, we just pass in the value for bwRequestTypeId_fornewrequests, since no json exists for the request yet.');
            //    if (bwRequestTypeId_fornewrequests) {
            //        bwRequestTypeId = bwRequestTypeId_fornewrequests;
            //        console.log('SETTING FORM ATTRIBUTE xcx1436-2 bwRequestTypeId: ' + bwRequestTypeId);
            //        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

            //    } else {
            //        alert('NO bwRequestJson2.bwRequestTypeId or bwRequestTypeId_fornewrequests >>>>>>>>>>>>>>>>> bwRequestTypeId: ' + bwRequestTypeId);
            //    }
            //}

            //// This may be a recurring expense, so we will do the same thing just in case.
            ////var _recurringExpenseId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            ////    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            ////    return v.toString(16);
            ////});
            ////document.getElementById('RecurringExpenseId').innerHTML = _recurringExpenseId;


            ////// debugger;
            ////alert('Calling initializeRequestFormWidgets. xcx2314 bwRequestJson2: ' + JSON.stringify(bwRequestJson2));
            //this.initializeRequestFormWidgets(elementId, bwRequestJson2, true); // This is only called by populateNewRequestForm() or populateRequestForm().
            ////this.initializeRequestFormWidgets(_budgetRequestId, bwRequestJson2, true); // This is only called by populateNewRequestForm() or populateRequestForm().

            //$('#' + elementId).find('#spanViewWorkflowParticipantsLink')[0].innerHTML = '';
            ////$('#' + elementId).find('#spanNewRequestEllipsesButton')[0].innerHTML = '';
            //$('#' + elementId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = '';
            //$('#' + elementId).find('#spanRequestForm_Checklists')[0].innerHTML = '';
            //$('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = '';

            //// Display the instructions.
            //$('#' + elementId).find('#spanRequestForm_Instructions')[0].innerHTML = 'Complete the form then click the "Submit" button.';



            //// Display the buttons.
            ////var html = '';

            ////html += '<button onclick="$(\'.bwRequest\').bwRequest(\'saveAndPublishTheRequest\', \'\', \'true\', \'' + _budgetRequestId + '\', \'' + bwRequestTypeId + '\');" class="BwButton200ForRequestForm" title="Publish so that everyone sees the latest updates to the request.">Save/Publish</button>&nbsp;';
            ////html += '                        &nbsp;';

            ////html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + _budgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
            ////html += '                        &nbsp;';

            ////// 1-13-2022
            //////html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + 'divNewRequest' + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
            ////html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + _budgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';


            ////html += '                        &nbsp;';
            //////html += '                        <button onclick="RenderContentForButton(\'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';
            ////html += '                        <button onclick="$(\'.bwActiveMenu\').bwActiveMenu(\'RenderContentForButton\', \'NEW_REQUEST_FORM_CANCEL_BUTTON\', \'HOME\');" class="BwButton200ForRequestForm">Cancel</button>';

            //thiz.renderRequestFormButtons(elementId, _budgetRequestId, bwRequestTypeId, html, 'xcx445566-8', true);

            ////
            //// Now formulate the GUI!
            ////
            //var html = '';
            ////// debugger;
            //var requestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // bwEnabledRequestTypes.EnabledItems;




            ////if (requestTypes.length == 1) { // If there is only one, don't display as a drop down, just as plain text.

            ////    var requestType = requestTypes[0].bwRequestTypeId; //[1];
            ////    //var yy = requestType.length;
            ////    //var begin = yy - 1;
            ////    //var end = yy;
            ////    //if (requestType.substring(begin, end) == 's') {
            ////    //    requestType = requestType.substring(0, begin);
            ////    //}

            ////    html += '<span style="font-size: 200%;"><strong>New </strong><span style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>' + requestTypes[0].SingletonName + '</span></span>';
            ////    html += '&nbsp;&nbsp;<span id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 

            ////    //document.getElementById('spanRequestForm_Title').innerHTML = html;
            ////    $('#' + elementId).find('#spanRequestForm_Title')[0].innerHTML = html;

            ////    alert('>>>>> calling bwRequest.js.displayCreateRequestForm() xcx987654 <<<<<<');
            ////    thiz.displayCreateRequestForm(requestType);






            ////} else { // There is more than 1, so we have to display as a drop down.


            //console.log('DEV: Need to work on bwRequestTypeId integration here a bit more...');

            //console.log('Create the request type select element/drop down box. xcx1');

            ////
            //// Create the request type select element/drop down box. Updated code here 3-24-2023.
            ////
            //html += '<span style="font-size: 200%;"><strong>New </strong>';
            //html += '   <select id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>'; // was .5em

            //var LastSelected_bwRequestTypeId = $('.bwAuthentication').bwAuthentication('option', 'LastSelected_bwRequestTypeId');
            //for (var i = 0; i < requestTypes.length; i++) {
            //    if (bwRequestTypeId) {
            //        if (requestTypes[i].bwRequestTypeId == bwRequestTypeId) { // Selected
            //            html += '<option value="' + requestTypes[i].bwRequestTypeId + '" selected >' + requestTypes[i].SingletonName + '</option>';

            //            //console.log('>>>>>>>>>>>>>>>>>>>> Setting budgetrequestform attribute bwrequesttypeid: ' + bwRequestTypeId);
            //            //$('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

            //        } else { // Not selected
            //            html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
            //        }
            //    } else {
            //        html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
            //    }
            //}

            //html += '   </select>';
            //html += '</span>';
            ////
            //// end: Create the request type select element/drop down box.
            ////



            //// Removed the button. Don't need it on a new request!!!!!??? 2-11-2023
            ////html += '<span style="font-size: 200%;">&nbsp;<span xcx="xcx3567-3" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span></span>'; // xdTextBoxRequired 




            //$('#' + elementId).find('#spanRequestForm_Title')[0].innerHTML = html;

            ////
            //// Now hook up the change event for the drop down. Modified 3-24-2023.
            ////
            //$('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown').change(function () {
            //    try {
            //        console.log('In selectNewRequestFormRequestTypeDropDown.change(). xcx12346-1-1');
            //        //alert('In selectNewRequestFormRequestTypeDropDown.change(). xcx12346-1-1');

            //        $('#divTopBar_Long').html(''); // Clear any error message in the top bar.

            //        var strRequestType = $('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown option:selected').text();
            //        var strBwRequestTypeId = $('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown option:selected').val();

            //        var requestType = {
            //            Abbreviation: strBwRequestTypeId,
            //            RequestType: strRequestType,
            //            bwRequestTypeId: strBwRequestTypeId
            //        }

            //        console.log('In selectNewRequestFormRequestTypeDropDown.change(). requestType: ' + JSON.stringify(requestType));

            //        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            //        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            //        // Save the selected value back to the database so that it remembers the last selected request type.
            //        data = {
            //            bwParticipantId: participantId,
            //            bwWorkflowAppId: workflowAppId,
            //            LastSelected_bwRequestTypeId: requestType.bwRequestTypeId
            //        };
            //        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
            //        $.ajax({
            //            url: operationUri,
            //            type: "POST",
            //            data: data,
            //            headers: {
            //                "Accept": "application/json; odata=verbose"
            //            },
            //            success: function (results) {
            //                try {
            //                    if (results.status != 'SUCCESS') {

            //                        var msg = 'Error in bwRequest.js.populateNewRequestForm.selectNewRequestFormRequestTypeDropDown.change.updateuserconfigurationselectednewrequestscreenrequesttype.success(). ' + results.status + ', ' + results.message;
            //                        console.log(msg);
            //                        displayAlertDialog(msg);

            //                    } else {

            //                        $('.bwAuthentication').bwAuthentication('option', 'LastSelected_bwRequestTypeId', requestType.bwRequestTypeId); // Update the value in bwAuthentication in case we need to use it again.

            //                        //
            //                        // This is where we decide which form to display. Add the other forms starting 1-21-2020
            //                        //
            //                        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', requestType.bwRequestTypeId); // Need to do this because this is where we look to get the workflow.

            //                        thiz.displayCreateRequestForm(requestType.bwRequestTypeId);

            //                        //
            //                        // Get the JSON from bwAuthentication to populate this. This is all part of how we save the new request form when the user navigates throughout the application.
            //                        //
            //                        // NEW_REQUEST_LastSavedJson
            //                        //
            //                        var bwRequestJson = $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson');

            //                        thiz.populateNewRequestForm('divPageContent1', requestType.bwRequestTypeId, JSON.stringify(bwRequestJson));






            //                        try {
            //                            // This element may not always exist depending on the form design.
            //                            if (requestType.Abbreviation == 'recurringexpense') {
            //                                // Recurring Expense was selected. Display the section!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            //                                $('#' + elementId).find('#trNewRequestRecurringExpenseSection').show();
            //                                $('#' + elementId).find('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //                            } else {
            //                                $('#' + elementId).find('#trNewRequestRecurringExpenseSection').hide();
            //                            }
            //                        } catch (e) {
            //                            $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack;
            //                            displayAlertDialog('Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack);
            //                        }
            //                    }
            //                } catch (e) {
            //                    console.log('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
            //                    $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack;
            //                    displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
            //                }
            //            },
            //            error: function (data, errorCode, errorMessage) {
            //                console.log('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
            //                displayAlertDialog('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
            //                $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage;
            //            }
            //        });

            //    } catch (e) {
            //        console.log('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
            //        $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack;
            //        displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
            //    }
            //});


            ////}


            //// RIGHT-CLICK FUNCTIONALITY!!
            //// This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
            //var button = $('#' + elementId).find('#spanNewRequestEllipsesButton')[0];
            //$(button).on('click', function (e) {
            //    e.preventDefault();
            //    e.stopImmediatePropagation();
            //    $(this).contextMenu();
            //});



            //console.log('This is the new request ellipses context menu context-menu-newrequesteditor here. xcx12342143');
            ////alert('This is the new request ellipses context menu context-menu-newrequesteditor here. xcx12342143');
            //////try { // The mobile view does not use this.
            ////// This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
            ////$.contextMenu({
            ////    selector: '.context-menu-newrequesteditor',
            ////    callback: function (key, options) {
            ////        try {
            ////            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
            ////            if (key == 'requestjson') {
            ////                //var bwBudgetRequestId = $('#' + elementId)
            ////                // debugger;
            ////                thiz.viewScrapedBwRequestJson(bwBudgetRequestId); //elementId);
            ////            } else if (key == 'requestjsondignostics') {
            ////                displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
            ////            } else if (key == 'requestjsondb') {
            ////                thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
            ////            } else if (key == 'requesthtmldb') {
            ////                displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
            ////            } else if (key == 'deletethisrequest') {
            ////                var bwRequestTitle = $(this).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
            ////                if (!bwBudgetRequestId) {
            ////                    displayAlertDialog('Error in bwRequest.js.renderRequestForm.contextMenu.callback(deletethisrequest). Invalid value for bwBudgetRequestId: ' + bwBudgetRequestId);
            ////                } else {
            ////                    thiz.cmdDisplayDeleteBudgetRequestDialog(bwBudgetRequestId, bwRequestTitle);
            ////                }
            ////            }//else if (key == 'viewworkflowjson') { // Don't need this functionality on a "New" request form. It just doesn't apply... there is no workflow step.
            ////            //    // debugger;
            ////            //    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
            ////            //}
            ////        } catch (e) {
            ////            $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack;
            ////        }
            ////    },
            ////    items: {
            ////        "requestjson": {
            ////            name: "Request JSON", icon: "edit"
            ////        },
            ////        "requestjsondb": {
            ////            name: "Request JSON from Database", icon: "edit"
            ////        },
            ////        "requestjsondignostics": {
            ////            name: "Request JSON Diagnostics", icon: "edit"
            ////        },
            ////        "requesthtmldb": {
            ////            name: "Request Form HTML from Database", icon: "edit"
            ////        },
            ////        "deletethisrequest": {
            ////            name: "Delete this Request xcx12459", icon: "edit"
            ////        }//,
            ////        //"viewworkflowjson": { // Don't need this functionality on a "New" request form. It just doesn't apply... there is no workflow step.
            ////        //    name: "View Workflow Step/Role Json", icon: "edit"
            ////        //}
            ////    }
            ////});
            //// End: This is our right-click context menu.
            ////} catch (e) {
            ////    console.log('Exception in populateNewRequestForm():xcx2: ' + e.message + ', ' + e.stack);
            ////    displayAlertDialog('Exception in populateNewRequestForm():xcx2: ' + e.message + ', ' + e.stack);

            ////    //$('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx2: ' + e.message + ', ' + e.stack;
            ////}

            //// THIS IS FOR DRAGGING ATTACHMENTS BETWEEN FORMS. PUT IT SOMEWHERE SOMEDAY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            ////        //function handleDragStart(e) {
            ////        //    console.log('In handleDragStart().');
            ////        //    this.style.opacity = '0.4';  // this / e.target is the source node.
            ////        //}
            ////        function handleDragOver(e) {
            ////            try {
            ////                console.log('In handleDragOver().');
            ////                if (e.preventDefault) {
            ////                    e.preventDefault(); // Necessary. Allows us to drop.
            ////                }
            ////                e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
            ////                return false;
            ////            } catch (e) {
            ////                console.log('Exception in handleDragOver(): ' + e.message + ', ' + e.stack);
            ////            }
            ////        }
            ////        function handleDragEnter(e) {
            ////            try {
            ////                console.log('In handleDragEnter().');
            ////                // this / e.target is the current hover target.
            ////                this.classList.add('over');
            ////            } catch (e) {
            ////                console.log('Exception in handleDragEnter(): ' + e.message + ', ' + e.stack);
            ////            }
            ////        }
            ////        function handleDragLeave(e) {
            ////            try {
            ////                console.log('In handleDragLeave().');
            ////                this.classList.remove('over');  // this / e.target is previous target element.
            ////            } catch (e) {
            ////                console.log('Exception in handleDragLeave(): ' + e.message + ', ' + e.stack);
            ////            }
            ////        }
            ////        function handleDragEnd(e) {
            ////            try {
            ////                console.log('In handleDragEnd().');
            ////                // this/e.target is the source node.
            ////                //[].forEach.call(cols, function (col) {
            ////                //    col.classList.remove('over');
            ////                //});
            ////                this.classList.remove('over');
            ////            } catch (e) {
            ////                console.log('Exception in handleDragEnd(): ' + e.message + ', ' + e.stack);
            ////            }
            ////        }
            ////        function handleDrop(e) {
            ////            try {
            ////                console.log('In handleDrop().');
            ////                // this / e.target is current target element.
            ////                if (e.stopPropagation) {
            ////                    e.stopPropagation(); // Stops some browsers from redirecting.
            ////                }
            ////                //thiz.options.dragSourceAttachmentElement.style.opacity = '1';  // Make the original image look normal again.
            ////                // Don't do anything if dropping the same column we're dragging.
            ////                if (thiz.options.dragSourceAttachmentElement != this) {
            ////                    // Set the source column's HTML to the HTML of the column we dropped on.
            ////                    //thiz.options.dragSourceAttachmentElement.innerHTML = this.innerHTML;
            ////                    var imagePath = e.dataTransfer.getData('text/html');
            ////                    //alert('Are you sure you wish to copy this attachment to this request? ' + imagePath);
            ////                    alert('This drag-and-drop functionality is incomplete. Coming soon!');
            ////                    //this.innerHTML = imagePath;
            ////                }
            ////                return false;

            ////                //
            ////                // Do this to allow dragging of files from the desktop !!!!!! We can also support dragging from the browser to the desktop in Chrome. See also: https://www.html5rocks.com/en/tutorials/dnd/basics/
            ////                // "Drag-in: dragging from the desktop to the browser" and "Drag-out: dragging from the browser to the desktop" section in the linked document above.
            ////                //e.stopPropagation(); // Stops some browsers from redirecting.
            ////                //e.preventDefault();
            ////                //var files = e.dataTransfer.files;
            ////                //for (var i = 0, f; f = files[i]; i++) {
            ////                //    // Read the File objects in this FileList.
            ////                //}




            ////            } catch (e) {
            ////                console.log('Exception in handleDrop(): ' + e.message + ', ' + e.stack);
            ////            }
            ////        }
            ////        var element2 = document.getElementById('dropzone1');
            ////        element2.addEventListener('dragenter', handleDragEnter, false);
            ////        element2.addEventListener('dragover', handleDragOver, false);
            ////        element2.addEventListener('dragleave', handleDragLeave, false);
            ////        element2.addEventListener('drop', handleDrop, false);
            ////        element2.addEventListener('dragend', handleDragEnd, false);



            //// ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.
            ////if (_type == 'supplemental') {
            ////    // This is a supplemental request for budget request _reference, which is a guid.
            ////    var html = '';
            ////    html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
            ////    document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            ////    var html = '';
            ////    html += '';
            ////    html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the supplemental request.">Submit</button>';
            ////    html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            ////    html += '&nbsp;';
            ////    document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            ////} else {
            ////var html = '';
            ////html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;New <strong>Budget Request</strong><br /><span></span></span><br />';
            ////document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            ////var html = '';
            ////html += '';
            ////var isSupplemental = 'false';
            ////var relatedBudgetRequestId = '';
            ////html += '<button id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow(\'' + isSupplemental + '\', \'' + relatedBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
            ////html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            ////html += '&nbsp;';
            ////document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            ////}
            ////// debugger;
            ////var newBudgetRequestManagerTitle = 'Project Manager';


            //// Set if the recurring expenses is enabled.
            ////if (recurringExpensesEnabled == true) {
            ////$('#trNewRequestRecurringExpenseSection').show();
            ////document.getElementById('cbNewRequestRecurringExpenseEnabled').checked = false; // Default to not selected.
            ////// Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            ////$('#cbNewRequestRecurringExpenseEnabled').click(function () {
            ////    //displayAlertDialog('enable this section'); // color: #adadad;
            ////    if (this.checked == true) {
            ////        $('#trNewRequestQuoteSection').hide();

            ////        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            ////        var html = '';
            ////        html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            ////        html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            ////        html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            ////        //html += 'Justification details:<br />';
            ////        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            ////        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            ////        html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            ////        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            ////        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            ////    } else {
            ////        $('#trNewRequestQuoteSection').show();
            ////        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            ////        //var html = '';
            ////        //html += 'Reminder date:<br />';
            ////        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            ////        //html += 'Justification details:<br />';
            ////        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            ////        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            ////        //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            ////        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            ////        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            ////        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = '';
            ////}

            ////});
            ////html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            ////html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            ////} else {
            ////    $('#trNewRequestRecurringExpenseSection').hide();
            ////    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            ////}

            //// Set if the quoting is enabled.
            ////if (quotingEnabled == true) {
            ////    $('#trNewRequestQuoteSection').show();
            ////    document.getElementById('cbNewRequestQuoteEnabled').checked = false; // Default to not selected.
            ////    // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            ////    $('#cbNewRequestQuoteEnabled').click(function () {
            ////        //displayAlertDialog('enable this section'); // color: #adadad;
            ////        if (this.checked == true) {
            ////            $('#trNewRequestRecurringExpenseSection').hide();

            ////            var html = '';
            ////            html += 'New <strong>Quote Request</strong>';
            ////            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            ////            ////document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            ////            //var html = '';
            ////            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            ////            //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            ////            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            ////            ////html += 'Justification details:<br />';
            ////            ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            ////            ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            ////            //html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            ////            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            ////            //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            ////        } else {
            ////            $('#trNewRequestRecurringExpenseSection').show();
            ////            var html = '';
            ////            html += 'New <strong>Budget Request</strong>';
            ////            html += '</span>';
            ////            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            ////            //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            ////            //var html = '';
            ////            //html += 'Reminder date:<br />';
            ////            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            ////            //html += 'Justification details:<br />';
            ////            //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            ////            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            ////            //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            ////            //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            ////            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            ////            document.getElementById('spanNewRequestQuoteSecondSection').innerHTML = '';
            ////        }
            ////    });
            ////    //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            ////    //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';
            ////} else {
            ////    $('#trNewRequestQuoteSection').hide();
            ////    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            ////}


            //// Now we can hook up the Participant text box for autocomplete.
            ////$('#' + elementId).find("#txtProjectManagerName").autocomplete({
            ////    source: function (request, response) {
            ////        //weburl = _spPageContextInfo.siteAbsoluteUrl;
            ////        $.ajax({
            ////            url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
            ////            dataType: "json",
            ////            success: function (data) {
            ////                var searchArray = [];
            ////                for (var i = 0; i < data.participants.length; i++) {
            ////                    searchArray[i] = data.participants[i].participant;
            ////                }
            ////                response(searchArray);
            ////            }
            ////        });
            ////    },
            ////    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
            ////    select: function (event, ui) {
            ////        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            ////        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
            ////    },
            ////    open: function () {
            ////        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            ////        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
            ////    },
            ////    close: function () {
            ////        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            ////        var projectManagerName = this.value.split('|')[0];
            ////        var projectManagerId = this.value.split('|')[1];
            ////        var projectManagerEmail = this.value.split('|')[2];

            ////        if (projectManagerName.indexOf('undefined') > -1) {
            ////            $('#' + elementId).find('#txtProjectManagerName')[0].value = '';
            ////            $('#' + elementId).find('#txtProjectManagerId')[0].value = '';
            ////            $('#' + elementId).find('#txtProjectManagerEmail')[0].value = '';
            ////        } else {
            ////            $('#' + elementId).find('#txtProjectManagerName')[0].value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
            ////            $('#' + elementId).find('#txtProjectManagerId')[0].value = projectManagerId;
            ////            $('#' + elementId).find('#txtProjectManagerEmail')[0].value = projectManagerEmail;
            ////        }
            ////    }
            ////});

            ////monkeyPatchAutocomplete(); // This customizes the drop down when searching for users in the user text boxes.

        } catch (e) {
            console.log('Exception in populateNewRequestForm(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in populateNewRequestForm(): ' + e.message + ', ' + e.stack);
            //if ($('#' + elementId).find('#spanRequestForm_Error') && $('#' + elementId).find('#spanRequestForm_Error')[0] && $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML) {
            //$('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm(): ' + e.message + ', ' + e.stack;
            //}
        }
    },
    populateNewRequestForm_IndexDb: function (elementId, bwRequestJson) {
        try {
            console.log('In bwRequest.js.populateNewRequestForm_IndexDb().');
            alert('In bwRequest.js.populateNewRequestForm_IndexDb(). Should we be in displayRequestFormDialog()?');
            var thiz = this;

            alert('In bwRequest.js.populateNewRequestForm_IndexDb().');
            //alert('Getting ready to show! THIS NEEDS TO BE CHANGED TO A DIALOG!!');

            //elementId = 'ArDialog';
            //$('#bwStartPageAccordion').show();
            //$('#liOfflineRequestForm').show();
            // debugger;
            //$("#ArDialog").dialog({
            //    //position: {
            //    //    my: "left top",
            //    //    at: "right top",
            //    //    of: "#selectHomePageWorkflowAppDropDown"
            //    //},

            //    modal: true,
            //    resizable: false,
            //    closeText: "Cancel",
            //    closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //    //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
            //    title: '', //brTitle + " (" + title + ")",
            //    width: "720px",
            //    dialogClass: "no-close", // No close button in the upper right corner.
            //    hide: false, // This means when hiding just disappear with no effects.
            //    open: function (event, ui) {
            //        // debugger;
            //        $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); });
            //        //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
            //        ////$('#invitationLink2').text(invitationUrl);
            //        //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
            //        //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();

            //        //var thiz = this;
            //        // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
            //        // need to have this already so we can identify which budget request the file attachments belong to.
            //        //var _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            //        //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            //        //    return v.toString(16);
            //        //});
            //        // debugger;
            //        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', bwRequestJson.bwBudgetRequestId);
            //        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', 'New');

            //        //// debugger;
            //        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bworgid', bwRequestJson.bwOrgId);
            //        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bworgname', bwRequestJson.bwOrgName);


            //        thiz.initializeRequestFormWidgets(elementId, bwRequestJson, true, true); // This is only called by populateNewRequestForm() or populateRequestForm() or populateNewRequestForm_IndexDb.

            //    }
            //});
            //$("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', bwRequestJson.bwBudgetRequestId);
            $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttitle', 'New');

            //// debugger;
            $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bworgid', bwRequestJson.bwOrgId);
            $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bworgname', bwRequestJson.bwOrgName);




            var bwRequestTypeId;
            if (bwRequestJson && bwRequestJson.bwRequestTypeId) {
                bwRequestTypeId = bwRequestJson.bwRequestTypeId;

                console.log('SETTING FORM ATTRIBUTE bwRequestTypeId: ' + bwRequestTypeId);
                $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

            } else {
                console.log('NO bwRequestJson.bwRequestTypeId <<<<<<<<<<<<<<<<<<<<<<<<<');
                // debugger;
                $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', ''); // Don't need to do this but just making sure the attribute is empty.
            }


            thiz.initializeRequestFormWidgets(elementId, bwRequestJson, true, true); // This is only called by populateNewRequestForm() or populateRequestForm() or populateNewRequestForm_IndexDb.


            $('#' + elementId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = '';
            $('#' + elementId).find('#spanRequestForm_Checklists')[0].innerHTML = '';
            // Display the instructions.
            $('#' + elementId).find('#spanRequestForm_Instructions')[0].innerHTML = 'Complete the form then click the "Submit" button.';

            // Display the buttons.
            var html = '';
            html += '                        <button onclick="$(\'.bwRequest\').bwRequest(\'saveRequestOnThisDevice\', \'' + bwRequestJson.bwBudgetRequestId + '\');" title="Save on this device." class="BwButton250ForRequestForm">Save (on this device)</button>';
            html += '                        &nbsp;';
            html += '                        <button name="startWorkflowButton" xcx="xcx22354235-4" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'' + bwRequestJson.bwBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
            html += '                        &nbsp;';
            html += '                        <button onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';

            thiz.renderRequestFormButtons(elementId, bwRequestJson.bwBudgetRequestId, bwRequestJson.bwBudgetRequestId, html, 'xcx445566-9', true);

            //
            // Now formulate the GUI!
            //
            var html = '';
            //// debugger;
            var requestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // bwEnabledRequestTypes.EnabledItems;




            if (requestTypes.length == 1) { // If there is only one, don't display as a drop down, just as plain text.

                var requestType = requestTypes[0].bwRequestTypeId; //[1];
                //var yy = requestType.length;
                //var begin = yy - 1;
                //var end = yy;
                //if (requestType.substring(begin, end) == 's') {
                //    requestType = requestType.substring(0, begin);
                //}

                html += '<span style="font-size: 200%;"><strong>New </strong><span style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>' + requestType + '</span></span>';
                html += '&nbsp;&nbsp;<span xcx="xcx3567-4" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 

                //document.getElementById('spanRequestForm_Title').innerHTML = html;
                $('#' + elementId).find('#spanRequestForm_Title')[0].innerHTML = html;
            } else { // There is more than 1, so we have to display as a drop down.


                console.log('DEV: Need to work on bwRequestTypeId integration here a bit more...');


                console.log('Create the request type select element/drop down box. xcx2');

                //
                // Create the request type select element/drop down box.
                //
                html += '<span style="font-size: 200%;"><strong>New </strong>';
                html += '   <select id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1em; font-weight: bold; cursor: pointer;\'>'; // was .5em
                if (bwRequestTypeId) {
                    html += '<option value="" >' + 'Select a request type...' + '</option>';
                } else {
                    html += '<option value="" selected >' + 'Select a request type...' + '</option>'; // If no bwRequestTypeId, make this the selected option so the user knows to select the request type.
                }
                for (var i = 0; i < requestTypes.length; i++) {
                    if (bwRequestTypeId) {
                        if (requestTypes[i].bwRequestTypeId == bwRequestTypeId) { // Selected
                            html += '<option value="' + requestTypes[i].bwRequestTypeId + '" selected >' + requestTypes[i].SingletonName + '</option>';

                            //console.log('>>>>>>>>>>>>>>>>>>>> Setting budgetrequestform attribute bwrequesttypeid: ' + bwRequestTypeId);
                            //$('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', bwRequestTypeId);

                        } else { // Not selected
                            html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
                        }
                    } else {
                        html += '<option value="' + requestTypes[i].bwRequestTypeId + '" >' + requestTypes[i].SingletonName + '</option>';
                    }
                }
                html += '   </select>';
                html += '</span>';
                //
                // end: Create the request type select element/drop down box.
                //




                html += '<span style="font-size: 200%;">&nbsp;<span xcx="xcx3567-5" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span></span>'; // xdTextBoxRequired 
                $('#' + elementId).find('#spanRequestForm_Title')[0].innerHTML = html;
                //// debugger;



                // Now hook up the change event for the drop down!!
                $('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown').change(function () {
                    try {


                        console.log('In selectNewRequestFormRequestTypeDropDown.change(). Is this old code??? xcx12346-1-2');

                        // Clear any error message in the top bar.
                        $('#divTopBar_Long').html('');


                        // debugger;
                        var strBwRequestTypeId = $('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown option:selected').val();
                        var strRequestType = $('#' + elementId).find('#selectNewRequestFormRequestTypeDropDown option:selected').text(); //.val(); // 11-22-2021
                        var requestType = {
                            Abbreviation: strBwRequestTypeId,
                            RequestType: strRequestType,
                            bwRequestTypeId: strBwRequestTypeId
                        }


                        console.log('In selectNewRequestFormRequestTypeDropDown.change(). requestType: ' + JSON.stringify(requestType));


                        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                        // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.
                        data = {
                            bwParticipantId: participantId,
                            bwWorkflowAppId: workflowAppId,
                            bwLastSelectedNewRequestType: requestType.RequestType
                        };
                        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
                        $.ajax({
                            url: operationUri,
                            type: "POST", timeout: ajaxTimeout,
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (data) {
                                //// debugger;
                                try {
                                    if (data != 'SUCCESS') {
                                        displayAlertDialog(data);
                                        //document.getElementById('spanSelectedRequestTypeAndWorkflow').innerHTML = '';
                                    } else {
                                        //
                                        // This is where we decide which form to display. Add the other forms starting 1-21-2020
                                        //
                                        $('#' + elementId).find('#budgetrequestform')[0].setAttribute('bwrequesttypeid', requestType.bwRequestTypeId); // Need to do this because this is where we look to get the workflow.
                                        bwRequestJson.bwRequestTypeId = requestType.bwRequestTypeId;



                                        // Set the active form and display
                                        //for (var i=0;i<thiz.options.ActiveForms)
                                        //if (bwRequestType == )

                                        // debugger;
                                        if (window.location.href.indexOf('my.html') > -1) {

                                            alert('Calling displayCreateRequestForm(). xcx92954-1-2');
                                            thiz.displayCreateRequestForm(requestType.bwRequestTypeId);
                                        } else if (window.location.href.indexOf('ios8.html') > -1) {

                                            alert('Calling displayCreateRequestFormForMobile(). xcx92954-1-2');
                                            thiz.displayCreateRequestFormForMobile(requestType.bwRequestTypeId);
                                        } else {
                                            //displayAlertDialog('Error xcx13-1: Unexpected window.location. This process cannot proceed.');
                                            console.log('In bwRequest.populateNewRequestForm_IndexDb(). Note xcx13-1-2: Unexpected window.location.');

                                            alert('Calling displayRequestFormDialog_IndexDB(). Passing bwRequestJson hopefully it goes Ok. xcx92954-2-2');
                                            //thiz.displayCreateRequestForm(requestType);

                                            thiz.displayRequestFormDialog_IndexDB(bwRequestJson.bwBudgetRequestId, '', bwRequestJson);
                                        }


                                        try {
                                            // This element may not always exist depending on the form design.
                                            if (requestType.Abbreviation == 'recurringexpense') {
                                                // Recurring Expense was selected. Display the section!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                $('#' + elementId).find('#trNewRequestRecurringExpenseSection').show();
                                                $('#' + elementId).find('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                                            } else {
                                                $('#' + elementId).find('#trNewRequestRecurringExpenseSection').hide();
                                            }
                                        } catch (e) {
                                            $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack;
                                            displayAlertDialog('Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack);
                                        }
                                    }
                                } catch (e) {
                                    console.log('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
                                    $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack;
                                    displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change():2: ' + e.message + ', ' + e.stack);
                                }
                            },
                            error: function (data, errorCode, errorMessage) {
                                console.log('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
                                $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage;
                                displayAlertDialog('Error in selectNewRequestFormRequestTypeDropDown.change(): ' + errorCode + ' ' + errorMessage);
                            }
                        });
                    } catch (e) {
                        console.log('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
                        $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack;
                        displayAlertDialog('Exception in selectNewRequestFormRequestTypeDropDown.change(): ' + e.message + ', ' + e.stack);
                    }
                });


            }


            // RIGHT-CLICK FUNCTIONALITY!!
            // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
            var button = $('#' + elementId).find('#spanNewRequestEllipsesButton')[0];
            $(button).on('click', function (e) {
                e.preventDefault();
                e.stopImmediatePropagation();
                $(this).contextMenu();
            });

            try { // The mobile view does not use this.
                // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                //$.contextMenu({
                //    selector: '.context-menu-newrequesteditor',
                //    callback: function (key, options) {
                //        if (key == 'requestjson') {
                //            thiz.viewScrapedBwRequestJson(elementId);
                //        } else if (key == 'requesthtmldb') {
                //            displayAlertDialog('This functionality is incomplete. Coming soon! xcx4472');
                //        }
                //    },
                //    items: {
                //        "requestjson": { name: "Request JSON (scrapedxcx1)", icon: "edit" },
                //        //"requestjsondb": { name: "Request JSON from Database", icon: "edit" },
                //        //"requestjsondignostics": { name: "Request JSON Diagnostics", icon: "edit" },
                //        "requesthtmldb": { name: "Request Form HTML from Database", icon: "edit" }
                //    }
                //});
                // End: This is our right-click context menu.
                //
                alert('Displaying elipses context menu for request without a workflow (new request). xcx3');
                // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                $.contextMenu({
                    selector: '.context-menu-newrequesteditor',
                    callback: function (key, options) {
                        try {
                            var bwBudgetRequestId = $(this).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                            if (key == 'requestjson') {
                                thiz.viewScrapedBwRequestJson(elementId);
                            } else if (key == 'requestjsondignostics') {
                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                            } else if (key == 'requestjsondb') {
                                thiz.viewDatabaseBwRequestJson(bwBudgetRequestId);
                            } else if (key == 'requesthtmldb') {
                                displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                            } //else if (key == 'viewworkflowjson') { // Don't need this functionality on a "New" request form. It just doesn't apply... there is no workflow step.
                            //    // debugger;
                            //    thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                            //}
                        } catch (e) {
                            $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx3: ' + e.message + ', ' + e.stack;
                        }
                    },
                    items: {
                        "requestjson": {
                            name: "Request JSON", icon: "edit"
                        },
                        "requestjsondb": {
                            name: "Request JSON from Database", icon: "edit"
                        },
                        "requestjsondignostics": {
                            name: "Request JSON Diagnostics", icon: "edit"
                        },
                        "requesthtmldb": {
                            name: "Request Form HTML from Database  xcx1-2", icon: "edit"
                        }//,
                        //"viewworkflowjson": { // Don't need this functionality on a "New" request form. It just doesn't apply... there is no workflow step.
                        //    name: "View Workflow Step/Role Json", icon: "edit"
                        //}
                    }
                });
                // End: This is our right-click context menu.
            } catch (e) {
                $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm():xcx2: ' + e.message + ', ' + e.stack;
            }

            // THIS IS FOR DRAGGING ATTACHMENTS BETWEEN FORMS. PUT IT SOMEWHERE SOMEDAY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            //        //function handleDragStart(e) {
            //        //    console.log('In handleDragStart().');
            //        //    this.style.opacity = '0.4';  // this / e.target is the source node.
            //        //}
            //        function handleDragOver(e) {
            //            try {
            //                console.log('In handleDragOver().');
            //                if (e.preventDefault) {
            //                    e.preventDefault(); // Necessary. Allows us to drop.
            //                }
            //                e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
            //                return false;
            //            } catch (e) {
            //                console.log('Exception in handleDragOver(): ' + e.message + ', ' + e.stack);
            //            }
            //        }
            //        function handleDragEnter(e) {
            //            try {
            //                console.log('In handleDragEnter().');
            //                // this / e.target is the current hover target.
            //                this.classList.add('over');
            //            } catch (e) {
            //                console.log('Exception in handleDragEnter(): ' + e.message + ', ' + e.stack);
            //            }
            //        }
            //        function handleDragLeave(e) {
            //            try {
            //                console.log('In handleDragLeave().');
            //                this.classList.remove('over');  // this / e.target is previous target element.
            //            } catch (e) {
            //                console.log('Exception in handleDragLeave(): ' + e.message + ', ' + e.stack);
            //            }
            //        }
            //        function handleDragEnd(e) {
            //            try {
            //                console.log('In handleDragEnd().');
            //                // this/e.target is the source node.
            //                //[].forEach.call(cols, function (col) {
            //                //    col.classList.remove('over');
            //                //});
            //                this.classList.remove('over');
            //            } catch (e) {
            //                console.log('Exception in handleDragEnd(): ' + e.message + ', ' + e.stack);
            //            }
            //        }
            //        function handleDrop(e) {
            //            try {
            //                console.log('In handleDrop().');
            //                // this / e.target is current target element.
            //                if (e.stopPropagation) {
            //                    e.stopPropagation(); // Stops some browsers from redirecting.
            //                }
            //                //thiz.options.dragSourceAttachmentElement.style.opacity = '1';  // Make the original image look normal again.
            //                // Don't do anything if dropping the same column we're dragging.
            //                if (thiz.options.dragSourceAttachmentElement != this) {
            //                    // Set the source column's HTML to the HTML of the column we dropped on.
            //                    //thiz.options.dragSourceAttachmentElement.innerHTML = this.innerHTML;
            //                    var imagePath = e.dataTransfer.getData('text/html');
            //                    //alert('Are you sure you wish to copy this attachment to this request? ' + imagePath);
            //                    alert('This drag-and-drop functionality is incomplete. Coming soon!');
            //                    //this.innerHTML = imagePath;
            //                }
            //                return false;

            //                //
            //                // Do this to allow dragging of files from the desktop !!!!!! We can also support dragging from the browser to the desktop in Chrome. See also: https://www.html5rocks.com/en/tutorials/dnd/basics/
            //                // "Drag-in: dragging from the desktop to the browser" and "Drag-out: dragging from the browser to the desktop" section in the linked document above.
            //                //e.stopPropagation(); // Stops some browsers from redirecting.
            //                //e.preventDefault();
            //                //var files = e.dataTransfer.files;
            //                //for (var i = 0, f; f = files[i]; i++) {
            //                //    // Read the File objects in this FileList.
            //                //}




            //            } catch (e) {
            //                console.log('Exception in handleDrop(): ' + e.message + ', ' + e.stack);
            //            }
            //        }
            //        var element2 = document.getElementById('dropzone1');
            //        element2.addEventListener('dragenter', handleDragEnter, false);
            //        element2.addEventListener('dragover', handleDragOver, false);
            //        element2.addEventListener('dragleave', handleDragLeave, false);
            //        element2.addEventListener('drop', handleDrop, false);
            //        element2.addEventListener('dragend', handleDragEnd, false);



            // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.
            //if (_type == 'supplemental') {
            //    // This is a supplemental request for budget request _reference, which is a guid.
            //    var html = '';
            //    html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
            //    document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //    var html = '';
            //    html += '';
            //    html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the supplemental request.">Submit</button>';
            //    html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            //    html += '&nbsp;';
            //    document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            //} else {
            //var html = '';
            //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;New <strong>Budget Request</strong><br /><span></span></span><br />';
            //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //var html = '';
            //html += '';
            //var isSupplemental = 'false';
            //var relatedBudgetRequestId = '';
            //html += '<button id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow(\'' + isSupplemental + '\', \'' + relatedBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
            //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            //html += '&nbsp;';
            //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            //}
            //// debugger;
            //var newBudgetRequestManagerTitle = 'Project Manager';


            // Set if the recurring expenses is enabled.
            //if (recurringExpensesEnabled == true) {
            //$('#trNewRequestRecurringExpenseSection').show();
            //document.getElementById('cbNewRequestRecurringExpenseEnabled').checked = false; // Default to not selected.
            //// Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //$('#cbNewRequestRecurringExpenseEnabled').click(function () {
            //    //displayAlertDialog('enable this section'); // color: #adadad;
            //    if (this.checked == true) {
            //        $('#trNewRequestQuoteSection').hide();

            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //        var html = '';
            //        html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //        html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //        html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //        html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //    } else {
            //        $('#trNewRequestQuoteSection').show();
            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //        //var html = '';
            //        //html += 'Reminder date:<br />';
            //        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //        //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = '';
            //}

            //});
            //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            //} else {
            //    $('#trNewRequestRecurringExpenseSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}

            // Set if the quoting is enabled.
            //if (quotingEnabled == true) {
            //    $('#trNewRequestQuoteSection').show();
            //    document.getElementById('cbNewRequestQuoteEnabled').checked = false; // Default to not selected.
            //    // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //    $('#cbNewRequestQuoteEnabled').click(function () {
            //        //displayAlertDialog('enable this section'); // color: #adadad;
            //        if (this.checked == true) {
            //            $('#trNewRequestRecurringExpenseSection').hide();

            //            var html = '';
            //            html += 'New <strong>Quote Request</strong>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            ////document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //            //var html = '';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //            //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            ////html += 'Justification details:<br />';
            //            ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //            //html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //        } else {
            //            $('#trNewRequestRecurringExpenseSection').show();
            //            var html = '';
            //            html += 'New <strong>Budget Request</strong>';
            //            html += '</span>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //            //var html = '';
            //            //html += 'Reminder date:<br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            //html += 'Justification details:<br />';
            //            //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //            //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            document.getElementById('spanNewRequestQuoteSecondSection').innerHTML = '';
            //        }
            //    });
            //    //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //    //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';
            //} else {
            //    $('#trNewRequestQuoteSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}


            // Now we can hook up the Participant text box for autocomplete.
            //$('#' + elementId).find("#txtProjectManagerName").autocomplete({
            //    source: function (request, response) {
            //        //weburl = _spPageContextInfo.siteAbsoluteUrl;
            //        $.ajax({
            //            url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
            //            dataType: "json",
            //            success: function (data) {
            //                var searchArray = [];
            //                for (var i = 0; i < data.participants.length; i++) {
            //                    searchArray[i] = data.participants[i].participant;
            //                }
            //                response(searchArray);
            //            }
            //        });
            //    },
            //    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
            //    select: function (event, ui) {
            //        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
            //    },
            //    open: function () {
            //        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
            //    },
            //    close: function () {
            //        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //        var projectManagerName = this.value.split('|')[0];
            //        var projectManagerId = this.value.split('|')[1];
            //        var projectManagerEmail = this.value.split('|')[2];

            //        if (projectManagerName.indexOf('undefined') > -1) {
            //            $('#' + elementId).find('#txtProjectManagerName')[0].value = '';
            //            $('#' + elementId).find('#txtProjectManagerId')[0].value = '';
            //            $('#' + elementId).find('#txtProjectManagerEmail')[0].value = '';
            //        } else {
            //            $('#' + elementId).find('#txtProjectManagerName')[0].value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
            //            $('#' + elementId).find('#txtProjectManagerId')[0].value = projectManagerId;
            //            $('#' + elementId).find('#txtProjectManagerEmail')[0].value = projectManagerEmail;
            //        }
            //    }
            //});
            //monkeyPatchAutocomplete(); // This customizes the drop down when searching for users in the user text boxes.

        } catch (e) {
            console.log('Exception in populateNewRequestForm_IndexDb(): ' + e.message + ', ' + e.stack);
            $('#' + elementId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in populateNewRequestForm_IndexDb(): ' + e.message + ', ' + e.stack;
        }
    },

    // Display and populate an existing request.
    displayArInDialog: function (TrashBin, budgetRequestId, arNamexx, brTitle, title, bwAssignedToRaciRoleAbbreviation, bwWorkflowTaskItemId, bwRequestJson, weKnowThereIsAlreadyAPoppedOutWindowForThisRequest) { // If invoked from a task link, make sure bwWorkflowTaskItemId is populated!!!! 12-23-2021
        try {
            //
            // If invoked from a task link, make sure bwWorkflowTaskItemId is populated!!!
            //
            console.log('In bwRequest.js.displayArInDialog(). budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', TrashBin: ' + TrashBin);
            //alert('In bwRequest.js.displayArInDialog(). budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', TrashBin: ' + TrashBin);
            var thiz = this;

            //if (TrashBin == true) {
            //    alert('THIS IS A TRASHBINNED REQUEST.');
            //}

            var window1 = window; // This is how we make this work for popped-out request dialog windows.
            if (window.opener) {
                window1 = window.opener;
            }

            //
            // Check if the request is open already. 1-13-2023
            // We only have to check popped-out windows, because of the way the not-popped-out ones are named based on their bwBudgetRequestId and have the same element id, so never show up more than once.
            //
            var windowCount = 0;
            var poppedOutRequestWindows = window1.$('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');
            if (poppedOutRequestWindows && poppedOutRequestWindows.length) {
                windowCount = poppedOutRequestWindows.length;
            }

            var alreadyDisplayingTheRequest = false;

            if (!(weKnowThereIsAlreadyAPoppedOutWindowForThisRequest && (weKnowThereIsAlreadyAPoppedOutWindowForThisRequest == true))) {
                if (poppedOutRequestWindows && poppedOutRequestWindows.length && (poppedOutRequestWindows.length > 0)) {
                    for (var i = 0; i < poppedOutRequestWindows.length; i++) {
                        if (poppedOutRequestWindows[i].bwBudgetRequestId == budgetRequestId) {
                            //displayAlertDialog('This request is already being displayed. Attempting to bring the request window to the front of the display.');

                            // Make sure it actually exists, and is just not orphaned in the list.
                            if (poppedOutRequestWindows[i].windowObjectReference.closed) {
                                console.log('Error? in bwRequest.js.displayArInDialog(). The popped-out window was in the list, but does not actually exist.');
                                poppedOutRequestWindows.splice(i, 1);  // This removes it from the list. It needs to be removed from the list for it to be displayed, because we never display the same request twice!!!! :)
                            } else {
                                poppedOutRequestWindows[i].windowObjectReference.focus();
                                alreadyDisplayingTheRequest = true;
                            }
                            break;
                        }
                    }
                }
                console.log('In bwRequest.js.displayArInDialog(). There are ' + windowCount + ' popped-out windows for us to check to make sure we don\'t display a request more than once.');
            }

            if (alreadyDisplayingTheRequest == true) {

                var msg = 'This request is already being displayed in a popped-out window.';
                console.log(msg);
                displayAlertDialog(msg);

            } else {

                var budgetrequestform;
                var budgetrequestforms = document.getElementsByClassName('budgetrequestform');
                for (var i = 0; i < budgetrequestforms.length; i++) {
                    var _budgetRequestId = $(budgetrequestforms[i])[0].getAttribute('bwbudgetrequestid');
                    if (budgetRequestId == _budgetRequestId) {
                        // We found the form.
                        budgetrequestform = $(budgetrequestforms[i]);
                        break;
                    }
                }
                if (budgetrequestform) {

                    console.log('');
                    console.log('==========================================');
                    console.log('In bwRequest.js.displayArInDialog(). This request is already being displayed, so bringing it to the top. budgetRequestId: ' + budgetRequestId);
                    console.log('==========================================');
                    console.log('');

                    var dialogId = 'divRequestFormDialog_' + budgetRequestId;
                    $('#' + dialogId).dialog('moveToTop');

                } else {

                    if (!bwWorkflowTaskItemId) {
                        var msg = 'In displayArInDialog(). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', xcx32423663473. This is Ok when it is a new request. It would be nice if we checked for bwRequest.BudgetWorkflowStatus == NOT_SUBMITTED here, but we don\'t have access to that data, do we?.';
                        console.log(msg);
                        //alert(msg);
                    }


                    if (bwRequestJson) {
                        console.log('In bwRequest.js.displayArInDialog(). bwRequestJson has been passed.');
                    }

                    try {
                        // Code to hide divRowHoverDetails if it is displayed.
                        $('#divRowHoverDetails').dialog('close');
                    } catch (e) {
                        // do nothing
                    }

                    var participantId = window1.$('.bwAuthentication').bwAuthentication('option', 'participantId');

                    window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.
                    $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

                    if (displayTaskDetailsBeforeRequests != true) {

                        //
                        // THIS IS THE ONLY PLACE WHERE THE FORM GETS DISPLAYED. 
                        //

                        console.log('In bwRequest.js.displayArInDialog(). IS THIS THE ONLY PLACE THIS SHOULD BE HAPPENING? 3-16-2022 xcx3243465');
                        //console.log('In displayArInDialog(). Calling displayRequestFormDialog().'); // bwAssignedToRaciRoleAbbreviation: ' + bwAssignedToRaciRoleAbbreviation + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                        //alert('In displayArInDialog(). Calling displayRequestFormDialog(). TrashBin: ' + TrashBin + ', bwRequestJson: ' + JSON.stringify(bwRequestJson));

                        if (TrashBin != true) {

                            console.log('In displayArInDialog(). Calling displayRequestFormDialog(). TrashBin: ' + TrashBin);
                            this.displayRequestFormDialog(budgetRequestId, bwAssignedToRaciRoleAbbreviation, bwWorkflowTaskItemId, bwRequestJson); //, participantId, title); //, bwAssignedToRaciRoleAbbreviation, '', bwWorkflowTaskItemId);

                        } else {

                            console.log('In displayArInDialog(). Calling displayRequestFormDialog_FromTrashBin(). TrashBin: ' + TrashBin);
                            //alert('>>>>>> In displayArInDialog(). Calling displayRequestFormDialog_FromTrashBin(). TrashBin: ' + TrashBin);
                            this.displayRequestFormDialog_FromTrashBin(budgetRequestId, bwAssignedToRaciRoleAbbreviation, bwWorkflowTaskItemId, bwRequestJson); //, participantId, title); //, bwAssignedToRaciRoleAbbreviation, '', bwWorkflowTaskItemId);

                        }

                    } else {

                        console.log('In displayArInDialog(). Display the audit trail/approval trail first.');
                        //
                        // Display the audit trail/approval trail first.
                        if (!budgetRequestId && !brTitle) {
                            // This means we are coming from a .xsl, so we have to find the values.

                            alert('In bwRequest.js.displayArInDialog(). This means we are coming from a .xsl, so we have to find the values.');

                            budgetRequestId = $('span[xd\\:binding = "my:BudgetRequestId"]')[0].innerHTML; // my:BudgetRequestId
                            appWebUrl = this.options.operationUriPrefix; //globalUrlPrefix + globalUrlForWebServices;
                            brTitle = $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML; // my:Project_Name
                            title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML; // eg: BR-160001
                            //// debugger;
                            // This shows the AR in a jquery dialog window.
                            try {
                                $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                                //// debugger; // xcx1


                                alert('xcx23425345-3');

                                alert('Displaying ArDialog. xcx23425345-3-1');

                                $("#ArDialog").dialog({
                                    //position: {
                                    //    my: "left top",
                                    //    at: "right top",
                                    //    of: "#selectHomePageWorkflowAppDropDown"
                                    //},

                                    modal: true,
                                    resizable: false,
                                    closeText: "Cancel",
                                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                    title: brTitle + " (" + title + ")",
                                    width: "720px",
                                    dialogClass: "no-close", // No close button in the upper right corner.
                                    hide: false, // This means when hiding just disappear with no effects.



                                    //position: {
                                    //    my: "middle top+12",
                                    //    at: "middle top",
                                    //    of: window //"#btnAdvancedProductSearch"
                                    //},





                                    open: function (event, ui) {
                                        try {

                                            //
                                            //
                                            // THIS IS WHERE THE REQUEST GETS OPENED INTO THE LARGE REQUEST DIALOG. 
                                            //   - I should probably put more information here sometime, a quick explainer etc.
                                            //
                                            //

                                            console.log('In bwRequest.js.displayArInDialog.dialog.open(). THIS IS WHERE THE REQUEST GETS OPENED INTO THE LARGE REQUEST DIALOG.');

                                            $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); });

                                            $(this).dialog('moveToTop');

                                            window.scrollTo(0, 0); // The user selected the executive summary to view, and of course they would want to scroll to top so they can view the enitre request. // 7-26-024.

                                            //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                            ////$('#invitationLink2').text(invitationUrl);
                                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();

                                        } catch (e) {
                                            var msg = 'Exception in bwRequest.js.displayArInDialog():910: ' + e.message + ', ' + e.stack;
                                            console.log(msg);
                                            displayAlertDialog(msg);
                                        }
                                    },
                                    close: function (event, ui) {
                                        try {
                                            displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-4');
                                        } catch (e) {

                                        }
                                    }
                                });
                                $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                //$('#spanArDialogTitle').html(brTitle + ' (' + title + ')');
                                var titleHtml = '';
                                titleHtml += '☇ ☈';
                                titleHtml += '&nbsp;&nbsp;&nbsp;&nbsp;x11';
                                titleHtml += brTitle + ' (' + title + ')';
                                $('#spanArDialogTitle').html(titleHtml); //brTitle + ' (' + title + ')');

                                var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                                $.ajax({
                                    url: operationUri,
                                    method: "GET",
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (wtItems) {
                                        try {
                                            //console.log('wtItems: ' + JSON.stringify(wtItems));
                                            if (wtItems.d.results.length == 0) {
                                                // Todd: There were no results, so put some message on the screen to indicate that.?

                                                //html = '';
                                                //                html += '<table>';
                                                //                html += '   <tr>';
                                                //                html += '       <td>&nbsp;</td>';
                                                //                html += '   </tr>';
                                                //                html += '   <tr>';
                                                //                html += '       <td>';
                                                ////html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                //html += '           <a href="javascript:$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' +budgetRequestId + '\', \'' + participantId + '\', \'' +title + '\');">Click here to view the Budget Request</a>';
                                                //html += '       </td>';
                                                //                html += '   </tr>';
                                                //html += '</table>';

                                                //$('#spanArDialogViewBudgetRequestLink').html(html);


                                            } else {
                                                // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                                var userIds = [];
                                                userIds.push(wtItems.d.results[0].bwAuthorId);
                                                for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                                    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                                }
                                                var UserFriendlyNames = [];
                                                var dataRetrievalCount = 0;
                                                for (var uids = 0; uids < userIds.length; uids++) {
                                                    // Ok now we have to make a deferred call to get back the Friendly Names.
                                                    GetUserDetails[uids] = $.Deferred();
                                                    GetUserDetails[uids]
                                                        .done(function (data) {
                                                            try {
                                                                dataRetrievalCount += 1; // Increment the count!
                                                                // Add the results to the array.
                                                                UserFriendlyNames.push(data);
                                                                // Check if all of the data has come back yet.
                                                                if (dataRetrievalCount == userIds.length) {
                                                                    // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                                    var html = '';
                                                                    html += '<table>';
                                                                    html += '   <tr>';
                                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                                    var authorName = '';
                                                                    for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                        if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                                    }
                                                                    html += '           <strike><span style="cursor:help;">xcx10' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                                    html += '       </td>';
                                                                    html += '   </tr>';
                                                                    html += '</table>';
                                                                    for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                                        // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                                        html += '<table>';
                                                                        html += '   <tr>';
                                                                        //html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                                        // debugger;
                                                                        if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                                            html += '       <strike>';
                                                                            html += '<span style="cursor:help;">xcx11' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role1]</span>';
                                                                            html += '       </strike>';
                                                                            html += '       </td>';
                                                                        } else {
                                                                            var assignedToName = '';
                                                                            for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                                if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                                            }
                                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Created) + '">';
                                                                            html += '<span style="cursor:help;">xcx12' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + '[raci role2]</span>';
                                                                            html += '       </td>';
                                                                        }
                                                                        //html += '       </td>';
                                                                        html += '   </tr>';
                                                                        html += '</table>';
                                                                    }

                                                                    $('#spanArDialogTaskAuditTrail').html(html);

                                                                    html = '';
                                                                    html += '<table>';
                                                                    html += '   <tr>';
                                                                    html += '       <td>&nbsp;</td>';
                                                                    html += '   </tr>';
                                                                    html += '   <tr>';
                                                                    html += '       <td>';
                                                                    //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                    // debugger;
                                                                    html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                    html += '       </td>';
                                                                    html += '   </tr>';
                                                                    html += '</table>';

                                                                    $('#spanArDialogViewBudgetRequestLink').html(html);

                                                                    $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                                }
                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.displayArInDialog():xcx335-2: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-2: ' + e.message + ', ' + e.stack);
                                                            }
                                                        })
                                                        .fail(function (data) {
                                                            handleExceptionWithAlert('Error in bwRequest.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                                        });
                                                    getUserDetails(userIds[uids], appWebUrl, uids);
                                                }
                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.displayArInDialog():xcx335-1: ' + e.message + ', ' + e.stack);
                                            displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-1: ' + e.message + ', ' + e.stack);
                                        }
                                    },
                                    error: function (error) {
                                        handleExceptionWithAlert('Error in bwRequest.displayArInDialog()', '1:' + errorCode + ', ' + errorMessage);
                                    }
                                });
                            } catch (e) {
                                handleExceptionWithAlert('Error in bwRequest.displayArInDialog()', '2:' + e.message);
                            }
                        } else if (!budgetRequestId && !title) {
                            //displayAlertDialog('This means we are coming from the burn rate report.');
                            // This means we are coming from the burn rate report.
                            // First we have to get the budgetRequestId from the Title (eg: BR-00001).


                            alert('In bwRequest.js.displayArInDialog(). !appWebUrl && !budgetRequestId && !title.');


                            var operationUri = webserviceurl + "/getbudgetrequestidfromtitle/" + brTitle;
                            $.ajax({
                                url: operationUri,
                                method: "GET",
                                headers: {
                                    "Accept": "application/json; odata=verbose"
                                },
                                success: function (data) {
                                    try {
                                        //displayAlertDialog(data);

                                        budgetRequestId = data[0].bwBudgetRequestId;
                                        appWebUrl = globalUrlPrefix + globalUrlForWebServices;
                                        brTitle = data[0].ProjectTitle; // my:Project_Name
                                        title = data[0].Title; // eg: BR-160001



                                        // This shows the AR in a jquery dialog window.
                                        try {
                                            $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                                            $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                                            $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                                            // debugger; // xcx2

                                            alert('xcx23425345-2');

                                            alert('Displaying ArDialog. xcx23425345-3-2');

                                            $("#ArDialog").dialog({
                                                modal: true,
                                                resizable: false,
                                                closeText: "Cancel",
                                                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                                title: brTitle + " (" + title + ")",
                                                width: "720px",
                                                dialogClass: "no-close", // No close button in the upper right corner.
                                                hide: false, // This means when hiding just disappear with no effects.





                                                //position: {
                                                //    my: "middle top+12",
                                                //    at: "middle top",
                                                //    of: window //"#btnAdvancedProductSearch"
                                                //},





                                                open: function (event, ui) {
                                                    $('.ui-widget-overlay').bind('click', function () {
                                                        $("#ArDialog").dialog('close');
                                                    });

                                                    $(this).dialog('moveToTop');

                                                    //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                                    ////$('#invitationLink2').text(invitationUrl);
                                                    //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                                    //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
                                                },
                                                close: function (event, ui) {
                                                    try {
                                                        displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-5');
                                                    } catch (e) {

                                                    }
                                                }
                                                //buttons: {
                                                //    "Close": function () {
                                                //        $(this).dialog("close");
                                                //    }
                                                //}
                                            });
                                            $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                            $('#spanArDialogTitle').html(brTitle + ' (' + title + ')x1');

                                            var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                                            $.ajax({
                                                url: operationUri,
                                                method: "GET",
                                                headers: {
                                                    "Accept": "application/json; odata=verbose"
                                                },
                                                success: function (wtItems) {
                                                    try {
                                                        if (wtItems.d.results.length == 0) {
                                                            // Todd: There were no results, so put some message on the screen to indicate that.?
                                                        } else {
                                                            // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                                            var userIds = [];
                                                            userIds.push(wtItems.d.results[0].bwAuthorId);
                                                            for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                                                userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                                            }
                                                            var UserFriendlyNames = [];
                                                            var dataRetrievalCount = 0;
                                                            for (var uids = 0; uids < userIds.length; uids++) {
                                                                // Ok now we have to make a deferred call to get back the Friendly Names.
                                                                GetUserDetails[uids] = $.Deferred();
                                                                GetUserDetails[uids]
                                                                    .done(function (data) {
                                                                        try {
                                                                            dataRetrievalCount += 1; // Increment the count!
                                                                            // Add the results to the array.
                                                                            UserFriendlyNames.push(data);
                                                                            // Check if all of the data has come back yet.
                                                                            if (dataRetrievalCount == userIds.length) {
                                                                                // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                                                var html = '';
                                                                                html += '<table>';
                                                                                html += '   <tr>';
                                                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                                                var authorName = '';
                                                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                                                }
                                                                                html += '           <strike><span style="cursor:help;">xcx13' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '[raci role 3]</span></strike>';
                                                                                html += '       </td>';
                                                                                html += '   </tr>';
                                                                                html += '</table>';
                                                                                for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                                                    // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                                                    html += '<table>';
                                                                                    html += '   <tr>';
                                                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                                                    if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                                                        html += '       <strike>';
                                                                                        html += '<span style="cursor:help;">xcx14' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role 4]</span>';
                                                                                        html += '       </strike>';
                                                                                    } else {
                                                                                        var assignedToName = '';
                                                                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                                            if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                                                        }
                                                                                        html += 'xcx15' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName;
                                                                                    }
                                                                                    html += '       </td>';
                                                                                    html += '   </tr>';
                                                                                    html += '</table>';
                                                                                }


                                                                                $('#spanArDialogTaskAuditTrail').html(html);

                                                                                html = '';
                                                                                html += '<table>';
                                                                                html += '   <tr>';
                                                                                html += '       <td>&nbsp;</td>';
                                                                                html += '   </tr>';
                                                                                html += '   <tr>';
                                                                                html += '       <td>';
                                                                                //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                                // debugger;
                                                                                html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                                html += '       </td>';
                                                                                html += '   </tr>';
                                                                                html += '</table>';
                                                                                $('#spanArDialogViewBudgetRequestLink').html(html);

                                                                                $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                                            }
                                                                        } catch (e) {
                                                                            console.log('Exception in bwRequest.displayArInDialog():xcx335-5: ' + e.message + ', ' + e.stack);
                                                                            displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-5: ' + e.message + ', ' + e.stack);
                                                                        }
                                                                    })
                                                                    .fail(function (data) {
                                                                        handleExceptionWithAlert('Error in bwRequest.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                                                    });
                                                                getUserDetails(userIds[uids], appWebUrl, uids);
                                                            }
                                                        }
                                                    } catch (e) {
                                                        console.log('Exception in bwRequest.displayArInDialog():xcx335-4: ' + e.message + ', ' + e.stack);
                                                        displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-4: ' + e.message + ', ' + e.stack);
                                                    }
                                                },
                                                error: function (error) {
                                                    handleExceptionWithAlert('Error in bwRequest.displayArInDialog()', '1:' + errorCode + ', ' + errorMessage);
                                                }
                                            });
                                        } catch (e) {
                                            handleExceptionWithAlert('Error in bwRequest.displayArInDialog()', '2:' + e.message);
                                        }
                                    } catch (e) {
                                        console.log('Exception in bwRequest.displayArInDialog():xcx335-3: ' + e.message + ', ' + e.stack);
                                        displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-3: ' + e.message + ', ' + e.stack);
                                    }
                                },
                                error: function (error) {
                                    handleExceptionWithAlert('Error in bwRequest.displayArInDialog()', '1:' + errorCode + ', ' + errorMessage);
                                }
                            });
                        } else {
                            // Display the thing. We have enough info already!
                            // This shows the AR in the dialog.


                            alert('In bwRequest.js.displayArInDialog(). This shows the AR in the dialog.');


                            try {
                                $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                                // debugger; // xcx3

                                alert('xcx23425345');

                                alert('Displaying ArDialog. xcx23425345-3-3');

                                $("#ArDialog").dialog({
                                    modal: true,
                                    resizable: false,
                                    closeText: "Cancel",
                                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                    title: brTitle + " (" + title + ")",
                                    width: "720px",
                                    dialogClass: "no-close", // No close button in the upper right corner.
                                    hide: false, // This means when hiding just disappear with no effects.



                                    // 3-16-2022 removed this so that it displays cascaded in the jquery.ui.dialog works in it's natural fashion...
                                    //position: {
                                    //    my: "middle top+12",
                                    //    at: "middle top",
                                    //    of: window //"#btnAdvancedProductSearch"
                                    //},






                                    open: function (event, ui) {
                                        $('.ui-widget-overlay').bind('click', function () {
                                            $("#ArDialog").dialog('close');
                                        });

                                        $(this).dialog('moveToTop');

                                        //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                        ////$('#invitationLink2').text(invitationUrl);
                                        //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                        //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();








                                        //// First, let's create our drawing surface out of an existing SVG element
                                        //// If you want to create a new surface just provide dimensions
                                        //// like s = Snap(800, 600);
                                        //var s = Snap("#svg");
                                        //// Let's create a big circle in the middle:
                                        //var bigCircle = s.circle(150, 150, 100);






                                    },
                                    close: function (event, ui) {
                                        try {
                                            displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-6');
                                        } catch (e) {

                                        }
                                    }
                                    //buttons: {
                                    //    "Close": function () {
                                    //        $(this).dialog("close");
                                    //    }
                                    //}
                                });
                                $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                $('#spanArDialogTitle').html(brTitle + ' (' + title + ')x2');

                                var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                                $.ajax({
                                    url: operationUri,
                                    method: "GET",
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (wtItems) {
                                        try {
                                            if (wtItems.d.results.length == 0) {
                                                // Todd: There were no results, so put some message on the screen to indicate that.?



                                                //// debugger;
                                                html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td>&nbsp;</td>';
                                                html += '   </tr>';
                                                html += '   <tr>';
                                                html += '       <td>';
                                                //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                // debugger;
                                                html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';

                                                $('#spanArDialogViewBudgetRequestLink').html(html);



                                            } else {
                                                // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                                var userIds = [];
                                                userIds.push(wtItems.d.results[0].bwAuthorId);
                                                for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                                    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                                }
                                                var UserFriendlyNames = [];
                                                var dataRetrievalCount = 0;
                                                for (var uids = 0; uids < userIds.length; uids++) {
                                                    // Ok now we have to make a deferred call to get back the Friendly Names.
                                                    GetUserDetails[uids] = $.Deferred();
                                                    GetUserDetails[uids]
                                                        .done(function (data) {
                                                            try {
                                                                dataRetrievalCount += 1; // Increment the count!
                                                                // Add the results to the array.
                                                                UserFriendlyNames.push(data);
                                                                // Check if all of the data has come back yet.
                                                                if (dataRetrievalCount == userIds.length) {
                                                                    // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                                    var html = '';
                                                                    html += '<table>';
                                                                    html += '   <tr>';
                                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                                    var authorName = '';
                                                                    for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                        if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                                    }
                                                                    html += '           <strike><span style="cursor:help;">xcx16' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                                    html += '       </td>';
                                                                    html += '   </tr>';
                                                                    html += '</table>';
                                                                    for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                                        // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                                        html += '<table>';
                                                                        html += '   <tr>';
                                                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                                        if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                                            html += '       <strike>';
                                                                            html += '<span style="cursor:help;">xcx17' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x</span>';
                                                                            html += '       </strike>';
                                                                        } else {
                                                                            var assignedToName = '';
                                                                            for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                                if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                                            }
                                                                            html += 'xcx18' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x';
                                                                        }
                                                                        html += '       </td>';
                                                                        html += '   </tr>';
                                                                        html += '</table>';
                                                                    }

                                                                    $('#spanArDialogTaskAuditTrail').html(html);

                                                                    html = '';
                                                                    html += '<table>';
                                                                    html += '   <tr>';
                                                                    html += '       <td>&nbsp;</td>';
                                                                    html += '   </tr>';
                                                                    html += '   <tr>';
                                                                    html += '       <td>';
                                                                    //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                    // debugger;
                                                                    html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                                    html += '       </td>';
                                                                    html += '   </tr>';
                                                                    html += '</table>';

                                                                    $('#spanArDialogViewBudgetRequestLink').html(html);

                                                                    $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                                }
                                                            } catch (e) {
                                                                console.log('Exception in bwRequest.displayArInDialog():xcx335-7: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in bwRequest.displayArInDialog():xcx335-7: ' + e.message + ', ' + e.stack);
                                                            }
                                                        })
                                                        .fail(function (data) {
                                                            handleExceptionWithAlert('Error in bwRequest.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                                        });
                                                    getUserDetails(userIds[uids], appWebUrl, uids);
                                                }
                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.js.displayArInDialog():xcx335-6: ' + e.message + ', ' + e.stack);
                                            displayAlertDialog('Exception in bwRequest.js.displayArInDialog():xcx335-6: ' + e.message + ', ' + e.stack);
                                        }
                                    },
                                    error: function (error) {
                                        var msg = 'Error in bwRequest.js.displayArInDialog(). error: ' + error;
                                        console.log(msg);
                                        alert(msg);
                                    }

                                });

                            } catch (e) {
                                var msg = 'Exception in bwRequest.js.displayArInDialog():2: ' + e.message + ', ' + e.stack;
                                console.log(msg);
                                alert(msg);
                            }

                        }
                    }
                }

            }

        } catch (e) {
            var msg = 'Exception in bwRequest.js.displayArInDialog():1: ' + e.message + ', ' + e.stack;
            console.log(msg);
            alert(msg);
        }
    },

    // Display workflow audit trail dialog, render, and populate.
    displayCloseoutInDialog: function (bwBudgetRequestId, bwRequestTypeId, brTitle) { // brTitle, title, bwRequestTypeId, bwBudgetRequestId, bwWorkflowId) {
        try {
            console.log('In displayCloseoutInDialog().');
            //alert('In displayCloseoutInDialog().');
            var thiz = this;

            this.pinRequestDialog();
            var requestDialogId = 'divRequestCloseoutDialog_' + bwBudgetRequestId;

            var html = '';

            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            html += '                    <span id="divRequestFormContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';

            var div = document.getElementById(requestDialogId);
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = requestDialogId;
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $('#' + requestDialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '800px',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                close: function () {

                    console.log('');
                    console.log('==========================================');
                    console.log('In xcx34-1(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-3');
                    console.log('==========================================');
                    console.log('');

                    //displayAlertDialog('In xcx34(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x');


                },
                open: function () {
                    try {

                        var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';

                        html += '<table xcx="xcx3249-4" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + requestDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                        html = '';

                        //html += '<span id="xcx234527877">';
                        //html += '   <img id="divNewRequestWorkflowParticipantsDialog_ac60437a-835c-44df-8f29-f23fd1da3393_imgRequestOrgImage" src="https://www.budgetworkflow.com/images/corporeal.png" style="width:100px;height:100px;">';
                        //html += '</span>';





                        // 
                        // Get the request type SingletonName. new 9-30-2022
                        var requestType;
                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                        for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                            if (bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                requestType = bwEnabledRequestTypes[i];
                                break;
                            }
                        }
                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        //if (!requestType) {
                        //    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        //} else {
                        //    html += '                       ' + requestType.SingletonName + ': ';
                        //}
                        //html += '   <span id="spanRequestFormBudgetRequestTitle" title="">';
                        //html += brTitle;
                        //html += '<br />';
                        //html += title;
                        //html += '   </span>';
                        //html += '</span>';

                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                        html += '<table style="width:100%;">';
                        html += '   <tbody>';
                        html += '       <tr>';
                        html += '           <td colspan="4">';
                        html += '               <span id="divCreateRequestFormContent_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">';
                        //html += '                   <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'root\');">';
                        //html += '                       Stark Industries<span xcx="xcx324256"></span>';
                        //html += '                   </span>';
                        html += '               </span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '       <tr>';
                        html += '           <td width="5">';
                        html += '           </td>';
                        html += '           <td style="vertical-align:top;">';
                        html += '               <span>';



                        var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });

                        var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                        if (activeStateIdentifier.status != 'SUCCESS') {

                            html += '[No image. Unauthorized. xcx213124-34556-34-234-3245]';

                        } else {

                            html += '                   <img xcx="fewrwwa" id="divCreateRequestFormContent_imgRequestOrgImage" style="width:150px;height:150px;" src="' + thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/root/orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier + '">';

                        }










                        html += '               </span>';
                        html += '           </td>';
                        html += '           <td style="text-align:left;" colspan="2">';
                        //html += '               &nbsp;&nbsp;';
                        html += '               <span class="xdlabel" id="spanRequestForm_Title">';
                        html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        if (!requestType) {
                            html += 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        } else {
                            html += requestType.SingletonName + ': ';
                        }
                        html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                        html += brTitle;
                        html += '                           <br />';
                        html += '                           <span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray;font-size:small;"></span>';
                        html += '                       </span>';
                        //html += '                       &nbsp;';
                        //html += '                       <span id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                        html += '                   </span>';
                        html += '               </span>';
                        html += '               <br />';
                        //html += '               <span id="spanViewWorkflowParticipantsLink" style="text-decoration:underline;cursor:pointer;font-size:10pt;color:gray;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\', this);">';
                        //html += '               </span>';
                        //html += '               <br>';
                        //html += '               <span id="spanRequestForm_WorkflowAndRoleDetails">';
                        //html += '                   <table style="float:right;width:85%;">';
                        //html += '                       <tbody>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   <span style="font-weight:bold;">';
                        //html += '                                       <span xcx="342352-1" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'BR-220036\', \'September test 1\', \'0f4cde7c-5c1d-494d-90a3-ada45a3502b4\', \'bcf8fd91-e319-4b31-8174-071afa8614dd', '1a15689f-aea5-434a-bf6b-27a8cf17e464\');">';
                        //html += '                                           Workflow step: Admin';
                        //html += '                                       </span>';
                        //html += '                                   </span>';
                        //html += '                                   <br>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   Your role as Approver: ';
                        //html += '                                   <div style="float:right">';
                        //html += '                                       <select id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;">';
                        //html += '                                       <option selected="" value="ADMIN">Workflow Administrator (ADMIN)</option></select>';
                        //html += '                                   </div>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td>';
                        //html += '                                   You are allowed to modify this request.';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                       </tbody>';
                        //html += '                   </table>';
                        //html += '                   <br>';
                        //html += '               </span>';
                        //html += '               <span id="spanRequestForm_Checklists"></span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '   </tbody>';
                        html += '</table>';

                        //html += brTitle + ' (' + title + ')';
                        //html += '<br />';
                        //html += '<span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray"></span>';
                        html += '<span id="' + requestDialogParentId + '_Content"></span>';

                        document.getElementById(requestDialogId).innerHTML = html;




                        // Org breadcrumb needs to be loaded here // 10-5-2022 
                        var budgetrequestform;
                        var budgetrequestforms = document.getElementsByClassName('budgetrequestform');
                        for (var i = 0; i < budgetrequestforms.length; i++) {
                            var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                            if (bwBudgetRequestId == _budgetRequestId) {
                                // We found the form.
                                budgetrequestform = budgetrequestforms[i];
                                break;
                            }
                        }
                        if (!budgetrequestform) {

                            displayAlertDialog('In bwRequest.js.displayCloseoutInDialog(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);

                        } else {

                            var bwOrgId = $(budgetrequestform)[0].getAttribute('bworgid');
                            var OrgJson = $(budgetrequestform).find('.bwLocationPicker:first').bwLocationPicker('option', 'store');

                            //alert('xcx1243234 bwOrgId: ' + bwOrgId + ', OrgJson: ' + OrgJson);

                            var orgPathClickable = $('.bwAuthentication').bwAuthentication('renderTheOrgBreadcrumb2', OrgJson, bwOrgId);
                            $('#' + requestDialogId).find('#divCreateRequestFormContent_requestOrgClickableBreadcrumb')[0].innerHTML = orgPathClickable.orgPathClickable;

                            $("#slider_" + requestDialogId).slider({
                                min: 50,
                                max: 200,
                                value: 100, // It starts off full size.
                                slide: function (event, ui) {
                                    thiz.setZoom(ui.value, requestDialogId);
                                }//,
                                //change: function (event, ui) {
                                //    thiz.setZoom(ui.value, requestDialogId);
                                //}
                            });
                            thiz.setZoom(100, requestDialogId);

                            $('.ui-widget-overlay').bind('click', function () {
                                $('#' + requestDialogId).dialog('close');
                            });





                            var html = `
                            
                            
                            
    <span id="XslFormBudgetRequestId" xd:binding="my:BudgetRequestId" class="bwHiddenField">
        <xsl:value-of select="my:BudgetRequestId" />
    </span>

    <div align="center">
        <table style="BORDER-BOTTOM-STYLE: none; BORDER-LEFT-STYLE: none; WIDTH: 654px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; BORDER-TOP-STYLE: none; TABLE-LAYOUT: fixed; BORDER-RIGHT-STYLE: none" class="xdFormLayout">
            <colgroup>
                <col style="WIDTH: 654px"></col>
            </colgroup>
            <tbody>
                <tr style="MIN-HEIGHT: 688px" class="xdTableContentRow">
                    <td class="xdTableContentCell" style="BORDER-BOTTOM: #d8d8d8 1pt solid; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; VERTICAL-ALIGN: top; BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; PADDING-TOP: 0px">
                        <h1 style="FONT-WEIGHT: normal"> </h1>
                        <div style="FONT-WEIGHT: normal">
                            <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 652px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                <colgroup>
                                    <col style="WIDTH: 125px"></col>
                                    <col style="WIDTH: 527px"></col>
                                </colgroup>
                                <tbody vAlign="top">
                                    <tr>
                                        <td>
                                            <div>
                                                <font size="2" face="Calibri">

                                                </font>
                                            </div>
                                        </td>
                                        <td>
                                            <div>
                                                <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 486px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                    <colgroup>
                                                        <col style="WIDTH: 486px"></col>
                                                    </colgroup>
                                                    <tbody vAlign="top">
                                                        <tr>
                                                            <td>
                                                                <div>
                                                                    <font style="FONT-SIZE: 22pt" face="Calibri">Closeout</font>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td>
                                                                <div>
                                                                    <font size="2" face="Calibri"></font>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div>
                                                <font size="2" face="Calibri"></font>
                                            </div>
                                        </td>
                                        <td>
                                            <div align="right">
                                                <!--<em>To return to the AR, close this browser window.</em>-->
                                            </div>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <div>
                                                <font size="2" face="Calibri"></font>
                                            </div>
                                        </td>
                                        <td>
                                            <div align="right">
                                                <span class="xdlabel"></span><span hideFocus="1" class="xdTextBox" title="" tabIndex="-1" xd:disableEditing="yes" xd:xctname="PlainText" xd:CtrlId="CTRL59" xd:binding="my:GlobalError" style="BORDER-BOTTOM: #dcdcdc 1pt; TEXT-ALIGN: right; BORDER-LEFT: #dcdcdc 1pt; WIDTH: 100%; WHITE-SPACE: nowrap; COLOR: #ff0000; BORDER-TOP: #dcdcdc 1pt; BORDER-RIGHT: #dcdcdc 1pt">
                                                    <xsl:value-of select="my:GlobalError" />
                                                </span>
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div align="right">
                            <span class="xdlabel"></span>
                        </div>
                        <div align="left">
                            <span class="xdlabel">
                                <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 652px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                    <colgroup>
                                        <col style="WIDTH: 652px"></col>
                                    </colgroup>
                                    <tbody vAlign="top">
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 648px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 35px"></col>
                                                            <col style="WIDTH: 134px"></col>
                                                            <col style="WIDTH: 19px"></col>
                                                            <col style="WIDTH: 136px"></col>
                                                            <col style="WIDTH: 136px"></col>
                                                            <col style="WIDTH: 18px"></col>
                                                            <col style="WIDTH: 42px"></col>
                                                            <col style="WIDTH: 128px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr style="MIN-HEIGHT: 26px">
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">BR #:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox" title="" xd:disableEditing="yes" xd:xctname="PlainText" xd:CtrlId="CTRL29" xd:binding="my:coARNumber" style="WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                <xsl:value-of select="my:coARNumber" />
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Location of Asset:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL32" xd:binding="my:coLocationOfEquipment" style="WIDTH: 100%">
                                                                            <xsl:value-of select="my:coLocationOfEquipment" />
                                                                        </span>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Date:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox  " title="" xd:disableEditing="yes" xd:xctname="PlainText" xd:CtrlId="CTRL34" xd:binding="my:coDate" style="WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                <xsl:value-of select="my:coDate" />
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 649px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 129px"></col>
                                                            <col style="WIDTH: 141px"></col>
                                                            <col style="WIDTH: 16px"></col>
                                                            <col style="WIDTH: 233px"></col>
                                                            <col style="WIDTH: 130px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">SAP Internal Order #:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span class="xdlabel">
                                                                                <span hideFocus="1" class="xdTextBox" title="" xd:disableEditing="yes" xd:xctname="PlainText" xd:CtrlId="CTRL35" xd:binding="my:coSAPInternalOrderNumber" style="WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                    <xsl:value-of select="my:coSAPInternalOrderNumber" />
                                                                                </span>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Cost Center:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span class="xdlabel">
                                                                                <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL36" xd:binding="my:coCostCenter" style="WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                    <xsl:value-of select="my:coCostCenter" />
                                                                                </span>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="BORDER-BOTTOM-STYLE: none; BORDER-BOTTOM-COLOR: ; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; PADDING-TOP: 1px">
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 649px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 87px"></col>
                                                            <col style="WIDTH: 562px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <font size="2" face="Calibri">Description:</font>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox" title="" xd:disableEditing="yes" xd:xctname="PlainText" xd:CtrlId="CTRL37" xd:binding="my:coProjectTitle" style="WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                <xsl:value-of select="my:coProjectTitle" />
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="BORDER-TOP-COLOR: ; BORDER-TOP-STYLE: none">
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 648px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 157px"></col>
                                                            <col style="WIDTH: 139px"></col>
                                                            <col style="WIDTH: 122px"></col>
                                                            <col style="WIDTH: 100px"></col>
                                                            <col style="WIDTH: 130px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #f2f2f2 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Estimated Amount Closed:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #f2f2f2 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox  xdBehavior_Formatting" title="" contentEditable="true" xd:xctname="PlainText" xd:CtrlId="CTRL39" xd:binding="my:coEstimatedAmountClosed" xd:datafmt="&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;" xd:boundProp="xd:num" style="TEXT-ALIGN: right; WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                                <xsl:attribute name="xd:num">
                                                                                    <xsl:value-of select="my:coEstimatedAmountClosed" />
                                                                                </xsl:attribute>
                                                                                <xsl:choose>
                                                                                    <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                        <xsl:value-of select="xdFormatting:formatString(my:coEstimatedAmountClosed,&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;)" />
                                                                                    </xsl:when>
                                                                                    <xsl:otherwise>
                                                                                        <xsl:value-of select="my:coEstimatedAmountClosed" />
                                                                                    </xsl:otherwise>
                                                                                </xsl:choose>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #f2f2f2 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #f2f2f2 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Budget Amount:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #f2f2f2 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span class="xdlabel">
                                                                                <span hideFocus="1" class="xdTextBox  xdBehavior_Formatting" title="" contentEditable="true" xd:xctname="PlainText" xd:CtrlId="CTRL38" xd:binding="my:coBudgetAmount" xd:datafmt="&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;" xd:boundProp="xd:num" style="WIDTH: 100%">
                                                                                    <xsl:attribute name="xd:num">
                                                                                        <xsl:value-of select="my:coBudgetAmount" />
                                                                                    </xsl:attribute>
                                                                                    <xsl:choose>
                                                                                        <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                            <xsl:value-of select="xdFormatting:formatString(my:coBudgetAmount,&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;)" />
                                                                                        </xsl:when>
                                                                                        <xsl:otherwise>
                                                                                            <xsl:value-of select="my:coBudgetAmount" />
                                                                                        </xsl:otherwise>
                                                                                    </xsl:choose>
                                                                                </span>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 649px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 128px"></col>
                                                            <col style="WIDTH: 257px"></col>
                                                            <col style="WIDTH: 11px"></col>
                                                            <col style="WIDTH: 71px"></col>
                                                            <col style="WIDTH: 182px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr style="MIN-HEIGHT: 31px">
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Asset Replaced:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL41" xd:binding="my:coEquipmentReplaced" style="WIDTH: 100%">
                                                                                <xsl:value-of select="my:coEquipmentReplaced" />
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">Property #:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL42" xd:binding="my:coPropertyNumber" style="WIDTH: 100%">
                                                                                <xsl:value-of select="my:coPropertyNumber" />
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 648px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 172px"></col>
                                                            <col style="WIDTH: 476px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div align="left">
                                                                        <font size="2" face="Calibri">Where is the Asset Now:</font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 321px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                                            <colgroup>
                                                                                <col style="WIDTH: 174px"></col>
                                                                                <col style="WIDTH: 40px"></col>
                                                                                <col style="WIDTH: 107px"></col>
                                                                            </colgroup>
                                                                            <tbody vAlign="top">
                                                                                <tr>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri">
                                                                                                <input class="xdBehavior_Boolean" title="" value="" type="checkbox" xd:xctname="CheckBox" xd:CtrlId="CTRL43" xd:binding="my:coOnSiteButOutOfService" xd:boundProp="xd:value" xd:onValue="true" xd:offValue="false">
                                                                                                <xsl:attribute name="xd:value">
                                                                                                    <xsl:value-of select="my:coOnSiteButOutOfService" />
                                                                                                </xsl:attribute>
                                                                                                <xsl:if test="my:coOnSiteButOutOfService=&quot;true&quot;">
                                                                                                    <xsl:attribute name="CHECKED">CHECKED</xsl:attribute>
                                                                                                </xsl:if>
                                                                                                </input>On site but out of service
                                                                                            </font>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri"></font>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri">
                                                                                                <input class="xdBehavior_Boolean" title="" value="" type="checkbox" xd:xctname="CheckBox" xd:CtrlId="CTRL45" xd:binding="my:coScrapped" xd:boundProp="xd:value" xd:onValue="true" xd:offValue="false">
                                                                                                <xsl:attribute name="xd:value">
                                                                                                    <xsl:value-of select="my:coScrapped" />
                                                                                                </xsl:attribute>
                                                                                                <xsl:if test="my:coScrapped=&quot;true&quot;">
                                                                                                    <xsl:attribute name="CHECKED">CHECKED</xsl:attribute>
                                                                                                </xsl:if>
                                                                                                </input>Scrapped
                                                                                            </font>
                                                                                        </div>
                                                                                    </td>
                                                                                </tr>
                                                                                <tr>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri">
                                                                                                <input class="xdBehavior_Boolean" title="" value="" type="checkbox" xd:xctname="CheckBox" xd:CtrlId="CTRL44" xd:binding="my:coInStorage" xd:boundProp="xd:value" xd:onValue="true" xd:offValue="false">
                                                                                                <xsl:attribute name="xd:value">
                                                                                                    <xsl:value-of select="my:coInStorage" />
                                                                                                </xsl:attribute>
                                                                                                <xsl:if test="my:coInStorage=&quot;true&quot;">
                                                                                                    <xsl:attribute name="CHECKED">CHECKED</xsl:attribute>
                                                                                                </xsl:if>
                                                                                                </input>In storage
                                                                                            </font>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri"></font>
                                                                                        </div>
                                                                                    </td>
                                                                                    <td style="BACKGROUND-COLOR: #e0e8f2">
                                                                                        <div>
                                                                                            <font size="2" face="Calibri">
                                                                                                <input class="xdBehavior_Boolean" title="" value="" type="checkbox" xd:xctname="CheckBox" xd:CtrlId="CTRL46" xd:binding="my:coTransfer" xd:boundProp="xd:value" xd:onValue="true" xd:offValue="false">
                                                                                                <xsl:attribute name="xd:value">
                                                                                                    <xsl:value-of select="my:coTransfer" />
                                                                                                </xsl:attribute>
                                                                                                <xsl:if test="my:coTransfer=&quot;true&quot;">
                                                                                                    <xsl:attribute name="CHECKED">CHECKED</xsl:attribute>
                                                                                                </xsl:if>
                                                                                                </input>Transfer
                                                                                            </font>
                                                                                        </div>
                                                                                    </td>
                                                                                </tr>
                                                                            </tbody>
                                                                        </table>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <font size="2" face="Calibri">Explanation:</font>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <!--<font color="#ff0000" size="1" face="Calibri">If your project has a write off this must be filled out. If it was sent somewhere please provide information.</font>-->
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; PADDING-TOP: 4px">
                                                <div>
                                                    <font size="2" face="Calibri">
                                                        <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL47" xd:binding="my:coExplanation" xd:datafmt="&quot;string&quot;,&quot;plainMultiline&quot;" style="OVERFLOW-X: auto; OVERFLOW-Y: auto; WIDTH: 100%; WORD-WRAP: break-word; WHITE-SPACE: normal; HEIGHT: 63px">
                                                            <xsl:choose>
                                                                <xsl:when test="function-available('xdFormatting:formatString')">
                                                                    <xsl:value-of select="xdFormatting:formatString(my:coExplanation,&quot;string&quot;,&quot;plainMultiline&quot;)" disable-output-escaping="yes" />
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:value-of select="my:coExplanation" disable-output-escaping="yes" />
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </span>
                                                    </font>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 649px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 104px"></col>
                                                            <col style="WIDTH: 223px"></col>
                                                            <col style="WIDTH: 24px"></col>
                                                            <col style="WIDTH: 147px"></col>
                                                            <col style="WIDTH: 151px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <span class="xdlabel">Manager:</span>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #f2f2f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <span hideFocus="1" class="xdTextBox" title="" xd:xctname="PlainText" xd:CtrlId="CTRL48" xd:binding="my:coProjectManager" style="WIDTH: 100%">
                                                                            <xsl:value-of select="my:coProjectManager" />
                                                                        </span>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <font size="2" face="Calibri">Placed Into Service Date:</font>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 10px; BORDER-TOP: #d8d8d8 1pt solid; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox xdBehavior_Formatting" title="" contentEditable="true" tabIndex="0" xd:xctname="PlainText" xd:CtrlId="CTRL60" xd:binding="my:coPlacedIntoServiceDate" xd:datafmt="&quot;date&quot;,&quot;dateFormat:Short Date;&quot;" xd:boundProp="xd:num" style="WIDTH: 100%">
                                                                                <xsl:attribute name="xd:num">
                                                                                    <xsl:value-of select="my:coPlacedIntoServiceDate" />
                                                                                </xsl:attribute>
                                                                                <xsl:choose>
                                                                                    <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                        <xsl:value-of select="xdFormatting:formatString(my:coPlacedIntoServiceDate,&quot;date&quot;,&quot;dateFormat:Short Date;&quot;)" />
                                                                                    </xsl:when>
                                                                                    <xsl:otherwise>
                                                                                        <xsl:value-of select="my:coPlacedIntoServiceDate" />
                                                                                    </xsl:otherwise>
                                                                                </xsl:choose>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <font size="3"></font>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <font size="3">
                                                        <strong>Asset</strong>
                                                    </font>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <!--<font color="#ff0000" size="1">List all equipment that will be listed on the asset registrar. This must be broken down as to how it might be replaced.</font>-->
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM-STYLE: none; BORDER-LEFT-STYLE: none; WIDTH: 648px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; BORDER-TOP-STYLE: none; TABLE-LAYOUT: fixed; BORDER-RIGHT-STYLE: none" class="xdRepeatingTable msoUcTable" title="" border="1" xd:CtrlId="CTRL24" xd:widgetIndex="0">
                                                        <colgroup>
                                                            <col style="WIDTH: 253px"></col>
                                                            <col style="WIDTH: 76px"></col>
                                                            <col style="WIDTH: 94px"></col>
                                                            <col style="WIDTH: 92px"></col>
                                                            <col style="WIDTH: 133px"></col>
                                                        </colgroup>
                                                        <tbody class="xdTableHeader">
                                                            <tr>
                                                                <td style="TEXT-ALIGN: center; BORDER-LEFT: medium none; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-RIGHT: medium none; PADDING-TOP: 1px">
                                                                    <div>New Asset Description</div>
                                                                    <div>(include serial # and model #, if necessary)</div>
                                                                </td>
                                                                <td style="TEXT-ALIGN: center; BORDER-LEFT: medium none; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-RIGHT: medium none; PADDING-TOP: 1px">New Property Number</td>
                                                                <td style="TEXT-ALIGN: center; BORDER-LEFT: medium none; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-RIGHT: medium none; PADDING-TOP: 1px">Cost With Installation</td>
                                                                <td style="TEXT-ALIGN: center; BORDER-LEFT: medium none; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-RIGHT: medium none; PADDING-TOP: 1px">Estimated Useful Life (in years)</td>
                                                                <td style="TEXT-ALIGN: center; BORDER-LEFT: medium none; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e0e8f2; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-RIGHT: medium none; PADDING-TOP: 1px">Category</td>
                                                            </tr>
                                                        </tbody>
                                                        <tbody xd:xctname="repeatingtable">
                                                            <xsl:for-each select="my:coEquipmentGroup/my:coAssetRegistrarEquipment">
                                                                <tr>
                                                                    <td style="BORDER-LEFT: medium none; PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-RIGHT: medium none; PADDING-TOP: 4px">
                                                                        <span hideFocus="1" class="xdTextBox" title="" tabIndex="0" xd:xctname="PlainText" xd:CtrlId="CTRL50" xd:binding="my:coNewAssetDescription" style="WIDTH: 100%">
                                                                            <xsl:value-of select="my:coNewAssetDescription" />
                                                                        </span>
                                                                    </td>
                                                                    <td style="BORDER-LEFT: medium none; PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-RIGHT: medium none; PADDING-TOP: 4px">
                                                                        <span hideFocus="1" class="xdTextBox xdBehavior_Formatting" title="" contentEditable="true" tabIndex="0" xd:xctname="PlainText" xd:CtrlId="CTRL51" xd:binding="my:coNewPropertyNumber" xd:datafmt="&quot;number&quot;,&quot;numDigits:0;negativeOrder:1;&quot;" xd:boundProp="xd:num" style="TEXT-ALIGN: center; WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                            <xsl:attribute name="xd:num">
                                                                                <xsl:value-of select="my:coNewPropertyNumber" />
                                                                            </xsl:attribute>
                                                                            <xsl:choose>
                                                                                <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                    <xsl:value-of select="xdFormatting:formatString(my:coNewPropertyNumber,&quot;number&quot;,&quot;numDigits:0;negativeOrder:1;&quot;)" />
                                                                                </xsl:when>
                                                                                <xsl:otherwise>
                                                                                    <xsl:value-of select="my:coNewPropertyNumber" />
                                                                                </xsl:otherwise>
                                                                            </xsl:choose>
                                                                        </span>
                                                                    </td>
                                                                    <td style="BORDER-LEFT: medium none; PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-RIGHT: medium none; PADDING-TOP: 4px">
                                                                        <span hideFocus="1" class="xdTextBox xdBehavior_Formatting" title="" contentEditable="true" tabIndex="0" xd:xctname="PlainText" xd:CtrlId="CTRL52" xd:binding="my:coCostWithInstallation" xd:datafmt="&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;" xd:boundProp="xd:num" style="WIDTH: 100%">
                                                                            <xsl:attribute name="xd:num">
                                                                                <xsl:value-of select="my:coCostWithInstallation" />
                                                                            </xsl:attribute>
                                                                            <xsl:choose>
                                                                                <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                    <xsl:value-of select="xdFormatting:formatString(my:coCostWithInstallation,&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;)" />
                                                                                </xsl:when>
                                                                                <xsl:otherwise>
                                                                                    <xsl:value-of select="my:coCostWithInstallation" />
                                                                                </xsl:otherwise>
                                                                            </xsl:choose>
                                                                        </span>
                                                                    </td>
                                                                    <td style="BORDER-LEFT: medium none; PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-RIGHT: medium none; PADDING-TOP: 4px">
                                                                        <span hideFocus="1" class="xdTextBox xdBehavior_Formatting" title="" contentEditable="true" tabIndex="0" xd:xctname="PlainText" xd:CtrlId="CTRL53" xd:binding="my:coEstimatedUsefulLife" xd:datafmt="&quot;number&quot;,&quot;numDigits:0;negativeOrder:1;&quot;" xd:boundProp="xd:num" style="TEXT-ALIGN: center; WIDTH: 100%; WHITE-SPACE: nowrap">
                                                                            <xsl:attribute name="xd:num">
                                                                                <xsl:value-of select="my:coEstimatedUsefulLife" />
                                                                            </xsl:attribute>
                                                                            <xsl:choose>
                                                                                <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                    <xsl:value-of select="xdFormatting:formatString(my:coEstimatedUsefulLife,&quot;number&quot;,&quot;numDigits:0;negativeOrder:1;&quot;)" />
                                                                                </xsl:when>
                                                                                <xsl:otherwise>
                                                                                    <xsl:value-of select="my:coEstimatedUsefulLife" />
                                                                                </xsl:otherwise>
                                                                            </xsl:choose>
                                                                        </span>
                                                                    </td>
                                                                    <td style="BORDER-LEFT: medium none; PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 1px; VERTICAL-ALIGN: top; BORDER-RIGHT: medium none; PADDING-TOP: 4px">
                                                                        <select class="xdComboBox xdBehavior_Select" title="" size="1" tabIndex="0" xd:xctname="dropdown" xd:CtrlId="CTRL57" xd:binding="my:coCategory" xd:boundProp="value" style="WIDTH: 100%">
                                                                            <xsl:attribute name="value">
                                                                                <xsl:value-of select="my:coCategory" />
                                                                            </xsl:attribute>
                                                                            <option>
                                                                                <xsl:if test="my:coCategory=&quot;&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>Select...
                                                                            </option>
                                                                            <option value="1 - Building">
                                                                                <xsl:if test="my:coCategory=&quot;1 - Building&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>1 - Building
                                                                            </option>
                                                                            <option value="2 - Land Improvements">
                                                                                <xsl:if test="my:coCategory=&quot;2 - Land Improvements&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>2 - Land Improvements
                                                                            </option>
                                                                            <option value="3 - Machinery &amp; Equip.">
                                                                                <xsl:if test="my:coCategory=&quot;3 - Machinery &amp; Equip.&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>3 - Machinery &amp; Equip.
                                                                            </option>
                                                                            <option value="4 - Office Furn./Fix/Equip.">
                                                                                <xsl:if test="my:coCategory=&quot;4 - Office Furn./Fix/Equip.&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>4 - Office Furn./Fix/Equip.
                                                                            </option>
                                                                            <option value="5 - Office Equip. w/Tech.">
                                                                                <xsl:if test="my:coCategory=&quot;5 - Office Equip. w/Tech.&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>5 - Office Equip. w/Tech.
                                                                            </option>
                                                                            <option value="6 - Software Upgrades">
                                                                                <xsl:if test="my:coCategory=&quot;6 - Software Upgrades&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>6 - Software Upgrades
                                                                            </option>
                                                                            <option value="7 - Automobile">
                                                                                <xsl:if test="my:coCategory=&quot;7 - Automobile&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>7 - Automobile
                                                                            </option>
                                                                            <option value="8 - Leasehold Improvement">
                                                                                <xsl:if test="my:coCategory=&quot;8 - Leasehold Improvement&quot;">
                                                                                    <xsl:attribute name="selected">selected</xsl:attribute>
                                                                                </xsl:if>8 - Leasehold Improvement
                                                                            </option>
                                                                        </select>
                                                                    </td>
                                                                </tr>
                                                            </xsl:for-each>
                                                        </tbody>
                                                    </table>
                                                    <div class="optionalPlaceholder" xd:xmlToEdit="coAssetRegistrarEquipment_75" tabIndex="0" xd:action="xCollection::insert" style="WIDTH: 648px">Insert item</div>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 649px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 253px"></col>
                                                            <col style="WIDTH: 78px"></col>
                                                            <col style="WIDTH: 92px"></col>
                                                            <col style="WIDTH: 96px"></col>
                                                            <col style="WIDTH: 130px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td>
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="PADDING-BOTTOM: 4px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <strong>Total Cost (amount closed):</strong>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td style="PADDING-BOTTOM: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; PADDING-TOP: 4px">
                                                                    <div>
                                                                        <font size="2" face="Calibri">
                                                                            <span hideFocus="1" class="xdTextBox  xdBehavior_Formatting" title="" contentEditable="true" xd:xctname="PlainText" xd:CtrlId="CTRL55" xd:binding="my:coTotalEquipmentCost" xd:datafmt="&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;" xd:boundProp="xd:num" style="WIDTH: 82px; HEIGHT: 19px">
                                                                                <xsl:attribute name="xd:num">
                                                                                    <xsl:value-of select="my:coTotalEquipmentCost" />
                                                                                </xsl:attribute>
                                                                                <xsl:choose>
                                                                                    <xsl:when test="function-available('xdFormatting:formatString')">
                                                                                        <xsl:value-of select="xdFormatting:formatString(my:coTotalEquipmentCost,&quot;currency&quot;,&quot;numDigits:2;negativeOrder:0;positiveOrder:0;currencyLocale:1033;&quot;)" />
                                                                                    </xsl:when>
                                                                                    <xsl:otherwise>
                                                                                        <xsl:value-of select="my:coTotalEquipmentCost" />
                                                                                    </xsl:otherwise>
                                                                                </xsl:choose>
                                                                            </span>
                                                                        </font>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td>
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                                <div>
                                                    <table style="BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: 648px; BORDER-COLLAPSE: collapse; WORD-WRAP: break-word; TABLE-LAYOUT: fixed; BORDER-TOP: medium none; BORDER-RIGHT: medium none" class="xdLayout" border="1" borderColor="buttontext">
                                                        <colgroup>
                                                            <col style="WIDTH: 249px"></col>
                                                            <col style="WIDTH: 369px"></col>
                                                            <col style="WIDTH: 30px"></col>
                                                        </colgroup>
                                                        <tbody vAlign="top">
                                                            <tr>
                                                                <td style="BORDER-BOTTOM: #f2f2f2 1pt solid">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #f2f2f2 1pt solid">
                                                                    <div>
                                                                        <!--<font color="#ff0000" size="1" face="Calibri">Total Cost must equal Amount Closed. </font>-->
                                                                    </div>
                                                                </td>
                                                                <td style="BORDER-BOTTOM: #f2f2f2 1pt solid">
                                                                    <div>
                                                                        <font size="2" face="Calibri"></font>
                                                                    </div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div>
                                                    <font size="2" face="Calibri"></font>
                                                </div>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </span>
                        </div>
                        <div />
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
                            
                            `;


                            // requestDialogId
                            //$('#' + requestDialogId + '_Parent_Content').html(html);
                            $('#' + requestDialogParentId + '_Content').html(html);



                            //var promise = thiz.loadWorkflowsAndCurrentWorkflow2(bwRequestTypeId);
                            //promise.then(function (result) {
                            //    try {

                            //        //thiz.renderWorkflowAuditTrail(requestDialogParentId, bwRequestTypeId, brTitle, title, bwBudgetRequestId, bwWorkflowId);
                            //        thiz.renderWorkflowAuditTrail(requestDialogParentId, bwRequestTypeId, brTitle, brTitle, bwBudgetRequestId, bwWorkflowId);

                            //    } catch (e) {
                            //        console.log('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                            //        displayAlertDialog('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                            //    }
                            //});

                        }

                    } catch (e) {
                        console.log('Exception in displayCloseoutInDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in displayCloseoutInDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }
            });
            //if ($('.ui-widget-overlay') && $('.ui-widget-overlay')[0] && $('.ui-widget-overlay')[0].style) {
            //    $('.ui-widget-overlay')[0].style.zIndex = 9;
            //}
            //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020

            $('#' + requestDialogId).dialog('moveToTop'); // Changed and did this 11-28-2022
            console.log('xcx213123 dialog moveToTop');

        } catch (e) {
            console.log('Exception in displayCloseoutInDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displayCloseoutInDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    hideRequestAndPrepareToRenderAlerts: function () {
        try {
            console.log('In hideRequestAndPrepareToRenderAlerts().');

            var html = '';
            //html += '<table>';
            //html += '<tr>
            //html += '<td>
            //html += '<div id="divWelcomeMessage"></div>
            //html += '<br /><br />
            //html += '</td>
            //html += '</tr>
            //html += '</table>-->
            html += '<div id="divHomePageAlert"></div>';
            document.getElementById('welcomePageMyTasksTab').innerHTML = html;
            renderAlerts();


        } catch (e) {
            console.log('Exception in hideRequestAndPrepareToRenderAlerts(): ' + e.message + ', ' + e.stack);
        }
    },

    // Display and populate an existing request.
    displayArInMobileTab: function (appWebUrl, budgetRequestId, arName, brTitle, title, bwAssignedToRaciRoleAbbreviation) {
        try {
            //// debugger;
            var thiz = this;

            try {
                // Code to hide divRowHoverDetails if it is displayed.
                $('#divRowHoverDetails').dialog('close');
            } catch (e) {
                // do nothing
            }

            if (displayTaskDetailsBeforeRequests != true) {
                //
                // Display the request immediately. This is the slider setting on the Configuration > personal/behavior page.
                //$('.bwRequest').bwRequest('displayRequestFormDialog', budgetRequestId, participantId, title);
                this.displayRequestFormForMobile(budgetRequestId, participantId, title, bwAssignedToRaciRoleAbbreviation);
            } else {

                //
                // Display the audit trail/approval trail first.
                if (!budgetRequestId && !brTitle) {
                    // This means we are coming from a .xsl, so we have to find the values.
                    budgetRequestId = $('span[xd\\:binding = "my:BudgetRequestId"]')[0].innerHTML; // my:BudgetRequestId
                    appWebUrl = this.options.operationUriPrefix; //globalUrlPrefix + globalUrlForWebServices;
                    brTitle = $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML; // my:Project_Name
                    title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML; // eg: BR-160001
                    //// debugger;
                    // This shows the AR in a jquery dialog window.
                    try {
                        $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                        $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                        $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                        // debugger; // xcx4

                        alert('Displaying ArDialog. xcx23425345-3-4');

                        $("#ArDialog").dialog({
                            modal: true,
                            resizable: false,
                            closeText: "Cancel",
                            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                            //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                            title: brTitle + " (" + title + ")",
                            width: "720px",
                            dialogClass: "no-close", // No close button in the upper right corner.
                            hide: false, // This means when hiding just disappear with no effects.
                            open: function (event, ui) {
                                $('.ui-widget-overlay').bind('click', function () {
                                    $("#ArDialog").dialog('close');
                                });
                                //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                ////$('#invitationLink2').text(invitationUrl);
                                //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
                            },
                            close: function (event, ui) {
                                try {
                                    displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-7');
                                } catch (e) {

                                }
                            }
                        });
                        $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                        //$('#spanArDialogTitle').html(brTitle + ' (' + title + ')');
                        var titleHtml = '';
                        titleHtml += '☇ ☈';
                        titleHtml += '&nbsp;&nbsp;&nbsp;&nbsp;x11';
                        titleHtml += brTitle + ' (' + title + ')';
                        $('#spanArDialogTitle').html(titleHtml); //brTitle + ' (' + title + ')');

                        var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                        $.ajax({
                            url: operationUri,
                            method: "GET",
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (wtItems) {
                                //console.log('wtItems: ' + JSON.stringify(wtItems));
                                if (wtItems.d.results.length == 0) {
                                    // Todd: There were no results, so put some message on the screen to indicate that.?

                                    //html = '';
                                    //                html += '<table>';
                                    //                html += '   <tr>';
                                    //                html += '       <td>&nbsp;</td>';
                                    //                html += '   </tr>';
                                    //                html += '   <tr>';
                                    //                html += '       <td>';
                                    ////html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                    //html += '           <a href="javascript:$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' +budgetRequestId + '\', \'' + participantId + '\', \'' +title + '\');">Click here to view the Budget Request</a>';
                                    //html += '       </td>';
                                    //                html += '   </tr>';
                                    //html += '</table>';

                                    //$('#spanArDialogViewBudgetRequestLink').html(html);


                                } else {
                                    // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                    var userIds = [];
                                    userIds.push(wtItems.d.results[0].bwAuthorId);
                                    for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                        userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                    }
                                    var UserFriendlyNames = [];
                                    var dataRetrievalCount = 0;
                                    for (var uids = 0; uids < userIds.length; uids++) {
                                        // Ok now we have to make a deferred call to get back the Friendly Names.
                                        GetUserDetails[uids] = $.Deferred();
                                        GetUserDetails[uids]
                                            .done(function (data) {
                                                dataRetrievalCount += 1; // Increment the count!
                                                // Add the results to the array.
                                                UserFriendlyNames.push(data);
                                                // Check if all of the data has come back yet.
                                                if (dataRetrievalCount == userIds.length) {
                                                    // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                    var html = '';
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                    var authorName = '';
                                                    for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                        if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                    }
                                                    html += '           <strike><span style="cursor:help;">xcx10' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';
                                                    for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                        // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                        html += '<table>';
                                                        html += '   <tr>';
                                                        //html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                        // debugger;
                                                        if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                            html += '       <strike>';
                                                            html += '<span style="cursor:help;">xcx11' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role1]</span>';
                                                            html += '       </strike>';
                                                            html += '       </td>';
                                                        } else {
                                                            var assignedToName = '';
                                                            for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                            }
                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Created) + '">';
                                                            html += '<span style="cursor:help;">xcx12' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + '[raci role2]</span>';
                                                            html += '       </td>';
                                                        }
                                                        //html += '       </td>';
                                                        html += '   </tr>';
                                                        html += '</table>';
                                                    }

                                                    $('#spanArDialogTaskAuditTrail').html(html);

                                                    html = '';
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td>&nbsp;</td>';
                                                    html += '   </tr>';
                                                    html += '   <tr>';
                                                    html += '       <td>';
                                                    //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                    // debugger;
                                                    html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';

                                                    $('#spanArDialogViewBudgetRequestLink').html(html);

                                                    $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                }
                                            })
                                            .fail(function (data) {
                                                handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                            });
                                        getUserDetails(userIds[uids], appWebUrl, uids);
                                    }
                                }
                            },
                            error: function (error) {
                                handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '1:' + errorCode + ', ' + errorMessage);
                            }
                        });
                    } catch (e) {
                        handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '2:' + e.message);
                    }
                } else if (!appWebUrl && !budgetRequestId && !arName && !title) {
                    //displayAlertDialog('This means we are coming from the burn rate report.');
                    // This means we are coming from the burn rate report.
                    // First we have to get the budgetRequestId from the Title (eg: BR-00001).
                    var operationUri = webserviceurl + "/getbudgetrequestidfromtitle/" + brTitle;
                    $.ajax({
                        url: operationUri,
                        method: "GET",
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {

                            //displayAlertDialog(data);

                            budgetRequestId = data[0].bwBudgetRequestId;
                            appWebUrl = globalUrlPrefix + globalUrlForWebServices;
                            brTitle = data[0].ProjectTitle; // my:Project_Name
                            title = data[0].Title; // eg: BR-160001



                            // This shows the AR in a jquery dialog window.
                            try {
                                $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                                $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                                // debugger; // xcx5

                                alert('Displaying ArDialog. xcx23425345-3-5');

                                $("#ArDialog").dialog({
                                    modal: true,
                                    resizable: false,
                                    closeText: "Cancel",
                                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                    //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                                    title: brTitle + " (" + title + ")",
                                    width: "720px",
                                    dialogClass: "no-close", // No close button in the upper right corner.
                                    hide: false, // This means when hiding just disappear with no effects.
                                    open: function (event, ui) {
                                        $('.ui-widget-overlay').bind('click', function () {
                                            $("#ArDialog").dialog('close');
                                        });
                                        //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                        ////$('#invitationLink2').text(invitationUrl);
                                        //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                        //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
                                    },
                                    close: function (event, ui) {
                                        try {
                                            displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-8');
                                        } catch (e) {

                                        }
                                    }
                                    //buttons: {
                                    //    "Close": function () {
                                    //        $(this).dialog("close");
                                    //    }
                                    //}
                                });
                                $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                $('#spanArDialogTitle').html(brTitle + ' (' + title + ')x1');

                                var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                                $.ajax({
                                    url: operationUri,
                                    method: "GET",
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (wtItems) {
                                        if (wtItems.d.results.length == 0) {
                                            // Todd: There were no results, so put some message on the screen to indicate that.?
                                        } else {
                                            // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                            var userIds = [];
                                            userIds.push(wtItems.d.results[0].bwAuthorId);
                                            for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                                userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                            }
                                            var UserFriendlyNames = [];
                                            var dataRetrievalCount = 0;
                                            for (var uids = 0; uids < userIds.length; uids++) {
                                                // Ok now we have to make a deferred call to get back the Friendly Names.
                                                GetUserDetails[uids] = $.Deferred();
                                                GetUserDetails[uids]
                                                    .done(function (data) {
                                                        dataRetrievalCount += 1; // Increment the count!
                                                        // Add the results to the array.
                                                        UserFriendlyNames.push(data);
                                                        // Check if all of the data has come back yet.
                                                        if (dataRetrievalCount == userIds.length) {
                                                            // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                            var html = '';
                                                            html += '<table>';
                                                            html += '   <tr>';
                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                            var authorName = '';
                                                            for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                            }
                                                            html += '           <strike><span style="cursor:help;">xcx13' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '[raci role 3]</span></strike>';
                                                            html += '       </td>';
                                                            html += '   </tr>';
                                                            html += '</table>';
                                                            for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                                // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                                html += '<table>';
                                                                html += '   <tr>';
                                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                                if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                                    html += '       <strike>';
                                                                    html += '<span style="cursor:help;">xcx14' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role 4]</span>';
                                                                    html += '       </strike>';
                                                                } else {
                                                                    var assignedToName = '';
                                                                    for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                        if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                                    }
                                                                    html += 'xcx15' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName;
                                                                }
                                                                html += '       </td>';
                                                                html += '   </tr>';
                                                                html += '</table>';
                                                            }


                                                            $('#spanArDialogTaskAuditTrail').html(html);

                                                            html = '';
                                                            html += '<table>';
                                                            html += '   <tr>';
                                                            html += '       <td>&nbsp;</td>';
                                                            html += '   </tr>';
                                                            html += '   <tr>';
                                                            html += '       <td>';
                                                            //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                            // debugger;
                                                            html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                            html += '       </td>';
                                                            html += '   </tr>';
                                                            html += '</table>';
                                                            $('#spanArDialogViewBudgetRequestLink').html(html);

                                                            $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                        }
                                                    })
                                                    .fail(function (data) {
                                                        handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                                    });
                                                getUserDetails(userIds[uids], appWebUrl, uids);
                                            }
                                        }
                                    },
                                    error: function (error) {
                                        handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '1:' + errorCode + ', ' + errorMessage);
                                    }
                                });
                            } catch (e) {
                                handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '2:' + e.message);
                            }
                        },
                        error: function (error) {
                            handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '1:' + errorCode + ', ' + errorMessage);
                        }
                    });
                } else {
                    // Display the thing. We have enough info already!
                    // This shows the AR in a jquery dialog window.
                    try {
                        $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                        $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                        $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                        // debugger; // xcx6

                        alert('Displaying ArDialog. xcx23425345-3-6');

                        $("#ArDialog").dialog({
                            modal: true,
                            resizable: false,
                            closeText: "Cancel",
                            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                            //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                            title: brTitle + " (" + title + ")",
                            width: "720px",
                            dialogClass: "no-close", // No close button in the upper right corner.
                            hide: false, // This means when hiding just disappear with no effects.
                            open: function (event, ui) {
                                $('.ui-widget-overlay').bind('click', function () {
                                    $("#ArDialog").dialog('close');
                                });
                                //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                ////$('#invitationLink2').text(invitationUrl);
                                //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();








                                //// First, let's create our drawing surface out of an existing SVG element
                                //// If you want to create a new surface just provide dimensions
                                //// like s = Snap(800, 600);
                                //var s = Snap("#svg");
                                //// Let's create a big circle in the middle:
                                //var bigCircle = s.circle(150, 150, 100);






                            },
                            close: function (event, ui) {
                                try {
                                    displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-9');
                                } catch (e) {

                                }
                            }
                            //buttons: {
                            //    "Close": function () {
                            //        $(this).dialog("close");
                            //    }
                            //}
                        });
                        $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                        $('#spanArDialogTitle').html(brTitle + ' (' + title + ')x2');

                        var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                        $.ajax({
                            url: operationUri,
                            method: "GET",
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (wtItems) {
                                if (wtItems.d.results.length == 0) {
                                    // Todd: There were no results, so put some message on the screen to indicate that.?



                                    //// debugger;
                                    html = '';
                                    html += '<table>';
                                    html += '   <tr>';
                                    html += '       <td>&nbsp;</td>';
                                    html += '   </tr>';
                                    html += '   <tr>';
                                    html += '       <td>';
                                    //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                    // debugger;
                                    html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                    html += '       </td>';
                                    html += '   </tr>';
                                    html += '</table>';

                                    $('#spanArDialogViewBudgetRequestLink').html(html);



                                } else {
                                    // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                    var userIds = [];
                                    userIds.push(wtItems.d.results[0].bwAuthorId);
                                    for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                        userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                    }
                                    var UserFriendlyNames = [];
                                    var dataRetrievalCount = 0;
                                    for (var uids = 0; uids < userIds.length; uids++) {
                                        // Ok now we have to make a deferred call to get back the Friendly Names.
                                        GetUserDetails[uids] = $.Deferred();
                                        GetUserDetails[uids]
                                            .done(function (data) {
                                                dataRetrievalCount += 1; // Increment the count!
                                                // Add the results to the array.
                                                UserFriendlyNames.push(data);
                                                // Check if all of the data has come back yet.
                                                if (dataRetrievalCount == userIds.length) {
                                                    // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                    var html = '';
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                    var authorName = '';
                                                    for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                        if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                    }
                                                    html += '           <strike><span style="cursor:help;">xcx16' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';
                                                    for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                        // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                        html += '<table>';
                                                        html += '   <tr>';
                                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                        if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                            html += '       <strike>';
                                                            html += '<span style="cursor:help;">xcx17' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x</span>';
                                                            html += '       </strike>';
                                                        } else {
                                                            var assignedToName = '';
                                                            for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                            }
                                                            html += 'xcx18' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x';
                                                        }
                                                        html += '       </td>';
                                                        html += '   </tr>';
                                                        html += '</table>';
                                                    }

                                                    $('#spanArDialogTaskAuditTrail').html(html);

                                                    html = '';
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td>&nbsp;</td>';
                                                    html += '   </tr>';
                                                    html += '   <tr>';
                                                    html += '       <td>';
                                                    //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                    // debugger;
                                                    html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';

                                                    $('#spanArDialogViewBudgetRequestLink').html(html);

                                                    $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                }
                                            })
                                            .fail(function (data) {
                                                handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                            });
                                        getUserDetails(userIds[uids], appWebUrl, uids);
                                    }
                                }
                            },
                            error: function (error) {
                                handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '1:' + errorCode + ', ' + errorMessage);
                            }
                        });
                    } catch (e) {
                        handleExceptionWithAlert('Error in bwRequest.displayArInMobileTab()', '2:' + e.message);
                    }
                }
            }
        } catch (e) {
            console.log('Exception in displayArInMobileTab(): ' + e.message + ', ' + e.stack);
        }
    },


    pinRequest: function (bwBudgetRequestId, requestDialogId, pinned) { // Parameter pinned is true or false. true if we are pinning, false if we are un-pinning.
        try {
            console.log('In bwRequest.js.pinRequest().');
            //alert('In bwRequest.js.pinRequest().');
            var thiz = this;

            if (pinned != true) {
                //alert('Un-pinning the request...'); // There is a problem with method "ShowActivitySpinner()". It doesn't update the displayed text correctly...
                ShowActivitySpinner('Un-pinning the request...');
            } else {
                //alert('Pinning the request...');
                ShowActivitySpinner('Pinning the request...');
            }

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                Pinned: pinned, // Parameter pinned is true or false. true if we are pinning, false if we are un-pinning.
                bwParticipantId: participantId,
                bwBudgetRequestId: bwBudgetRequestId,
                bwWorkflowAppId: workflowAppId
            };
            var operationUri = webserviceurl + "/pinrequest";
            $.ajax({
                url: operationUri,
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    try {
                        HideActivitySpinner();

                        console.log('In bwRequest.js.pinRequest(). Calling window.scrollTo(0, 0).');
                        window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.	\\192.168.0.14\www\budgetworkflow.com\public\backendwidgets\bwActiveMenu_Admin.js	1212	13


                        if (data.status != 'SUCCESS') {

                            console.log(data.message);
                            displayAlertDialog(data.message);

                        } else {

                            // Do nothing, no feedback needed. The user has successfully pinned/unpinned the request.
                            var msg;
                            if (pinned == true) {

                                msg = 'The request has been Pinned.';

                                //
                                // We are no longer using an array, so we have to find the request. We are storing the entire request JSON in PINNED_REQUESTS. 9-19-2023.
                                //

                                var activeRequests = $('.bwAuthentication:first').bwAuthentication('option', 'ACTIVE_REQUESTS');

                                var request;
                                for (var i = 0; i < activeRequests.length; i++) {
                                    if (activeRequests[i].bwBudgetRequestId == bwBudgetRequestId) {
                                        request = activeRequests[i];
                                        break;
                                    }
                                }
                                if (!request) {

                                    console.log('In bwRequest.js.pinRequest(). We tried to find the request locally, but we don\'t have it yet... so asking the server for it. This was a half-hearted attempt to find it, I am sure we could do better someday.');

                                    var data = {
                                        bwParticipantId_LoggedIn: participantId,
                                        bwActiveStateIdentifier: activeStateIdentifier,
                                        bwWorkflowAppId_LoggedIn: workflowAppId,

                                        bwWorkflowAppId: workflowAppId,
                                        bwBudgetRequestId: bwBudgetRequestId,
                                        isActive: true,
                                        bwRequestType: 'ALL'
                                    };

                                    $.ajax({
                                        url: webserviceurl + '/getsinglebudgetrequest',
                                        type: "POST",
                                        data: data,
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        error: function (jqXHR, settings, errorThrown) {

                                            $('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId); // Make sure the dialog is closed.

                                            if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                                                console.log('HTTP 401 "Unauthorized".');
                                                console.log('HTTP 401 "Unauthorized".');
                                                console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                                                //alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                                                console.log('HTTP 401 "Unauthorized".');
                                                console.log('HTTP 401 "Unauthorized".');

                                            } else {
                                                console.log('Error in bwRequest.js.pinRequest():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                                                alert('Error in bwRequest.js.pinRequest():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                                            }

                                        },
                                        success: function (result) {
                                            try {

                                                console.log('In bwRequest.js.pinRequest.getsinglebudgetrequest.success().');

                                                if (result.status != 'SUCCESS') {

                                                    console.log('Error in bwRequest.js.pinRequest.getsinglebudgetrequest.success(): ' + JSON.stringify(result));
                                                    displayAlertDialog('Error in bwRequest.js.pinRequest.getsinglebudgetrequest.success(): ' + JSON.stringify(result));

                                                } else {

                                                    request = result.results.BudgetRequest;

                                                    if (!$('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS')) {

                                                        // We need to initialize the array. WE ARE NO LONGER USING AN ARRAY. 9-19-2023.
                                                        var array = [];
                                                        array.push(request);
                                                        $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', array);

                                                    } else {

                                                        $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS').push(request);

                                                    }

                                                    // Change pin.png to unpin.png.
                                                    if (document.getElementById(requestDialogId)) {
                                                        var requestDialog = document.getElementById(requestDialogId).parentNode
                                                        var pinButton = $(requestDialog).find('.pinButton');
                                                        var html = '<div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                                                        $(pinButton).replaceWith(html);
                                                    }

                                                    // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
                                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', '', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');

                                                    //// Update the drawer title count: "Pinned (xx)"
                                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');



                                                }

                                            } catch (e) {
                                                console.log('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
                                                displayAlertDialog('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
                                            }
                                        }
                                    });

                                } else {

                                    if (!$('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS')) {

                                        // We need to initialize the array. WE ARE NO LONGER USING AN ARRAY. 9-19-2023.
                                        var array = [];
                                        array.push(request);
                                        $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', array);

                                    } else {

                                        $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS').push(request);

                                    }

                                    // Change pin.png to unpin.png.
                                    if (document.getElementById(requestDialogId)) {
                                        var requestDialog = document.getElementById(requestDialogId).parentNode
                                        var pinButton = $(requestDialog).find('.pinButton');
                                        var html = '<div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                                        $(pinButton).replaceWith(html);
                                    }

                                    // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', '', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');

                                    //// Update the drawer title count: "Pinned (xx)"
                                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');

                                }

                            } else if (pinned == false) {




                                msg = 'The request has been Un-Pinned.';

                                var pinnedRequests = $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS');

                                var index;
                                for (var i = 0; i < pinnedRequests.length; i++) {
                                    if (pinnedRequests[i].bwBudgetRequestId == bwBudgetRequestId) {
                                        index = i;
                                        break;
                                    }
                                }
                                pinnedRequests.splice(index, 1);

                                $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', pinnedRequests);


                                //var index = pinnedRequests.indexOf(bwBudgetRequestId);
                                //pinnedRequests.splice(index, 1);
                                //$('.bwAuthentication:first').bwAuthentication({
                                //    'PinnedRequests': pinnedRequests
                                //});

                                // Change unpin.png to pin.png.
                                if (document.getElementById(requestDialogId)) {
                                    var requestDialog = document.getElementById(requestDialogId).parentNode
                                    var pinButton = $(requestDialog).find('.pinButton');
                                    var html = '<div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                                    $(pinButton).replaceWith(html);
                                }

                                // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
                                // $('.bwExecutiveSummariesCarousel2').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
                                $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');


                                //// Update the drawer title count: "Pinned (xx)"
                                //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');


                            } else {
                                msg = 'Error: Unexpected response.';
                            }
                            console.log(msg);
                            //displayAlertDialog(msg);

                            $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');

                        }
                    } catch (e) {
                        HideActivitySpinner();
                        console.log('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    HideActivitySpinner();
                    console.log('Error in bwRequest.js.pinRequest./pinrequest(): ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.pinRequest./pinrequest(): ' + errorMessage);
                }
            });

        } catch (e) {
            HideActivitySpinner();
            console.log('Exception in bwRequest.js.pinRequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.pinRequest(): ' + e.message + ', ' + e.stack);
        }
    },

    addToPriorityGrup: function (bwBudgetRequestId, requestDialogId, pinned) {
        try {
            console.log('In bwRequest.js.addToPriorityGrup().');
            alert('In bwRequest.js.addToPriorityGrup(). This functionality is incomplete. Coming soon!');
            var thiz = this;

            //if (pinned != true) {
            //    //alert('Un-pinning the request...'); // There is a problem with method "ShowActivitySpinner()". It doesn't update the displayed text correctly...
            //    ShowActivitySpinner('Un-pinning the request...');
            //} else {
            //    //alert('Pinning the request...');
            //    ShowActivitySpinner('Pinning the request...');
            //}

            //var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            //var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            //var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            //data = {
            //    bwParticipantId_LoggedIn: participantId,
            //    bwActiveStateIdentifier: activeStateIdentifier,
            //    bwWorkflowAppId_LoggedIn: workflowAppId,

            //    Pinned: pinned, // Parameter pinned is true or false. true if we are pinning, false if we are un-pinning.
            //    bwParticipantId: participantId,
            //    bwBudgetRequestId: bwBudgetRequestId,
            //    bwWorkflowAppId: workflowAppId
            //};
            //var operationUri = webserviceurl + "/pinrequest";
            //$.ajax({
            //    url: operationUri,
            //    type: "POST",
            //    data: data,
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (data) {
            //        try {
            //            HideActivitySpinner();

            //            console.log('In bwRequest.js.pinRequest(). Calling window.scrollTo(0, 0).');
            //            window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.	\\192.168.0.14\www\budgetworkflow.com\public\backendwidgets\bwActiveMenu_Admin.js	1212	13


            //            if (data.status != 'SUCCESS') {

            //                console.log(data.message);
            //                displayAlertDialog(data.message);

            //            } else {

            //                // Do nothing, no feedback needed. The user has successfully pinned/unpinned the request.
            //                var msg;
            //                if (pinned == true) {

            //                    msg = 'The request has been Pinned.';

            //                    //
            //                    // We are no longer using an array, so we have to find the request. We are storing the entire request JSON in PINNED_REQUESTS. 9-19-2023.
            //                    //

            //                    var activeRequests = $('.bwAuthentication:first').bwAuthentication('option', 'ACTIVE_REQUESTS');

            //                    var request;
            //                    for (var i = 0; i < activeRequests.length; i++) {
            //                        if (activeRequests[i].bwBudgetRequestId == bwBudgetRequestId) {
            //                            request = activeRequests[i];
            //                            break;
            //                        }
            //                    }
            //                    if (!request) {

            //                        console.log('In bwRequest.js.pinRequest(). We tried to find the request locally, but we don\'t have it yet... so asking the server for it. This was a half-hearted attempt to find it, I am sure we could do better someday.');

            //                        var data = {
            //                            bwParticipantId_LoggedIn: participantId,
            //                            bwActiveStateIdentifier: activeStateIdentifier,
            //                            bwWorkflowAppId_LoggedIn: workflowAppId,

            //                            bwWorkflowAppId: workflowAppId,
            //                            bwBudgetRequestId: bwBudgetRequestId,
            //                            isActive: true,
            //                            bwRequestType: 'ALL'
            //                        };

            //                        $.ajax({
            //                            url: webserviceurl + '/getsinglebudgetrequest',
            //                            type: "POST",
            //                            data: data,
            //                            headers: {
            //                                "Accept": "application/json; odata=verbose"
            //                            },
            //                            error: function (jqXHR, settings, errorThrown) {

            //                                $('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId); // Make sure the dialog is closed.

            //                                if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

            //                                    console.log('HTTP 401 "Unauthorized".');
            //                                    console.log('HTTP 401 "Unauthorized".');
            //                                    console.log('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
            //                                    //alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
            //                                    console.log('HTTP 401 "Unauthorized".');
            //                                    console.log('HTTP 401 "Unauthorized".');

            //                                } else {
            //                                    console.log('Error in bwRequest.js.pinRequest():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
            //                                    alert('Error in bwRequest.js.pinRequest():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
            //                                }

            //                            },
            //                            success: function (result) {
            //                                try {

            //                                    console.log('In bwRequest.js.pinRequest.getsinglebudgetrequest.success().');

            //                                    if (result.status != 'SUCCESS') {

            //                                        console.log('Error in bwRequest.js.pinRequest.getsinglebudgetrequest.success(): ' + JSON.stringify(result));
            //                                        displayAlertDialog('Error in bwRequest.js.pinRequest.getsinglebudgetrequest.success(): ' + JSON.stringify(result));

            //                                    } else {

            //                                        request = result.results.BudgetRequest;

            //                                        if (!$('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS')) {

            //                                            // We need to initialize the array. WE ARE NO LONGER USING AN ARRAY. 9-19-2023.
            //                                            var array = [];
            //                                            array.push(request);
            //                                            $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', array);

            //                                        } else {

            //                                            $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS').push(request);

            //                                        }

            //                                        // Change pin.png to unpin.png.
            //                                        if (document.getElementById(requestDialogId)) {
            //                                            var requestDialog = document.getElementById(requestDialogId).parentNode
            //                                            var pinButton = $(requestDialog).find('.pinButton');
            //                                            var html = '<div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
            //                                            $(pinButton).replaceWith(html);
            //                                        }

            //                                        // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
            //                                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', '', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                                        $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                                        $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');

            //                                        //// Update the drawer title count: "Pinned (xx)"
            //                                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');



            //                                    }

            //                                } catch (e) {
            //                                    console.log('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
            //                                    displayAlertDialog('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
            //                                }
            //                            }
            //                        });

            //                    } else {

            //                        if (!$('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS')) {

            //                            // We need to initialize the array. WE ARE NO LONGER USING AN ARRAY. 9-19-2023.
            //                            var array = [];
            //                            array.push(request);
            //                            $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', array);

            //                        } else {

            //                            $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS').push(request);

            //                        }

            //                        // Change pin.png to unpin.png.
            //                        if (document.getElementById(requestDialogId)) {
            //                            var requestDialog = document.getElementById(requestDialogId).parentNode
            //                            var pinButton = $(requestDialog).find('.pinButton');
            //                            var html = '<div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
            //                            $(pinButton).replaceWith(html);
            //                        }

            //                        // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
            //                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', '', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                        $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                        $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');

            //                        //// Update the drawer title count: "Pinned (xx)"
            //                        //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');

            //                    }

            //                } else if (pinned == false) {




            //                    msg = 'The request has been Un-Pinned.';

            //                    var pinnedRequests = $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS');

            //                    var index;
            //                    for (var i = 0; i < pinnedRequests.length; i++) {
            //                        if (pinnedRequests[i].bwBudgetRequestId == bwBudgetRequestId) {
            //                            index = i;
            //                            break;
            //                        }
            //                    }
            //                    pinnedRequests.splice(index, 1);

            //                    $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS', pinnedRequests);


            //                    //var index = pinnedRequests.indexOf(bwBudgetRequestId);
            //                    //pinnedRequests.splice(index, 1);
            //                    //$('.bwAuthentication:first').bwAuthentication({
            //                    //    'PinnedRequests': pinnedRequests
            //                    //});

            //                    // Change unpin.png to pin.png.
            //                    if (document.getElementById(requestDialogId)) {
            //                        var requestDialog = document.getElementById(requestDialogId).parentNode
            //                        var pinButton = $(requestDialog).find('.pinButton');
            //                        var html = '<div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + bwBudgetRequestId + '\', \'' + requestDialogId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
            //                        $(pinButton).replaceWith(html);
            //                    }

            //                    // Refresh the "Pinned" section in the accordion. <<<<<<<<<<<<<<<<<<<<<<<<<
            //                    // $('.bwExecutiveSummariesCarousel2').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');
            //                    $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('expandOrCollapseAlertsSection', 'functionalAreaRow_bwExecutiveSummariesCarousel2_6', 'alertSectionImage_bwExecutiveSummariesCarousel2_6', 'alertSectionRow_bwExecutiveSummariesCarousel2_6');


            //                    //// Update the drawer title count: "Pinned (xx)"
            //                    //$('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');


            //                } else {
            //                    msg = 'Error: Unexpected response.';
            //                }
            //                console.log(msg);
            //                //displayAlertDialog(msg);

            //                $('.bwExecutiveSummariesCarousel2:first').bwExecutiveSummariesCarousel2('updatePinnedRequests');

            //            }
            //        } catch (e) {
            //            HideActivitySpinner();
            //            console.log('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
            //            displayAlertDialog('Exception in bwRequest.js.pinRequest():2: ' + e.message + ', ' + e.stack);
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        HideActivitySpinner();
            //        console.log('Error in bwRequest.js.pinRequest./pinrequest(): ' + errorMessage);
            //        displayAlertDialog('Error in bwRequest.js.pinRequest./pinrequest(): ' + errorMessage);
            //    }
            //});

        } catch (e) {
            //HideActivitySpinner();
            console.log('Exception in bwRequest.js.addToPriorityGrup(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.addToPriorityGrup(): ' + e.message + ', ' + e.stack);
        }
    },

    cmdDeleteBudgetRequest: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.cmdDeleteBudgetRequest().');
            //alert('In bwRequest.js.cmdDeleteBudgetRequest().');
            var thiz = this;

            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            //var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            //var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');
            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            $("#divWorkingOnItDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                title: 'Working on it...',
                width: "800",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false//, // This means when hiding just disappear with no effects.
                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
            });
            $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            //var additionalEmailMessage;
            //var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
            //if (_checked == true) {
            //    additionalEmailMessage = document.getElementById('txtDeleteABudgetRequestDialogEmailMessage').textContent;
            //}

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwBudgetRequestId: bwBudgetRequestId,
                bwWorkflowAppId: workflowAppId,
                participantId: participantId//,
                //participantEmail: participantEmail,
                //participantFriendlyName: participantFriendlyName,

                //AdditionalEmailMessage: additionalEmailMessage
            };
            var operationUri = webserviceurl + "/putthisrequestinthetrashbin";
            $.ajax({
                url: operationUri,
                type: 'POST',
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (results) {
                    try {

                        displayAlertDialog(results.message);

                        if (results.status != 'SUCCESS') {

                            // It failed to delete.

                            $('#divWorkingOnItDialog').dialog('close'); // Close the "Working on it..." dialog.

                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close'); // Close the request dialog automatically after the user clicks the "Delete" button.

                            displayAlertDialog(results.message);

                        } else {

                            $('#divWorkingOnItDialog').dialog('close'); // Close the "Working on it..." dialog.

                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('option', 'bwForceClose', true); // added 4-4-2023.

                            setTimeout(function () {

                                $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close'); // Close the request dialog automatically after the user clicks the "Delete" button. Note set bwForceClose to true, above.

                                $('#divAlertDialog').dialog('close'); // Close the dialog automatically.

                            }, 1500);

                            console.log('Preparing to hide the deleted executive summary. bwBudgetRequestId: ' + bwBudgetRequestId + '. xcx2353264');

                            // Find any executive summaries for this request, and hide them....
                            var allExecutiveSummaries = $('.executiveSummaryInCarousel');
                            if (allExecutiveSummaries && allExecutiveSummaries.length && (allExecutiveSummaries.length > 0)) {
                                for (var i = 0; i < allExecutiveSummaries.length; i++) {
                                    if ($(allExecutiveSummaries[i]).attr('bwbudgetrequestid') == bwBudgetRequestId) {
                                        $(allExecutiveSummaries[i]).attr('style', 'display:none;')
                                    }
                                }
                            }

                        }

                    } catch (e) {
                        console.log('Exception in bwRequest.js.cmdDeleteBudgetRequest():2: ' + e.message + ', ' + e.stack);
                        alert('Exception in bwRequest.js.cmdDeleteBudgetRequest():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    try {
                        //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                        alert('Error in bwRequest.js.cmdDeleteBudgetRequest(): ' + errorMessage);
                    } catch (e) {
                        console.log('Error in bwRequest.js.cmdDeleteBudgetRequest():3: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Error in bwRequest.js.cmdDeleteBudgetRequest():3: ' + e.message + ', ' + e.stack);
                    }
                }
            });
        } catch (e) {
            console.log('Exception in bwRequest.js.cmdDeleteBudgetRequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.cmdDeleteBudgetRequest(): ' + e.message + ', ' + e.stack);
            alert('Exception in bwRequest.js.cmdDeleteBudgetRequest(): ' + e.message + ', ' + e.stack);
        }
    },

    cmdDisplayDeleteBudgetRequestDialog: function (bwBudgetRequestId, title) {
        try {
            console.log('In bwRequest.js.cmdDisplayDeleteBudgetRequestDialog().');
            //alert('In bwRequest.js.cmdDisplayDeleteBudgetRequestDialog(). xcx111. bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
            data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwBudgetRequestId: bwBudgetRequestId,
                bwWorkflowAppId: workflowAppId
            };
            var operationUri = webserviceurl + "/bwworkflow/itemizebudgetrequestdependencies";
            $.ajax({
                url: operationUri,
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    try {


                        debugger;

                        // // This sends too much info likely... but doing it to troubleshoot for the moment. Come back and look at it someday 4-12-2024.
                        // CompletedTasksForBudgetRequest: wtcResult,
                        // IncompleteTasksForBudgetRequest: wtiResult,
                        // Supplementals: null,
                        // CompletedTasksForSupplementals: null,
                        // IncompleteTasksForSupplementals: null

                        //
                        //
                        // This data has been displayed to the user. WE ALSO HAVE TO PASS IT TO cmdDeleteBudgetRequest() BECAUSE WE CAN ONLY DELETE THE REQUEST AS LONG AS NONE OF THE OBJECTS HAS BEEN CHANGED.
                        //    For example, if a Task has been updated in the middle of this process, we need to tell the user deleting the request, "The state of the request has changed. In order to delete this request, please begin again.".
                        //
                        // IS THIS RIGHT???????????? 4-12-2024.
                        //
                        //






                        if (data.status != 'SUCCESS') {

                            displayAlertDialog(JSON.stringify(data));

                        } else {

                            $("#DeleteABudgetRequestDialog").dialog({
                                modal: true,
                                resizable: false,
                                closeText: "Cancel",
                                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                title: 'Delete ' + bwBudgetRequestId,
                                width: "570px",
                                dialogClass: "no-close", // No close button in the upper right corner.
                                hide: false, // This means when hiding just disappear with no effects.
                                buttons: {
                                    "Delete Budget Request": {
                                        text: 'Delete Budget Request, supplementals and tasks',
                                        id: 'btnDeleteABudgetRequest',
                                        disabled: 'true',
                                        click: function () {

                                            console.log('In bwRequest.js.cmdDisplayDeleteBudgetRequestDialog.DeleteABudgetRequestDialog.click(). Calling cmdDeleteBudgetRequest(). bwBudgetRequestId: ' + bwBudgetRequestId);
                                            //alert('In bwRequest.js.cmdDisplayDeleteBudgetRequestDialog.DeleteABudgetRequestDialog.click(). Calling cmdDeleteBudgetRequest(). bwBudgetRequestId: ' + bwBudgetRequestId);
                                            thiz.cmdDeleteBudgetRequest(bwBudgetRequestId);

                                            $(this).dialog("close");

                                        }
                                    },
                                    "Cancel": function () {
                                        $(this).dialog("close");
                                    }
                                },
                                open: function () {
                                    try {

                                        var html = '';

                                        if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
                                            html += 'This Request has no dependencies, and can be deleted immediately.';
                                        } else {
                                            html += 'When this Request is deleted, the following will also be deleted:';
                                        }
                                        if (data.NumberOfIncompleteTasksForBudgetRequest > 0 || data.NumberOfCompletedTasksForBudgetRequest > 0) {
                                            html += '<ul>';
                                            if (data.NumberOfIncompleteTasksForBudgetRequest > 0) {
                                                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForBudgetRequest + ' incomplete Task(s)</span></li>';
                                            }
                                            if (data.NumberOfCompletedTasksForBudgetRequest > 0) {
                                                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForBudgetRequest + ' completed Task(s)</span></li>';
                                            }
                                            html += '</ul>';
                                        }
                                        if (data.NumberOfSupplementals > 0) {
                                            html += 'Also, ' + data.NumberOfSupplementals + ' Supplemental Request(s) will be deleted, along with the following:';
                                            html += '<ul>';
                                            if (data.NumberOfIncompleteTasksForSupplementals > 0) {
                                                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForSupplementals + ' incomplete Task(s)</span></li>';
                                            }
                                            if (data.NumberOfCompletedTasksForSupplementals > 0) {
                                                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForSupplementals + ' complete Task(s)</span></li>';
                                            }
                                            html += '</ul>';
                                        }
                                        document.getElementById('spanDeleteABudgetRequestDialogDependencyDetails').innerHTML = html;

                                    } catch (e) {

                                        var msg = 'Exception in xcx2131312: ' + e.message + ', ' + e.stack;
                                        console.log(msg);
                                        alert(msg);

                                    }
                                }
                            });

                            // Hide the title bar.
                            $("#DeleteABudgetRequestDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
                            // Set the title.
                            document.getElementById('spanDeleteABudgetRequestDialogTitle').innerHTML = 'Delete ' + title + '.';


                            // Make sure the send message checkbox is not selected to begin with.
                            //document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').removeAttribute('checked', ''); // Commented out 4-9-2024.


                            // Event listener for the email checkbox.
                            //$('#cbDeleteABudgetRequestDialogEmailMessage').click(function (error) {
                            //    var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
                            //    if (_checked == true) {
                            //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            //        $.each(dialogButtons, function (buttonIndex, button) {
                            //            if (button.id === 'btnDeleteABudgetRequest') {
                            //                button.text = 'xxxx and Send Email';
                            //            }
                            //        })
                            //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                            //    } else {
                            //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            //        $.each(dialogButtons, function (buttonIndex, button) {
                            //            if (button.id === 'btnDeleteABudgetRequest') {
                            //                button.text = 'xxxx';
                            //            }
                            //        })
                            //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                            //    }
                            //});

                        }

                        // Show or hide the replacement user selection box depening if there are any dependencies.
                        if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
                            // There are no dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteABudgetRequest') {
                                    button.text = 'Delete ' + bwBudgetRequestId;
                                    button.disabled = false;
                                }
                            })
                            $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                        } else {
                            // There ARE dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteABudgetRequest') {
                                    button.text = 'Delete the Budget Request and all related items';
                                    button.disabled = false;
                                    button.style = 'color:red;';
                                }
                            })
                            $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                        }
                    } catch (e) {
                        console.log('Exception in bwRequest.js.cmdDisplayDeleteBudgetRequestDialog():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.cmdDisplayDeleteBudgetRequestDialog():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.cmdDisplayDeleteBudgetRequestDialog().itemizebudgetrequestdependencies xcx332-1: ' + errorMessage);
                }
            });

        } catch (e) {
            console.log('Exception in bwRequest.js.cmdDisplayDeleteBudgetRequestDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.cmdDisplayDeleteBudgetRequestDialog(): ' + e.message + ', ' + e.stack);
        }
    },





    saveDailyOverdueTaskNotificationDate: function (bwWorkflowTaskItemId) {
        try {
            console.log('In saveDailyOverdueTaskNotificationDate().');
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            var dailyOverdueTaskNotificationDate = document.getElementById('divBwUpdateDailyOverdueTaskNotificationDate_Dialog_DailyOverdueTaskNotificationDate').value;

            data = {
                bwWorkflowAppId: workflowAppId,
                bwWorkflowTaskItemId: bwWorkflowTaskItemId,
                DailyOverdueTaskNotificationDate: dailyOverdueTaskNotificationDate

            };
            var operationUri = webserviceurl + "/bwworkflow/savetaskdailyoverduetasknotificationdate";
            $.ajax({
                url: operationUri,
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (result) {

                    if (result.message != 'SUCCESS') {

                        displayAlertDialog(JSON.stringify(result.message));

                    } else {

                        // 4-6-2022 removing this the user can assume that it was successful. // displayAlertDialog('SUCCESS');
                        $('#divBwUpdateDailyOverdueTaskNotificationDate_Dialog').dialog('close');

                    }

                },
                error: function (data, errorCode, errorMessage) {
                    //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.saveDailyOverdueTaskNotificationDate(): ' + errorMessage);
                }
            });

        } catch (e) {
            console.log('Exception in saveDailyOverdueTaskNotificationDate(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in saveDailyOverdueTaskNotificationDate(): ' + e.message + ', ' + e.stack);
        }
    },

    displayUpdateDailyOverdueTaskNotificationDateDialog: function (bwWorkflowTaskItemId) {
        try {
            console.log('In bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog(). bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            var divBwUpdateDailyOverdueTaskNotificationDate_Dialog = document.getElementById('divBwUpdateDailyOverdueTaskNotificationDate_Dialog');
            if (!divBwUpdateDailyOverdueTaskNotificationDate_Dialog) {
                var html = '';

                html += '<div style="display:none;" id="divBwUpdateDailyOverdueTaskNotificationDate_Dialog">';
                html += '   <table style="width:100%;">';
                html += '       <tr>';
                html += '           <td style="width:90%;">';
                html += '               <span id="spanAddAnOrgItemDialogTitle" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">Update DailyOverdueTaskNotificationDate</span>';
                html += '           </td>';
                html += '           <td style="width:9%;"></td>';
                html += '           <td style="width:1%;cursor:pointer;vertical-align:top;">';
                html += '               <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size: 30pt;font-weight:bold;" onclick="$(\'#divBwUpdateDailyOverdueTaskNotificationDate_Dialog\').dialog(\'close\');">X</span>';
                //html += '               <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size: 30pt;font-weight:bold;" onclick="$(this).dialog(\'close\');">X</span>';
                html += '           </td>';
                html += '       </tr>';
                html += '   </table>';
                html += '   <br /><br />';
                html += '   <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';

                html += '<span id="divBwUpdateDailyOverdueTaskNotificationDate_Dialog_Content"></span>';

                html += '</div>';

                $(document.body).prepend(html);
            }

            $('#divBwUpdateDailyOverdueTaskNotificationDate_Dialog').dialog({
                modal: true,
                resizable: false,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '700',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                close: function () {
                    $('#divBwUpdateDailyOverdueTaskNotificationDate_Dialog').dialog('destroy');
                },
                open: function () {
                    try {

                        var html = '';

                        html += '   <span id="spanAddAnOrgItemDialogInvitationDescriptionText" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;"></span>';
                        html += '   <span style="font-family: calibri;">Change this value then click the Save button.<br />DailyOverdueTaskNotificationDate:</span>';
                        html += '   <br />';
                        html += '   <input type="text" id="divBwUpdateDailyOverdueTaskNotificationDate_Dialog_DailyOverdueTaskNotificationDate" style="WIDTH: 50%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" />';
                        html += '   <br /><br /><br />';

                        html += '   <span style="font-family: calibri;">Now</span>';
                        html += '   <br />';
                        html += '   <input type="text" id="divBwUpdateDailyOverdueTaskNotificationDate_Dialog_Now" disabled style="WIDTH: 50%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" />';

                        html += '   <br /><br /><br />';

                        html += '   <div class="divSignInButton" style="width:90%;text-align:center;line-height:1.1em;font-weight:bold;" onclick="$(\'.bwRequest\').bwRequest(\'saveDailyOverdueTaskNotificationDate\', \'' + bwWorkflowTaskItemId + '\');">';
                        html += '       Save';
                        html += '   </div>';

                        html += '   <br /><br />';
                        html += '   <div class="divSignInButton" style="width: 90%; text-align: center; line-height: 1.1em; font-weight: bold;" onclick="$(\'#divBwUpdateDailyOverdueTaskNotificationDate_Dialog\').dialog(\'close\');">';
                        html += '       Close';
                        html += '   </div>';
                        html += '   <br /><br />';

                        $('#divBwUpdateDailyOverdueTaskNotificationDate_Dialog_Content').html(html);

                        $('.ui-widget-overlay').bind('click', function () {
                            $("#divBwUpdateDailyOverdueTaskNotificationDate_Dialog").dialog('close');
                        });

                        //
                        // Get the xx for this task.
                        //
                        data = {
                            bwWorkflowAppId: workflowAppId,
                            bwWorkflowTaskItemId: bwWorkflowTaskItemId
                        };
                        var operationUri = webserviceurl + "/bwworkflow/gettaskdailyoverduetasknotificationdate";
                        $.ajax({
                            url: operationUri,
                            type: "POST",
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (result) {

                                if (result.message != 'SUCCESS') {

                                    // No need to show this, the user can assume it was successful. // displayAlertDialog(JSON.stringify(result.message));

                                } else {

                                    var dailyOverdueTaskNotificationDate = result.DailyOverdueTaskNotificationDate;
                                    document.getElementById('divBwUpdateDailyOverdueTaskNotificationDate_Dialog_DailyOverdueTaskNotificationDate').value = dailyOverdueTaskNotificationDate;

                                    var now = new Date();
                                    document.getElementById('divBwUpdateDailyOverdueTaskNotificationDate_Dialog_Now').value = now.toISOString()

                                }

                            },
                            error: function (data, errorCode, errorMessage) {
                                //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                                displayAlertDialog('Error in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog().itemizebudgetrequestdependencies  xcx332-2: ' + errorMessage);
                            }
                        });

                    } catch (e) {
                        console.log('Exception in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog(): ' + e.message + ', ' + e.stack);
                    }
                }
            });
            //$("#divAddAnOrgItemDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        } catch (e) {
            console.log('Exception in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    LaunchIntoSeparateWindow: function (requestDialogId, bwBudgetRequestId, bwWorkflowTaskItemId) { // See also method displayRequestFormInNewBrowserWindow().
        try {
            console.log('');
            console.log('/////////////////////////////////////');
            console.log('In bwRequest.js.LaunchIntoSeparateWindow().');
            console.log('/////////////////////////////////////');
            console.log('');
            //displayAlertDialog_Persistent('In LaunchIntoSeparateWindow().');


            // First, we have to set this flag in the dialog so that we aren't prompted to have to save the request before it is closed. Doing it t the beginning so it has time to take effect and avoid a race condition? I am not sure yet.
            //
            // The _setOption function is called when setting the option externally, like $('#my-widget1').colorize("option", "red", 0});

            //alert('In bwRequest.js.LaunchIntoSeparateWindow(). WE NEED TO SCRAPE THE REQUEST before displaying it in the new window. Otherwise force it to save. xcx993357.');
            //$('#' + requestDialogId).dialog('option', 'bwForceClose', true); // changed 4-3-2023



            // end


            var rect = document.getElementById(requestDialogId).getBoundingClientRect();
            var height = rect.bottom - rect.top;
            var width = rect.right - rect.left;

            // When opening a request in a new browser window, we need to use a distinct url. For example: https://budgetworkflow.com/?ActiveStateIdentifier=3e4e2de9-7d5b-476f-a34e-a4eaa0472b44&request=4691d358-c148-4df8-aa1b-70ee1bde0cc0

            var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier')).ActiveStateIdentifier;

            var url = this.options.operationUriPrefix + '?ActiveStateIdentifier=' + activeStateIdentifier + '&request=' + bwBudgetRequestId + '&taskid=' + bwWorkflowTaskItemId + '&openrequest=1';

            // When the window.open is called, bwAuthentication.js.checkIfAuthenticatedAndProcessQuerystringParameters() handles the loading of the request form... by calling bwRequest.js.displayRequestFormInNewBrowserWindow().
            //$('#' + requestDialogId).dialog({ bwForceClose: true }); // Doing this at the top so we avoid a race condition. Keep this here for readability.
            //var windowObjectReference = window.open(url, requestDialogId, 'toolbar=no,width=' + width + ',height=' + height + ',left=500,top=200,status=no,scrollbars=no,resize=no,location=0');

            var windowObjectReference = window.open(url, requestDialogId, 'toolbar=no,width=' + width + ',height=' + height + ',left=5500,top=200,status=no,scrollbars=no,resize=no,location=0'); // Note that left is 5500. This is far too large a value, but the browser will correct this in order to keep this popup on the same monitor. I tried with multiple monitors, but can't get it to go on a different monitor. We will need a special application/browser plugin for that. 4-14-2024.





            if (!windowObjectReference) {

                // The window wasn't allowed to open. This is likely caused by built-in popup blockers.
                console.log('The window wasn\'t allowed to open. This is likely caused by built-in popup blockers.');
                displayAlertDialog('The window wasn\'t allowed to open. This is likely caused by built-in popup blockers.');

            } else {

                // Store this instance of a popped-out window in bwAuthentication.options.poppedOutRequestWindows
                var poppedOutRequestWindows = $('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');
                if (!(poppedOutRequestWindows && poppedOutRequestWindows.length)) {
                    poppedOutRequestWindows = [];
                }
                var poppedOutWindow = {
                    windowWidgetType: 'bwRequest',
                    requestDialogId: requestDialogId,
                    bwBudgetRequestId: bwBudgetRequestId,
                    bwWorkflowTaskItemId: bwWorkflowTaskItemId,
                    windowObjectReference: windowObjectReference
                }
                poppedOutRequestWindows.push(poppedOutWindow);
                $('.bwAuthentication:first').bwAuthentication({ poppedOutRequestWindows: poppedOutRequestWindows });

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.LaunchIntoSeparateWindow(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.LaunchIntoSeparateWindow(): ' + e.message + ', ' + e.stack);
        }
    },
    LaunchIntoHomeWindow: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.LaunchIntoHomeWindow(). bwBudgetRequestId: ' + bwBudgetRequestId);
            //alert('In bwRequest.js.LaunchIntoHomeWindow(). bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;

            // Scrape the JSON from the popped-out request form.
            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-4');
            var promise = $('.bwRequest').bwRequest('scrapeBwRequestJson', bwBudgetRequestId);
            promise.then(function (bwRequestJson) {
                try {

                    console.log('Returning from scrapeBwRequestJson(). xcx2131241-4');
                    //thiz.populateNewRequestForm('divPageContent1', bwRequestTypeId, JSON.stringify(bwRequestJson));



                    var bwWorkflowTaskItemId;
                    try {
                        bwWorkflowTaskItemId = $('.bwAuthentication').bwAuthentication('getUrlParams')['taskid'].toString().split('#')[0]; // getUrlParams()['taskid'].toString().split('#')[0];
                    } catch (e) {
                        console.log('Caught exception in bwRequest.js.LaunchIntoHomeWindow(): Cannot set bwWorkflowTaskItemId, url param [taskid] is not present.');
                        //alert('Caught exception in bwRequest.js.LaunchIntoHomeWindow(): Cannot set bwWorkflowTaskItemId, url param [taskid] is not present.');
                    }

                    console.log('In bwRequest.js.LaunchIntoHomeWindow(). Calling displayArInDialog from a popped-out window.... bwBudgetRequestId: ' + bwBudgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId + ', bwRequestJson: ' + JSON.stringify(bwRequestJson));





                    // 1-15-2023
                    // Since we are returning this popped-out window to the home browser window, we need to remove it from this list.
                    var poppedOutRequestWindows = window.opener.$('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');

                    var alreadyDisplayingTheRequest = false;
                    if (poppedOutRequestWindows && poppedOutRequestWindows.length && (poppedOutRequestWindows.length > 0)) {
                        for (var i = 0; i < poppedOutRequestWindows.length; i++) {
                            if (poppedOutRequestWindows[i].bwBudgetRequestId == bwBudgetRequestId) {
                                alreadyDisplayingTheRequest = true;
                                poppedOutRequestWindows.splice(i, 1); // This removes it from the list. It needs to be removed from the list for it to be displayed, because we never display the same request twice!!!! :)
                                $('.bwAuthentication:first').bwAuthentication({ poppedOutRequestWindows: poppedOutRequestWindows });
                                break;
                            }
                        }
                    }

                    if (alreadyDisplayingTheRequest != true) {

                        var msg = 'Unrecoverable error in bwRequest.js.LaunchIntoHomeWindow(). The request window did not exist in the poppedOutRequestWindows array. bwBudgetRequestId: ' + bwBudgetRequestId;
                        console.log(msg);
                        displayAlertDialog(msg);

                    } else {

                        // This closes the exploded window, and re-displays it within the website main browser window.
                        window.opener.$('.bwRequest').bwRequest('displayArInDialog', 'https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', bwWorkflowTaskItemId, bwRequestJson); // bwWorkflowTaskItemId
                        window.close(); // close the popup window.

                    }

                } catch (e) {
                    console.log('Exception in bwRequest.js.LaunchIntoHomeWindow.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                    displayAlertDialog('Exception in bwRequest.js.LaunchIntoHomeWindow.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                }

            }).catch(function (result) {

                alert('In LaunchIntoHomeWindow(). Promise returned exception: ' + result.message);

            });

        } catch (e) {
            console.log('Exception in bwRequest.js.LaunchIntoHomeWindow(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.LaunchIntoHomeWindow(): ' + e.message + ', ' + e.stack);
        }
    },
    displayRequestFormInNewBrowserWindow: function (budgetRequestId) { // See also method LaunchIntoSeparateWindow().
        try {
            // Display and populate the "Existing Request" form.
            console.log('In bwRequest.js.displayRequestFormInNewBrowserWindow().');
            //alert('In bwRequest.js.displayRequestFormInNewBrowserWindow().');
            var thiz = this;

            // CODE SAMPLES: https://developer.mozilla.org/en-US/docs/Web/API/Window/open
            // -------------
            //const handle = window.open("https://www.mozilla.org/", "mozillaWindow", windowFeatures);
            //if (!handle) {
            //    // The window wasn't allowed to open
            //    // This is likely caused by built-in popup blockers.

            //    // …
            //}

            //let windowObjectReference = null; // global variable
            //let previousURL; /* global variable that will store the
            //        url currently in the secondary window */
            //function openRequestedSingleTab(url) {
            //    if (windowObjectReference === null || windowObjectReference.closed) {
            //        windowObjectReference = window.open(url, "SingleSecondaryWindowName");
            //    } else if (previousURL !== url) {
            //        windowObjectReference = window.open(url, "SingleSecondaryWindowName");
            //        /* if the resource to load is different,
            //           then we load it in the already opened secondary window and then
            //           we bring such window back on top/in front of its parent window. */
            //        windowObjectReference.focus();
            //    } else {
            //        windowObjectReference.focus();
            //    };
            //    previousURL = url;
            //    /* explanation: we store the current url in order to compare url
            //       in the event of another call of this function. */
            //}


            var tenantId = window.opener.$('.bwAuthentication').bwAuthentication('option', 'tenantId');
            var workflowAppId = window.opener.$('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = window.opener.$('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = window.opener.$('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = window.opener.$('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');
            //var participantRole = window.opener.$('.bwAuthentication').bwAuthentication('option', 'participantRole'); // 3-18-2024.

            // This hopefully means the pop-up was a success, so now we need to close the existing request dialog so that the request is only displayed once, not twice.

            // Before we close the window, we need to get the information from it!
            this.options.store = window.opener.$('.bwRequest').bwRequest('option', 'store');
            this.options.Checklists = window.opener.$('.bwRequest').bwRequest('option', 'Checklists');
            this.options.operationUriPrefix = window.opener.$('.bwRequest').bwRequest('option', 'operationUriPrefix');
            this.options.Workflows = window.opener.$('.bwRequest').bwRequest('option', 'Workflows');
            this.options.CurrentWorkflow = window.opener.$('.bwRequest').bwRequest('option', 'CurrentWorkflow');
            this.options.ActiveForms = window.opener.$('.bwRequest').bwRequest('option', 'ActiveForms');

            // Display the "LaunchIntoHomeWindow" button.
            //var html = '';

            //html += '<div id="divPageContent1">';

            //// Note: Setting the color of the top bar of the dialog here. #6682b5  Also for non-popped out request dialogs, see my.css:: .ui-dialog > .ui-widget-header {background: red;}
            //html += '   <table xcx="xcx3249-1" style="width:100%;background-color:#6682b5;" class="ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix ui-draggable-handle" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');" ondblclick="$(\'.bwRequest\').bwRequest(\'zoomAndCenterPoppedOutWindow\', \'' + 'divPageContent1' + '\');" >';
            //html += '       <tbody>';
            //html += '           <tr>';
            //html += '               <td style="width:95%;">';
            //html += '                   <div id="slider_' + budgetRequestId + '" style="width:20%;cursor:pointer;" class="ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all"><span class="ui-slider-handle ui-state-default ui-corner-all" tabindex="0" style="left: 33.3333%;"></span></div>';
            //html += '               </td>';


            //html += '       <td xcx="xcx123426" style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
            //// This is where we display the "Pin". If it is pinned, or if it is not pinned.
            //var pinnedRequestsArray = $('.bwAuthentication:first').bwAuthentication('option', 'PinnedRequests');
            //if (pinnedRequestsArray && pinnedRequestsArray.length) {
            //    if (pinnedRequestsArray.indexOf(budgetRequestId) > -1) {
            //        html += '           <div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + budgetRequestId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
            //    } else {
            //        html += '           <div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + budgetRequestId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
            //    }
            //}
            //html += '       </td>';
            //// Refresh button. This is good if you want to refresh and see the state of the file conversion from vob to mp4, for instance. 9-7-2022
            //html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
            //html += '           <span id="' + budgetRequestId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'reloadAndRefreshThePoppedOutRequest\', \'' + budgetRequestId + '\', \'' + budgetRequestId + '\', \'' + '' + '\');">';
            //html += '               ♻';
            //html += '           </span>';
            ////html += '           <A HREF="#" onClick="window.open(\'https://budgetworkflow.com\', \'Sample\',\'toolbar=no,width=190,height=190,left=500,top=200,status=no,scrollbars=no,resize=no\');return false">[...]</A>.';
            //html += '       </td>';






            //html += '               <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
            //html += '                   <span id="divRequestFormDialog_c8704c8c-8128-4600-a4fd-1ff30220e2ed_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'LaunchIntoHomeWindow\', \'' + budgetRequestId + '\');">';
            //html += '                       ☈';
            //html += '                   </span>';
            //html += '               </td>';
            //html += '               <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
            //html += '                   <span title="print" class="printButton" dev="xcx32424-1" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'divRequestFormDialog_c8704c8c-8128-4600-a4fd-1ff30220e2ed\');">               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;">           </span>';
            //html += '               </td>';
            //html += '               <td>&nbsp;&nbsp;</td>';
            //html += '               <td>';

            ////html += '                   <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'#divRequestFormDialog_' + budgetRequestId + '\').dialog(\'option\', \'bwForceClose\', false);$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'divRequestFormDialog_' + budgetRequestId + '\');">X</span>';
            //html += '                   <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'divRequestFormDialog_' + budgetRequestId + '\');">X</span>';

            //html += '               </td>';
            //html += '           </tr>';
            //html += '       </tbody>';
            //html += '   </table>';

            //html += '   <table style="width:100%;" class="context-menu-requestdialog">            <tbody><tr>                <td style="width:90%;">         ';
            //html += '       <span id="divRequestFormDialogContent"></span>                </td>            </tr>        </tbody>';
            //html += '   </table>';

            //$(window.document.body).append(html);

            // Make sure the budgetRequestId is valid.
            if (!budgetRequestId) {
                console.log('Error in displayRequestFormInNewBrowserWindow(). Unexpected value for budgetRequestId: ' + budgetRequestId);
                displayAlertDialog('Error in displayRequestFormInNewBrowserWindow(). Unexpected value for budgetRequestId: ' + budgetRequestId);
            }

            if (!participantId) {

                var html = '';
                html += '<br />In bwRequest.js.displayRequestFormInNewBrowserWindow(). Unexpected value for participantId: ' + participantId + '.<br />';
                $(window.document.body).append(html);

            } else {

                //
                // There is nothing else to do here, because the whole "Page load" process for the new window will handle everything.
                //
                setTimeout(function () {
                    console.log('xcx12312423 in bwRequest.js.xx() setTimeout to set the zoom...maybe come back and review sometime...');
                    $("#slider_" + budgetRequestId).slider({
                        min: 50,
                        max: 200,
                        value: 100, // It starts off full size.
                        slide: function (event, ui) {
                            thiz.setZoom(ui.value, budgetRequestId); //requestDialogId);
                        }//,
                        //change: function (event, ui) {
                        //    thiz.setZoom(ui.value, requestDialogId);
                        //}
                    });
                    thiz.setZoom(100, budgetRequestId); //requestDialogId);
                }, 1000);

            }


        } catch (e) {
            console.log('Exception in bwRequest.js.displayRequestFormInNewBrowserWindow: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayRequestFormInNewBrowserWindow: ' + e.message + ', ' + e.stack);
        }
    },

    pullBackAllPoppedOutWindowsToMasterWindow_OnClick: function () {
        try {
            console.log('In bwRequest.js.pullBackAllPoppedOutWindowsToMasterWindow_OnClick(). This functionality is incomplete. Coming soon!');
            //alert('In bwRequest.js.pullBackAllPoppedOutWindowsToMasterWindow_OnClick(). This functionality is incomplete. Coming soon!');
            var thiz = this;




















            // 1: Get all the bwBudgetRequestIds or the popped out windows.

            // 2: Call LaunchIntoHomeWindow(bwBudgetRequestId) for each one, 

            var poppedOutRequestWindows = $('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');

            // Scrape the JSON from the popped-out request form.
            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-4-22');


            if (poppedOutRequestWindows && poppedOutRequestWindows.length && (poppedOutRequestWindows.length > 0)) {
                for (var i = 0; i < poppedOutRequestWindows.length; i++) {


                    var bwBudgetRequestId = poppedOutRequestWindows[i].bwBudgetRequestId;
                    var bwWorkflowTaskItemId = poppedOutRequestWindows[i].bwWorkflowTaskItemId;
                    var window_poppedout = poppedOutRequestWindows[i].windowObjectReference;

                    var promise = this.scrapeBwRequestJson(bwBudgetRequestId);
                    promise.then(function (bwRequestJson) {
                        try {


                            // Promise returned exception: In bwRequest.js.scrapeBwRequestJson(). Could not find the form for bwBudgetRequestId: eb189962-eb2d-4e00-9552-56a9817bbe97. If there is a dialog displayed, going to close it now.... xcx774433.
                            debugger;

                            console.log('Returning from scrapeBwRequestJson(). xcx2131241-4-22');



                            // poppedOutRequestWindows[i].bwBudgetRequestId

                            var window1 = window; // This is how we make this work for popped-out request dialog windows.
                            if (window.opener) {
                                window1 = window.opener;
                            }

                            // This closes the exploded window, and re-displays it within the website main browser window.

                            window.$('.bwRequest').bwRequest('displayArInDialog', 'https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', bwWorkflowTaskItemId, bwRequestJson, true); // bwWorkflowTaskItemId


                            //  window_poppedout.close(); // close the popup window. 
                            //window.close(); // close the popup window.



                            //if (poppedOutRequestWindows[i].bwBudgetRequestId == bwBudgetRequestId) {
                            //    alreadyDisplayingTheRequest = true;
                            //    poppedOutRequestWindows.splice(i, 1); // This removes it from the list. It needs to be removed from the list for it to be displayed, because we never display the same request twice!!!! :)
                            //    $('.bwAuthentication:first').bwAuthentication({ poppedOutRequestWindows: poppedOutRequestWindows });
                            //    break;
                            //}


                        } catch (e) {
                            console.log('Exception in bwRequest.js.LaunchIntoHomeWindow.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.LaunchIntoHomeWindow.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                        }

                    }).catch(function (result) {

                        alert('In LaunchIntoHomeWindow(). Promise returned exception: ' + result.message);

                    });


                }
            }














        } catch (e) {
            console.log('Exception in bwRequest.js.pullBackAllPoppedOutWindowsToMasterWindow_OnClick(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.pullBackAllPoppedOutWindowsToMasterWindow_OnClick(): ' + e.message + ', ' + e.stack);
        }
    },

    displayRequestFormDialog: function (budgetRequestId, selectedRaciRole, bwWorkflowTaskItemId, bwRequestJson) {
        try {
            // Display and populate the "Existing Request" form.
            console.log('In bwRequest.js.displayRequestFormDialog(). budgetRequestId: ' + budgetRequestId + ', selectedRaciRole: ' + selectedRaciRole + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //alert('In bwRequest.js.displayRequestFormDialog(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            window.scrollTo(0, 0); // This prevents the request dialog from going above the top blue bar and becoming stuck there.
            $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

            if (!budgetRequestId) {
                displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog(). Unexpected value for budgetRequestId: ' + budgetRequestId);
            }

            if (bwRequestJson) {
                console.log('In bwRequest.js.displayRequestFormDialog(). bwRequestJson has been passed.');
            }

            //var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
            //var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            //var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            //var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            if (!participantId) {

                displayAlertDialog('In displayRequestFormDialog(). Unexpected value for participantId: ' + participantId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                // The user is not logged in, so create an offline request.
                this.displayOfflineRequestFormDialog(budgetRequestId, participantId);

            } else {







                // It is not necesary to have this value here.... perhaps we shouldn't even be passing it???
                //if (!bwWorkflowTaskItemId) {
                //    var msg = 'In displayRequestFormDialog(). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId;
                //    console.log(msg);
                //    alert(msg);
                //}












                // The user is logged in.
                var requestDialogId = 'divRequestFormDialog_' + budgetRequestId;
                var html = '';
                //html += '<div style="display:none;" id="divRequestFormDialog">';
                html += '        <table style="width:100%;" class="context-menu-requestdialog">';
                html += '            <tr>';
                html += '                <td style="width:90%;">';
                html += '                    <span id="divRequestFormDialogContent"></span>';
                html += '                </td>';
                html += '            </tr>';
                html += '        </table>';
                html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                html += '        <br /><br />';
                //html += '    </div>';

                //
                // THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
                //
                var div = document.getElementById(requestDialogId); // 4-1-2020 12-28pm adt.
                if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                    div = document.createElement('div');
                    div.id = requestDialogId;
                    document.body.appendChild(div); // to place at end of document
                }
                div.innerHTML = html;







                //alert('In bwRequest.js.displayRequestFormDialog(). WE NEED TO SCRAPE THE REQUEST before displaying it in the new window. Otherwise force it to save. xcx993357.');





                // Check if the dialog is already instantiated. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  6-6-2020  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                if ($('#' + requestDialogId).dialog('instance')) {
                    console.log('xcx23142 foudn this is this ok? it checks for an existing dialog and closes it if it si there... nto sure this is necessary. 12-16-2023.');
                    $('#' + requestDialogId).dialog('close')
                }

                //thiz.options.numberOfRequestFormsCurrentlyDisplayed += 1;
                //var xJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;
                //var yJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;

                //// debugger; // 10-18-2020 testing colli
                //position: {
                //        my: "center",
                //        at: "center",
                //        of: window,
                //        collision: "fit",
                //    // Ensure the titlebar is always visible
                //        using: function( pos ) {
                //            var topOffset = $( this ).css( pos ).offset().top;
                //            if ( topOffset < 0 ) {
                //                $( this ).css( "top", pos.top - topOffset );
                //            }
                //        }
                //}, // 'containment' is an attribute that may be useful here as well.

                //alert('xcx23425345-4');

                var msg = 'In bwRequest.js.displayRequestFormDialog(). THIS IS THE ONLY PLACE THIS SHOULD BE HAPPENING. THE DIALOG IS BEING DISPLAYED AND POSITIONED ETC. 12-16-2023. xcx23425345-4';

                console.log('####################');
                console.log('####################');
                console.log('####################');
                console.log(msg);
                console.log('####################');
                console.log('####################');
                console.log('####################');

                //alert(msg);

                var position;
                if (window.opener) {
                    console.log('In bwRequest.js.displayRequestFormDialog(). Popped out window.');
                    position = { // This is where the request dialog shows up.
                        at: "top"
                    };

                } else {

                    //position = { // This is where the request dialog shows up.
                    //    my: "left top",
                    //    at: "right+" + xJog + " bottom+" + yJog,
                    //    of: "#divTopBar_OrganizationName"
                    //};


                    // 12-16-2023.
                    // 12-16-2023. xcx123123423514354. Ther eis another one.
                    var width1 = window.innerWidth / 7;
                    console.log('xcx888747 THIS IS THE POSITIONG OF THE REQUEST DIALOG. 7 seems to be the magic number. width1: ' + width1);
                    //displayAlertDialog_Persistent('xcx888747 THIS IS THE POSITIONG OF THE REQUEST DIALOG. 7 seems to be the magic number. width1: ' + width1);
                    position = {
                        my: "center top",
                        at: "center-" + width1 + " top",
                        of: window,
                        collision: "fit"
                    }


                }

                // Now that it is part of the DOM, we can display it!
                $('#' + requestDialogId).dialog({
                    //position: { // This is where the request dialog shows up!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    //    my: "left top",
                    //    at: "right+" + xJog + " bottom+" + yJog,
                    //    of: "#divTopBar_OrganizationName"
                    //},
                    position: position,
                    //draggable: { // 4-17-2022 does this work? not sure yet...
                    //    // See the open event of this dialog (below) for this to be turned off. More info there...
                    //    containment: 'window' // Does this work to keep the dialog on the screen? This is meant to fix the issue where on iOS, the dialog goes off the left side of the screen... 4-17-2022
                    //},
                    modal: false,
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    width: '800px',
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.

                    //position: {
                    //    my: "middle top+12",
                    //    at: "middle top",
                    //    of: window
                    //},
                    //options: {
                    //    bwForceClose: false, // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.
                    //},




                    // NOTE ADDED PROPERTY in the open() function. Had to force it this way: this["bwForceClose"] = false; 
                    //bwForceClose: false, // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.
                    beforeClose: function (event, ui) {
                        try {

                            console.log('>>>>>>>>> In beforeClose(). xcx21323453-1.');

                            debugger;
                            //var bwForceClose = this.options.bwForceClose;
                            var bwForceClose = $('#' + requestDialogId).dialog('option', 'bwForceClose');

                            // This event is triggered when a dialog attempts to close. If the beforeClose event handler (callback function) returns false, the close will be prevented.
                            console.log('');
                            console.log('==========================================');
                            console.log('COME HERE TO ENABLE THE CHECK TO SEE IF THERE IS ANYTHING TO BE SAVED BEFORE THE REQUEST IS CLOSED. The request form is being closed. Do we need to check if the user may be losing any changes? bwForceClose: ' + bwForceClose + '. xcx12312-x-2');
                            console.log('==========================================');
                            console.log('');

                            //alert('COME HERE TO ENABLE THE CHECK TO SEE IF THERE IS ANYTHING TO BE SAVED BEFORE THE REQUEST IS CLOSED. The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-2');

                            if (window.opener) {
                                console.log('In bwRequest.js.dialog.beforeClose(). bwForceClose: ' + bwForceClose + '. This is a popped out window.');
                            } else {
                                console.log('In bwRequest.js.dialog.beforeClose(). bwForceClose: ' + bwForceClose + '. This is NOT a popped out window.');
                            }



                            console.log('In bwRequest.js.displayRequestFormDialog(). bwForceClose: ' + bwForceClose);
                            //alert('In bwRequest.js.displayRequestFormDialog(). bwForceClose: ' + bwForceClose);

                            //displayAlertDialog_Persistent('In bwRequest.js.displayRequestFormDialog(). bwForceClose: ' + bwForceClose); 
                            if (bwForceClose === undefined) {

                                var msg = 'Unrecoverable error in bwRequest.js.displayRequestFormDialog(). This request dialog is missing property "bwForceClose".';
                                console.log(msg);
                                displayAlertDialog(msg);

                            } else {

                                if (bwForceClose == true) {

                                    return true;

                                } else {


                                    console.log('xcx553423-1. In displayRequestFormDialog.dialog.beforeClose(). Calling checkIfThereHaveBeenAnyChanges().');
                                    var promise = thiz.checkIfThereHaveBeenAnyChanges(budgetRequestId);
                                    promise.then(function (results) {
                                        try {

                                            $('#' + requestDialogId).dialog('option', 'bwForceClose', false); // This ensures that the dialog cannot be closed. We set this value to true in one place below.

                                            if (results.status != 'SUCCESS') {

                                                console.log('Error in bwRequest.js.displayRequestFormDialog(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));
                                                displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));

                                            } else {

                                                if (results.results == 'YES_CHANGES_TO_SAVE') {

                                                    console.log('You have made changes to this request. You cannot close it until you save your changes.');

                                                    //
                                                    // The dialog displayed here should say:
                                                    //
                                                    // Save changes to this request before closing it? [bold]
                                                    //
                                                    // Your changes will be lost if you don't save them. [not bold]
                                                    //
                                                    // [Save] [Don't Save] [Cancel]
                                                    //

                                                    var dialogId = 'divPromptToSaveRequestChangesDialog';

                                                    var div = document.getElementById(dialogId);
                                                    if (!div) {

                                                        div = document.createElement('div');
                                                        div.id = dialogId;
                                                        div.style.display = 'none';
                                                        document.body.appendChild(div); // Place at end of document

                                                        var html = '';

                                                        html += '        <table style="width:100%;">';
                                                        html += '            <tr>';
                                                        html += '                <td style="width:90%;">';
                                                        html += '                    <br /><br />';
                                                        html += '                    <span style="font-size:25pt;font-weight:bold;">Save changes to this request before closing it?</span>';
                                                        html += '                    <br /><br />';
                                                        html += '                    <span style="font-size:25pt;font-weight:normal;">Your changes will be lost if you don\'t save them.</span>';
                                                        html += '                </td>';
                                                        html += '            </tr>';
                                                        html += '        </table>';
                                                        html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                                                        html += '        <br /><br />';

                                                        div.innerHTML = html;
                                                    }

                                                    $('#' + dialogId).dialog({
                                                        modal: true,
                                                        //classes: {
                                                        //    "ui-dialog": "bwMoveDialogToTop" // This sets the z-index to 100000, making it the topmost element.
                                                        //},
                                                        resizable: false,
                                                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                                        title: 'Save Changes xcx1-2',
                                                        width: "720",
                                                        dialogClass: "no-close", // No close button in the upper right corner.
                                                        hide: false,//, // This means when hiding just disappear with no effects.
                                                        buttons: {
                                                            "Save": function () {
                                                                try {
                                                                    $('.bwRequest').bwRequest('saveAndPublishTheRequest', requestDialogId, 'true', '').then(function (results) {
                                                                        try {

                                                                            if (results.status == 'SUCCESS') {

                                                                                $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                                                                                $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                                                                                //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                                                                                $('#divPromptToSaveRequestChangesDialog').dialog("close");

                                                                            } else if (results.status == 'REFUSED_SAVE_CHANGED_ORGID') {
                                                                                $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                                                            } else {
                                                                                $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                                                            }

                                                                        } catch (e) {
                                                                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.checkIfThereHaveBeenAnyChanges.Save.saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack);
                                                                        }
                                                                    }).catch(function (e) {

                                                                        displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.checkIfThereHaveBeenAnyChanges.Save(). Unexpected exception saving the request: ' + JSON.stringify(e));

                                                                    });
                                                                } catch (e) {
                                                                    displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.checkIfThereHaveBeenAnyChanges.Save(): ' + e.message + ', ' + e.stack);
                                                                }
                                                            },
                                                            "Don\'t Save and Lose Changes": function () {
                                                                try {

                                                                    this.style.color = 'red';

                                                                    $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                                                                    $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                                                                    //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                                                                    $('#divPromptToSaveRequestChangesDialog').dialog("close");
                                                                } catch (e) {
                                                                    displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.checkIfThereHaveBeenAnyChanges.DontSave(): ' + e.message + ', ' + e.stack);
                                                                }
                                                            },
                                                            "Cancel": function () {
                                                                $('#divPromptToSaveRequestChangesDialog').dialog("close");

                                                            }
                                                        },
                                                        open: function (event, ui) {

                                                            $('.ui-widget-overlay').bind('click', function () { $('#divPromptToSaveRequestChangesDialog').dialog('close'); });
                                                            //alert('Calling moveToTop xcx123124.');
                                                            //$(this).dialog('moveToTop');

                                                        }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                                        close: function (event, ui) {
                                                            //console.log('In index.js.displayAlertDialog_Persistent(). THIS DIALOG DOES NOT CLEAN UP AFTER ITSELF. THIS WILL HAVE TO BE DONE SOMEDAY. <<<<<<<<<<<<<<<<<<<<<<<<<<');

                                                            // This one is important and works great. 1-31-2023.
                                                            window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.
                                                            $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

                                                        }
                                                    });
                                                    //$("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                                    //$('#' + dialogId).dialog('moveToTop'); // Give up on the moveToTop() method. Reports are that it doesn't work.




                                                    //try { // SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW
                                                    //    $('.ui-widget-overlay')[0].style.zIndex = 9;
                                                    //} catch (e) {
                                                    //    console.log('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                                                    //    //displayAlertDialog_Persistent('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                                                    //}
                                                    //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020



                                                    // https://stackoverflow.com/questions/16917430/jquery-ui-1-10-dialog-and-zindex-option#16918323
                                                    // this affects all your dialogs if you need to set it only for a dialog use the dialogClass option and style it.

                                                    // If you need a modal dialog set the modal: true option see the docs:

                                                    // If set to true, the dialog will have modal behavior; other items on the page will be disabled, i.e., cannot be interacted with. Modal dialogs create an overlay below // the dialog but above other page elements.

                                                    // You need to set the modal overlay with an higher z-index to do so use:

                                                    // .ui-front { z-index: 1000 !important; }
                                                    // for this element too.

                                                    // --Irvin Dominin 









                                                } else if (results.results == 'NO_CHANGES_TO_SAVE') {
                                                    console.log('xcx21314. NO_CHANGES_TO_SAVE.');
                                                    $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                                                    console.log('xcx123324523 closing the dialog. requestDialogId: ' + requestDialogId);
                                                    //debugger;
                                                    $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)

                                                } else {

                                                    console.log('Error in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));
                                                    displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));

                                                }

                                            }
                                        } catch (e) {
                                            console.log('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                                        }
                                    }).catch(function (e) {

                                        console.log('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));
                                        displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));

                                    });

                                    return false; // THIS LINE HAS TO GO AFTER THE PROMISE!!!! If the beforeClose event handler (callback function) returns false, the close will be prevented.

                                }
                            }

                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.dialog.beforeClose(): ' + e.message + ', ' + e.stack);
                        }
                    },
                    close: function (event) {
                        try {

                            console.log('>>>>>>> In close(). xcx21323453-1.');
                            //alert('>>>>>>>> In close(). xcx21323453-1.');


                            thiz.options.numberOfRequestFormsCurrentlyDisplayed -= 1;

                            if (window.opener) {
                                alert('xcx213134 in close(). This is a popped out window, so we need to check if the user is losing any changes.');

                                // The dialog is closing, so we will also close the popped out window. Woop!
                                window.close();

                            } else {
                                console.log('>>>>>>>> xcx213134 in close(). This is NOT A popped out window.');
                                $('#' + event.target.id).remove(); // 5-11-2023

                            }

                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog.dialog.close(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.dialog.close(): ' + e.message + ', ' + e.stack);
                        }
                    },
                    open: function () {
                        try {
                            debugger;
                            this["bwForceClose"] = false; // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.

                            $('#' + requestDialogId).css('overflow', 'hidden'); // This keeps the scroll bars from showing up on the form dialog!!!!!!!! 7-13-2020

                            // 4-17-2022 does this work? not sure yet...
                            //$('#' + requestDialogId).dialog({ draggable: true }); // This gets rid of the containment. We only needed it for when the dialog first is displayed.... after that, the user can put it anywhere they like.



                            var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                            var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                            element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                            console.log('In bwRequest.js.PrintIndividualRequestReport xcx1 Creating the element...');

                            // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                            var html = '';
                            html += '<table xcx="xcx3249-2-1" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');" ondblclick="$(\'.bwRequest\').bwRequest(\'zoomAndCenter\', \'' + requestDialogId + '\');" >'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                            html += '   <tr>';
                            html += '       <td style="width:95%;">';
                            html += '           <div id="slider_' + budgetRequestId + '" style="width:20%;cursor:pointer;"></div>';
                            html += '       </td>';


                            // One-time reminders clock icon. 7-25-2024. // images/clock_small.png
                            html += `       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">
                                                <span style="font-size:28pt;font-weight:bold;float:right;border:1px solid white;color:white;padding:0 10px 0 10px;font-family:Courier New;opacity:0.8;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'addToPriorityGrupxx\', \'' + budgetRequestId + '\', \'' + 'requestDialogId' + '\', true);event.stopPropagation();">
                                                    <img xcx="xcx2205004" src="images/clock_small.png" style="width:50px;height:50px;cursor:pointer !important;" />
                                                </span>
                                            </td>`;


                            // Priority groups exclamation mark. 5-31-2024.
                            html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                            html += '           <span style="font-size:28pt;font-weight:bold;float:right;border:1px solid white;color:white;padding:0 10px 0 10px;font-family:Courier New;opacity:0.8;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'addToPriorityGrup\', \'' + budgetRequestId + '\', \'' + 'requestDialogId' + '\', true);event.stopPropagation();">!</span>';
                            html += '       </td>';




                            html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';

                            // This is where we display the "Pin". If it is pinned, or if it is not pinned.
                            var pinned = false;
                            var pinnedRequests = $('.bwAuthentication:first').bwAuthentication('option', 'PINNED_REQUESTS');
                            if (pinnedRequests && pinnedRequests.length) {
                                for (var i = 0; i < pinnedRequests.length; i++) {
                                    if (pinnedRequests[i].bwBudgetRequestId == budgetRequestId) {
                                        pinned = true;
                                    }
                                }
                            }
                            if (pinned != true) {
                                html += '           <div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + requestDialogId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                            } else {
                                html += '           <div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                            }

                            //displayAlertDialog('pinnedRequests: ' + JSON.stringify(pinnedRequests));
                            //if (pinnedRequests && pinnedRequests.length) {
                            //    if (pinnedRequests.indexOf(budgetRequestId) > -1) {
                            //        html += '           <div title="un-pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + requestDialogId + '\', false);"><img src="/images/unpin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                            //    } else {
                            //        html += '           <div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + requestDialogId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                            //    }
                            //} else {
                            //    html += '           <div title="pin" class="pinButton" style="display:inline-block;font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequest\', \'' + budgetRequestId + '\', \'' + requestDialogId + '\', true);"><img src="/images/pin.png" style="width:50px;height:50px;cursor:pointer !important;" /></div>';
                            //}


                            html += '       </td>';


                            // Refresh button. This is good if you want to refresh and see the state of the file conversion from vob to mp4, for instance. 9-7-2022
                            html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
                            html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'reloadAndRefreshTheRequest\', \'' + requestDialogId + '\', \'' + budgetRequestId + '\', \'' + bwWorkflowTaskItemId + '\');">';
                            html += '               ♻';
                            html += '           </span>';
                            //html += '           <A HREF="#" onClick="window.open(\'https://budgetworkflow.com\', \'Sample\',\'toolbar=no,width=190,height=190,left=500,top=200,status=no,scrollbars=no,resize=no\');return false">[...]</A>.';
                            html += '       </td>';







                            html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
                            //var activeStateIdentifier = '';
                            //try {
                            //    activeStateIdentifier = this.getUrlParams()['ActiveStateIdentifier'].toString().split('#')[0];
                            //} catch (e) { }


                            if (window.opener) {

                                html += '                   <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'LaunchIntoHomeWindow\', \'' + budgetRequestId + '\');">';
                                html += '                       ☈';
                                html += '                   </span>';

                            } else {

                                html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'LaunchIntoSeparateWindow\', \'' + requestDialogId + '\', \'' + budgetRequestId + '\', \'' + bwWorkflowTaskItemId + '\');">';
                                html += '               ↸';
                                html += '           </span>';

                            }





                            //html += '           <A HREF="#" onClick="window.open(\'https://budgetworkflow.com\', \'Sample\',\'toolbar=no,width=190,height=190,left=500,top=200,status=no,scrollbars=no,resize=no\');return false">[...]</A>.';
                            html += '       </td>';
                            html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                            html += '           <span title="print" class="printButton" dev="xcx32424-1-1" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + requestDialogId + '\');">';
                            html += '               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;" />';
                            html += '           </span>';
                            html += '       </td>';
                            html += '       <td>&nbsp;&nbsp;</td>';
                            html += '       <td>';
                            html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'' + requestDialogId.replace('_Parent', '') + '\');">X</span>';
                            html += '       </td>';
                            html += '   </tr>';
                            html += '</table>';
                            document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                            $("#slider_" + budgetRequestId).slider({
                                min: 50,
                                max: 200,
                                value: 100, // It starts off full size.
                                slide: function (event, ui) {
                                    thiz.setZoom(ui.value, requestDialogId);
                                }//,
                                //change: function (event, ui) {
                                //    thiz.setZoom(ui.value, requestDialogId);
                                //}
                            });
                            thiz.setZoom(100, requestDialogId);

                            // Render the Print button.
                            //var printButtonOptions = {
                            //    reportType: 'IndividualRequestReport',
                            //    store: thiz.options.store,
                            //    bwWorkflowAppId: thiz.options.bwWorkflowAppId
                            //    //bwBudgetRequestId: this.options.bwBudgetRequestId
                            //};
                            //var $printbutton = $('#' + requestDialogId + '_spanRequestPrintButton').bwPrintButton(printButtonOptions);

                            $('.ui-widget-overlay').bind('click', function () {
                                $('#' + requestDialogId).dialog('close');
                            });



                            //
                            // REVERSED THIS DECISION... I have decided that when the executive summary is clicked, and we first display the request dialog, it should be MEDIUM sized. I think that is better and more intuitive. 10-28-2023.
                            //
                            //thiz.zoomAndCenter(requestDialogId);



                            //
                            // THIS IS THE ONLY PLACE WHERE THE FORM GETS DISPLAYED. 9-28-2022
                            //
                            //thiz.displayRequestForm(budgetRequestId, requestDialogId, bwWorkflowTaskItemId, selectedRaciRole, bwRequestJson); // Broke out into this method 7-26-2022

                            console.log('Calling displayRequestForm(). bwRequestJson: ' + JSON.stringify(bwRequestJson));
                            thiz.displayRequestForm(budgetRequestId, requestDialogId, '', selectedRaciRole, bwRequestJson); // Broke out into this method 7-26-2022 removed bwWorkflowTaskItemId on 10-24-2022










                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog.dialog.open(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog.dialog.open(): ' + e.message + ', ' + e.stack);
                        }

                    }
                });
                $('#' + requestDialogId).dialog('option', 'bwForceClose', false); // This ensures that the dialog cannot be closed. We set this value to true in one place below.






                console.log('In bwRequest.js.displayRequestFormDialog(). Changing z-index here. Why?? Is it necessary? xcx123124-1. TURNING OFF FOR NOW. 7-1-2024.');
                //alert('In bwRequest.js.displayRequestFormDialog(). Changing z-index here. Why?? Is it necessary? xcx123124-1. TURNING OFF FOR NOW. 7-1-2024.');

                //try { // SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW
                //    $('.ui-widget-overlay')[0].style.zIndex = 9;
                //} catch (e) {
                //    console.log('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                //    //displayAlertDialog_Persistent('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                //}
                //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020





            }

        } catch (e) {
            console.log('Exception in bwRequest.js.displayRequestFormDialog():1: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog():1: ' + e.message + ', ' + e.stack);
        }
    },
    displayRequestFormDialog_FromTrashBin: function (budgetRequestId, selectedRaciRole, bwWorkflowTaskItemId, bwRequestJson) {
        try {
            // Display and populate the "Existing Request" form.
            console.log('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). budgetRequestId: ' + budgetRequestId + ', selectedRaciRole: ' + selectedRaciRole + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            //alert('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). selectedRaciRole: ' + selectedRaciRole + ', budgetRequestId: ' + budgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            window.scrollTo(0, 0); // This prevents the request dialog from going above the top blue bar and becoming stuck there.
            $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

            if (!budgetRequestId) {
                displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog_FromTrashBin(). Unexpected value for budgetRequestId: ' + budgetRequestId);
            }

            if (bwRequestJson) {
                console.log('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). bwRequestJson has been passed.');
            }

            var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            if (!participantId) {

                displayAlertDialog('In displayRequestFormDialog_FromTrashBin(). Unexpected value for participantId: ' + participantId); // + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                // The user is not logged in, so create an offline request.
                this.displayOfflineRequestFormDialog(budgetRequestId, participantId);
            } else {







                // It is not necesary to have this value here.... perhaps we shouldn't even be passing it???
                //if (!bwWorkflowTaskItemId) {
                //    var msg = 'In displayRequestFormDialog_FromTrashBin(). Invalid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId;
                //    console.log(msg);
                //    alert(msg);
                //}












                // The user is logged in.
                var requestDialogId = 'divRequestFormDialog_' + budgetRequestId;
                var html = '';
                //html += '<div style="display:none;" id="divRequestFormDialog">';
                html += '        <table style="width:100%;" class="context-menu-requestdialog">';
                html += '            <tr>';
                html += '                <td style="width:90%;">';
                html += '                    <span id="divRequestFormDialogContent"></span>';
                html += '                </td>';
                html += '            </tr>';
                html += '        </table>';
                html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                html += '        <br /><br />';
                //html += '    </div>';

                //
                // THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
                //
                var div = document.getElementById(requestDialogId); // 4-1-2020 12-28pm adt.
                if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                    div = document.createElement('div');
                    div.id = requestDialogId;
                    document.body.appendChild(div); // to place at end of document
                }
                div.innerHTML = html;







                //alert('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). WE NEED TO SCRAPE THE REQUEST before displaying it in the new window. Otherwise force it to save. xcx993357.');





                // Check if the dialog is already instantiated. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  6-6-2020  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                if ($('#' + requestDialogId).dialog('instance')) {
                    $('#' + requestDialogId).dialog('close')
                }

                thiz.options.numberOfRequestFormsCurrentlyDisplayed += 1;
                var xJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;
                var yJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;

                //// debugger; // 10-18-2020 testing colli
                //position: {
                //        my: "center",
                //        at: "center",
                //        of: window,
                //        collision: "fit",
                //    // Ensure the titlebar is always visible
                //        using: function( pos ) {
                //            var topOffset = $( this ).css( pos ).offset().top;
                //            if ( topOffset < 0 ) {
                //                $( this ).css( "top", pos.top - topOffset );
                //            }
                //        }
                //}, // 'containment' is an attribute that may be useful here as well.

                //alert('xcx23425345-4');

                console.log('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). THIS IS THE ONLY PLACE THIS SHOULD BE HAPPENING. 4-3-2023 xcx23425345-4');

                var position;
                if (window.opener) {

                    position = { // This is where the request dialog shows up.
                        at: "top"
                    };

                } else {

                    position = { // This is where the request dialog shows up.
                        my: "left top",
                        at: "right+" + xJog + " bottom+" + yJog,
                        of: "#divTopBar_OrganizationName"
                    };

                }

                // Now that it is part of the DOM, we can display it!
                $('#' + requestDialogId).dialog({
                    //position: { // This is where the request dialog shows up!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    //    my: "left top",
                    //    at: "right+" + xJog + " bottom+" + yJog,
                    //    of: "#divTopBar_OrganizationName"
                    //},
                    position: position,
                    //draggable: { // 4-17-2022 does this work? not sure yet...
                    //    // See the open event of this dialog (below) for this to be turned off. More info there...
                    //    containment: 'window' // Does this work to keep the dialog on the screen? This is meant to fix the issue where on iOS, the dialog goes off the left side of the screen... 4-17-2022
                    //},
                    modal: false,
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    width: '800px',
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.

                    //position: {
                    //    my: "middle top+12",
                    //    at: "middle top",
                    //    of: window
                    //},
                    //options: {
                    //    bwForceClose: false, // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.
                    //},




                    // NOTE ADDED PROPERTY in the open() function. Had to force it this way: this["bwForceClose"] = false; 
                    //bwForceClose: false, // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.
                    beforeClose: function (event, ui) {
                        try {

                            alert('In beforeClose(). xcx21323453-2. DO WE EVER GET HERE? 5-10-2024.');

                            //debugger;
                            ////var bwForceClose = this.options.bwForceClose;
                            //var bwForceClose = $('#' + requestDialogId).dialog('option', 'bwForceClose');

                            // This event is triggered when a dialog attempts to close. If the beforeClose event handler (callback function) returns false, the close will be prevented.
                            console.log('');
                            console.log('==========================================');
                            console.log('xcx123124 dialog.beforeClose().COME HERE TO ENABLE THE CHECK TO SEE IF THERE IS ANYTHING TO BE SAVED BEFORE THE REQUEST IS CLOSED. The request form is being closed. Do we need to check if the user may be losing any changes? xcx12312-x-2');
                            console.log('==========================================');
                            console.log('');

                            ////alert('COME HERE TO ENABLE THE CHECK TO SEE IF THERE IS ANYTHING TO BE SAVED BEFORE THE REQUEST IS CLOSED. The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-2');

                            //if (window.opener) {
                            //    console.log('In bwRequest.js.dialog.beforeClose(). bwForceClose: ' + bwForceClose + '. This is a popped out window.');
                            //} else {
                            //    console.log('In bwRequest.js.dialog.beforeClose(). bwForceClose: ' + bwForceClose + '. This is NOT a popped out window.');
                            //}



                            //console.log('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). bwForceClose: ' + bwForceClose);
                            ////alert('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). bwForceClose: ' + bwForceClose);

                            ////displayAlertDialog_Persistent('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). bwForceClose: ' + bwForceClose); 
                            //if (bwForceClose === undefined) {

                            //    var msg = 'Unrecoverable error in bwRequest.js.displayRequestFormDialog_FromTrashBin(). This request dialog is missing property "bwForceClose".';
                            //    console.log(msg);
                            //    displayAlertDialog(msg);

                            //} else {

                            //    if (bwForceClose == true) {

                            //        return true;

                            //    } else {

                            //        var promise = thiz.checkIfThereHaveBeenAnyChanges(budgetRequestId);
                            //        promise.then(function (results) {
                            //            try {

                            //                $('#' + requestDialogId).dialog('option', 'bwForceClose', false); // This ensures that the dialog cannot be closed. We set this value to true in one place below.

                            //                if (results.status != 'SUCCESS') {

                            //                    console.log('Error in bwRequest.js.displayRequestFormDialog_FromTrashBin(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));
                            //                    displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog_FromTrashBin(). Unexpected error when checking if there have been any changes. results: ' + JSON.stringify(results));

                            //                } else {

                            //                    if (results.results == 'YES_CHANGES_TO_SAVE') {

                            //                        console.log('You have made changes to this request. You cannot close it until you save your changes.');

                            //                        //
                            //                        // The dialog displayed here should say:
                            //                        //
                            //                        // Save changes to this request before closing it? [bold]
                            //                        //
                            //                        // Your changes will be lost if you don't save them. [not bold]
                            //                        //
                            //                        // [Save] [Don't Save] [Cancel]
                            //                        //

                            //                        var dialogId = 'divPromptToSaveRequestChangesDialog';

                            //                        var div = document.getElementById(dialogId);
                            //                        if (!div) {

                            //                            div = document.createElement('div');
                            //                            div.id = dialogId;
                            //                            div.style.display = 'none';
                            //                            document.body.appendChild(div); // Place at end of document

                            //                            var html = '';

                            //                            html += '        <table style="width:100%;">';
                            //                            html += '            <tr>';
                            //                            html += '                <td style="width:90%;">';
                            //                            html += '                    <br /><br />';
                            //                            html += '                    <span style="font-size:25pt;font-weight:bold;">Save changes to this request before closing it?</span>';
                            //                            html += '                    <br /><br />';
                            //                            html += '                    <span style="font-size:25pt;font-weight:normal;">Your changes will be lost if you don\'t save them.</span>';
                            //                            html += '                </td>';
                            //                            html += '            </tr>';
                            //                            html += '        </table>';
                            //                            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                            //                            html += '        <br /><br />';

                            //                            div.innerHTML = html;
                            //                        }

                            //                        $('#' + dialogId).dialog({
                            //                            modal: true,
                            //                            resizable: false,
                            //                            //closeText: "Cancel",
                            //                            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                            //                            title: 'Save Changes',
                            //                            width: "720",
                            //                            dialogClass: "no-close", // No close button in the upper right corner.
                            //                            hide: false,//, // This means when hiding just disappear with no effects.
                            //                            buttons: {
                            //                                "Save": function () {
                            //                                    try {
                            //                                        $('.bwRequest').bwRequest('saveAndPublishTheRequest', requestDialogId, 'true', '').then(function (results) {
                            //                                            try {

                            //                                                if (results.status == 'SUCCESS') {

                            //                                                    $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                            //                                                    $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                            //                                                    //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                            //                                                    $('#divPromptToSaveRequestChangesDialog').dialog("close");

                            //                                                } else if (results.status == 'REFUSED_SAVE_CHANGED_ORGID') {
                            //                                                    $('#divPromptToSaveRequestChangesDialog').dialog("close");
                            //                                                } else {
                            //                                                    $('#divPromptToSaveRequestChangesDialog').dialog("close");
                            //                                                }

                            //                                            } catch (e) {
                            //                                                displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.checkIfThereHaveBeenAnyChanges.Save.saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack);
                            //                                            }
                            //                                        }).catch(function (e) {

                            //                                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.checkIfThereHaveBeenAnyChanges.Save(). Unexpected exception saving the request: ' + JSON.stringify(e));

                            //                                        });
                            //                                    } catch (e) {
                            //                                        displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.checkIfThereHaveBeenAnyChanges.Save(): ' + e.message + ', ' + e.stack);
                            //                                    }
                            //                                },
                            //                                "Don\'t Save and Lose Changes": function () {
                            //                                    try {
                            //                                        $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                            //                                        $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)
                            //                                        //$('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId);
                            //                                        $('#divPromptToSaveRequestChangesDialog').dialog("close");
                            //                                    } catch (e) {
                            //                                        displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.checkIfThereHaveBeenAnyChanges.DontSave(): ' + e.message + ', ' + e.stack);
                            //                                    }
                            //                                },
                            //                                "Cancel": function () {
                            //                                    $('#divPromptToSaveRequestChangesDialog').dialog("close");

                            //                                }
                            //                            },
                            //                            open: function (event, ui) {
                            //                                $('.ui-widget-overlay').bind('click', function () { $('#divPromptToSaveRequestChangesDialog').dialog('close'); });
                            //                            }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                            //                            close: function (event, ui) {
                            //                                //console.log('In index.js.displayAlertDialog_Persistent(). THIS DIALOG DOES NOT CLEAN UP AFTER ITSELF. THIS WILL HAVE TO BE DONE SOMEDAY. <<<<<<<<<<<<<<<<<<<<<<<<<<');

                            //                                // This one is important and works great. 1-31-2023.
                            //                                window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.

                            //                            }
                            //                        });
                            //                        //$("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                            //                    } else if (results.results == 'NO_CHANGES_TO_SAVE') {

                            //                        $('#' + requestDialogId).dialog('option', 'bwForceClose', true); // This is the only time we allow this to happen.
                            //                        $('#' + requestDialogId).dialog('close'); // We set the bwForceClose flag, now have to actually call the close() function. Done, it is closed, and the user didn't lose anything. :)

                            //                    } else {

                            //                        console.log('Error in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));
                            //                        displayAlertDialog('Error in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges(). Unexpected value from checkIfThereHaveBeenAnyChanges(). results: ' + JSON.stringify(results));

                            //                    }

                            //                }
                            //            } catch (e) {
                            //                console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                            //                displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():2: ' + e.message + ', ' + e.stack);
                            //            }
                            //        }).catch(function (e) {

                            //            console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));
                            //            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose.checkIfThereHaveBeenAnyChanges():1: ' + JSON.stringify(e));

                            //        });

                            //        return false; // THIS LINE HAS TO GO AFTER THE PROMISE!!!! If the beforeClose event handler (callback function) returns false, the close will be prevented.

                            //    }
                            //}

                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.beforeClose(): ' + e.message + ', ' + e.stack);
                        }
                    },
                    close: function (event) {
                        try {

                            console.log('>>>>>>> xcx213134 in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.close().');

                            thiz.options.numberOfRequestFormsCurrentlyDisplayed -= 1;

                            if (window.opener) {
                                //alert('xcx213134 in close(). This is a popped out window, so we need to check if the user is losing any changes.');

                                // The dialog is closing, so we will also close the popped out window. Woop!
                                window.close();

                            } else {


                            }






                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.close(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.close(): ' + e.message + ', ' + e.stack);
                        }
                    },
                    open: function () {
                        try {

                            console.log('In xcx2342132314 dialog.open() <<<<<<<<< 4-19-2023');

                            this["bwForceClose"] = false; // Using this as our flag to get around how the closing works, when we are checking if the user has unsaved changes or not. See also beforeClose below.

                            $('#' + requestDialogId).css('overflow', 'hidden'); // This keeps the scroll bars from showing up on the form dialog!!!!!!!! 7-13-2020

                            // 4-17-2022 does this work? not sure yet...
                            //$('#' + requestDialogId).dialog({ draggable: true }); // This gets rid of the containment. We only needed it for when the dialog first is displayed.... after that, the user can put it anywhere they like.



                            var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                            var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                            element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                            var html = '';
                            html += '<table xcx="xcx3249-2-2" style="width:100%;background-color:tomato;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');" ondblclick="$(\'.bwRequest\').bwRequest(\'zoomAndCenter\', \'' + requestDialogId + '\');" >'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                            html += '   <tr>';
                            html += '       <td style="width:95%;">';
                            html += '           <div id="slider_' + budgetRequestId + '" style="width:20%;cursor:pointer;"></div>';
                            html += '       </td>';

                            html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                            html += '           <span style="color:white;font-size:25pt;font-weight:bold;">TrashBinned Request</span>';
                            html += '       </td>';

                            html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
                            if (window.opener) {
                                html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'LaunchIntoHomeWindow\', \'' + budgetRequestId + '\');">';
                                html += '               ☈';
                                html += '           </span>';
                            } else {
                                html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;cursor:pointer;font-size:30pt;" onclick="$(\'.bwRequest\').bwRequest(\'LaunchIntoSeparateWindow\', \'' + requestDialogId + '\', \'' + budgetRequestId + '\', \'' + bwWorkflowTaskItemId + '\');">';
                                html += '               ↸2';
                                html += '           </span>';
                            }
                            html += '       </td>';

                            html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                            html += '           <span title="print" class="printButton" dev="xcx32424-1-2" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'.bwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + requestDialogId + '\');">';
                            html += '               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;" />';
                            html += '           </span>';
                            html += '       </td>';

                            html += '       <td>&nbsp;&nbsp;</td>';

                            html += '       <td>';
                            html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'' + requestDialogId.replace('_Parent', '') + '\');">X</span>';
                            html += '       </td>';
                            html += '   </tr>';
                            html += '</table>';
                            document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                            $("#slider_" + budgetRequestId).slider({
                                min: 50,
                                max: 200,
                                value: 100, // It starts off full size.
                                slide: function (event, ui) {
                                    thiz.setZoom(ui.value, requestDialogId);
                                }//,
                                //change: function (event, ui) {
                                //    thiz.setZoom(ui.value, requestDialogId);
                                //}
                            });
                            thiz.setZoom(100, requestDialogId);

                            // Render the Print button.
                            //var printButtonOptions = {
                            //    reportType: 'IndividualRequestReport',
                            //    store: thiz.options.store,
                            //    bwWorkflowAppId: thiz.options.bwWorkflowAppId
                            //    //bwBudgetRequestId: this.options.bwBudgetRequestId
                            //};
                            //var $printbutton = $('#' + requestDialogId + '_spanRequestPrintButton').bwPrintButton(printButtonOptions);

                            $('.ui-widget-overlay').bind('click', function () {
                                $('#' + requestDialogId).dialog('close');
                            });








                            //
                            // THIS IS THE ONLY PLACE WHERE THE FORM GETS DISPLAYED. 9-28-2022
                            //
                            //thiz.displayRequestForm(budgetRequestId, requestDialogId, bwWorkflowTaskItemId, selectedRaciRole, bwRequestJson); // Broke out into this method 7-26-2022

                            //console.log('Calling displayRequestForm(). bwRequestJson: ' + JSON.stringify(bwRequestJson));
                            //alert('>>>>>>> Yes, calling displayRequestForm_FromTrashBin(), but we need a displayRequestForm_ForTrashBin() version instead!!! bwRequestJson: ' +JSON.stringify(bwRequestJson));
                            thiz.displayRequestForm_ForTrashBin(budgetRequestId, requestDialogId, '', selectedRaciRole, bwRequestJson); // Broke out into this method 7-26-2022 removed bwWorkflowTaskItemId on 10-24-2022








                        } catch (e) {
                            console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.open(): ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin.dialog.open(): ' + e.message + ', ' + e.stack);
                        }

                    }
                });
                $('#' + requestDialogId).dialog('option', 'bwForceClose', false); // This ensures that the dialog cannot be closed. We set this value to true in one place below.


                alert('In bwRequest.js.displayRequestFormDialog_FromTrashBin(). Changing z-index here. Why?? Is it necessary? xcx123124-2.');

                try { // SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW
                    $('.ui-widget-overlay')[0].style.zIndex = 9;
                } catch (e) {
                    console.log('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                }
                $('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin():1: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayRequestFormDialog_FromTrashBin():1: ' + e.message + ', ' + e.stack);
        }
    },

    displayRequestFormDialog_IndexDB: function (budgetRequestId, participantId, indexDbCursorValue) {
        try {
            // Display and populate the offline request form.

            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            console.log('In displayRequestFormDialog_IndexDB(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId + ', indexDbCursorValue: ' + JSON.stringify(indexDbCursorValue));
            alert('In displayRequestFormDialog_IndexDB(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId + ', indexDbCursorValue: ' + JSON.stringify(indexDbCursorValue));

            var thiz = this;

            if (!participantId) {
                // The user is not logged in, so create an offline request.
                console.log('In displayRequestFormDialog_IndexDB(). Are you not logged in? This functionality is incomplete. Coming soon! xcx78366. Note that displayOfflineRequestFormDialog() method renders the top buttons ok, we will need this part....<<<<< ');
                displayAlertDialog('In displayRequestFormDialog_IndexDB(). Are you not logged in? This functionality is incomplete. Coming soon! xcx78366');
                //this.displayOfflineRequestFormDialog(budgetRequestId, participantId);
            } else {
                // The user is logged in.
                console.log('In displayRequestFormDialog_IndexDB(). The user is logged in. Note that displayOfflineRequestFormDialog() method renders the top buttons ok, we will need this part....<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ');

                var requestDialogId = 'divRequestFormDialog_' + budgetRequestId;
                var html = '';
                //html += '<div style="display:none;" id="divRequestFormDialog">';
                html += '        <table style="width:100%;" class="context-menu-requestdialog">';
                html += '            <tr>';
                html += '                <td style="width:90%;">';
                html += '                    <span id="divRequestFormDialogContent"></span>';
                html += '                </td>';
                html += '            </tr>';
                html += '        </table>';
                html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                html += '        <br /><br />';
                //html += '    </div>';

                //
                // THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
                //
                var div = document.getElementById(requestDialogId); // 4-1-2020 12-28pm adt.
                if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                    div = document.createElement('div');
                    div.id = requestDialogId;
                    document.body.appendChild(div); // to place at end of document
                }
                div.innerHTML = html;

                // Check if the dialog is already instantiated. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  6-6-2020  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                //if ($('#' + requestDialogId).dialog('instance')) {
                //    $('#' + requestDialogId).dialog('close')
                //} else {
                //    //// debugger;
                //    //var x = 'this';
                //}
                console.log('xcx233532 removed this 4-7-2022 3-53pm adt');


                thiz.options.numberOfRequestFormsCurrentlyDisplayed += 1;
                var xJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;
                var yJog = thiz.options.numberOfRequestFormsCurrentlyDisplayed * 50;

                var bwRequestJson = indexDbCursorValue;
                // Now that it is part of the DOM, we can display it!



                console.log('Instantiating dialog xcx243253562 yJog: ' + yJog);
                alert('Instantiating dialog xcx243253562 yJog: ' + yJog);



                $('#' + requestDialogId).dialog({
                    position: { // This is where the request dialog shows up!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        my: "left top",
                        at: "right+" + xJog + " bottom+" + yJog,
                        of: "#divTopBar_OrganizationName" // xcx1
                    },

                    //overflow: 'hidden', // 7-13-2020

                    modal: false,
                    resizable: false,
                    draggable: {
                        containment: "window"
                    },
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    width: '800px',
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    //resizable: true, // NOT SURE THIS IS A GOOD IDEA. 4-5-2020.
                    close: function () {

                        displayAlertDialog('In xcx8707(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x');

                        thiz.options.numberOfRequestFormsCurrentlyDisplayed -= 1;
                    },
                    open: function () {
                        //// debugger;
                        $('#' + requestDialogId).css('overflow', 'hidden'); // This keeps the scroll bars from showing up on the form dialog!!!!!!!! 7-13-2020

                        var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';
                        html += '<table xcx="xcx3249-3" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + budgetRequestId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        //html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
                        //html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;">[spanRequestPrintButton]</span>';
                        //html += '       </td>';
                        html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                        //html += '           <span title="print" class="printButton" style="font-size:18pt;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintMyPendingTasksReport\');">🖨&nbsp;</span>';



                        console.log('In bwRequest.js.PrintIndividualRequestReport(). Rendering this button. xcx2');


                        // 2-12-2022
                        //html += '           <span title="print" class="printButton" style="font-size:18pt;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + requestDialogId + '\');">🖨&nbsp;</span>';
                        html += '           <span title="print" class="printButton" dev="xcx32424-2" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + requestDialogId + '\');">';
                        html += '               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;" />';
                        html += '           </span>';



                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';
                        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                        $("#slider_" + budgetRequestId).slider({
                            min: 0,
                            max: 100,
                            value: 100, // It starts off full size.
                            slide: function (event, ui) {
                                thiz.setZoom(ui.value, requestDialogId);
                            }//,
                            //change: function (event, ui) {
                            //    thiz.setZoom(ui.value, requestDialogId);
                            //}
                        });

                        // Render the Print button.
                        //var printButtonOptions = {
                        //    reportType: 'IndividualRequestReport',
                        //    store: thiz.options.store,
                        //    bwWorkflowAppId: thiz.options.bwWorkflowAppId
                        //    //bwBudgetRequestId: this.options.bwBudgetRequestId
                        //};
                        //var $printbutton = $('#' + requestDialogId + '_spanRequestPrintButton').bwPrintButton(printButtonOptions);

                        // 
                        $('.ui-widget-overlay').bind('click', function () {
                            $('#' + requestDialogId).dialog('close');
                        });


                        if (!bwRequestJson) {
                            alert('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx41202012');
                        } else {

                            console.log('In bwRequest.js.displayRequestFormDialog_IndexDB(). Getting ready to call getRequestFormHtml(). bwRequestType: ' + bwRequestJson.bwRequestType);
                            //var bwRequestType = {
                            //    Abbreviation: bwRequestJson.bwRequestType,
                            //    RequestType: bwRequestJson.bwRequestType,
                            //    bwRequestTypeId: bwRequestJson.bwRequestType
                            //}
                            // debugger;
                            var promise = thiz.getRequestFormHtml(bwRequestJson.bwRequestTypeId, true, null, 'xcx23452-10'); // thisIsAnOfflineRequest = true
                            promise.then(function (results) {
                                try {
                                    // debugger;
                                    if (results.message != null) {
                                        // We have an error!!
                                        //document.getElementById('divPageContent1').innerHTML = results.message;
                                        $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;
                                    } else {
                                        //document.getElementById('divPageContent1').innerHTML = results.html;
                                        $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;


                                        // debugger;

                                        // Chnaged 1-12-2022
                                        //

                                        console.log('Calling populateNewRequestForm_IndexDb(). xcx23436-4 but actually calling populateNewRequestForm_IndexDb!!!');
                                        //thiz.populateNewRequestForm(requestDialogId, '', JSON.stringify(bwRequestJson));
                                        //thiz.populateRequestForm(requestDialogId, JSON.stringify(bwRequestJson), true);

                                        //alert('Calling populateNewRequestForm_IndexDb(). xcx23436-4 but actually calling populateNewRequestForm_IndexDb!!!');

                                        thiz.populateNewRequestForm_IndexDb(requestDialogId, bwRequestJson);


                                        //
                                        // BRING THE BELOW BACK SOON!!!!!!!!!!!!!!!!!!!!!!!!!!!! 5-18-2020
                                        //var x = BWMData;
                                        //if (!BWMData[0]) {
                                        //    // debugger; // 2-11-2020 2-23pm ast
                                        //    var y = 'BAD'; // If we are here, we need to load BWMData. There may be a better place to do this, but for now we will do this here.
                                        //    // debugger;
                                        //    $('#divBwCoreComponent').bwCoreComponent('loadWorkflowAppConfigurationDetails9');
                                        //    //loadWorkflowAppConfigurationDetails9
                                        //}

                                        //window.onresize = thiz.requestWindow_OnResize; //(); //reportWindowSize;
                                    }

                                } catch (e) {
                                    console.log('Exception in displayRequestFormDialog():21-2: ' + e.message + ', ' + e.stack);
                                    // debugger; // DISPLAY ON THE FORM
                                }
                            });
                        }


                    }
                });

                alert('In bwRequest.js.displayRequestFormDialog_IndexDB(). Changing z-index here. Why?? Is it necessary? xcx123124-3.');

                try { // SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW
                    $('.ui-widget-overlay')[0].style.zIndex = 9;
                } catch (e) {
                    console.log('Caught Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                }
                $('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020



            }
        } catch (e) {
            console.log('Exception in displayRequestFormDialog_IndexDB: ' + e.message + ', ' + e.stack);
        }
    },

    displayRequestFormForMobile: function (budgetRequestId, participantId, title, selectedRaciRole, bwRequestType) {
        try {
            //// debugger;
            // Display and populate the "Existing Request" form.
            console.log('In displayRequestFormForMobile(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId);
            alert('In displayRequestFormForMobile(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId);
            var thiz = this;







            // This is the "Tasks" tab.
            var html = '';
            html += '<span id="welcomePageMyTasksTabSpanTag1" ';
            html += '  onmouseover="this.style.cursor=\'pointer\';this.style.textDecoration=\'underline\';var taskTabContent = document.getElementById(\'welcomePageMyTasksTabSpanTag1\').innerHTML;document.getElementById(\'welcomePageMyTasksTabSpanTag1\').innerHTML = \'<< Tasks (6)*\';" ';
            html += '  onmouseout="this.style.textDecoration=\'none\';document.getElementById(\'welcomePageMyTasksTabSpanTag1\').innerHTML = taskTabContent;" ';
            //
            //html += '  onclick="var proceed = confirm(\'Choose [[OK]] to view [Your Tasks] and cancel changes to this budget request. Choose [[CANCEL]] to [stay] on this budget request and continue with it...\'); ';
            //html += '  if (proceed) {';
            //html += '    console.log(\'PROCEEDING! NEED TO DISPLAY TASKS!\'); ';
            //html += '   redirectForm();';
            //html += '  } else { ';
            //html += '    console.log(\'DO NOT PROCEED\'); ';
            //html += '    alert(\'DO NOT PROCEED\');';
            //html += '  };" ';

            //html += '  onclick="redirectForm();" ';
            //html += '  onclick="alert(\'This functionality is incomplete.xcx72947\');" '; // renderAlerts
            html += '  onclick="$(\'.bwRequest\').bwRequest(\'hideRequestAndPrepareToRenderAlerts\');" ';

            html += '>';
            html += title + ' <span style="color:red;font-weight:bold;">';
            html += ' (6*)</span>';
            html += '</span>';
            document.getElementById('welcomePageMyTasksTabTitle').innerHTML = html;





            // SWITCH THE TAB!
            $("#welcomePageTabs").tabs("option", "active", 1);























            //this.options.bwBudgetRequestId = budgetRequestId;
            if (!participantId) {
                // The user is not logged in, so create an offline request.
                this.displayOfflineRequestFormDialog(budgetRequestId, participantId);
            } else {
                //// The user is logged in.
                var requestDialogId = 'welcomePageMyTasksTab';
                //var requestDialogId = 'divRequestFormDialog_' + budgetRequestId;
                //var html = '';
                ////html += '<div style="display:none;" id="divRequestFormDialog">';
                //html += '        <table style="width:100%;" class="context-menu-requestdialog">';
                //html += '            <tr>';
                //html += '                <td style="width:90%;">';
                //html += '                    <span id="divRequestFormDialogContent"></span>';
                //html += '                </td>';
                //html += '            </tr>';
                //html += '        </table>';
                //html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
                //html += '        <br /><br />';
                ////html += '    </div>';

                ////
                //// THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
                ////
                //var div = document.getElementById(requestDialogId); // 4-1-2020 12-28pm adt.
                //if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                //    div = document.createElement('div');
                //    div.id = requestDialogId;
                //    document.body.appendChild(div); // to place at end of document
                //}
                //div.innerHTML = html;
                ////// debugger;


                //// Check if the dialog is already instantiated. >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  6-6-2020  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                //if ($('#' + requestDialogId).dialog('instance')) {
                //    //// debugger;
                //    //var x = 'this';
                //    $('#' + requestDialogId).dialog('close')
                //} else {
                //    //// debugger;
                //    //var x = 'this';
                //}



                //// Now that it is part of the DOM, we can display it!
                //$('#' + requestDialogId).dialog({
                //    modal: true,
                //    resizable: false,
                //    //draggable:{
                //    //    containment: "window"
                //    //},
                //    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                //    width: '800px',
                //    dialogClass: "no-close", // No close button in the upper right corner.
                //    hide: false, // This means when hiding just disappear with no effects.
                //    //resizable: true, // NOT SURE THIS IS A GOOD IDEA. 4-5-2020.
                //    open: function () {
                //        //// debugger;
                //        var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                //        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                //        element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                //        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                //        var html = '';
                //        html += '<table style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                //        html += '   <tr>';
                //        html += '       <td style="width:95%;">';
                //        html += '           <div id="slider_' + budgetRequestId + '" style="width:20%;cursor:pointer;"></div>';
                //        html += '       </td>';
                //        //html += '       <td style="vertical-align:top;width:5%;padding:0;border:0;margin:0;">';
                //        //html += '           <span id="' + requestDialogId + '_spanRequestPrintButton" style="text-align:right;">[spanRequestPrintButton]</span>';
                //        //html += '       </td>';
                //        html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';
                //        html += '           <span title="print" class="printButton" style="font-size:18pt;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintMyPendingTasksReport\');">🖨&nbsp;</span>';
                //        html += '       </td>';
                //        html += '       <td>';
                //        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                //        html += '       </td>';
                //        html += '   </tr>';
                //        html += '</table>';
                //        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                //        $("#slider_" + budgetRequestId).slider({
                //            min: 0,
                //            max: 100,
                //            value: 100, // It starts off full size.
                //            slide: function (event, ui) {
                //                thiz.setZoom(ui.value, requestDialogId);
                //            }//,
                //            //change: function (event, ui) {
                //            //    thiz.setZoom(ui.value, requestDialogId);
                //            //}
                //        });

                //        // Render the Print button.
                //        //var printButtonOptions = {
                //        //    reportType: 'IndividualRequestReport',
                //        //    store: thiz.options.store,
                //        //    bwWorkflowAppId: thiz.options.bwWorkflowAppId
                //        //    //bwBudgetRequestId: this.options.bwBudgetRequestId
                //        //};
                //        //var $printbutton = $('#' + requestDialogId + '_spanRequestPrintButton').bwPrintButton(printButtonOptions);

                //        // 
                //        $('.ui-widget-overlay').bind('click', function () {
                //            $('#' + requestDialogId).dialog('close');
                //        });

                //
                // THIS IS WHERE WE PARSE THE WORKFLOW JSON AND CUSTOMIZE THE FORM!!!!!!!!!!!!!!
                //
                //// debugger;
                var operationUri = webserviceurl + "/bwbudgetrequests/" + tenantId + '/' + workflowAppId + '/' + budgetRequestId + '/' + participantId; // CHANGED ADDED tenantId, workflowAppId to the webservice call 7-10-2020
                $.ajax({
                    url: operationUri,
                    method: "GET",
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (brData) {
                        try {
                            //// debugger; // find the fiscal year!!!<<<<<<<<<<<<<<<<<<<wait forget that it will be with the bwRequestJson
                            //if (brData.indexOf('PERMISSION DENIED. INACTIVE USER.') > -1) {
                            //    displayAlertDialog(brdata);
                            //}
                            //thiz.options.store.FiscalYear = xx;
                            // Load our json.
                            //// debugger; // Look to see if the brData.BudgetRequests[0].bwRequestJson.Checklists is empty!! It should be!!!!!!!!!!!!!!!!!!!!
                            if (!brData.BudgetRequests || !brData.BudgetRequests[0].bwRequestJson || brData.BudgetRequests[0].bwRequestJson == '') {
                                alert('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx4120202');
                            } else {

                                //// debugger; // WE NEED TO MAKE SURE WE ARE GETTING CORRECT DATA!

                                //thiz.options.store = JSON.parse(brData.BudgetRequests[0].bwRequestJson);
                                var bwRequestJson = JSON.parse(brData.BudgetRequests[0].bwRequestJson);
                                //thiz.options.bwRequestType = brData.BudgetRequests[0].bwRequestType;
                                //// debugger;
                                $.ajax({
                                    //url: thiz.options.operationUriPrefix + "odata/WorkflowConfiguration/" + tenantId + "/" + workflowAppId + "/" + "true", // brData.BudgetRequests[0].bwWorkflowId // Need to change this so that we look for the bwWorkflowId!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                    url: thiz.options.operationUriPrefix + "odata/WorkflowConfiguration5/" + tenantId + "/" + workflowAppId + "/" + brData.BudgetRequests[0].bwBudgetRequestId,
                                    dataType: "json",
                                    contentType: "application/json",
                                    type: "Get",
                                    timeout: thiz.options.ajaxTimeout
                                }).done(function (result) {
                                    try {
                                        //// debugger;
                                        if (result.value.length == 0) {
                                            alert('ERROR: Cannot locate workflowxcx92 for bwBudgetRequestId: ' + brData.BudgetRequests[0].bwBudgetRequestId);

                                            //var instructions = '';
                                            //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                            //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                                        } else {

                                            //// debugger; 
                                            var workflowParent = result.value[0];
                                            var workflow = JSON.parse(result.value[0].bwWorkflowJson);

                                            // Display the form.
                                            //var promise = thiz.renderRequestFormHtml_CapitalPlan_ExistingRequestScreen(requestDialogId); //'divRequestFormDialogContent');
                                            //var promise = thiz.getRequestFormHtml_CapitalPlan(requestDialogId); //'divPageContent1');
                                            // debugger;
                                            alert('xcx235-6 getting ready to call getRequestFormHtml(). bwRequestType: ' + brData.BudgetRequests[0].bwRequestType);
                                            var bwRequestType = {
                                                Abbreviation: brData.BudgetRequests[0].bwRequestType,
                                                RequestType: brData.BudgetRequests[0].bwRequestType,
                                                bwRequestTypeId: brData.BudgetRequests[0].bwRequestType
                                            }
                                            var promise = thiz.getRequestFormHtml(bwRequestType.bwRequestTypeId, null, null, 'xcx23452-12'); // brData.BudgetRequests[0].bwRequestType);
                                            promise.then(function (results) {
                                                try {
                                                    //if (brData.BudgetRequests[0].bwRequestType == 'recurringexpense') {
                                                    //    // debugger;
                                                    //    displayAlertDialog('xxxxxxxxcx34564544');
                                                    //}
                                                    if (results.message != null) {
                                                        // We have an error!!
                                                        $('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.message;
                                                        //document.getElementById('divRequestFormDialogContent').innerHTML = results.message;
                                                    } else {
                                                        //document.getElementById('divPageContent1').innerHTML = results.html;
                                                        //document.getElementById('divRequestFormDialogContent').innerHTML = results.html;


                                                        //// debugger;
                                                        //$('#' + requestDialogId).find('#divRequestFormDialogContent')[0].innerHTML = results.html;
                                                        $('#welcomePageMyTasksTab')[0].innerHTML = results.html; // welcomePageMyTasksTab
                                                        //// debugger;
                                                        //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwrequesttype', brData.BudgetRequests[0].bwRequestType); // removed 1-7-2022
                                                        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwbudgetrequestid', brData.BudgetRequests[0].bwBudgetRequestId);
                                                        //$('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bwworkflowid', brData.BudgetRequests[0].bwWorkflowId); // removed 1-7-2022

                                                        //var options = {
                                                        //    bwTenantId: tenantId,
                                                        //    bwWorkflowAppId: workflowAppId,
                                                        //    bwParticipantId: participantId,
                                                        //    bwParticipantEmail: participantEmail,
                                                        //    bwParticipantFriendlyName: participantFriendlyName,
                                                        //    bwEnabledRequestTypes: bwEnabledRequestTypes
                                                        //};
                                                        //var $bwLocationPicker = $('#' + requestDialogId).find("#divBwLocationPicker").bwLocationPicker(options);

                                                        //var commentsFieldOptions = {
                                                        //    requestDialogId: requestDialogId,
                                                        //    commentsAreRequired: true,
                                                        //    consolidatedCommentsJson: JSON.parse(brData.BudgetRequests[0].bwRequestJson).ConsolidatedComments
                                                        //};
                                                        //var $commentsfield = $('#' + requestDialogId).find("#divBwCommentsField").bwCommentsField(commentsFieldOptions);


                                                        //// debugger; // xcx4495876
                                                        //var descriptionFieldOptions = {
                                                        //    requestDialogId: null
                                                        //};
                                                        //var $descriptionfield = $("#divBwDescriptionField").bwDescriptionField(descriptionFieldOptions);

                                                        //var attachmentsOptions = {
                                                        //    requestDialogId: null
                                                        //};
                                                        //var $attachments = $('#' + requestDialogId).find("#divBwAttachments").bwAttachments(attachmentsOptions);
                                                        //// NEED TO IMLEMET THIS???? THIS IS HOW NEW REQUEST FORM DOES IT 5-2-2020
                                                        ////thiz.populateNewRequestForm('divPageContent1'); // divPageContent1 <<< The new request form container tag!!!!!!!!!!!! There is only one of these, unlike the request dialogs.


                                                        //thiz.options.store.OrgId = brData.BudgetRequests[0].OrgId;
                                                        //thiz.options.store.OrgName = brData.BudgetRequests[0].OrgName;
                                                        //// debugger;
                                                        var bwOrgId = brData.BudgetRequests[0].OrgId;
                                                        var bwOrgName = brData.BudgetRequests[0].OrgName;
                                                        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgid', bwOrgId);
                                                        $('#' + requestDialogId).find('#budgetrequestform')[0].setAttribute('bworgname', bwOrgName);

                                                        var functionalAreaId = brData.BudgetRequests[0].FunctionalAreaId; //1;
                                                        var pmAccountId = brData.BudgetRequests[0].ManagerId; //9;
                                                        var managerFriendlyName = brData.BudgetRequests[0].ManagerFriendlyName;
                                                        var arStatus = brData.BudgetRequests[0].ARStatus; //'Submitted';
                                                        var workflowStatus = brData.BudgetRequests[0].BudgetWorkflowStatus; //'Assign Budget'; // renamed to "Admin".
                                                        //var xml = brData.BudgetRequests[0].bwDocumentXml
                                                        bwApprovalLevelWorkflowToken = brData.BudgetRequests[0].bwApprovalLevelWorkflowToken; // global declared in my.js

                                                        var html = '';
                                                        //html += '<span style="font-size: 200%;">';
                                                        html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';

                                                        html += '                       Budget Requestxcx2: ';
                                                        html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                                                        html += brData.BudgetRequests[0].Title;
                                                        html += '                       </span>';
                                                        html += '&nbsp;<span xcx="xcx3567-6" id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>'; // xdTextBoxRequired 
                                                        html += '</span>';
                                                        $('#' + requestDialogId).find('#spanRequestForm_Title')[0].innerHTML = html;

                                                        //
                                                        // THIS IS WHERE WE RENDER THE INSTRUCTIONS AND THE BUTTONS.
                                                        //

                                                        if (result.value.length == 0) {
                                                            // Click here to reassign to an active workflow for this "' + brData.BudgetRequests[0].bwRequestType + '".
                                                            //alert('ERROR: Cannot locate workflow: ' + brData.BudgetRequests[0].bwWorkflowId);
                                                            var instructions = '';
                                                            instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <span style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'reassignOrphanedRequestToAnActiveWorkflow\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\');">Click here to reassign to an active workflow for this "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                                            $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;
                                                        } else {
                                                            // Get the workflow step.
                                                            var stepIndex = null;
                                                            var stepName = null;
                                                            for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                                                stepName = workflow.Steps.Step[i]["@Name"];
                                                                if (stepName == workflowStatus) {
                                                                    stepIndex = i;
                                                                    break;
                                                                }
                                                            }
                                                            //// debugger;
                                                            if (stepIndex == null) {
                                                                // This is an invalid
                                                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'INVALIDWORKFLOWSTATUS workflowStatus:' + workflowStatus + ', participantRoles: ' + brData.RequestingUser.ParticipantRole + ', RACI role: ' + selectedRole + ', orgId: ' + brData.RequestingUser.OrgId;
                                                                // Display the buttons.
                                                                var html = 'xNOBUTTONSINVALIDWORKFLOWSTATUS';
                                                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequests[0].bwBudgetRequestId, brData.BudgetRequests[0].bwBudgetRequestId, html, 'xcx445566-10');

                                                                // Display the instructions.
                                                                var instructions = 'xNOINSTRUCTIONSINVALIDWORKFLOWSTATUS';
                                                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;
                                                            } else {

                                                                // RIGHT-CLICK FUNCTIONALITY!!
                                                                // This is our ellipsis context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html // event.stopImmediatePropagation()
                                                                var button = $('#' + requestDialogId).find('#spanNewRequestEllipsesButton')[0];
                                                                $(button).on('click', function (e) {
                                                                    e.preventDefault();
                                                                    e.stopImmediatePropagation();
                                                                    $(this).contextMenu();
                                                                });
                                                                // This is our right-click context menu. MIT license and code at: https://swisnl.github.io/jQuery-contextMenu/demo/trigger-custom.html
                                                                //$.contextMenu({
                                                                //    selector: '.context-menu-newrequesteditor',
                                                                //    callback: function (key, options) {
                                                                //        if (key == 'requestjson') {
                                                                //            thiz.viewScrapedBwRequestJson(requestDialogId);
                                                                //        } else if (key == 'requestjsondignostics') {
                                                                //            displayAlertDialog('This functionality is incomplete. Coming soon! xcx445');
                                                                //        } else if (key == 'requestjsondb') {
                                                                //            //displayAlertDialog('This functionality is incomplete. Coming soon! xcx446');
                                                                //            thiz.viewDatabaseBwRequestJson(requestDialogId);
                                                                //        } else if (key == 'requesthtmldb') {
                                                                //            displayAlertDialog('This functionality is incomplete. Coming soon! xcx4471');
                                                                //        } else if (key == 'viewworkflowjson') {
                                                                //            thiz.viewWorkflowStepAndRoleJson(workflow.Steps.Step[stepIndex]);
                                                                //        }
                                                                //    },
                                                                //    items: {
                                                                //        "requestjson": { name: "Request JSON (scraped2)", icon: "edit" },
                                                                //        "requestjsondb": { name: "Request JSON from Database", icon: "edit" },
                                                                //        "requestjsondignostics": { name: "Request JSON Diagnostics", icon: "edit" },
                                                                //        "requesthtmldb": { name: "Request Form HTML from Database", icon: "edit" },
                                                                //        "viewworkflowjson": { name: "View Workflow Step/Role Json", icon: "edit" }
                                                                //    }
                                                                //});
                                                                // End: This is our right-click context menu.

                                                                // We have found the step. eg: Admin, Collaboration, etc.
                                                                // Now looking for this role: brData.RequestingUser.RoleId << eg: 'ACCT'
                                                                var selectedRole = '';
                                                                var selectedRoles = [];
                                                                var assign = null;

                                                                if (workflow.Steps.Step[stepIndex].Assign && workflow.Steps.Step[stepIndex].Assign.length) { // When only 1, the length is undefined.
                                                                    for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                        selectedRole = workflow.Steps.Step[stepIndex].Assign[x]["@Role"];
                                                                        if (brData.RequestingUser.RoleIds.indexOf(selectedRole) > -1) {
                                                                            if (!selectedRoles.includes(selectedRole)) selectedRoles.push(selectedRole);
                                                                            assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                                        } else if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                                            if (!selectedRoles.includes(selectedRole)) selectedRoles.push(selectedRole);
                                                                            assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                                            selectedRole = 'ADMIN';
                                                                            if (!selectedRoles.includes(selectedRole)) selectedRoles.push(selectedRole);
                                                                        } else {
                                                                            alert('Error matching admin role for the owner. This process cannot continue.xcx2-2');
                                                                        }
                                                                    }
                                                                } else {
                                                                    if (workflow.Steps.Step[stepIndex].Assign && brData.RequestingUser.RoleIds.indexOf(workflow.Steps.Step[stepIndex].Assign["@Role"]) > -1) {
                                                                        selectedRole = workflow.Steps.Step[stepIndex].Assign["@Role"];
                                                                        if (!selectedRoles.includes(selectedRole)) selectedRoles.push(selectedRole);
                                                                        assign = workflow.Steps.Step[stepIndex].Assign;
                                                                    } else if (brData.RequestingUser.ParticipantRole == 'owner') {
                                                                        selectedRole = 'ADMIN';
                                                                        if (!selectedRoles.includes(selectedRole)) selectedRoles.push(selectedRole);
                                                                        assign = workflow.Steps.Step[stepIndex].Assign;
                                                                    } else {
                                                                        alert('Error matching admin role for the owner. The process cannot continue.2');
                                                                    }
                                                                }

                                                                // working on selectedRole
                                                                var html = '';
                                                                if (selectedRaciRole) { // This gets passed when the RACI Role drop down gets changed... comes from changeRaciROle or some method like that... 
                                                                    if (workflow.Steps.Step[stepIndex].Assign) {
                                                                        for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                            if (selectedRaciRole.indexOf(workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) > -1) {
                                                                                if (selectedRaciRole == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                                    assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                                                }
                                                                            }
                                                                        }
                                                                    } else {
                                                                        //
                                                                        // THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.
                                                                        //
                                                                        console.log('THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.');
                                                                        html += 'THERE IS NO ASSIGN ROLE IN THIS STEP!!!!! This is probably because this means the ADMIN has to intervene to move the workflow along.';
                                                                        html += '<button title="adminMoveWorkflowToNextStep" class="BwButton350" onclick="$(\'.bwRequest\').bwRequest(\'adminMoveWorkflowToNextStep\');">ADMIN - MOVE TO NEXT STEP</button>';
                                                                        html += '<br />';
                                                                    }
                                                                } else {
                                                                    if (selectedRoles.includes('ADMIN')) {
                                                                        // Check if there is a remaining role, and decide which one to use!!
                                                                        if (selectedRoles.length > 1) {
                                                                            // Ok there are more roles. Get the first one that isn't 'ADMIN'.
                                                                            for (var z = 0; z < selectedRoles.length; z++) {
                                                                                if (selectedRoles[z] != 'ADMIN') {
                                                                                    selectedRole = selectedRoles[z];
                                                                                    for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                                                                        if (brData.RequestingUser.RoleIds.indexOf(workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) > -1) {
                                                                                            if (selectedRole == workflow.Steps.Step[stepIndex].Assign[x]["@Role"]) {
                                                                                                assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                //
                                                                // Display the buttons.
                                                                //
                                                                if (assign) {
                                                                    for (var b = 0; b < assign.Action.length; b++) {
                                                                        //if (assign.Action[b]["@Name"] == 'Approve') {
                                                                        //    // We mark the Approve button as disabled to begin with, until we verify that the user has completed their checklists, filled in comments as required, etc.
                                                                        //    html += '<button disabled onclick="' + assign.Action[b]["@JavaScript"] + '" class="BwButton200ForRequestForm" title="' + assign.Action[b].Tooltip + '">' + assign.Action[b]["@Name"] + '</button>&nbsp;';
                                                                        //} else {
                                                                        var js = assign.Action[b]["@JavaScript"];
                                                                        if (!js) {
                                                                            console.log('');
                                                                            console.log('In displayRequestFormForMobile(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-2');
                                                                            console.log('');
                                                                            js = 'alert(\'In displayRequestFormForMobile(). ERROR CREATING BUTTONS: NO ACTION JAVASCRIPT SET IN THE WORKFLOW FOR THIS ACTION: ' + assign.Action[b]["@Name"] + '. This process cannot continue. xcx2341-2\');';
                                                                            //js= '$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this);';
                                                                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + assign.Action[b].Tooltip + '">xcx1' + assign.Action[b]["@Name"] + '</button>&nbsp;';
                                                                        } else {
                                                                            html += '<button onclick="' + js + '" class="BwButton200ForRequestForm" title="' + assign.Action[b].Tooltip + '">' + assign.Action[b]["@Name"] + '</button>&nbsp;';
                                                                        }

                                                                        //}
                                                                    }
                                                                }
                                                                html += '<button onclick="$(\'#' + requestDialogId + '\').dialog(\'close\');" class="BwButton200ForRequestForm" title="Close">Close</button>&nbsp;';
                                                                // debugger; // 7-9-2020 is this the place to add the Save button? xcx2
                                                                thiz.renderRequestFormButtons(requestDialogId, brData.BudgetRequests[0].bwBudgetRequestId, brData.BudgetRequests[0].bwBudgetRequestId, html, 'xcx445566-11');

                                                                //
                                                                // Display the instructions.
                                                                //
                                                                var instructions;
                                                                instructions = '';
                                                                //

                                                                // Workflow details for auditing. 6-10-2020: This is now in the form attributes so that the developer can inspect and see... don't bother displaying to the user!
                                                                //instructions += '<span style="color:gray;">[' + workflowParent.bwWorkflowId + ' (' + workflowParent.bwRequestType + ')]</span>';
                                                                //instructions += '<br />';

                                                                //
                                                                instructions += '<span id="bwStepIndex" style="display:none;">' + stepIndex + '</span>';
                                                                var stepFriendlyName; // Should be able to remove this at some pointin the future.
                                                                if (workflow.Steps.Step[stepIndex]["@FriendlyName"]) {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@FriendlyName"];
                                                                } else {
                                                                    stepFriendlyName = workflow.Steps.Step[stepIndex]["@Name"];
                                                                }


                                                                //var ProjectTitle_clean = brData.BudgetRequests[0].ProjectTitle.replace(/["]/g, '&quot;').replace(/[']/g, '&#39;'); // This is done because if the ProjectTitle (description) has a quote in it, there will be issues! The click event will fail to invoke the method. 
                                                                instructions += '<span xcx="342352-2" style="cursor:pointer;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brData.BudgetRequests[0].Title + '\', \'' + String(brData.BudgetRequests[0].ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\');">';
                                                                instructions += 'Current workflow step: ' + stepFriendlyName;
                                                                instructions += '</span>';

                                                                if (workflow.Steps.Step[stepIndex]["@Timeout"]) {
                                                                    instructions += '&nbsp;(' + workflow.Steps.Step[stepIndex]["@Timeout"] + ' ' + workflow.Steps.Step[stepIndex]["@TimeoutUnits"] + ')';
                                                                }
                                                                instructions += '&nbsp;';


                                                                var raciTooltip = 'RACI: ';
                                                                raciTooltip += '\n';
                                                                raciTooltip += 'R = Responsible (also Recommender)  ';
                                                                raciTooltip += '\n';
                                                                raciTooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                raciTooltip += '\n';
                                                                raciTooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                raciTooltip += '\n';
                                                                raciTooltip += 'I = Informed (also Informee)  ';

                                                                instructions += '<br />';
                                                                //
                                                                instructions += '<span style="cursor:help;" title="' + raciTooltip + '">Your RACI rolexcx2: </span>';
                                                                instructions += '<select  xcx="34234-2" id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'selectedRaciRole_OnChange\', this);">'; // changeRaciRole_xcx2
                                                                // debugger;
                                                                if (selectedRaciRole) {
                                                                    for (var rr = 0; rr < selectedRoles.length; rr++) {
                                                                        if (selectedRaciRole == selectedRoles[rr]) {
                                                                            instructions += '<option selected value="' + selectedRoles[rr] + '">';
                                                                            instructions += selectedRoles[rr];
                                                                            instructions += '</option>';
                                                                        } else {
                                                                            instructions += '<option value="' + selectedRoles[rr] + '">';
                                                                            instructions += selectedRoles[rr];
                                                                            instructions += '</option>';
                                                                        }
                                                                    }
                                                                } else {
                                                                    for (var rr = 0; rr < selectedRoles.length; rr++) {
                                                                        instructions += '<option value="' + selectedRoles[rr] + '">';
                                                                        instructions += selectedRoles[rr];
                                                                        instructions += '</option>';
                                                                    }
                                                                }
                                                                instructions += '</select>';
                                                                instructions += '<br />';
                                                                $('#' + requestDialogId).find('#spanRequestForm_WorkflowAndRoleDetails')[0].innerHTML = instructions;





                                                                //
                                                                // Display the error. The following 2 lines shpw the same data. Which is best? :/
                                                                //
                                                                var html = '';
                                                                html += '<table>';

                                                                if (brData.RequestingUser.ParticipantRole == 'owner') { // You are the owner of this budget request system.
                                                                    html += '  <tr>';
                                                                    html += '    <td colspan="2">';
                                                                    html += '    <span onclick="$(\'.bwRequest\').bwRequest(\'viewThisBudgetRequestSystemDetailsDialog\');" style="text-decoration:underline;cursor:pointer;" title="xClick here to view details about this budget request system...">';
                                                                    html += '    You are the owner of this budget request system.xcx2';
                                                                    html += '    </span>';
                                                                    html += '    </td>';
                                                                    html += '  </tr>';
                                                                } else {
                                                                    html += '  <tr>';
                                                                    html += '    <td>participantRolesXCX2:</td>';
                                                                    html += '    <td>' + brData.RequestingUser.ParticipantRole + '</td>';
                                                                    html += '  </tr>';
                                                                }

                                                                html += '</table>';

                                                                $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = html;

                                                                //
                                                                // Parse the cond to get the checklists.
                                                                //
                                                                var msg = '';
                                                                var checklistsAlreadyCompleted = [];
                                                                var checklistsRemainingToBeCompleted = [];
                                                                if (assign) {
                                                                    // I HATE THIS BUT I AM GOING TO REMOVE DUPLICATES HERE. BAD PRACTICE!!!!!!!!!!!!!!!!!!!!!!!! 4-16-2020.
                                                                    console.log('I HATE THIS BUT I AM GOING TO REMOVE DUPLICATES HERE. BAD PRACTICE!!!!!!!!!!!!!!!!!!!!!!!! 4-16-2020.');
                                                                    //// debugger; // Why does this COND have so many values???? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                    var cond = assign["@Cond"];
                                                                    var newChecklistsArray = [];
                                                                    if (cond && cond.split('$ChecklistsRequired~')[1]) {
                                                                        var checklistGuidArray = cond.split('$ChecklistsRequired~')[1].split(',');
                                                                        if (checklistGuidArray) {
                                                                            for (var i1 = 0; i1 < checklistGuidArray.length; i1++) {
                                                                                if (!newChecklistsArray.includes(checklistGuidArray[i1])) newChecklistsArray.push(checklistGuidArray[i1]);
                                                                            }
                                                                            cond = '$ChecklistsRequired~' + newChecklistsArray.toString();
                                                                        }
                                                                    }

                                                                    var brChecklists = JSON.parse(brData.BudgetRequests[0].bwRequestJson).Checklists; // These are the checklists that have already been saved in the request.

                                                                    for (var j = 0; j < brChecklists.length; j++) {
                                                                        var brChecklist = JSON.parse(brChecklists[j]);
                                                                        if (brChecklist.bwChecklistTemplatesId == workflowChecklistsArray[i]) {
                                                                            //// debugger;
                                                                            var checklistJson = {
                                                                                bwChecklistTemplatesId: brChecklist.bwChecklistTemplatesId,
                                                                                //html: '<span style="cursor:pointer;white-space:nowrap;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + budgetRequestId + '\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + participantId + '\');">' + brChecklist.Title + '</span>'
                                                                                //html: '<span style="cursor:pointer;white-space:nowrap;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + budgetRequestId + '\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + participantId + '\');">' + brChecklist.Title + '</span>'
                                                                                html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequests[0].ProjectTitle + '\', \'' + brData.BudgetRequests[0].Title + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\', \'' + bwOrgId + '\');">' + brChecklist.Title + '</span>'
                                                                            }
                                                                            checklistsAlreadyCompleted.push(checklistJson); // Already completed, so put in this array.
                                                                            break;
                                                                        }
                                                                    }


                                                                    if (!cond) {
                                                                        alert('xcx123124 not cond');
                                                                        // Display "Completed Checklists".
                                                                        if (checklistsAlreadyCompleted.length > 0) {
                                                                            if (checklistsAlreadyCompleted.length == 1) {
                                                                                msg += 'Completed checklist: ';
                                                                            } else {
                                                                                msg += 'Completed checklistsxcx2312: ';
                                                                            }
                                                                            checklistsAlreadyCompleted = thiz.removeDuplicates(JSON.parse(JSON.stringify(checklistsAlreadyCompleted)));
                                                                            for (var i = 0; i < checklistsAlreadyCompleted.length; i++) {
                                                                                msg += '<span style="white-space:nowrap;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                                                                msg += '&nbsp;' + checklistsAlreadyCompleted[i].html;
                                                                                msg += '</span>';
                                                                                msg += '<br />';
                                                                            }
                                                                        }

                                                                    } else {
                                                                        if (cond.indexOf('$ChecklistsRequired~') > -1) {

                                                                            var x = cond.split('$ChecklistsRequired~')[1];
                                                                            var y = x.split('&')[0];
                                                                            var workflowChecklistsArray = y.split(','); // This is the list of checklists from the workflow.
                                                                            thiz.options.Checklists = []; // We are storing the uncompleted ones here in order to save a trip to the server when the user wants them. It is unlikely that they have been changed and therefore low concurrency risk.

                                                                            //var brChecklists = JSON.parse(brData.BudgetRequests[0].bwRequestJson).Checklists; // These are the checklists that have already been saved in the request.
                                                                            //// debugger; // SHOULD HAVE NOTHING IN brChecklists!!!!!!!!!!!!!!!!


                                                                            //for (var i = 0; i < workflowChecklistsArray.length; i++) {
                                                                            //    // Check if it has been saved/completed already.
                                                                            //    if (brChecklists) {
                                                                            //        for (var j = 0; j < brChecklists.length; j++) {
                                                                            //            var brChecklist = JSON.parse(brChecklists[j]);
                                                                            //            if (brChecklist.bwChecklistTemplatesId == workflowChecklistsArray[i]) {
                                                                            //                //// debugger;
                                                                            //                var checklistJson = {
                                                                            //                    bwChecklistTemplatesId: brChecklist.bwChecklistTemplatesId,
                                                                            //                    //html: '<span style="cursor:pointer;white-space:nowrap;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + budgetRequestId + '\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + participantId + '\');">' + brChecklist.Title + '</span>'
                                                                            //                    //html: '<span style="cursor:pointer;white-space:nowrap;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + budgetRequestId + '\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + participantId + '\');">' + brChecklist.Title + '</span>'
                                                                            //                    html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialogReadOnly\', \'' + brChecklist.bwChecklistTemplatesId + '\', \'' + brData.BudgetRequests[0].ProjectTitle + '\', \'' + brData.BudgetRequests[0].Title + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\', \'' + bwOrgId + '\');">' + brChecklist.Title + '</span>'
                                                                            //                }
                                                                            //                checklistsAlreadyCompleted.push(checklistJson); // Already completed, so put in this array.
                                                                            //                break;
                                                                            //            }
                                                                            //        }
                                                                            //    }
                                                                            //}
                                                                            //
                                                                            // Now that we have the checklists that have already been completed and store with the budget request, we can loop through and find the ones that are remaining.
                                                                            //
                                                                            //var breadcrumbHtml = $('#' + requestDialogId).find('#divPageContent1_requestOrgClickableBreadcrumb')[0].innerHTML; //divPageContent1_requestOrgClickableBreadcrumb

                                                                            for (var i = 0; i < workflowChecklistsArray.length; i++) {
                                                                                var checklistHasAlreadyBeenCompleted = false;
                                                                                for (var j = 0; j < checklistsAlreadyCompleted.length; j++) {
                                                                                    if (checklistsAlreadyCompleted[j].bwChecklistTemplatesId == workflowChecklistsArray[i]) {
                                                                                        checklistHasAlreadyBeenCompleted = true;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (checklistHasAlreadyBeenCompleted == false) {
                                                                                    for (var j = 0; j < brData.Checklists.length; j++) {
                                                                                        if (brData.Checklists[j].bwChecklistTemplatesId == workflowChecklistsArray[i]) {
                                                                                            var checklistJson = {
                                                                                                bwChecklistTemplatesId: brData.Checklists[j].bwChecklistTemplatesId,
                                                                                                html: '<span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'' + brData.Checklists[j].bwChecklistTemplatesId + '\', \'' + String(brData.BudgetRequests[0].ProjectTitle).replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + brData.BudgetRequests[0].Title + '\', \'' + brData.BudgetRequests[0].bwRequestType + '\', \'' + brData.BudgetRequests[0].bwBudgetRequestId + '\', \'' + brData.BudgetRequests[0].bwWorkflowId + '\', \'' + bwOrgId + '\');">' + JSON.parse(brData.Checklists[j].ChecklistJson).Title + '</span>'
                                                                                            }
                                                                                            checklistsRemainingToBeCompleted.push(checklistJson); // The checklists remaining to be completed get stored in this array.
                                                                                            thiz.options.Checklists.push(brData.Checklists[j]); // This makes it available to be displayed to the user without requiring a trip back to the server.
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            // Display "Completed Checklists".
                                                                            if (checklistsAlreadyCompleted.length > 0) {
                                                                                if (checklistsAlreadyCompleted.length == 1) {
                                                                                    msg += 'Completed checklist: ';
                                                                                } else {
                                                                                    msg += 'Completed checklistsxcx2312: ';
                                                                                }
                                                                                checklistsAlreadyCompleted = thiz.removeDuplicates(JSON.parse(JSON.stringify(checklistsAlreadyCompleted)));
                                                                                for (var i = 0; i < checklistsAlreadyCompleted.length; i++) {
                                                                                    msg += '<span style="white-space:nowrap;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                                                                    msg += '&nbsp;' + checklistsAlreadyCompleted[i].html;
                                                                                    msg += '</span>';
                                                                                    msg += '<br />';
                                                                                }
                                                                            }
                                                                            // Display "Pending checklists".
                                                                            if (checklistsRemainingToBeCompleted.length > 0) {
                                                                                if (checklistsRemainingToBeCompleted.length == 1) {
                                                                                    msg += 'Pending checklist(s): ';
                                                                                } else {
                                                                                    msg += 'Pending checklist(s) xcx232143-2: ';
                                                                                }
                                                                                for (var i = 0; i < checklistsRemainingToBeCompleted.length; i++) {
                                                                                    msg += '&nbsp;<span style="text-decoration:underline;">' + checklistsRemainingToBeCompleted[i].html + '</span>';
                                                                                    msg += '<br />';
                                                                                }
                                                                            }
                                                                            // Display "Checklists to be completed".
                                                                            if (checklistsRemainingToBeCompleted.length > 0) {
                                                                                msg += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                                                                msg += '&nbsp;';
                                                                                if (checklistsRemainingToBeCompleted.length == 1) {
                                                                                    msg += 'Complete the following checklist before you Approve: ';
                                                                                } else {
                                                                                    msg += 'Complete the following checklist(s) before you Approve: ';
                                                                                }
                                                                                for (var i = 0; i < checklistsRemainingToBeCompleted.length; i++) {
                                                                                    msg += '<br />';
                                                                                    //msg += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                                                                    msg += '&nbsp;<span style="text-decoration:underline;">' + checklistsRemainingToBeCompleted[i].html + '</span>';
                                                                                }
                                                                                msg += '<br />';
                                                                            }

                                                                            $('#' + requestDialogId).find('#spanRequestForm_Checklists')[0].innerHTML = msg;
                                                                        }
                                                                    }
                                                                }


                                                                //
                                                                // Display the instructions.
                                                                //alert('Display the instructions.');
                                                                instructions = '';
                                                                if (assign && assign["@Instructions"]) {
                                                                    instructions += assign["@Instructions"]; // The workflow had "Instructions" specified.
                                                                    instructions += 'WORKFLOW HAD VALID INSTRUCTIONS.xcx2231-2';
                                                                } else {
                                                                    instructions += 'COULDNOTLOCATEVALIDINSTTRUCTIONS.xcx2232-2';
                                                                    //instructions += '<br />';
                                                                }
                                                                if (checklistsRemainingToBeCompleted.length > 0) {
                                                                    instructions += 'Complete the required checklists before approving this request.';
                                                                    instructions += '<br />';
                                                                }
                                                                $('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;






                                                                //var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequests[0].bwRequestJson);
                                                                //// debugger; // allowRequestModifications test xcx2 THIS IS MOBILE
                                                                var allowRequestModifications = assign["@AllowRequestModifications"];
                                                                if (!allowRequestModifications || allowRequestModifications == 'undefined') {
                                                                    allowRequestModifications = false;
                                                                }

                                                                alert('Calling populateRequestForm(). xcx3452-3');
                                                                var promise = thiz.populateRequestForm(requestDialogId, brData.BudgetRequests[0].bwRequestJson, allowRequestModifications);
                                                                promise.then(function () {
                                                                    try {
                                                                        //// debugger;
                                                                        // Now that rendering is complete, resize the canvas so that the circle dialogs display correctly.
                                                                        var canvas = document.getElementById("myCanvas");
                                                                        if (canvas) {
                                                                            // Resize the canvas so that this is rendered on the entire page, even the parts of the page which are scrolled out of view at the moment.
                                                                            var body = document.getElementsByTagName('body')[0];
                                                                            var clientWidth = body.scrollWidth;
                                                                            var clientHeight = Math.max(
                                                                                body.scrollHeight, document.documentElement.scrollHeight,
                                                                                body.offsetHeight, document.documentElement.offsetHeight,
                                                                                body.clientHeight, document.documentElement.clientHeight, body.scrollHeight, body.getBoundingClientRect().height
                                                                            );
                                                                            // This doesn't work 100% here because the whole screen has not been rendered yet, so we get an incorrect height value which is much less than the entire length of the page.
                                                                            // Therefore we need to remember to resize the canvas when drawing stuff, and use the sizing code from the resize event just below this code, and save it back to this.options.Canvas and this.options.CanvasContext.
                                                                            // The following resizes the bitmap from 300x150 to what we want. This prevents scaling of our drawing...
                                                                            canvas.width = clientWidth;
                                                                            canvas.height = clientHeight;
                                                                        }

                                                                        //// debugger;

                                                                        //var element = document.getElementById('txtLocationPickerFilter');
                                                                        //document.getElementById('txtLocationPickerFilter').setAttribute('bwOrgId', thiz.options.store.OrgId);
                                                                        //document.getElementById('txtLocationPickerFilter').value = thiz.options.store.OrgName; // Set the textbox to the selected location Name. 


                                                                    } catch (e) {
                                                                        console.log('Exception in displayRequestFormForMobile.populateRequestForm.then(): ' + e.message + ', ' + e.stack);
                                                                        displayAlertDialog('Exception in displayRequestFormForMobile.populateRequestForm.then(): ' + e.message + ', ' + e.stack);
                                                                    }
                                                                });

                                                            }
                                                        }

                                                        //
                                                        // NEED TO RENDER THE LOCATION PICKER HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<ToDo!
                                                        //
                                                        var options = {
                                                            bwTenantId: tenantId,
                                                            bwWorkflowAppId: workflowAppId,
                                                            bwParticipantId: participantId,
                                                            bwParticipantEmail: participantEmail,
                                                            bwParticipantFriendlyName: participantFriendlyName,
                                                            bwEnabledRequestTypes: bwEnabledRequestTypes,
                                                            bwOrgId: bwOrgId,
                                                            bwOrgName: bwOrgName
                                                        };
                                                        var $bwLocationPicker = $('#' + requestDialogId).find('#divBwLocationPicker').bwLocationPicker(options);

                                                    }
                                                } catch (e) {
                                                    console.log('Exception in displayRequestFormForMobile():21: ' + e.message + ', ' + e.stack);
                                                    // debugger; // DISPLAY ON THE FORM
                                                }
                                            });
                                        }
                                    } catch (e) {

                                        console.log('Exception in displayRequestFormForMobile():265: ' + e.message + ', ' + e.stack);
                                    }
                                });
                            }
                        } catch (e) {
                            console.log('Exception in displayRequestFormForMobile():2: ' + e.message + ', ' + e.stack);
                        }
                    },
                    error: function (data, errorCode, errorMessage) {
                        //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                        console.log('Error in displayRequestFormForMobile():1: ' + errorCode + ', ' + errorMessage + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(data));
                        displayAlertDialog('Error in displayRequestFormForMobile():1: ' + errorCode + ', ' + errorMessage + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(data));
                    }
                });
























                //    }
                //});
                //try { // SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW
                //    $('.ui-widget-overlay')[0].style.zIndex = 9;
                //} catch (e) {
                //    console.log('Exception: SHOULD NOT NEED THIS TRY-CATCH BUT A QUICK FIX FOR NOW.xcx9248. ' + e.message + ', ' + e.stack);
                //}
                //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020



            }
        } catch (e) {
            console.log('Exception in displayRequestFormForMobile: ' + e.message + ', ' + e.stack);
        }
    },



    populateRequestForm: function (requestDialogId, bwRequestJson, allowRequestModifications, formWidget_CustomRenderingInstructions) {
        console.log('***************');
        console.log('In bwRequest.js.populateRequestForm(). This is the only place where the population should be taking place. allowRequestModifications: ' + allowRequestModifications + ', formWidget_CustomRenderingInstructions: ' + JSON.stringify(formWidget_CustomRenderingInstructions));
        console.log('***************');
        //alert('In populateRequestForm(). formWidget_CustomRenderingInstructions: ' + JSON.stringify(formWidget_CustomRenderingInstructions));
        //
        // This is the only place where the population should be taking place! 4-2-2020.
        //
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                console.log('In populateRequestForm().');

                var bwRequestJson2 = JSON.parse(bwRequestJson);


                //
                // 1-14-2023
                // Now that the request has been populated, scrape and save the JSON so that we can compare it in the checkIfThereHaveBeenAnyChanges() method.
                // This makes it so that we can compare the JSON as a string, and the JSON properties will all be in the correct order. This makes things so simple and fast! :)
                //
                console.log('In populateRequestForm(). bwRequestJson2: ' + JSON.stringify(bwRequestJson2));
                var bwBudgetRequestId = bwRequestJson2.bwBudgetRequestId;

                if (!bwBudgetRequestId) {

                    //alert('Error in bwRequest.js.populateRequestForm(). Unexpected value for bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestJson2: ' + JSON.stringify(bwRequestJson2));
                    //displayAlertDialog('Error in bwRequest.js.populateRequestForm(). Unexpected value for bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestJson2: ' + JSON.stringify(bwRequestJson2));

                    var msg = 'Error in bwRequest.js.populateRequestForm(). Unexpected value for bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestJson2: ' + JSON.stringify(bwRequestJson2);
                    console.log(msg);
                    displayAlertDialog(msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    reject(result);


                } else {

                    thiz.initializeRequestFormWidgets(requestDialogId, bwRequestJson2, allowRequestModifications, false, formWidget_CustomRenderingInstructions); // This is only called by populateNewRequestForm() or populateRequestForm().

                    var result = {
                        status: 'SUCCESS'
                    }
                    resolve(result);

                    //console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-5');
                    //var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                    //promise.then(function (bwRequestJson) {
                    //    try {

                    //        alert('Returning from scrapeBwRequestJson(). xcx2131241-5 bwRequestJson: ' + JSON.stringify(bwRequestJson));

                    //        //// Find the request in the thiz.options.lastSavedJson array. If it's there, replace it, otherwise, add it.
                    //        //// This also happens in saveAndPublishTheRequest().
                    //        //var lastSavedJsonIndex = -1;
                    //        //for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                    //        //    if (thiz.options.lastSavedJson[i].bwBudgetRequestId == bwBudgetRequestId) {
                    //        //        lastSavedJsonIndex = i;
                    //        //        break;
                    //        //    }
                    //        //}

                    //        //alert('xcx2314-1 Updating thiz.options.lastSavedJson. THIS IS IN THE WRONG SPOT.');
                    //        //if (lastSavedJsonIndex > -1) {
                    //        //    thiz.options.lastSavedJson[lastSavedJsonIndex] = bwRequestJson;
                    //        //} else {
                    //        //    thiz.options.lastSavedJson.push(bwRequestJson);
                    //        //}

                    //        //console.log('In bwRequest.js.populateRequestForm(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check.');

                    //        var result = {
                    //            status: 'SUCCESS'
                    //        }
                    //        resolve(result);

                    //    } catch (e) {

                    //        var msg = 'Exception in bwRequest.js.populateRequestForm.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                    //        console.log(msg);
                    //        displayAlertDialog(msg);

                    //        var result = {
                    //            status: 'EXCEPTION',
                    //            message: msg
                    //        }
                    //        reject(result);

                    //    }
                    //});
                }

            } catch (e) {

                var msg = 'Exception in bwRequest.js.populateRequestForm(): ' + e.message + ', ' + e.stack;
                console.log(msg);
                displayAlertDialog(msg);
                //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                reject(result);

            }
        })
    },
    // end: Display and populate an existing request.



    displayOfflineRequestFormDialog: function (budgetRequestId, participantId, title, selectedRaciRole, bwRequestType) {
        try {
            // debugger;

            var participantId;
            try {
                participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            } catch (e) {
            }

            console.log('In displayOfflineRequestFormDialog() budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId);
            alert('In displayOfflineRequestFormDialog() budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId);
            //
            // The user is not logged in, so create an offline request.
            //
            //// debugger;
            //$('#txtPeoplePickerDialogSearchBox').empty(); // Clear the search text box.
            $('#divRequestFormDialog').dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                //title: "Select a person...", //"Enter your early adopter code...",
                width: "800px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function () {
                    $('.ui-widget-overlay').bind('click', function () {
                        $("#divRequestFormDialog").dialog('close');
                    });
                } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            });
            //$("#divRequestFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            //var elementId = '_' + budgetRequestId;


            // debugger;
            this.renderCreateRequestFullFormOffline();


            //displayAlertDialog('bwLastSelectedNewRequestType: ' + bwLastSelectedNewRequestType);
            //if (bwLastSelectedNewRequestType == 'recurringexpense') {
            //    $('#trNewRequestRecurringExpenseSection').show(); // Not sure if this is the best place to make sure this section is hidden, but it works for now.
            //    $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //} else {
            //    $('#trNewRequestRecurringExpenseSection').hide();
            //}

            // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
            // need to have this already so we can identify which budget request the file attachments belong to.
            var _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            //document.getElementById('BudgetRequestId').innerHTML = _budgetRequestId;

            // This may be a recurring expense, so we will do the same thing just in case.
            var _recurringExpenseId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            //document.getElementById('RecurringExpenseId').innerHTML = _recurringExpenseId;

            //displayAlertDialog('Set RecurringExpenseId to: ' + _recurringExpenseId);






            // removed this 12-24-2021
            // Clear the fields!
            //document.getElementById('strProjectTitle').value = '';
            //document.getElementById('strBriefDescriptionOfProject').value = '';
            //document.getElementById('dblRequestedCapital').value = '';
            //document.getElementById('txtProjectManagerName').value = '';
            //document.getElementById('ddlFunctionalArea').innerHTML = '';








            //document.getElementById('newrequestattachments').innerHTML = '';


            ////$('#bwStartPageAccordion').show();
            //$('#bwQuickLaunchMenuTd').css({
            //    width: '0'
            //}); // This gets rid of the jumping around.
            ////$('#bwQuickLaunchMenu').hide();
            //$('#liWelcome').hide();
            //$('#liArchive').hide();
            //$('#liSummaryReport').hide();
            //$('#liConfiguration').hide();
            //$('#liHelp').hide();
            //$('#liNewRequest').show();

            //var e1 = document.getElementById('divNewRequestMasterDiv');
            //e1.style.borderRadius = '20px 0 0 20px';

            // Create the drop down at the top of the page, and select the last used option!
            // First we load our array.
            var requestTypes = [];
            requestTypes = new Array();
            // Budget Request
            var request = ['budgetrequest', 'Budget Request', 'selected'];
            requestTypes.push(request);
            // Quote Request
            //if (quotingEnabled == true) {
            var request = ['quoterequest', 'Quote Request', ''];
            requestTypes.push(request);
            //}
            // Reimbursement Request
            //if (reimbursementRequestsEnabled == true) {
            var request = ['expenserequest', 'Reimbursement Request', ''];
            requestTypes.push(request);
            //}
            // Recurring Expense
            //if (recurringExpensesEnabled == true) {
            var request = ['recurringexpense', 'Recurring Expense', ''];
            requestTypes.push(request);
            //}

            var request = ['capitalplanproject', 'Capital Plan Project', '']; //capitalplanproject6
            requestTypes.push(request);

            var request = ['workorder', 'Work Order', ''];
            requestTypes.push(request);

            var bwLastSelectedNewRequestType = 'capitalplanproject';



            // Initialize the date pickers.
            $('#dtEstimatedStartDate').datepicker();
            $('#dtEstimatedEndDate').datepicker();
            $('#dtEstimatedStartDate').change(function (e) {
                console.log('In dtEstimatedStartDate.change()xcx3. value: ' + e.target.value);
                var startDate = $("#dtEstimatedStartDate").datepicker('getDate');
                var endDate = $("#dtEstimatedEndDate").datepicker('getDate');
                if (startDate !== null && endDate !== null) { // if any date selected in datepicker
                    var daysTotal = Date.daysBetween(startDate, endDate);
                    console.log('daysTotal: ' + daysTotal);
                    if (daysTotal == -1)
                        //lblDateRange.SetText("Invalid date range");
                        //document.getElementById('numberOfDays').value = 'Invalid date range';
                        console.log('Invalid date range');
                    else
                        //lblDateRange.SetText(daysTotal + " days");
                        //document.getElementById('numberOfDays').value = daysTotal + ' days';
                        console.log(daysTotal + ' days');
                }
                thiz.options.store.EstimatedStartDate = startDate;
                thiz.renderSpendForecast();
            });
            $('#dtEstimatedEndDate').change(function (e) {
                console.log('In dtEstimatedEndDate.change(). value: ' + e.target.value);
                var startDate = $("#dtEstimatedStartDate").datepicker('getDate');
                var endDate = $("#dtEstimatedEndDate").datepicker('getDate');
                if (startDate !== null && endDate !== null) { // if any date selected in datepicker
                    var daysTotal = Date.daysBetween(startDate, endDate);
                    console.log('daysTotal: ' + daysTotal);
                    if (daysTotal == -1)
                        //lblDateRange.SetText("Invalid date range");
                        //document.getElementById('numberOfDays').value = 'Invalid date range';
                        console.log('Invalid date range');
                    else
                        //lblDateRange.SetText(daysTotal + " days");
                        //document.getElementById('numberOfDays').value = daysTotal + ' days';
                        console.log(daysTotal + ' days');
                }
                thiz.options.store.EstimatedEndDate = endDate;
                thiz.renderSpendForecast();
            });


            // Now formulate the GUI!
            var html = '';
            if (requestTypes.length == 1) {
                // If there is only one, don't display as a drop down, just as plain text.
                html += '<span style="font-size: 200%;">New <strong>' + requestTypes[0][1] + '</strong></span>';
                document.getElementById('spanRequestForm_Title').innerHTML = html;
            } else {
                // There is more than 1, so we have to display as a drop down.
                html += '<span style="font-size: 200%;">New <strong>';
                //html += '<select class="selectHomePageWorkflowAppDropDown" id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\' onchange="xxxx();">';
                // debugger;
                html += '<select id="selectNewRequestFormRequestTypeDropDown-DOESTHISEVERGETUSED" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: .5em; font-weight: bold; cursor: pointer;\'>';
                for (var i = 0; i < requestTypes.length; i++) {
                    if (requestTypes[i][0] == bwLastSelectedNewRequestType) {
                        // Selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                    } else {
                        // Not selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                    }
                }
                html += '</select>';
                html += '</span>';



                try {
                    document.getElementById('spanRequestForm_Title').innerHTML = html;
                } catch (e) {
                    console.log('Caught Exception in displayOfflineRequestFormDialog()xcx12436: ' + e.message + ', ' + e.stack);
                }










                // Now hook up the change event for the drop down!!
                $('#selectNewRequestFormRequestTypeDropDown').change(function () {



                    alert('In  selectNewRequestFormRequestTypeDropDown.change(). Is this old code??? xcx12346-2');


                    // Clear any error message in the top bar.
                    $('#divTopBar_Long').html('');



                    // debugger; // 5-2-2020
                    var selectedValue = $('#selectNewRequestFormRequestTypeDropDown option:selected').val();
                    bwLastSelectedNewRequestType = selectedValue;
                    // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.

                    data = {
                        bwParticipantId: participantId,
                        bwWorkflowAppId: workflowAppId,
                        bwLastSelectedNewRequestType: bwLastSelectedNewRequestType
                    };
                    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
                    $.ajax({
                        url: operationUri,
                        type: "POST",
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            if (data != 'SUCCESS') {
                                displayAlertDialog(data);
                            } else {
                                if (selectedValue == 'recurringexpense') {
                                    // Recurring Expense was selected!!!
                                    //$('#trNewRequestQuoteSection').hide();
                                    $('#trNewRequestRecurringExpenseSection').show();

                                    //var html = '';
                                    //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" disabled /><span style="font-size:10pt;color:lightgray;">Submit the first budget request immediately.</span><br />';
                                    //html += '<span style="font-size:8pt;">This does not create the budget request, it only schedules the reminder for when the budget request should be submitted.</span><br />';

                                    //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
                                    //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                                    ////html += 'Justification details:<br />';
                                    ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                                    ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
                                    //html += '<span style="font-size:8pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
                                    //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                                    $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                                } else {
                                    $('#trNewRequestRecurringExpenseSection').hide();
                                }
                            }
                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error in my.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                        }
                    });
                });
            }


            // debugger;
            // Populate the year drop-down
            //this.populateTheYearDropdown(false);
            $('.bwCoreComponent').bwCoreComponent('populateTheYearDropdown', 'selectFiscalYear', false);

            this.populateFunctionalAreas();

            this.populateLocations(); // ddlLocation

            // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.
            //if (_type == 'supplemental') {
            //    // This is a supplemental request for budget request _reference, which is a guid.
            //    var html = '';
            //    html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
            //    document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //    var html = '';
            //    html += '';
            //    html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the supplemental request.">Submit</button>';
            //    html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            //    html += '&nbsp;';
            //    document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;


            //} else {
            //var html = '';
            //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;New <strong>Budget Request</strong><br /><span></span></span><br />';
            //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //var html = '';
            //html += '';
            //var isSupplemental = 'false';
            //var relatedBudgetRequestId = '';
            //html += '<button id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow(\'' + isSupplemental + '\', \'' + relatedBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
            //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
            //html += '&nbsp;';
            //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            //}

            // debugger;
            var newBudgetRequestManagerTitle = 'Project Manager';

            // Set the manager title.
            $('#spanRequestForm_ManagerTitle').html(newBudgetRequestManagerTitle);
            // Set if the details are required.
            //if (requireRequestDetails == true) {



            try {
                document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
                document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Start date (estimated):</span>';
                document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">End date (estimated):</span>';
            } catch (e) {
                console.log('Caught Exception in displayOfflineRequestFormDialog()xcx0074: ' + e.message + ', ' + e.stack);
            }






            //} else {
            //    document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
            //}
            // Set if the dates are required.
            //if (requireStartEndDates == true) {
            //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Start date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
            //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">End date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
            //} else {
            //document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Start date (estimated):</span>';
            //document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">End date (estimated):</span>';
            //}
            // Set if the attachments are allowed.
            //if (enableNewRequestAttachments == true) {
            $('#trNewRequestAttachmentsSection').show();
            //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            //} else {
            //    $('#trNewRequestAttachmentsSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}

            // Set if the attachments are allowed.
            //if (enableNewRequestBarcodeAttachments == true) {
            //    $('#trNewRequestBarcodeAttachmentsSection').show();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            //} else {
            $('#trNewRequestBarcodeAttachmentsSection').hide();
            //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}

            // Set if the recurring expenses is enabled.
            //if (recurringExpensesEnabled == true) {
            //$('#trNewRequestRecurringExpenseSection').show();
            //document.getElementById('cbNewRequestRecurringExpenseEnabled').checked = false; // Default to not selected.
            // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //$('#cbNewRequestRecurringExpenseEnabled').click(function () {
            //    //displayAlertDialog('enable this section'); // color: #adadad;
            //    if (this.checked == true) {
            //        $('#trNewRequestQuoteSection').hide();

            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //        var html = '';
            //        html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //        html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //        html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //        html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //    } else {
            //        $('#trNewRequestQuoteSection').show();
            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //        //var html = '';
            //        //html += 'Reminder date:<br />';
            //        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //        //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = '';
            //    }




            //});
            //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            //} else {
            //    $('#trNewRequestRecurringExpenseSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}

            // Set if the quoting is enabled.
            //if (quotingEnabled == true) {
            //    $('#trNewRequestQuoteSection').show();
            //    document.getElementById('cbNewRequestQuoteEnabled').checked = false; // Default to not selected.
            //    // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //    $('#cbNewRequestQuoteEnabled').click(function () {
            //        //displayAlertDialog('enable this section'); // color: #adadad;
            //        if (this.checked == true) {
            //            $('#trNewRequestRecurringExpenseSection').hide();

            //            var html = '';
            //            html += 'New <strong>Quote Request</strong>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            ////document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //            //var html = '';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //            //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            ////html += 'Justification details:<br />';
            //            ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //            //html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //        } else {
            //            $('#trNewRequestRecurringExpenseSection').show();

            //            // 







            //            var html = '';
            //            html += 'New <strong>Budget Request</strong>';
            //            html += '</span>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //            //var html = '';
            //            //html += 'Reminder date:<br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            //html += 'Justification details:<br />';
            //            //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //            //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            document.getElementById('spanNewRequestQuoteSecondSection').innerHTML = '';
            //        }




            //    });
            //    //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //    //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            //} else {
            //    $('#trNewRequestQuoteSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}


            //renderLeftButtons('divNewRequestPageLeftButtons');



            // Now we can hook up the Participant text box for autocomplete.
            //$("#txtProjectManagerName").autocomplete({
            //    source: function (request, response) {
            //        //weburl = _spPageContextInfo.siteAbsoluteUrl;
            //        $.ajax({
            //            url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
            //            dataType: "json",
            //            success: function (data) {
            //                var searchArray = [];
            //                for (var i = 0; i < data.participants.length; i++) {
            //                    searchArray[i] = data.participants[i].participant;
            //                }
            //                response(searchArray);
            //            }
            //        });
            //    },
            //    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
            //    select: function (event, ui) {
            //        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
            //    },
            //    open: function () {
            //        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
            //    },
            //    close: function () {
            //        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //        var projectManagerName = this.value.split('|')[0];
            //        var projectManagerId = this.value.split('|')[1];
            //        var projectManagerEmail = this.value.split('|')[2];

            //        if (projectManagerName.indexOf('undefined') > -1) {
            //            document.getElementById('txtProjectManagerName').value = '';
            //            document.getElementById('txtProjectManagerId').value = '';
            //            document.getElementById('txtProjectManagerEmail').value = '';
            //        } else {
            //            document.getElementById('txtProjectManagerName').value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
            //            document.getElementById('txtProjectManagerId').value = projectManagerId;
            //            document.getElementById('txtProjectManagerEmail').value = projectManagerEmail;
            //        }
            //    }
            //});

            //monkeyPatchAutocomplete(); // This customizes the drop down when searching for users in the user text boxes.


        } catch (e) {
            console.log('Exception in displayOfflineRequestFormDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    removeFromWorkflow: function (bwBudgetRequestId, bwRequestTypeId) {
        try {
            console.log('In bwRequest.js.removeFromWorkflow().');
            //alert('In bwRequest.js.removeFromWorkflow().');
            var thiz = this;

            var dialogId = 'divRemoveRequestFromWorkflow';

            var div = document.getElementById(dialogId);
            if (!div) {
                div = document.createElement('div');
                div.id = dialogId;
                document.body.appendChild(div); // to place at end of document
            }

            var html = '';

            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            html += '                    <span id="divRemoveRequestFromWorkflow_Content"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';

            div.innerHTML = html;

            $('#' + dialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '800px',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                close: function () {

                },
                open: function () {
                    try {

                        var html = '';

                        html += '        <table style="width:100%;">';
                        html += '            <tr>';
                        html += '                <td style="width:90%;">';
                        html += '                    <span id="" style="color: #3f3f3f;font-size: 60pt;font-weight:bold;">Delete Workflow from Request</span>';
                        html += '                </td>';
                        html += '                <td style="width:9%;"></td>';
                        html += '                <td style="width:1%;cursor:pointer;vertical-align:top;">';
                        html += `                    <span class="dialogXButton" style="font-family: 'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;font-size: 120pt;font-weight:bold;" onclick="$('#` + dialogId + `').dialog('close');">X</span>`;
                        html += '                </td>';
                        html += '            </tr>';
                        html += '        </table>';
                        html += '        <br /><br />';

                        html += `
                    
                    <div style="font-size:35pt;">This request will have the workflow removed immediately. <br /<br /> This deletion cannot be reversed.<br /<br /> Save your changes prior to performing this operation.</div>
                    <br /<br />
                    <div id="divSetBudgetRequestReminderDialog_SaveReminderButton" class="divDialogButton" onclick="$('.bwRequest:first').bwRequest('deleteWorkflowFromRequest', '` + bwBudgetRequestId + `');">Delete</div>
                    <br /<br />
                    <div id="divSetBudgetRequestReminderDialog_SaveReminderButton" class="divDialogButton" onclick="$('#` + dialogId + `').dialog('close');">Cancel</div>
                    <br /<br />
                    
                        `;

                        $('#divRemoveRequestFromWorkflow_Content').html(html);

                    } catch (e) {
                        var msg = 'Exception in bwRequest.js.removeFromWorkflow.dialog.open(): ' + e.message + ', ' + e.stack;
                        console.log(msg);
                        displayAlertDialog(msg);
                    }
                }
            });

        } catch (e) {
            var msg = 'Exception in bwRequest.js.removeFromWorkflow(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);
        }
    },
    deleteWorkflowFromRequest: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.deleteWorkflowFromRequest().');

            ShowActivitySpinner('Deleting the workflow from the request...');

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwBudgetRequestId: bwBudgetRequestId,

                bwParticipantEmail: participantEmail,
                bwParticipantFriendlyName: participantFriendlyName
            };

            $.ajax({
                url: webserviceurl + '/deleteworkflowfromrequest',
                type: 'POST',
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                error: function (data, errorCode, errorMessage) {

                    HideActivitySpinner();

                    var msg = 'Error in bwRequest.js.deleteWorkflowFromRequest.error(): ' + errorCode + ', ' + errorMessage + ', data: ' + JSON.stringify(data);
                    console.log(msg);
                    displayAlertDialog(msg);

                },
                success: function (results) {
                    try {

                        HideActivitySpinner();

                        if (results.status != 'SUCCESS') {

                            var msg = 'Error in bwRequest.js.deleteWorkflowFromRequest.success(): ' + results.status + ', ' + results.message;
                            console.log(msg);
                            displayAlertDialog(msg);

                        } else {

                            console.log('The Workflow has been removed from the request.');
                            displayAlertDialog('The Workflow has been removed from the request.');

                            $('#divRemoveRequestFromWorkflow').dialog('close');

                            $('#divRequestWorkflowAuditTrailDialog_' + bwBudgetRequestId).dialog('close'); // divRequestWorkflowAuditTrailDialog_c3add3ac-3e26-4b9a-bfef-b2f55fe7cec2

                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close'); // $('#divRequestFormDialog_c3add3ac-3e26-4b9a-bfef-b2f55fe7cec2').dialog('close');

                        }

                    } catch (e) {
                        HideActivitySpinner();
                        var msg = 'Exception in bwRequest.js.deleteWorkflowFromRequest.success():2: ' + e.message + ', ' + e.stack;
                        console.log(msg);
                        displayAlertDialog(msg);
                    }

                }

            });

        } catch (e) {
            HideActivitySpinner();
            var msg = 'Exception in bwRequest.js.deleteWorkflowFromRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);
        }
    },

    // Display workflow audit trail dialog, render, and populate.
    displayRequestWorkflowAuditTrailDialog: function (brTitle, title, bwRequestTypeId, bwBudgetRequestId, bwWorkflowId, displayTheRemoveWorkflowButton) {
        try {
            console.log('In displayRequestWorkflowAuditTrailDialog().');
            //alert('In displayRequestWorkflowAuditTrailDialog().');
            var thiz = this;

            this.pinRequestDialog();
            var requestDialogId = 'divRequestWorkflowAuditTrailDialog_' + bwBudgetRequestId;

            var html = '';

            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            html += '                    <span id="divRequestFormContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';

            var div = document.getElementById(requestDialogId);
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = requestDialogId;
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $('#' + requestDialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '1050px',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                close: function () {

                    console.log('');
                    console.log('==========================================');
                    console.log('In xcx34-1(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-3');
                    console.log('==========================================');
                    console.log('');

                    //displayAlertDialog('In xcx34(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x');


                },
                open: function () {
                    try {

                        var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';

                        html += '<table xcx="xcx3249-4" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + requestDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                        html = '';

                        //html += '<span id="xcx234527877">';
                        //html += '   <img id="divNewRequestWorkflowParticipantsDialog_ac60437a-835c-44df-8f29-f23fd1da3393_imgRequestOrgImage" src="https://www.budgetworkflow.com/images/corporeal.png" style="width:100px;height:100px;">';
                        //html += '</span>';





                        // 
                        // Get the request type SingletonName. new 9-30-2022
                        var requestType;
                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                        for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                            if (bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                requestType = bwEnabledRequestTypes[i];
                                break;
                            }
                        }
                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        //if (!requestType) {
                        //    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        //} else {
                        //    html += '                       ' + requestType.SingletonName + ': ';
                        //}
                        //html += '   <span id="spanRequestFormBudgetRequestTitle" title="">';
                        //html += brTitle;
                        //html += '<br />';
                        //html += title;
                        //html += '   </span>';
                        //html += '</span>';

                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                        html += '<table style="width:100%;">';
                        html += '   <tbody>';
                        html += '       <tr>';
                        html += '           <td colspan="4">';
                        html += '               <span id="divCreateRequestFormContent_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">';
                        //html += '                   <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'root\');">';
                        //html += '                       Stark Industries<span xcx="xcx324256"></span>';
                        //html += '                   </span>';
                        html += '               </span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '       <tr>';
                        html += '           <td width="5">';
                        html += '           </td>';
                        html += '           <td style="vertical-align:top;">';
                        html += '               <span>';



                        var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });

                        var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                        if (activeStateIdentifier.status != 'SUCCESS') {

                            html += '[No image. Unauthorized. xcx213124-34556-34-234-3245]';

                        } else {

                            html += '                   <img xcx="fewrwwa" id="divCreateRequestFormContent_imgRequestOrgImage" style="width:150px;height:150px;" src="' + thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/root/orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier + '">';

                        }










                        html += '               </span>';
                        html += '           </td>';
                        html += '           <td style="text-align:left;" colspan="2">';
                        //html += '               &nbsp;&nbsp;';
                        html += '               <span class="xdlabel" id="spanRequestForm_Title">';
                        html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        if (!requestType) {
                            html += 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        } else {
                            html += requestType.SingletonName + ': ';
                        }
                        html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                        html += brTitle;
                        html += '                           <br />';
                        html += '                           <span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray;font-size:small;"></span>';
                        html += '                       </span>';
                        //html += '                       &nbsp;';
                        //html += '                       <span id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                        html += '                   </span>';
                        html += '               </span>';

                        //
                        //
                        // Security trimming. A configuration Manager or Owner should be able to do this. Anyone else?
                        //
                        //
                        var participantRole = $('.bwAuthentication').bwAuthentication('option', 'participantRole'); // bwParticipantRole: [customer, vendor, participant, archiveviewer, reportviewer, configurationmanager, owner].
                        if ((participantRole == 'owner') || (participantRole == 'configurationmanager')) {
                            html += '               <div style="float:right;"><button xcx="xcx54356457" onclick="$(\'.bwRequest\').bwRequest(\'removeFromWorkflow\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\');" class="BwButton300ForRequestForm" title="Remove the workflow from this request...">Remove from Workflow</button></div>';
                        }
                        //


                        html += '               <br />';
                        //html += '               <span id="spanViewWorkflowParticipantsLink" style="text-decoration:underline;cursor:pointer;font-size:10pt;color:gray;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\', this);">';
                        //html += '               </span>';
                        //html += '               <br>';
                        //html += '               <span id="spanRequestForm_WorkflowAndRoleDetails">';
                        //html += '                   <table style="float:right;width:85%;">';
                        //html += '                       <tbody>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   <span style="font-weight:bold;">';
                        //html += '                                       <span xcx="342352-1" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'BR-220036\', \'September test 1\', \'0f4cde7c-5c1d-494d-90a3-ada45a3502b4\', \'bcf8fd91-e319-4b31-8174-071afa8614dd', '1a15689f-aea5-434a-bf6b-27a8cf17e464\');">';
                        //html += '                                           Workflow step: Admin';
                        //html += '                                       </span>';
                        //html += '                                   </span>';
                        //html += '                                   <br>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   Your role as Approver: ';
                        //html += '                                   <div style="float:right">';
                        //html += '                                       <select id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;">';
                        //html += '                                       <option selected="" value="ADMIN">Workflow Administrator (ADMIN)</option></select>';
                        //html += '                                   </div>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td>';
                        //html += '                                   You are allowed to modify this request.';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                       </tbody>';
                        //html += '                   </table>';
                        //html += '                   <br>';
                        //html += '               </span>';
                        //html += '               <span id="spanRequestForm_Checklists"></span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '   </tbody>';
                        html += '</table>';

                        //html += brTitle + ' (' + title + ')';
                        //html += '<br />';
                        //html += '<span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray"></span>';
                        html += '<span id="' + requestDialogParentId + '_Content"></span>';

                        document.getElementById(requestDialogId).innerHTML = html;




                        // Org breadcrumb needs to be loaded here // 10-5-2022 
                        var budgetrequestform;
                        var budgetrequestforms = document.getElementsByClassName('budgetrequestform');
                        for (var i = 0; i < budgetrequestforms.length; i++) {
                            var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                            if (bwBudgetRequestId == _budgetRequestId) {
                                // We found the form.
                                budgetrequestform = budgetrequestforms[i];
                                break;
                            }
                        }
                        if (!budgetrequestform) {

                            displayAlertDialog('In bwRequest.js.displayRequestWorkflowAuditTrailDialog(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);

                        } else {

                            var bwOrgId = $(budgetrequestform)[0].getAttribute('bworgid');
                            var OrgJson = $(budgetrequestform).find('.bwLocationPicker:first').bwLocationPicker('option', 'store');

                            //alert('xcx1243234 bwOrgId: ' + bwOrgId + ', OrgJson: ' + OrgJson);

                            var orgPathClickable = $('.bwAuthentication').bwAuthentication('renderTheOrgBreadcrumb2', OrgJson, bwOrgId);
                            $('#' + requestDialogId).find('#divCreateRequestFormContent_requestOrgClickableBreadcrumb')[0].innerHTML = orgPathClickable.orgPathClickable;

                            $("#slider_" + requestDialogId).slider({
                                min: 50,
                                max: 200,
                                value: 100, // It starts off full size.
                                slide: function (event, ui) {
                                    thiz.setZoom(ui.value, requestDialogId);
                                }//,
                                //change: function (event, ui) {
                                //    thiz.setZoom(ui.value, requestDialogId);
                                //}
                            });
                            thiz.setZoom(100, requestDialogId);

                            $('.ui-widget-overlay').bind('click', function () {
                                $('#' + requestDialogId).dialog('close');
                            });

                            var promise = thiz.loadWorkflowsAndCurrentWorkflow2(bwRequestTypeId);
                            promise.then(function (result) {
                                try {

                                    thiz.renderWorkflowAuditTrail(requestDialogParentId, bwRequestTypeId, brTitle, title, bwBudgetRequestId, bwWorkflowId);

                                } catch (e) {
                                    console.log('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                                    displayAlertDialog('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                                }
                            });

                        }

                    } catch (e) {
                        console.log('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }
            }).dialog('moveToTop');
            //if ($('.ui-widget-overlay') && $('.ui-widget-overlay')[0] && $('.ui-widget-overlay')[0].style) {
            //    $('.ui-widget-overlay')[0].style.zIndex = 9;
            //}
            //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020

            //$('#' + requestDialogId).dialog('moveToTop'); // Changed and did this 11-28-2022
            console.log('xcx213123 dialog moveToTop(). Does this work?');
            //alert('xcx213123 dialog moveToTop(). Does this work?'); // yes it seems to 7-29-2024.

        } catch (e) {
            console.log('Exception in displayRequestWorkflowAuditTrailDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displayRequestWorkflowAuditTrailDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    displayRequestWorkflowAuditTrailDialog2: function (brTitle, title, bwRequestTypeId, bwBudgetRequestId, bwWorkflowId) {
        try {
            console.log('In displayRequestWorkflowAuditTrailDialog2().');
            //alert('In displayRequestWorkflowAuditTrailDialog2().');
            var thiz = this;

            this.pinRequestDialog();
            var requestDialogId = 'divRequestWorkflowAuditTrailDialog_' + bwBudgetRequestId;

            var html = '';

            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            html += '                    <span id="divRequestFormContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';

            var div = document.getElementById(requestDialogId);
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = requestDialogId;
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $('#' + requestDialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '1050px',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                close: function () {

                    console.log('');
                    console.log('==========================================');
                    console.log('In xcx34-1(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-3');
                    console.log('==========================================');
                    console.log('');

                    //displayAlertDialog('In xcx34(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x');


                },
                open: function () {
                    try {

                        var element = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';

                        html += '<table xcx="xcx3249-4" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + requestDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                        html = '';

                        //html += '<span id="xcx234527877">';
                        //html += '   <img id="divNewRequestWorkflowParticipantsDialog_ac60437a-835c-44df-8f29-f23fd1da3393_imgRequestOrgImage" src="https://www.budgetworkflow.com/images/corporeal.png" style="width:100px;height:100px;">';
                        //html += '</span>';





                        // 
                        // Get the request type SingletonName. new 9-30-2022
                        var requestType;
                        var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems; // Global, populated in the beginning when the app loads.
                        for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                            if (bwRequestTypeId == bwEnabledRequestTypes[i].bwRequestTypeId) {
                                requestType = bwEnabledRequestTypes[i];
                                break;
                            }
                        }
                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        //if (!requestType) {
                        //    html += '                       ' + 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        //} else {
                        //    html += '                       ' + requestType.SingletonName + ': ';
                        //}
                        //html += '   <span id="spanRequestFormBudgetRequestTitle" title="">';
                        //html += brTitle;
                        //html += '<br />';
                        //html += title;
                        //html += '   </span>';
                        //html += '</span>';

                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

                        html += '<table style="width:100%;">';
                        html += '   <tbody>';
                        html += '       <tr>';
                        html += '           <td colspan="4">';
                        html += '               <span id="divCreateRequestFormContent_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">';
                        //html += '                   <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'root\');">';
                        //html += '                       Stark Industries<span xcx="xcx324256"></span>';
                        //html += '                   </span>';
                        html += '               </span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '       <tr>';
                        html += '           <td width="5">';
                        html += '           </td>';
                        html += '           <td style="vertical-align:top;">';
                        html += '               <span>';



                        var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });

                        var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                        if (activeStateIdentifier.status != 'SUCCESS') {

                            html += '[No image. Unauthorized. xcx213124-34556-34-234-3245]';

                        } else {

                            html += '                   <img xcx="fewrwwa" id="divCreateRequestFormContent_imgRequestOrgImage" style="width:150px;height:150px;" src="' + thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/root/orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier + '">';

                        }










                        html += '               </span>';
                        html += '           </td>';
                        html += '           <td style="text-align:left;" colspan="2">';
                        //html += '               &nbsp;&nbsp;';
                        html += '               <span class="xdlabel" id="spanRequestForm_Title">';
                        html += '                   <span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                        if (!requestType) {
                            html += 'requesttype_not_found bwRequestTypeId:' + bwRequestTypeId + ': ';
                        } else {
                            html += requestType.SingletonName + ': ';
                        }
                        html += '                       <span id="spanRequestFormBudgetRequestTitle" title="">';
                        html += brTitle;
                        html += '                           <br />';
                        html += '                           <span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray;font-size:small;"></span>';
                        html += '                       </span>';
                        //html += '                       &nbsp;';
                        //html += '                       <span id="spanNewRequestEllipsesButton" class="spanButton2 context-menu-newrequesteditor" style="height:20px;width:150px;"> ... </span>';
                        html += '                   </span>';
                        html += '               </span>';
                        html += '               <br />';
                        //html += '               <span id="spanViewWorkflowParticipantsLink" style="text-decoration:underline;cursor:pointer;font-size:10pt;color:gray;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\', this);">';
                        //html += '               </span>';
                        //html += '               <br>';
                        //html += '               <span id="spanRequestForm_WorkflowAndRoleDetails">';
                        //html += '                   <table style="float:right;width:85%;">';
                        //html += '                       <tbody>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   <span style="font-weight:bold;">';
                        //html += '                                       <span xcx="342352-1" style="cursor:pointer !important;text-decoration:underline;" title="View RACI workflow history..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog2\', \'BR-220036\', \'September test 1\', \'0f4cde7c-5c1d-494d-90a3-ada45a3502b4\', \'bcf8fd91-e319-4b31-8174-071afa8614dd', '1a15689f-aea5-434a-bf6b-27a8cf17e464\');">';
                        //html += '                                           Workflow step: Admin';
                        //html += '                                       </span>';
                        //html += '                                   </span>';
                        //html += '                                   <br>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td style="text-align:left;font-weight:normal;">';
                        //html += '                                   Your role as Approver: ';
                        //html += '                                   <div style="float:right">';
                        //html += '                                       <select id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;text-align: left;">';
                        //html += '                                       <option selected="" value="ADMIN">Workflow Administrator (ADMIN)</option></select>';
                        //html += '                                   </div>';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                           <tr>';
                        //html += '                               <td>';
                        //html += '                                   You are allowed to modify this request.';
                        //html += '                               </td>';
                        //html += '                           </tr>';
                        //html += '                       </tbody>';
                        //html += '                   </table>';
                        //html += '                   <br>';
                        //html += '               </span>';
                        //html += '               <span id="spanRequestForm_Checklists"></span>';
                        html += '           </td>';
                        html += '       </tr>';
                        html += '   </tbody>';
                        html += '</table>';

                        //html += brTitle + ' (' + title + ')';
                        //html += '<br />';
                        //html += '<span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray"></span>';
                        html += '<span id="' + requestDialogParentId + '_Content"></span>';

                        document.getElementById(requestDialogId).innerHTML = html;




                        // Org breadcrumb needs to be loaded here // 10-5-2022 
                        var budgetrequestform;
                        var budgetrequestforms = document.getElementsByClassName('executiveSummaryInCarousel');
                        for (var i = 0; i < budgetrequestforms.length; i++) {
                            var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                            if (bwBudgetRequestId == _budgetRequestId) {
                                // We found the form.
                                budgetrequestform = budgetrequestforms[i];
                                break;
                            }
                        }
                        if (!budgetrequestform) {

                            displayAlertDialog('In bwRequest.js.displayRequestWorkflowAuditTrailDialog2(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);

                        } else {

                            var bwOrgId = $(budgetrequestform)[0].getAttribute('bworgid');

                            //alert('bwOrgId: ' + bwOrgId);
                            //var bwRequestTypeId = $(budgetrequestform)[0].getAttribute('bwrequesttypeid');
                            //var OrgJson = $(budgetrequestform).find('.bwLocationPicker:first').bwLocationPicker('option', 'store');

                            //alert('xcx1243234 bwOrgId: ' + bwOrgId + ', OrgJson: ' + OrgJson);

                            //var orgPathClickable = $('.bwAuthentication').bwAuthentication('renderTheOrgBreadcrumb2', OrgJson, bwOrgId);
                            //$('#' + requestDialogId).find('#divCreateRequestFormContent_requestOrgClickableBreadcrumb')[0].innerHTML = orgPathClickable.orgPathClickable;

                            //$("#slider_" + requestDialogId).slider({
                            //    min: 50,
                            //    max: 200,
                            //    value: 100, // It starts off full size.
                            //    slide: function (event, ui) {
                            //        thiz.setZoom(ui.value, requestDialogId);
                            //    }//,
                            //    //change: function (event, ui) {
                            //    //    thiz.setZoom(ui.value, requestDialogId);
                            //    //}
                            //});
                            //thiz.setZoom(100, requestDialogId);

                            //$('.ui-widget-overlay').bind('click', function () {
                            //    $('#' + requestDialogId).dialog('close');
                            //});

                            var promise = thiz.loadWorkflowsAndCurrentWorkflow2(bwRequestTypeId);
                            promise.then(function (result) {
                                try {

                                    thiz.renderWorkflowAuditTrail2(requestDialogParentId, bwRequestTypeId, brTitle, title, bwBudgetRequestId, bwWorkflowId, bwOrgId);

                                } catch (e) {
                                    console.log('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                                    displayAlertDialog('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                                }
                            });

                        }

                    } catch (e) {
                        console.log('Exception in displayRequestWorkflowAuditTrailDialog2().dialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in displayRequestWorkflowAuditTrailDialog2().dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }
            });
            //if ($('.ui-widget-overlay') && $('.ui-widget-overlay')[0] && $('.ui-widget-overlay')[0].style) {
            //    $('.ui-widget-overlay')[0].style.zIndex = 9;
            //}
            //$('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020

            $('#' + requestDialogId).dialog('moveToTop'); // Changed and did this 11-28-2022
            console.log('xcx213123 dialog moveToTop');

        } catch (e) {
            console.log('Exception in displayRequestWorkflowAuditTrailDialog2(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displayRequestWorkflowAuditTrailDialog2(): ' + e.message + ', ' + e.stack);
        }
    },



    renderWorkflowAuditTrail: function (requestDialogParentId, bwRequestType, brTitle, title, bwBudgetRequestId, bwWorkflowId) {
        // This was originally a copy of the bwWorkflowEditor.renderWorkflowEditor method! May be an opportunity to abstract/break out this in the future.
        try {
            // 4-27-2020 FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX
            //// debugger; // IS racirolesandparticipants5 CORRECT? IT CALLS start.js.getParticipantsForRaciRoles which just looks at the BwWorkflowUserRole table, and not the OrgRolesJson!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            console.log('In renderWorkflowAuditTrail().');
            var thiz = this;

            // divRequestFormDialog_dadca250-6e1a-4c92-90a9-35efc2da5a52_Parent
            var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId + '_Parent';
            //// debugger;

            var bwOrgId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bworgid');
            var bwRequestTypeId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwrequesttypeid');

            if (!bwOrgId) {

                console.log('In renderWorkflowAuditTrail(). INVALID bwOrgId: ' + bwOrgId + '. This process cannot continue.');
                displayAlertDialog('In renderWorkflowAuditTrail(). INVALID bwOrgId: ' + bwOrgId + '. This process cannot continue.');

            } else {

                var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwWorkflowAppId: workflowAppId,
                    bwRequestTypeId: bwRequestTypeId,
                    bwOrgId: bwOrgId
                };

                var operationUri = this.options.operationUriPrefix + 'odata/racirolesandparticipants';
                $.ajax({
                    url: operationUri,
                    type: 'POST',
                    data: data,
                    headers: { "Accept": "application/json; odata=verbose" },
                    success: function (results) {
                        try {
                            debugger;
                            var rolesAndParticipants = results;

                            console.log('In renderWorkflowPeoplePicker():2:.');
                            if (rolesAndParticipants.length == 0) {

                                displayAlertDialog('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId);

                                //var instructions = '';
                                //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                            } else {
                                //// debugger;
                                var workflowParent = rolesAndParticipants.Workflow; //.value[0];
                                var workflow = JSON.parse(rolesAndParticipants.Workflow.bwWorkflowJson);
                                //// debugger;





                                //// debugger;
                                // Display the bwWorkflowId guid and request type
                                //document.getElementById(requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2').innerHTML = workflowParent.bwWorkflowId + ' (' + workflowParent.bwRequestType + ')'; // commented out 10-3-2022

                                var html = '';

                                if (workflow == null) {

                                    html += '<span style="font-size:24pt;color:red;">NO DATA</span>';

                                } else {

                                    // Include jquery-ui stylesheet.
                                    //html += '<link rel="stylesheet" href="css/jquery/1.11.1/themes/smoothness/jquery-ui.min.css?v=0">'; // removed 8-18-2022
                                    // Inline styles.
                                    html += '<style>';
                                    html += '.titlecell {';
                                    html += '    vertical-align:top;';
                                    html += '    padding-top:3px;';
                                    html += '    padding-bottom:3px;';
                                    html += '    padding-left:5px;';
                                    html += '    padding-right:10px;';
                                    html += '    white-space:nowrap;';
                                    html += '    color:grey;';
                                    html += '    text-decoration:underline;';
                                    html += '}';
                                    html += '.steprowcell {';
                                    html += '    vertical-align:top;';
                                    html += '    padding-top:10px;';
                                    html += '    padding-bottom:10px;';
                                    html += '    padding-left:5px;';
                                    html += '    padding-right:5px;';
                                    html += '    white-space:nowrap;';
                                    html += '}';
                                    html += '.steprow-hidden {';
                                    html += '    visibility: collapse;';
                                    html += '}';

                                    html += '.steprow:hover {';
                                    html += '    background-color: lightgoldenrodyellow;';
                                    html += '}';

                                    html += '.stepheadercell:hover {';
                                    html += '    background-color: gainsboro !important;'; // This is the step header row which expans and collapses.
                                    html += '}';

                                    html += '.activeEditRow {';
                                    html += '    background-color: #EBF6F9;';
                                    html += '}';
                                    html += '.ui-progressbar {';
                                    html += '    position: relative;';
                                    html += '}';
                                    html += '.progress-label {';
                                    html += '    position: absolute;';
                                    html += '    left: 10%;';
                                    html += '    top: 4px;';
                                    html += '    font-weight: bold;';
                                    html += '    color: black;';
                                    html += '    text-shadow: 1px 1px 0 #fff;';
                                    html += '}';
                                    html += '#progressbar .ui-progressbar-value {';
                                    html += '    background-color: cyan;';
                                    html += '}';
                                    html += '.transparent-dialog {';
                                    html += '  background: transparent;';
                                    html += '  border: none;';
                                    html += '}';
                                    html += '.transparent-dialog .ui-widget-header {';
                                    html += '  border: none;';
                                    html += '  background: transparent;';
                                    html += '}';
                                    html += '.transparent-dialog .ui-widget-content {';
                                    html += '  background: transparent;';
                                    html += '}';
                                    //
                                    // This is the dialog draggable handle bar colored lightgoldenrodyellow.
                                    //
                                    //html += '.ui-dialog-title {';
                                    //html += '    background-color: lightgoldenrodyellow;';
                                    //html += '    border-color: orange;';
                                    //html += '}';
                                    //html += '.ui-draggable-handle {';
                                    //html += '    background-color: lightgoldenrodyellow !important;';
                                    //html += '    border-color: red !important;';
                                    //html += '}';
                                    //html += '.ui-corner-all {';
                                    //html += '    border-color: #FFE1AC !important;'; // Navajo White outlining the dialog boxes! Yeah!!! :)
                                    //html += '}';

                                    html += '</style>';



                                    html += '<br />';
                                    html += '<span id="xcx449956-1" title="Expand or Collapse ALL..." onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseAllWorkflowSteps\', \'' + requestDialogParentId + '\');" style="width:200px;padding:5px 10px 5px 10px;margin:0 0 0 20px;white-space:nowrap;vertical-align:top;border:1px solid lightblue;cursor:pointer;font-weight:normal;font-size:20pt;">                           <span style="display:inline-block;">+/-</span>                       </span>';

                                    html += '<table>';
                                    html += '   <tr>';
                                    html += '       <td style="vertical-align:top;">';


                                    html += '<table border="1" style="border-color:#d8d8d8;">';


                                    //html += '<tr><td>xcx555999607 [+/-]</td></tr>';


                                    //// debugger;
                                    if (!workflow) {
                                        html += '<tr>';
                                        html += '  <td>';
                                        html += '    NO WORKFLOW JSON. CANNOT PROCEED. xcx32456-3';
                                        html += '  </td>';
                                        html += '</tr>';

                                    } else {
                                        // Iterate through all of the steps.
                                        for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                            var stepName = workflow.Steps.Step[i]["@Name"];
                                            if (false) {
                                                // Do nothing, not displaying these steps. << DISPLAYING all steps now!
                                            } else {
                                                var newStepName = workflow.Steps.Step[i]["@FriendlyName"];
                                                if (stepName == 'Create') {
                                                    newStepName = 'Create';
                                                } else if (stepName == 'Revise') {
                                                    newStepName = 'Revise';
                                                } else if (stepName == 'Admin') {
                                                    newStepName = 'Admin';
                                                } //else if (stepName == 'Collaboration') {
                                                //    newStepName = 'Collaborate and Develop Consensus';
                                                //} else if (stepName == 'VPLevel') {
                                                //    newStepName = 'Requesting Manager Approvals';
                                                //} else if (stepName == 'ExecLevel') {
                                                //    newStepName = 'Requesting Executive Approvals';
                                                //} else if (stepName == 'CLevel') {
                                                //    newStepName = 'Requesting Board of Directors Approvals';
                                                //} else if (stepName == 'Done') {
                                                //    newStepName = 'Approved';
                                                //} else if (stepName == 'IssueOrderNumber') {
                                                //    newStepName = 'Requesting Purchase Order Number from Accounting';
                                                //}

                                                //if (stepName == 'Done') {
                                                //    stepName = 'Completed (Done)'; // This is what we want the Done step renamed to in the future...
                                                //}

                                                var cellColor = '#f5f6f7';

                                                //if (stepName != 'Create' && stepName != 'Revise' && stepName != 'Admin') {


                                                // Display the header row for this step.
                                                html += '<tr id="stepheaderrow_' + i + '" style="border:0px;cursor:pointer;">';
                                                html += '  <td colspan="11" class="stepheadercell" style="font-weight:bold;padding:10px;background-color:' + cellColor + ';" >';
                                                html += '    <table style="width:100%;">';
                                                html += '      <tr>';
                                                html += '        <td style="" onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseWorkflowStep2\', \'' + 'stepname_' + i + '\', \'' + 'stepimage_' + i + '\', \'steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '\', \'' + requestDialogParentId + '\');">';
                                                //html += '          <span style="white-space:nowrap;"><span id="stepname_' + i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' + newStepName + '</span>';
                                                html += '          <span style="white-space:nowrap;">';


                                                //html += '<span id="stepname_' +i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' +newStepName + '</span>';
                                                // EXPAND COLLAPSE!!!!!!!!!!!!!!!! 1-26-2020
                                                html += '            <span id="stepname_' + i + '" class="stepname" bwStepName="' + stepName + '" bwStepFriendlyName="' + newStepName + '" style="cursor:pointer;vertical-align:middle;" >';
                                                html += '              <img id="stepimage_' + i + '" src="images/drawer-open.png" title="collapse" style="cursor:pointer;width:45px;height:45px;vertical-align:middle;"  />';

                                                html += newStepName;

                                                var warningSignId = requestDialogParentId + '_' + stepName + '_' + 'warningSign';

                                                html += '              <span id="' + warningSignId + '" xcx="xcx12312_1"></span>';
                                                html += '            </span>';

                                                html += '          </span>';
                                                html += '        </td>';
                                                html += '        <td style="" onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseWorkflowStep2\', \'' + 'stepname_' + i + '\', \'' + 'stepimage_' + i + '\', \'steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '\', \'' + requestDialogParentId + '\');">'; // xcx123423555-1</td>';
                                                html += '        </td>';





                                                html += '        <td style="text-align:center;">';

                                                if (workflow.Steps.Step[i]["@Name"] == 'Collaboration') {

                                                    //html += '<table>';
                                                    //html += '   <tr onclick="alert(\'xcx21312312312\');">';
                                                    //html += '       <td>';
                                                    var timeout = workflow.Steps.Step[i]["@Timeout"];
                                                    var timeoutUnits = workflow.Steps.Step[i]["@TimeoutUnits"]
                                                    html += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + timeout + '&nbsp' + timeoutUnits;

                                                    //
                                                    // ADDING A DATEPICKER HERE SO THAT EACH REQUEST CAN HAVE A CUSTOM CONSENSUS TIMEOUT. 8-19-2023.
                                                    // It will be instantiated at the earliest time possible below.
                                                    //
                                                    html += '<input autocomplete="off" class="bwRequestJson hasDatepicker" id="dtBwRequest_Workflow_Consensus_' + bwBudgetRequestId + '" type="text" value="Or select a date..." style="cursor:pointer;WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;">';
                                                    //html += '       <td>';
                                                    //html += '   <tr>';
                                                    //html += '<table>';
                                                }

                                                // Display the consensus timeout section and the "Configure Email", and "Add PArticipants" buttons.
                                                html += '           <table style="width:100%;">';
                                                html += '               <tr>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';

                                                html += '                   <td></td>';

                                                html += '                   <td style="text-align:right;">';
                                                //if (stepName.toLowerCase() == 'admin') {
                                                //    // No "Add a participant" button for the ADMIN step/stage.
                                                //} else {
                                                //    //html += '&nbsp;&nbsp;&nbsp;&nbsp;';
                                                //    //html += '          <input type="button" class="buttonAddNewAssignmentRow" style="white-space:nowrap;padding:5px 10px 5px 10px;" value="✚ Add a Participant" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'addNewRow\', \'' + 'steprow-inform_' + i + '_' + '0' + '\');" />';
                                                //}
                                                html += '                   </td>';
                                                html += '               </tr>';
                                                html += '           </table>';
                                                html += '        </td>';






                                                html += '      </tr>';
                                                html += '    </table>';
                                                html += '  </td>';
                                                html += '</tr>';
                                                // End: Display the header row for this step.

                                                if (stepName == 'Create' || stepName == 'Revise' || stepName == 'Admin') {

                                                    if (workflow.Steps.Step[i].Assign) {
                                                        // THERE WILL ONLY EVER BE 1 node here.


                                                        //
                                                        // NOTE THAT THIS IS WHERE THE ROW IS NOT DISPLAYED INITIALLY!!!! 1-26-2020
                                                        //
                                                        html += '<tr id="steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '" class="steprow steprow_' + i + '" style="cursor:pointer;display:none;" title="This role assignment cannot be changed, it is a part of the core workflow functionality." >';





                                                        html += '  <td style="width:30px;"></td>';

                                                        if (thiz.options.displayRoleIdColumn) {
                                                            html += '<td xcx="sssdg" style="background-color:' + cellColor + ';" class="roleid steprowcell" bwRoleId="' + workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Assign["@Role"] + '">' + workflow.Steps.Step[i].Assign["@Role"] + '</td>';
                                                        }



                                                        //alert('xcx12314 workflow.Steps.Step[i]: ' + JSON.stringify(workflow.Steps.Step[i]));



                                                        //var roleName = workflow.Steps.Step[i].Assign["@Role"]; //["@RoleName"];

                                                        var roleName, roleCategory;

                                                        var roleNames = [];
                                                        for (var x = 0; x < workflow.Steps.Step[i].Assign.length; x++) {
                                                            roleNames.push(workflow.Steps.Step[i].Assign[x]["@Role"]);
                                                        }
                                                        var roleCategories = [];
                                                        for (var x = 0; x < workflow.Steps.Step[i].Assign.length; x++) {
                                                            roleCategories.push(workflow.Steps.Step[i].Assign[x]["@RoleCategory"]);
                                                        }

                                                        if ((roleNames.length == 1) && (roleCategories.length == 1)) {
                                                            roleName = roleNames[0];
                                                            roleCategory = roleCategories[0];
                                                        } else {
                                                            alert('Unexpected value for roleNames/roleCategories: ' + JSON.stringify(roleNames) + ', ' + JSON.stringify(roleCategories));
                                                        }










                                                        //if (stepName.toLowerCase() == 'admin') {

                                                        //    alert('roleNames: ' + JSON.stringify(roleNames));

                                                        //    //alert('xcx900 workflow.Steps.Step[i].Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                        //    // xcx900 workflow.Steps.Step[i].Assign: [{"@Role":"ADMIN","@RoleName":"ADMIN","@RoleCategory":"Approver","@AllowRequestModifications":true,"@Title":"","@Instructions":"","Action":[{"@Name":"Approve","@State":"Done","Tooltip":"Approve the request and submit comments"},{"@Name":"Revise/Hold","@Target":"Revise","Invalidate":{"@Step":"CLevel"},"Tooltip":"Send the CAR back to the original creator"}]}]
                                                        //}



                                                        html += '<td xcx="ttys" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';this.style.color=\'red\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';this.style.color=\'black\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue="' + roleName + '">';
                                                        //html += ' <img style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'displayPeoplePickerDialog\', \'' + 'txtApprover2FriendlyName' + '\', \'' + 'txtApprover2Id' + '\', \'' + 'txtApprover2Email' + '\');" src="images/addressbook-icon18x18.png">';
                                                        //html += '&nbsp;' + roleName;
                                                        html += 'Role: ' + roleName;
                                                        //html += '<br />';
                                                        //html += '<span style="color:grey;font-size:12pt;font-style:italic;">All participants can create a new request.</span>';
                                                        html += '</td>';

                                                        html += '<td class="steprowcell">';
                                                        html += ' <span xcx="jjdgr" id="rolecategory-assign_' + i + '_' + j + '" class="rolecategory" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + roleName + '" bwOldValue="' + roleCategory + '" style="cursor:pointer;" title="Double-click to edit the role category...">';
                                                        html += roleCategory;
                                                        html += ' </span>';
                                                        html += '</td>';

                                                        // Task(s)/Action(s)
                                                        var task;
                                                        if (workflow.Steps.Step[i].Assign && workflow.Steps.Step[i].Assign.length) {
                                                            task = workflow.Steps.Step[i].Assign[0].Action["@Name"];
                                                        } else {
                                                            task = workflow.Steps.Step[i].Assign.Action["@Name"];
                                                        }




                                                        //alert('Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                        // debugger;
                                                        //var task = workflow.Steps.Step[i].Assign[0].Action["@Name"]; // There is only 1, "Submit". // 1-13-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                        if (!task) task = '';
                                                        else task = '•&nbsp;' + task;
                                                        //if (stepName == 'Create' || stepName == 'Revise') {
                                                        html += '<td xcx="aadgf" colspan="1" class="tasks steprowcell" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + roleName + '" >' + task + '</td>';
                                                        //} else {
                                                        //    // Admin needs an edit button so that this role can be assigned to someone else.
                                                        //    var xid = 'steprow-admin_' + i + '_' + '0';
                                                        //    html += '<td class="tasks steprowcell" bwStepname="' + workflow.Workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + workflow.Workflow.Steps.Step[i].Assign["@Role"] + '" >' + task + '</td>';
                                                        //    html += '<td></td>';
                                                        //    html += '<td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                        //    //html += '  <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';
                                                        //    html += '</td>';
                                                        //}
                                                        //html += '<td></td>';
                                                        //html += '<td></td>';
                                                        //html += '<td></td>';
                                                        html += '<td xcx="llsd" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + roleName + '" ></td>';

                                                        //var cond = '';
                                                        //html += '<td class="cond steprowcell" bwStepname = "' + workflow.Workflow.Steps.Step[i]["@Name"] + '" bwRoleId = "' + workflow.Workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue = "' + cond + '">' + thiz.renderTheCondReadOnly(cond) + '</td>';


                                                        html += '</tr>';
                                                    }

                                                } else {
                                                    // Display Inform roles.
                                                    if (workflow.Steps.Step[i].Inform && workflow.Steps.Step[i].Inform.length) {
                                                        if (workflow.Steps.Step[i].Inform.length > 0) {
                                                            for (var j = 0; j < workflow.Steps.Step[i].Inform.length; j++) {
                                                                var xid = 'steprow-inform_' + i + '_' + j;
                                                                var additionalRowClass = '';
                                                                html += '<tr id="steprow-inform_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';
                                                                html += '  <td style="width:30px;"></td>';

                                                                if (thiz.options.displayRoleIdColumn) {
                                                                    if (workflow.Steps.Step[i].Inform[j]) {
                                                                        if (workflow.Steps.Step[i].Inform[j]["@Role"]) {
                                                                            html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@Role"] + '</td>';
                                                                        } else {
                                                                            html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@IdField"] + '</td>';
                                                                        }
                                                                    }
                                                                }

                                                                // Todd changed 10-13-19 7-32am ast
                                                                var roleName = '';
                                                                var roleId = '';
                                                                var roleCategory = '';
                                                                if (workflow.Steps.Step[i].Inform[j]) {
                                                                    roleName = workflow.Steps.Step[i].Inform[j]["@RoleName"];
                                                                    roleId = workflow.Steps.Step[i].Inform[j]["@Role"];
                                                                    roleCategory = 'Inform';
                                                                }
                                                                //
                                                                // Now that we have the roleName, we need to travel up through the organizational structure to determine if this role is assigned already!
                                                                //
                                                                html += '<td xcx="xcx23536-1" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + roleName + '">';
                                                                var roleAssigned = true;
                                                                if (roleAssigned) {
                                                                    //html += '<span style="color:grey;font-size:12pt;font-style:italic;">';
                                                                    html += '<span style="font-size:12pt;">';
                                                                    html += roleName;

                                                                    //html += '<br />';
                                                                    //html += 'Nova Scotia 98765 Inc.';

                                                                    html += '</span>';
                                                                } else {
                                                                    html += '<span style="color:red;font-size:12pt;font-style:italic;">';
                                                                    html += roleName;
                                                                    html += '</span>';
                                                                }
                                                                html += '</td>';


                                                                var tooltip = 'RACI: ';
                                                                tooltip += '\n';
                                                                tooltip += 'R = Responsible (also Recommender)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'I = Informed (also Informee)  ';


                                                                html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + '</td>';






                                                                html += '  <td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                                //// debugger; // 1
                                                                //
                                                                // Display the role participants.
                                                                //
                                                                //var bwParticipantId, bwParticipantFriendlyName, bwParticipantEmail;
                                                                //try {
                                                                //    for (var p = 0; p < rolesAndParticipants.RolesAndParticipants.length; p++) {
                                                                //        if (roleId == rolesAndParticipants.RolesAndParticipants[p].RoleId) {
                                                                //            bwParticipantId = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantId;
                                                                //            bwParticipantFriendlyName = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantFriendlyName;
                                                                //            bwParticipantEmail = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantEmail;
                                                                //        }
                                                                //    }
                                                                //} catch (e) {
                                                                //    console.log('Exception displaying participants:1: ' + e.message + ', ' + e.stack);
                                                                //}
                                                                var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                                var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, and working upwards. This makes sure that we find the correct person who this request affects the most.
                                                                for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                    if (foundRoleParticipant == true) break;
                                                                }



                                                                if (bwParticipantFriendlyName) {
                                                                    //// debugger; // 1
                                                                    html += '<span xcx="xcx234566-3" style="cursor:pointer;color:purple;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                    html += bwParticipantFriendlyName;
                                                                    html += ' (' + bwOrgName + ')';
                                                                    html += '</span>';
                                                                }

                                                                //html += '[PEOPLE PICKER]  [...]';
                                                                //html += '&nbsp;&nbsp;';
                                                                //html += '    <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                                html += '  </td>';


                                                                //html += '<td class="steprowaudittasktrail">[steprowaudittasktrail]</td>';
                                                                html += '<td xcx="ppas" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" ></td>';


                                                                html += '</tr>';
                                                            }
                                                        }
                                                    }
                                                    // Display Assign roles.
                                                    if (workflow.Steps.Step[i].Assign) {
                                                        if (workflow.Steps.Step[i].Assign.length > 0) {
                                                            for (var j = 0; j < workflow.Steps.Step[i].Assign.length; j++) {




                                                                //if (stepName.toLowerCase() == 'collaboration') {
                                                                //    alert('xcx901 workflow.Steps.Step[i].Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                                //    // 
                                                                //}





                                                                var xid = 'steprow-assign_' + i + '_' + j;
                                                                var additionalRowClass = '';
                                                                html += '<tr id="steprow-assign_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';

                                                                html += '  <td style="width:30px;"></td>';

                                                                if (thiz.options.displayRoleIdColumn) {
                                                                    html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '">' + workflow.Steps.Step[i].Assign[j]["@Role"] + '</td>';
                                                                }

                                                                // Todd changed 10-13-19 7-32am ast
                                                                var roleName = '';
                                                                var roleId = '';
                                                                var roleCategory = '';
                                                                if (workflow.Steps.Step[i].Assign[j]) {
                                                                    roleName = workflow.Steps.Step[i].Assign[j]["@RoleName"];
                                                                    roleId = workflow.Steps.Step[i].Assign[j]["@Role"];
                                                                    roleCategory = workflow.Steps.Step[i].Assign[j]["@RoleCategory"];
                                                                }

                                                                html += '<td xcx="xcx23536-2" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + roleName + '">';

                                                                html += roleName + ' (' + roleId + ')';
                                                                html += '<br />';
                                                                html += '</td>';

                                                                var tooltip = 'RACI: ';
                                                                tooltip += '\n';
                                                                tooltip += 'R = Responsible (also Recommender)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'I = Informed (also Informee)  ';




                                                                var checklistHtml = '';
                                                                if (workflow.Steps.Step[i].Assign[j]["@Cond"]) {
                                                                    var conditionString = workflow.Steps.Step[i].Assign[j]["@Cond"];
                                                                    if (conditionString.indexOf('$ChecklistsRequired~') > -1) {
                                                                        // We know checklists(s) are required, but we only have the checklists GUIDs here... can we look them up so the user can see which checklists?
                                                                        checklistHtml = '<span style="cursor:pointer;" title="This role has checklist(s) to complete: ';
                                                                        var checklists = thiz.options.Checklists;
                                                                        for (var ci = 0; ci < checklists.length; ci++) {
                                                                            if (conditionString.indexOf(checklists[ci].bwChecklistTemplatesId) > -1) {
                                                                                // We have found a checklist that needs to be completed.
                                                                                checklistHtml += '\n';
                                                                                checklistHtml += JSON.parse(checklists[ci].ChecklistJson).Title; // This is the title of the checklist.
                                                                            }
                                                                        }
                                                                        checklistHtml += '">';
                                                                        checklistHtml += '<span onclick="alert(\'This functionality is incomplete. Coming soon! This will display all of the checklists for this request...xcx2\');">&nbsp;✔&nbsp</span>';
                                                                        //// debugger;
                                                                    }
                                                                }



                                                                html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + checklistHtml + '</td>';



                                                                html += '<td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                                //// debugger; // 2
                                                                //
                                                                // Display the role participants.
                                                                //
                                                                //var bwParticipantId, bwParticipantFriendlyName, bwParticipantEmail;
                                                                //try {
                                                                //    for (var p = 0; p < rolesAndParticipants.RolesAndParticipants.length; p++) {
                                                                //        if (roleId == rolesAndParticipants.RolesAndParticipants[p].RoleId) {
                                                                //            bwParticipantId = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantId;
                                                                //            bwParticipantFriendlyName = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantFriendlyName;
                                                                //            bwParticipantEmail = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantEmail;
                                                                //        }
                                                                //    }
                                                                //} catch (e) {
                                                                //    console.log('Exception displaying participants:1: ' + e.message + ', ' + e.stack);
                                                                //}
                                                                var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                                var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, nd working upwards. This makes sure that we find the correct person who this request affects the most.
                                                                for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                            //// debugger;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                    if (foundRoleParticipant == true) break;
                                                                }




                                                                if (bwParticipantFriendlyName) {
                                                                    //// debugger; // 2
                                                                    html += '<span test="xcxtest2" style="cursor:pointer;color:purple;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                    html += bwParticipantFriendlyName;
                                                                    html += ' (' + bwOrgName + ')';
                                                                    html += '</span>';
                                                                }

                                                                //html += '[PEOPLE PICKER2]  [...]';
                                                                //html += '&nbsp;&nbsp;';
                                                                //html += '  <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                                html += '</td>';


                                                                //html += '<td class="steprowaudittasktrail">[steprowaudittasktrail]</td>';
                                                                html += '<td xcx="ppors" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" ></td>';



                                                                html += '</tr>';
                                                            }
                                                        }
                                                    }
                                                }
                                                //html += '</tr>';
                                                //}
                                            }
                                        }
                                    }
                                    html += '</table>';


                                    html += '       </td>';
                                    html += '       <td>&nbsp;&nbsp;</td>';
                                    html += '       <td style="vertical-align:top;">';
                                    html += '           <span id="' + requestDialogParentId + '_spanWorkflowAuditTrailSummary">[' + requestDialogParentId + '_spanWorkflowAuditTrailSummary]</span>';
                                    html += '       </td>';
                                    html += '   </tr>';
                                    html += '</table>';

                                    html += '<div style="display:none;" id="divOrgMultiPickerDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanOrgMultiPickerDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Location(s)</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divOrgMultiPickerDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanOrgMultiPickerDialogContent" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;"></span><br />';
                                    html += '  <br /><br />';
                                    html += '  <input type="button" value="SAVE" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'orgMultiPickerDialog_RenderResults\');" />';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divMessageDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanMessageDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">[spanMessageDialogTitle]</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divMessageDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanMessageDialogContentTop" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;">[spanMessageDialogContentTop]</span>';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <span id="spanMessageDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                    html += '      [spanMessageDialogContentBottom]';
                                    html += '    </span>';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divWorkflowActionsUnderlyingPropertiesDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanWorkflowActionsUnderlyingPropertiesDialog" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Action Properties</span>';
                                    html += '                    <br />';
                                    html += '                    <span id="spanWorkflowActionsUnderlyingPropertiesDialogSubTitle" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:12pt;font-weight:normal;">[spanWorkflowActionsUnderlyingPropertiesDialogSubTitle]</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divWorkflowActionsUnderlyingPropertiesDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentTop">[spanWorkflowActionsUnderlyingPropertiesDialogContentTop]</span>';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                    html += '    </span>';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divProgressBarDialog">';
                                    html += '<div id="progressbar" class="ui-progressbar"><div class="progress-label">Loading...</div></div>';
                                    html += '</div>';
                                }

                                document.getElementById(requestDialogParentId + '_Content').innerHTML = html;

                                // Instantiate the consensus datepicker, if there is one.
                                var datepicker = $('#' + requestDialogParentId + '_Content').find('#dtBwRequest_Workflow_Consensus_' + bwBudgetRequestId);
                                if (datepicker) {
                                    console.log('xcx1234235346 Instantiating the consensus datepicker.');
                                    $(datepicker).datepicker();
                                }

                                thiz.populateWorkflowAuditTrailSummary(brTitle, title, bwBudgetRequestId, requestDialogParentId, bwRequestTypeId, workflow);

                                // Redraw the lines!
                                //thiz.renderOrgRoleConnectorsToWorkflow(true, 'root');
                            }
                        } catch (e) {
                            //// debugger;
                            //lpSpinner.Hide();
                            console.log('Exception in renderWorkflowAuditTrail().xx.Get: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in renderWorkflowAuditTrail().xx.Get: ' + e.message + ', ' + e.stack);
                        }

                    },
                    error: function (data, errorCode, errorMessage) {
                        HideActivitySpinner();
                        var msg = 'Error in bwRequest.js.renderWorkflowAuditTrail.racirolesandparticipants.error(): ' + errorMessage + ', data: ' + JSON.stringify(data);
                        console.log(msg);
                        displayAlertDialog(msg);
                    }
                });

            }
        } catch (e) {
            console.log('Exception in bwRequest.js.renderWorkflowAuditTrail(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderWorkflowAuditTrail(): ' + e.message + ', ' + e.stack);
        }
    },


    renderWorkflowAuditTrail2: function (requestDialogParentId, bwRequestTypeId, brTitle, title, bwBudgetRequestId, bwWorkflowId, bwOrgId) {
        // This was originally a copy of the bwWorkflowEditor.renderWorkflowEditor method! May be an opportunity to abstract/break out this in the future.
        try {
            // 4-27-2020 FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX FIX
            //// debugger; // IS racirolesandparticipants5 CORRECT? IT CALLS start.js.getParticipantsForRaciRoles which just looks at the BwWorkflowUserRole table, and not the OrgRolesJson!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            console.log('In renderWorkflowAuditTrail2().');
            var thiz = this;

            // divRequestFormDialog_dadca250-6e1a-4c92-90a9-35efc2da5a52_Parent
            //var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId + '_Parent';
            //// debugger;

            //var bwOrgId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bworgid');
            //var bwRequestTypeId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwrequesttypeid');






            //var bwOrgId = 'root'; // <<<<<<<<<<<<<<<<<<<<<<<<REMOVE!!!!
            //var bwRequestTypeId = 'xx';






            if (!bwOrgId) {

                console.log('In renderWorkflowAuditTrail2(). INVALID bwOrgId: ' + bwOrgId + '. This process cannot continue.');
                displayAlertDialog('In renderWorkflowAuditTrail2(). INVALID bwOrgId: ' + bwOrgId + '. This process cannot continue.');

            } else {

                var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwWorkflowAppId: workflowAppId,
                    bwRequestTypeId: bwRequestTypeId,
                    bwOrgId: bwOrgId
                };

                var operationUri = this.options.operationUriPrefix + 'odata/racirolesandparticipants';
                $.ajax({
                    url: operationUri,
                    type: 'POST',
                    data: data,
                    headers: { "Accept": "application/json; odata=verbose" },
                    success: function (results) {
                        try {

                            var rolesAndParticipants = results;

                            console.log('In renderWorkflowPeoplePicker():2:.');
                            if (rolesAndParticipants.length == 0) {

                                displayAlertDialog('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId);

                                //var instructions = '';
                                //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                            } else {
                                //// debugger;
                                var workflowParent = rolesAndParticipants.Workflow; //.value[0];
                                var workflow = JSON.parse(rolesAndParticipants.Workflow.bwWorkflowJson);
                                //// debugger;





                                //// debugger;
                                // Display the bwWorkflowId guid and request type
                                //document.getElementById(requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2').innerHTML = workflowParent.bwWorkflowId + ' (' + workflowParent.bwRequestType + ')'; // commented out 10-3-2022

                                var html = '';

                                if (workflow == null) {

                                    html += '<span style="font-size:24pt;color:red;">NO DATA</span>';

                                } else {

                                    // Include jquery-ui stylesheet.
                                    //html += '<link rel="stylesheet" href="css/jquery/1.11.1/themes/smoothness/jquery-ui.min.css?v=0">'; // removed 8-18-2022
                                    // Inline styles.
                                    html += '<style>';
                                    html += '.titlecell {';
                                    html += '    vertical-align:top;';
                                    html += '    padding-top:3px;';
                                    html += '    padding-bottom:3px;';
                                    html += '    padding-left:5px;';
                                    html += '    padding-right:10px;';
                                    html += '    white-space:nowrap;';
                                    html += '    color:grey;';
                                    html += '    text-decoration:underline;';
                                    html += '}';
                                    html += '.steprowcell {';
                                    html += '    vertical-align:top;';
                                    html += '    padding-top:10px;';
                                    html += '    padding-bottom:10px;';
                                    html += '    padding-left:5px;';
                                    html += '    padding-right:5px;';
                                    html += '    white-space:nowrap;';
                                    html += '}';
                                    html += '.steprow-hidden {';
                                    html += '    visibility: collapse;';
                                    html += '}';

                                    html += '.steprow:hover {';
                                    html += '    background-color: lightgoldenrodyellow;';
                                    html += '}';

                                    html += '.stepheadercell:hover {';
                                    html += '    background-color: gainsboro !important;'; // This is the step header row which expans and collapses.
                                    html += '}';

                                    html += '.activeEditRow {';
                                    html += '    background-color: #EBF6F9;';
                                    html += '}';
                                    html += '.ui-progressbar {';
                                    html += '    position: relative;';
                                    html += '}';
                                    html += '.progress-label {';
                                    html += '    position: absolute;';
                                    html += '    left: 10%;';
                                    html += '    top: 4px;';
                                    html += '    font-weight: bold;';
                                    html += '    color: black;';
                                    html += '    text-shadow: 1px 1px 0 #fff;';
                                    html += '}';
                                    html += '#progressbar .ui-progressbar-value {';
                                    html += '    background-color: cyan;';
                                    html += '}';
                                    html += '.transparent-dialog {';
                                    html += '  background: transparent;';
                                    html += '  border: none;';
                                    html += '}';
                                    html += '.transparent-dialog .ui-widget-header {';
                                    html += '  border: none;';
                                    html += '  background: transparent;';
                                    html += '}';
                                    html += '.transparent-dialog .ui-widget-content {';
                                    html += '  background: transparent;';
                                    html += '}';
                                    //
                                    // This is the dialog draggable handle bar colored lightgoldenrodyellow.
                                    //
                                    //html += '.ui-dialog-title {';
                                    //html += '    background-color: lightgoldenrodyellow;';
                                    //html += '    border-color: orange;';
                                    //html += '}';
                                    //html += '.ui-draggable-handle {';
                                    //html += '    background-color: lightgoldenrodyellow !important;';
                                    //html += '    border-color: red !important;';
                                    //html += '}';
                                    //html += '.ui-corner-all {';
                                    //html += '    border-color: #FFE1AC !important;'; // Navajo White outlining the dialog boxes! Yeah!!! :)
                                    //html += '}';

                                    html += '</style>';



                                    html += '<br />';
                                    html += '<span id="xcx449956-2" title="Expand or Collapse ALL..." onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseAllWorkflowSteps\', \'' + requestDialogParentId + '\');" style="width:200px;padding:5px 10px 5px 10px;margin:0 0 0 20px;white-space:nowrap;vertical-align:top;border:1px solid lightblue;cursor:pointer;font-weight:normal;font-size:20pt;">                           <span style="display:inline-block;">+/-</span>                       </span>';

                                    html += '<table>';
                                    html += '   <tr>';
                                    html += '       <td style="vertical-align:top;">';


                                    html += '<table border="1" style="border-color:#d8d8d8;">';


                                    //html += '<tr><td>xcx555999607 [+/-]</td></tr>';


                                    //// debugger;
                                    if (!workflow) {
                                        html += '<tr>';
                                        html += '  <td>';
                                        html += '    NO WORKFLOW JSON. CANNOT PROCEED. xcx32456-3';
                                        html += '  </td>';
                                        html += '</tr>';

                                    } else {
                                        // Iterate through all of the steps.
                                        for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                            var stepName = workflow.Steps.Step[i]["@Name"];
                                            if (false) {
                                                // Do nothing, not displaying these steps. << DISPLAYING all steps now!
                                            } else {
                                                var newStepName = workflow.Steps.Step[i]["@FriendlyName"];
                                                if (stepName == 'Create') {
                                                    newStepName = 'Create';
                                                } else if (stepName == 'Revise') {
                                                    newStepName = 'Revise';
                                                } else if (stepName == 'Admin') {
                                                    newStepName = 'Admin';
                                                } //else if (stepName == 'Collaboration') {
                                                //    newStepName = 'Collaborate and Develop Consensus';
                                                //} else if (stepName == 'VPLevel') {
                                                //    newStepName = 'Requesting Manager Approvals';
                                                //} else if (stepName == 'ExecLevel') {
                                                //    newStepName = 'Requesting Executive Approvals';
                                                //} else if (stepName == 'CLevel') {
                                                //    newStepName = 'Requesting Board of Directors Approvals';
                                                //} else if (stepName == 'Done') {
                                                //    newStepName = 'Approved';
                                                //} else if (stepName == 'IssueOrderNumber') {
                                                //    newStepName = 'Requesting Purchase Order Number from Accounting';
                                                //}

                                                //if (stepName == 'Done') {
                                                //    stepName = 'Completed (Done)'; // This is what we want the Done step renamed to in the future...
                                                //}

                                                var cellColor = '#f5f6f7';

                                                //if (stepName != 'Create' && stepName != 'Revise' && stepName != 'Admin') {

                                                // Display the header row for this step.
                                                html += '<tr id="stepheaderrow_' + i + '" style="border:0px;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseWorkflowStep2\', \'' + 'stepname_' + i + '\', \'' + 'stepimage_' + i + '\', \'steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '\', \'' + requestDialogParentId + '\');">';
                                                html += '  <td colspan="11" class="stepheadercell" style="font-weight:bold;padding:10px;background-color:' + cellColor + ';" >';
                                                html += '    <table style="width:100%;">';
                                                html += '      <tr>';
                                                html += '        <td>';
                                                //html += '          <span style="white-space:nowrap;"><span id="stepname_' + i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' + newStepName + '</span>';
                                                html += '          <span style="white-space:nowrap;">';


                                                //html += '<span id="stepname_' +i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' +newStepName + '</span>';
                                                // EXPAND COLLAPSE!!!!!!!!!!!!!!!! 1-26-2020
                                                html += '            <span id="stepname_' + i + '" class="stepname" bwStepName="' + stepName + '" bwStepFriendlyName="' + newStepName + '" style="cursor:pointer;vertical-align:middle;" >';
                                                html += '              <img id="stepimage_' + i + '" src="images/drawer-open.png" title="collapse" style="cursor:pointer;width:45px;height:45px;vertical-align:middle;"  />';

                                                html += newStepName;

                                                if (workflow.Steps.Step[i]["@Name"] == 'Collaboration') {
                                                    //// debugger;
                                                    var timeout = workflow.Steps.Step[i]["@Timeout"];
                                                    var timeoutUnits = workflow.Steps.Step[i]["@TimeoutUnits"]
                                                    html += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + timeout + '&nbsp' + timeoutUnits;
                                                }




                                                var warningSignId = requestDialogParentId + '_' + stepName + '_' + 'warningSign';

                                                //html += '              &nbsp;';
                                                html += '              <span id="' + warningSignId + '" xcx="xcx12312_2"></span>';
                                                html += '            </span>';


                                                html += '          </span>';
                                                html += '        </td>';
                                                html += '        <td></td>';
                                                html += '        <td style="text-align:center;">';
                                                // Display the consensus timeout section and the "Configure Email", and "Add PArticipants" buttons.
                                                html += '           <table style="width:100%;">';
                                                html += '               <tr>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';

                                                html += '                   <td></td>';

                                                html += '                   <td style="text-align:right;">';
                                                //if (stepName.toLowerCase() == 'admin') {
                                                //    // No "Add a participant" button for the ADMIN step/stage.
                                                //} else {
                                                //    //html += '&nbsp;&nbsp;&nbsp;&nbsp;';
                                                //    //html += '          <input type="button" class="buttonAddNewAssignmentRow" style="white-space:nowrap;padding:5px 10px 5px 10px;" value="✚ Add a Participant" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'addNewRow\', \'' + 'steprow-inform_' + i + '_' + '0' + '\');" />';
                                                //}
                                                html += '                   </td>';
                                                html += '               </tr>';
                                                html += '           </table>';
                                                html += '        </td>';
                                                html += '      </tr>';
                                                html += '    </table>';
                                                html += '  </td>';
                                                html += '</tr>';
                                                // End: Display the header row for this step.

                                                if (stepName == 'Create' || stepName == 'Revise' || stepName == 'Admin') {

                                                    if (workflow.Steps.Step[i].Assign) {
                                                        // THERE WILL ONLY EVER BE 1 node here.


                                                        //
                                                        // NOTE THAT THIS IS WHERE THE ROW IS NOT DISPLAYED INITIALLY!!!! 1-26-2020
                                                        //
                                                        html += '<tr id="steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '" class="steprow steprow_' + i + '" style="cursor:pointer;display:none;" title="This role assignment cannot be changed, it is a part of the core workflow functionality." >';





                                                        html += '  <td style="width:30px;"></td>';

                                                        if (thiz.options.displayRoleIdColumn) {
                                                            html += '<td xcx="sssdg" style="background-color:' + cellColor + ';" class="roleid steprowcell" bwRoleId="' + workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Assign["@Role"] + '">' + workflow.Steps.Step[i].Assign["@Role"] + '</td>';
                                                        }



                                                        //alert('xcx12314 workflow.Steps.Step[i]: ' + JSON.stringify(workflow.Steps.Step[i]));



                                                        //var roleName = workflow.Steps.Step[i].Assign["@Role"]; //["@RoleName"];





                                                        var roleName, roleCategory;

                                                        var roleNames = [];
                                                        for (var x = 0; x < workflow.Steps.Step[i].Assign.length; x++) {
                                                            roleNames.push(workflow.Steps.Step[i].Assign[x]["@Role"]);
                                                        }
                                                        var roleCategories = [];
                                                        for (var x = 0; x < workflow.Steps.Step[i].Assign.length; x++) {
                                                            roleCategories.push(workflow.Steps.Step[i].Assign[x]["@RoleCategory"]);
                                                        }

                                                        if ((roleNames.length == 1) && (roleCategories.length == 1)) {
                                                            roleName = roleNames[0];
                                                            roleCategory = roleCategories[0];
                                                        } else {
                                                            console.log('Unexpected value for roleNames/roleCategories: ' + JSON.stringify(roleNames) + ', ' + JSON.stringify(roleCategories));
                                                        }










                                                        //if (stepName.toLowerCase() == 'admin') {

                                                        //    alert('roleNames: ' + JSON.stringify(roleNames));

                                                        //    //alert('xcx900 workflow.Steps.Step[i].Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                        //    // xcx900 workflow.Steps.Step[i].Assign: [{"@Role":"ADMIN","@RoleName":"ADMIN","@RoleCategory":"Approver","@AllowRequestModifications":true,"@Title":"","@Instructions":"","Action":[{"@Name":"Approve","@State":"Done","Tooltip":"Approve the request and submit comments"},{"@Name":"Revise/Hold","@Target":"Revise","Invalidate":{"@Step":"CLevel"},"Tooltip":"Send the CAR back to the original creator"}]}]
                                                        //}



                                                        html += '<td xcx="ttys" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';this.style.color=\'red\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';this.style.color=\'black\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue="' + roleName + '">';
                                                        //html += ' <img style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'displayPeoplePickerDialog\', \'' + 'txtApprover2FriendlyName' + '\', \'' + 'txtApprover2Id' + '\', \'' + 'txtApprover2Email' + '\');" src="images/addressbook-icon18x18.png">';
                                                        //html += '&nbsp;' + roleName;
                                                        html += 'Role: ' + roleName;
                                                        //html += '<br />';
                                                        //html += '<span style="color:grey;font-size:12pt;font-style:italic;">All participants can create a new request.</span>';
                                                        html += '</td>';

                                                        html += '<td class="steprowcell">';
                                                        html += ' <span xcx="jjdgr" id="rolecategory-assign_' + i + '_' + j + '" class="rolecategory" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + roleName + '" bwOldValue="' + roleCategory + '" style="cursor:pointer;" title="Double-click to edit the role category...">';
                                                        html += roleCategory;
                                                        html += ' </span>';
                                                        html += '</td>';

                                                        // Task(s)/Action(s)
                                                        var task;
                                                        if (workflow.Steps.Step[i].Assign && workflow.Steps.Step[i].Assign.length) {
                                                            task = workflow.Steps.Step[i].Assign[0].Action["@Name"];
                                                        } else {
                                                            task = workflow.Steps.Step[i].Assign.Action["@Name"];
                                                        }




                                                        //alert('Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                        // debugger;
                                                        //var task = workflow.Steps.Step[i].Assign[0].Action["@Name"]; // There is only 1, "Submit". // 1-13-2022 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                        if (!task) task = '';
                                                        else task = '•&nbsp;' + task;
                                                        //if (stepName == 'Create' || stepName == 'Revise') {
                                                        html += '<td xcx="aadgf" colspan="1" class="tasks steprowcell" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + roleName + '" >' + task + '</td>';
                                                        //} else {
                                                        //    // Admin needs an edit button so that this role can be assigned to someone else.
                                                        //    var xid = 'steprow-admin_' + i + '_' + '0';
                                                        //    html += '<td class="tasks steprowcell" bwStepname="' + workflow.Workflow.Steps.Step[i]["@Name"] + '" bwRoleId="' + workflow.Workflow.Steps.Step[i].Assign["@Role"] + '" >' + task + '</td>';
                                                        //    html += '<td></td>';
                                                        //    html += '<td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                        //    //html += '  <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';
                                                        //    html += '</td>';
                                                        //}
                                                        //html += '<td></td>';
                                                        //html += '<td></td>';
                                                        //html += '<td></td>';
                                                        html += '<td xcx="llsd" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + roleName + '" ></td>';

                                                        //var cond = '';
                                                        //html += '<td class="cond steprowcell" bwStepname = "' + workflow.Workflow.Steps.Step[i]["@Name"] + '" bwRoleId = "' + workflow.Workflow.Steps.Step[i].Assign["@Role"] + '" bwOldValue = "' + cond + '">' + thiz.renderTheCondReadOnly(cond) + '</td>';


                                                        html += '</tr>';
                                                    }

                                                } else {
                                                    // Display Inform roles.
                                                    if (workflow.Steps.Step[i].Inform && workflow.Steps.Step[i].Inform.length) {
                                                        if (workflow.Steps.Step[i].Inform.length > 0) {
                                                            for (var j = 0; j < workflow.Steps.Step[i].Inform.length; j++) {
                                                                var xid = 'steprow-inform_' + i + '_' + j;
                                                                var additionalRowClass = '';
                                                                html += '<tr id="steprow-inform_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';
                                                                html += '  <td style="width:30px;"></td>';

                                                                if (thiz.options.displayRoleIdColumn) {
                                                                    if (workflow.Steps.Step[i].Inform[j]) {
                                                                        if (workflow.Steps.Step[i].Inform[j]["@Role"]) {
                                                                            html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@Role"] + '</td>';
                                                                        } else {
                                                                            html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@IdField"] + '</td>';
                                                                        }
                                                                    }
                                                                }

                                                                // Todd changed 10-13-19 7-32am ast
                                                                var roleName = '';
                                                                var roleId = '';
                                                                var roleCategory = '';
                                                                if (workflow.Steps.Step[i].Inform[j]) {
                                                                    roleName = workflow.Steps.Step[i].Inform[j]["@RoleName"];
                                                                    roleId = workflow.Steps.Step[i].Inform[j]["@Role"];
                                                                    roleCategory = 'Inform';
                                                                }
                                                                //
                                                                // Now that we have the roleName, we need to travel up through the organizational structure to determine if this role is assigned already!
                                                                //
                                                                html += '<td xcx="xcx23536-1" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + roleName + '">';
                                                                var roleAssigned = true;
                                                                if (roleAssigned) {
                                                                    //html += '<span style="color:grey;font-size:12pt;font-style:italic;">';
                                                                    html += '<span style="font-size:12pt;">';
                                                                    html += roleName;

                                                                    //html += '<br />';
                                                                    //html += 'Nova Scotia 98765 Inc.';

                                                                    html += '</span>';
                                                                } else {
                                                                    html += '<span style="color:red;font-size:12pt;font-style:italic;">';
                                                                    html += roleName;
                                                                    html += '</span>';
                                                                }
                                                                html += '</td>';


                                                                var tooltip = 'RACI: ';
                                                                tooltip += '\n';
                                                                tooltip += 'R = Responsible (also Recommender)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'I = Informed (also Informee)  ';


                                                                html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + '</td>';






                                                                html += '  <td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                                //// debugger; // 1
                                                                //
                                                                // Display the role participants.
                                                                //
                                                                //var bwParticipantId, bwParticipantFriendlyName, bwParticipantEmail;
                                                                //try {
                                                                //    for (var p = 0; p < rolesAndParticipants.RolesAndParticipants.length; p++) {
                                                                //        if (roleId == rolesAndParticipants.RolesAndParticipants[p].RoleId) {
                                                                //            bwParticipantId = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantId;
                                                                //            bwParticipantFriendlyName = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantFriendlyName;
                                                                //            bwParticipantEmail = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantEmail;
                                                                //        }
                                                                //    }
                                                                //} catch (e) {
                                                                //    console.log('Exception displaying participants:1: ' + e.message + ', ' + e.stack);
                                                                //}
                                                                var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                                var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, and working upwards. This makes sure that we find the correct person who this request affects the most.
                                                                for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                    if (foundRoleParticipant == true) break;
                                                                }



                                                                if (bwParticipantFriendlyName) {
                                                                    //// debugger; // 1
                                                                    html += '<span xcx="xcx234566-3" style="cursor:pointer;color:purple;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                    html += bwParticipantFriendlyName;
                                                                    html += ' (' + bwOrgName + ')';
                                                                    html += '</span>';
                                                                }

                                                                //html += '[PEOPLE PICKER]  [...]';
                                                                //html += '&nbsp;&nbsp;';
                                                                //html += '    <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                                html += '  </td>';


                                                                //html += '<td class="steprowaudittasktrail">[steprowaudittasktrail]</td>';
                                                                html += '<td xcx="ppas" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" ></td>';


                                                                html += '</tr>';
                                                            }
                                                        }
                                                    }
                                                    // Display Assign roles.
                                                    if (workflow.Steps.Step[i].Assign) {
                                                        if (workflow.Steps.Step[i].Assign.length > 0) {
                                                            for (var j = 0; j < workflow.Steps.Step[i].Assign.length; j++) {




                                                                //if (stepName.toLowerCase() == 'collaboration') {
                                                                //    alert('xcx901 workflow.Steps.Step[i].Assign: ' + JSON.stringify(workflow.Steps.Step[i].Assign));
                                                                //    // 
                                                                //}





                                                                var xid = 'steprow-assign_' + i + '_' + j;
                                                                var additionalRowClass = '';
                                                                html += '<tr id="steprow-assign_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';

                                                                html += '  <td style="width:30px;"></td>';

                                                                if (thiz.options.displayRoleIdColumn) {
                                                                    html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '">' + workflow.Steps.Step[i].Assign[j]["@Role"] + '</td>';
                                                                }

                                                                // Todd changed 10-13-19 7-32am ast
                                                                var roleName = '';
                                                                var roleId = '';
                                                                var roleCategory = '';
                                                                if (workflow.Steps.Step[i].Assign[j]) {
                                                                    roleName = workflow.Steps.Step[i].Assign[j]["@RoleName"];
                                                                    roleId = workflow.Steps.Step[i].Assign[j]["@Role"];
                                                                    roleCategory = workflow.Steps.Step[i].Assign[j]["@RoleCategory"];
                                                                }

                                                                html += '<td xcx="xcx23536-2" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + roleName + '">';

                                                                html += roleName + ' (' + roleId + ')';
                                                                html += '<br />';
                                                                html += '</td>';

                                                                var tooltip = 'RACI: ';
                                                                tooltip += '\n';
                                                                tooltip += 'R = Responsible (also Recommender)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                                tooltip += '\n';
                                                                tooltip += 'I = Informed (also Informee)  ';




                                                                var checklistHtml = '';
                                                                if (workflow.Steps.Step[i].Assign[j]["@Cond"]) {
                                                                    var conditionString = workflow.Steps.Step[i].Assign[j]["@Cond"];
                                                                    if (conditionString.indexOf('$ChecklistsRequired~') > -1) {
                                                                        // We know checklists(s) are required, but we only have the checklists GUIDs here... can we look them up so the user can see which checklists?
                                                                        checklistHtml = '<span style="cursor:pointer;" title="This role has checklist(s) to complete: ';
                                                                        var checklists = thiz.options.Checklists;
                                                                        for (var ci = 0; ci < checklists.length; ci++) {
                                                                            if (conditionString.indexOf(checklists[ci].bwChecklistTemplatesId) > -1) {
                                                                                // We have found a checklist that needs to be completed.
                                                                                checklistHtml += '\n';
                                                                                checklistHtml += JSON.parse(checklists[ci].ChecklistJson).Title; // This is the title of the checklist.
                                                                            }
                                                                        }
                                                                        checklistHtml += '">';
                                                                        checklistHtml += '<span onclick="alert(\'This functionality is incomplete. Coming soon! This will display all of the checklists for this request...xcx2\');">&nbsp;✔&nbsp</span>';
                                                                        //// debugger;
                                                                    }
                                                                }



                                                                html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + checklistHtml + '</td>';



                                                                html += '<td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                                //// debugger; // 2
                                                                //
                                                                // Display the role participants.
                                                                //
                                                                //var bwParticipantId, bwParticipantFriendlyName, bwParticipantEmail;
                                                                //try {
                                                                //    for (var p = 0; p < rolesAndParticipants.RolesAndParticipants.length; p++) {
                                                                //        if (roleId == rolesAndParticipants.RolesAndParticipants[p].RoleId) {
                                                                //            bwParticipantId = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantId;
                                                                //            bwParticipantFriendlyName = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantFriendlyName;
                                                                //            bwParticipantEmail = rolesAndParticipants.RolesAndParticipants[p].Participants[0].bwParticipantEmail;
                                                                //        }
                                                                //    }
                                                                //} catch (e) {
                                                                //    console.log('Exception displaying participants:1: ' + e.message + ', ' + e.stack);
                                                                //}
                                                                var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                                var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, nd working upwards. This makes sure that we find the correct person who this request affects the most.
                                                                for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                            //// debugger;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                    if (foundRoleParticipant == true) break;
                                                                }




                                                                if (bwParticipantFriendlyName) {
                                                                    //// debugger; // 2
                                                                    html += '<span test="xcxtest2" style="cursor:pointer;color:purple;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                    html += bwParticipantFriendlyName;
                                                                    html += ' (' + bwOrgName + ')';
                                                                    html += '</span>';
                                                                }

                                                                //html += '[PEOPLE PICKER2]  [...]';
                                                                //html += '&nbsp;&nbsp;';
                                                                //html += '  <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                                html += '</td>';


                                                                //html += '<td class="steprowaudittasktrail">[steprowaudittasktrail]</td>';
                                                                html += '<td xcx="ppors" class="steprowaudittasktrail" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwStepIndex="' + i + '" bwRoleId="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" ></td>';



                                                                html += '</tr>';
                                                            }
                                                        }
                                                    }
                                                }
                                                //html += '</tr>';
                                                //}
                                            }
                                        }
                                    }
                                    html += '</table>';


                                    html += '       </td>';
                                    html += '       <td>&nbsp;&nbsp;</td>';
                                    html += '       <td style="vertical-align:top;">';
                                    html += '           <span id="' + requestDialogParentId + '_spanWorkflowAuditTrailSummary">[' + requestDialogParentId + '_spanWorkflowAuditTrailSummary]</span>';
                                    html += '       </td>';
                                    html += '   </tr>';
                                    html += '</table>';

                                    html += '<div style="display:none;" id="divOrgMultiPickerDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanOrgMultiPickerDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Location(s)</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divOrgMultiPickerDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanOrgMultiPickerDialogContent" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;"></span><br />';
                                    html += '  <br /><br />';
                                    html += '  <input type="button" value="SAVE" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'orgMultiPickerDialog_RenderResults\');" />';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divMessageDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanMessageDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">[spanMessageDialogTitle]</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divMessageDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanMessageDialogContentTop" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;">[spanMessageDialogContentTop]</span>';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <span id="spanMessageDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                    html += '      [spanMessageDialogContentBottom]';
                                    html += '    </span>';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divWorkflowActionsUnderlyingPropertiesDialog">';
                                    html += '  <table style="width:100%;">';
                                    html += '    <tr>';
                                    html += '      <td style="width:90%;">';
                                    html += '        <span id="spanWorkflowActionsUnderlyingPropertiesDialog" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Action Properties</span>';
                                    html += '                    <br />';
                                    html += '                    <span id="spanWorkflowActionsUnderlyingPropertiesDialogSubTitle" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:12pt;font-weight:normal;">[spanWorkflowActionsUnderlyingPropertiesDialogSubTitle]</span>';
                                    html += '      </td>';
                                    html += '      <td style="width:9%;"></td>';
                                    html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                    html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divWorkflowActionsUnderlyingPropertiesDialog\').dialog(\'close\');">X</span>';
                                    html += '      </td>';
                                    html += '    </tr>';
                                    html += '  </table>';
                                    html += '  <br /><br />';
                                    html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                    html += '  <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentTop">[spanWorkflowActionsUnderlyingPropertiesDialogContentTop]</span>';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <br />';
                                    html += '    <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                    html += '    </span>';
                                    html += '  <br /><br />';
                                    html += '</div>';

                                    html += '<div style="display:none;" id="divProgressBarDialog">';
                                    html += '<div id="progressbar" class="ui-progressbar"><div class="progress-label">Loading...</div></div>';
                                    html += '</div>';
                                }

                                document.getElementById(requestDialogParentId + '_Content').innerHTML = html;

                                thiz.populateWorkflowAuditTrailSummary(brTitle, title, bwBudgetRequestId, requestDialogParentId, bwRequestTypeId, workflow);

                                // Redraw the lines!
                                //thiz.renderOrgRoleConnectorsToWorkflow(true, 'root');
                            }
                        } catch (e) {
                            //// debugger;
                            //lpSpinner.Hide();
                            console.log('Exception in renderWorkflowAuditTrail2().xx.Get: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception in renderWorkflowAuditTrail2().xx.Get: ' + e.message + ', ' + e.stack);
                        }

                    },
                    error: function (data, errorCode, errorMessage) {
                        HideActivitySpinner();
                        var msg = 'Error in bwRequest.js.renderWorkflowAuditTrail2.racirolesandparticipants.error(): ' + errorMessage + ', data: ' + JSON.stringify(data);
                        console.log(msg);
                        displayAlertDialog(msg);
                    }
                });

            }
        } catch (e) {
            console.log('Exception in bwRequest.js.renderWorkflowAuditTrail2(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderWorkflowAuditTrail2(): ' + e.message + ', ' + e.stack);
        }
    },

    populateWorkflowAuditTrailSummary: function (brTitle, title, bwBudgetRequestId, requestDialogParentId, bwRequestTypeId, workflow) {
        try {
            // This does what it says. Also, it sets the step titles as gray?, amber, green, or tomato.
            // gray - no tasks assigned in this step yet
            // orange - this is the active step
            // green - this step has completed
            // tomato - this step has a problem
            console.log('In populateWorkflowAuditTrailSummary().');
            var thiz = this;

            var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + bwBudgetRequestId;
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (wtItems) {
                    try {
                        if (wtItems.d.results.length == 0) {
                            html = '';
                            html += 'NO DATA';
                            $('#' + requestDialogParentId + '_spanWorkflowAuditTrailSummary').html(html);
                        } else {

                            //
                            // Save this for use by the "Revert a Task" button.
                            // First we need to remove one if it exists for this bwBudgetRequestId.
                            //
                            for (var i = 0; i < thiz.options.requestWorkflowTasks.length; i++) {
                                if (bwBudgetRequestId == thiz.options.requestWorkflowTasks[i].bwBudgetRequestId) {
                                    thiz.options.requestWorkflowTasks.splice(i, 1); // This removes it from the list. 
                                }
                            }
                            thiz.options.requestWorkflowTasks.push({
                                bwBudgetRequestId: bwBudgetRequestId,
                                bwRequestTypeId: bwRequestTypeId,
                                workflowTaskItems: wtItems.d.results
                            });



                            // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                            //var userIds = [];
                            //userIds.push(wtItems.d.results[0].bwAuthorId);
                            //for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                            //    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                            //}
                            //var UserFriendlyNames = [];
                            //var dataRetrievalCount = 0;
                            //for (var uids = 0; uids < userIds.length; uids++) {
                            //    // Ok now we have to make a deferred call to get back the Friendly Names.
                            //    GetUserDetails[uids] = $.Deferred();
                            //    GetUserDetails[uids].done(function (data) {
                            //        try {
                            //dataRetrievalCount += 1; // Increment the count!
                            // Add the results to the array.
                            //UserFriendlyNames.push(data);
                            // Check if all of the data has come back yet.
                            //if (dataRetrievalCount == userIds.length) {
                            // Now that we have all the friendly names we need for the user Ids, we can proceed.
                            var html = '';
                            //var authorName = '';
                            //for (var c = 0; c < UserFriendlyNames.length; c++) {
                            //    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                            //}
                            var auditRows = $('#' + requestDialogParentId).find('.steprowaudittasktrail');
                            for (var i = 0; i < auditRows.length; i++) {
                                var stepName = auditRows[i].getAttribute('bwStepname');
                                if (stepName && (stepName.toLowerCase() == 'create')) {





                                    //html = '<strike><span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';

                                    // 10-4-2022
                                    var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[0].Created);
                                    html = '';
                                    html += '<strike xcx="xcx3246677"><span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                                    html += '<br />';
                                    //html += '<span xcx="xcx27-15">Request submitted by ' + authorName + '</span></strike>';
                                    //html += '<span xcx="xcx27-15">Request submitted by ' + wtItems.d.results[0].bwAuthorFriendlyName + '</span></strike>';


                                    // 10-4-2022
                                    html += '<span xcx="xcx27-15">Request submitted by ';
                                    html += '   <span style="color:purple;font-weight:bold;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + wtItems.d.results[0].bwAssignedToId + '\', \'' + wtItems.d.results[0].bwAssignedToFriendlyName + '\', \'' + wtItems.d.results[0].bwAssignedToEmail + '\', \'undefined\');">' + wtItems.d.results[0].bwAssignedToFriendlyName + '</span>';
                                    html += '</span></strike>';













                                    auditRows[i].innerHTML = html;
                                    auditRows[i].setAttribute('bwTaskStatus', 'completed');
                                    break;
                                }
                            }



                            //var xx = '';
                            //for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                            //    xx += JSON.stringify(wtItems.d.results[ri]);
                            //}
                            //displayAlertDialog('wtItems.d.results: ' +xx);




                            for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                for (var i = 0; i < auditRows.length; i++) {
                                    var stepName = auditRows[i].getAttribute('bwStepname');
                                    var roleId = auditRows[i].getAttribute('bwRoleId');
                                    //// debugger;
                                    //if (stepName && stepName.toLowerCase() == wtItems.d.results[ri].WorkflowStepName.toLowerCase()) {
                                    //if (stepName == 'Admin') {
                                    //    // debugger;
                                    //}
                                    if (stepName && (stepName.toLowerCase() == wtItems.d.results[ri].WorkflowStepName.toLowerCase()) && (roleId == wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation)) {
                                        var bwTaskStatus = '';
                                        var html2 = '';
                                        if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {

                                            //
                                            // Looking at wtItems.d.results[ri].bwTaskOutcome to see if it has "xx". If so, we will add "on behalf of xx" to that displayed so the user knows... 4-21-2022
                                            //
                                            var bwTaskOutcome = wtItems.d.results[ri].bwTaskOutcome;
                                            if (bwTaskOutcome.toLowerCase().indexOf('task completed by the system') > -1) {
                                                // debugger;
                                                bwTaskOutcome += ' On behalf of ' + wtItems.d.results[ri].bwAssignedToFriendlyName + ' [' + wtItems.d.results[ri].bwAssignedToEmail + '] [' + wtItems.d.results[ri].bwAssignedToId + '].';
                                            }
                                            bwTaskStatus = 'completed';
                                            html2 += '       <strike xcx="xcx123423525">';
                                            //html2 += '<span style="cursor:help;" xcx="xcx3423555">' + wtItems.d.results[ri].Modified + ' - ' + bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]</span>';

                                            // 10-4-2022
                                            var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[ri].Modified);
                                            html2 += '          <span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                                            html2 += '          <br />';




                                            html2 += '          <span xcx="xcx32566">';
                                            html2 += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + wtItems.d.results[ri].bwAssignedToId + '\', \'' + wtItems.d.results[ri].bwAssignedToFriendlyName + '\', \'' + wtItems.d.results[ri].bwAssignedToEmail + '\', \'undefined\');">' + wtItems.d.results[ri].bwAssignedToFriendlyName + '</span>';
                                            html2 += bwTaskOutcome;
                                            html2 += '</span>';

                                            html2 += ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]</span>';



















                                            html2 += '       </strike>';
                                            html2 += '<br />';
                                            html2 += '<button class="BwButton" onclick="$(\'.bwRequest\').bwRequest(\'revertACompletedTask\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\', \'' + wtItems.d.results[ri].bwWorkflowTaskItemId + '\', this);">Revert</button>';
                                        } else {
                                            bwTaskStatus = 'assigned';
                                            //var assignedToName = '';
                                            //for (var c = 0; c < UserFriendlyNames.length; c++) {
                                            //    if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) {
                                            //        assignedToName = UserFriendlyNames[c][1];
                                            //    }
                                            //}



                                            //html2 += formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to <span style="color:purple;font-weight:bold;" xcx="xcx3253677">' + assignedToName + '</span> [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]';

                                            // 10-4-2022
                                            var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[ri].Created);
                                            html2 += '       <span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                                            html2 += '       <br />';
                                            //html2 += '       <span xcx="xcx27-16">' + wtItems.d.results[ri].bwTaskTitle + ' assigned to <span style="color:purple;font-weight:bold;">' + assignedToName + '</span> [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]</span>';
                                            html2 += '       <span xcx="xcx27-16">';
                                            html2 += wtItems.d.results[ri].bwTaskTitle + ' assigned to ';
                                            html2 += '<span style="color:purple;font-weight:bold;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + wtItems.d.results[ri].bwAssignedToId + '\', \'' + wtItems.d.results[ri].bwAssignedToFriendlyName + '\', \'' + wtItems.d.results[ri].bwAssignedToEmail + '\', \'undefined\');">' + wtItems.d.results[ri].bwAssignedToFriendlyName + '</span>';
                                            html2 += ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]';
                                            html2 += '</span>';

                                            //bwAssignedToId: String,
                                            //bwAssignedToFriendlyName: String,
                                            //bwAssignedToEmail: String,


                                            // $('.bwAuthentication').bwAuthentication('displayParticipantRoleMultiPickerInACircle', true, '', '04274595-c264-4045-91aa-58eb1da15121', 'Tony Stark', 'tony@budgetworkflow.com', 'undefined');



                                        }
                                        html = '';
                                        //html += '<table class="workflowsteptask" bwTaskStatus="' + bwTaskStatus + '">';
                                        html += '<table>';
                                        html += '   <tr>';
                                        //html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                        html += '       <td title="' + $('.bwAuthentication').bwAuthentication('formatDateAndTimeFromBW', '\' + wtItems.d.results[ri].Modified + \'') + '">';
                                        html += html2;
                                        html += '       </td>';
                                        html += '   </tr>';
                                        html += '</table>';
                                        auditRows[i].innerHTML += html;
                                        //// debugger;
                                        auditRows[i].setAttribute('bwTaskStatus', bwTaskStatus);
                                    }
                                }
                            }






                            var steps = $('#' + requestDialogParentId).find('.stepname');
                            for (var x = 0; x < steps.length; x++) { // Check each step to decide which color code to give it.
                                var stepCompleted = false; // Change depending on the tasks.
                                var stepAssigned = false;
                                var stepError = false;
                                var stepName = steps[x].getAttribute('bwStepName');
                                //var bwStepFriendlyName = steps[i].getAttribute('bwStepFriendlyName');
                                for (var i = 0; i < auditRows.length; i++) {
                                    var taskStepName = auditRows[i].getAttribute('bwStepname');
                                    if (stepName == taskStepName) {
                                        bwTaskStatus = auditRows[i].getAttribute('bwTaskStatus');
                                        if (bwTaskStatus == 'completed') {
                                            stepCompleted = true;
                                        } else if (bwTaskStatus == 'assigned') {
                                            stepAssigned = true;
                                        } else {
                                            //stepError = true;
                                        }
                                    }
                                }
                                // Display the color indicators.
                                if (stepError == true) {
                                    // Tomato
                                    console.log('red');
                                    steps[x].style.color = 'red';
                                } else if (stepAssigned == true) {
                                    // orange
                                    console.log('tomato');
                                    steps[x].style.color = 'tomato';

                                    // debugger;
                                    console.log('xcx123123 stepAssigned == true, stepName: ' + stepName + ', bwTaskStatus: ' + bwTaskStatus);
                                    var warningSignId = requestDialogParentId + '_' + stepName + '_' + 'warningSign';
                                    document.getElementById(warningSignId).innerHTML = '⚠';

                                    // Expand this section, since it is the current step.
                                    var stepIndex = x;
                                    $('.bwRequest').bwRequest('expandOrCollapseWorkflowStep2', 'stepname_' + stepIndex, 'stepimage_' + stepIndex, 'steprow-' + stepName.toLowerCase() + '_' + stepIndex + '_0', requestDialogParentId); // This expands this rows, since it has audit trail information in it.

                                } else if (stepCompleted == true) {
                                    // green
                                    console.log('green');
                                    steps[x].style.color = 'green';
                                } else {
                                    // black
                                    //console.log('red');
                                    //steps[x].style.color = 'red';
                                }
                            }

                            html = '';
                            html += '<table bwRelatedItemId="' + wtItems.d.results[0].bwRelatedItemId + '">';
                            html += '   <tr>';

                            //html += '       <td style="font-family:Verdana,Geneva,Tahoma,sans-serif;font-size:10pt;" title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                            html += '       <td style="font-family:Verdana,Geneva,Tahoma,sans-serif;font-size:10pt;" title="' + $('.bwAuthentication').bwAuthentication('formatDateAndTimeFromBW', '\' + wtItems.d.results[0].Created + \'') + '">';

                            //var authorName = '';
                            //for (var c = 0; c < UserFriendlyNames.length; c++) {
                            //    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                            //}

                            // border:1px solid gainsboro;font-size:10pt;padding:10px 10px 10px 10px;


                            //html += '           <strike><span style="cursor:help;" xcx="xcx25-1">' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';

                            // 10-4-2022
                            var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[0].Created);
                            html += '       <strike xcx="xcx22343"><span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                            html += '       <br />';
                            html += '       Request submitted by ' + wtItems.d.results[0].bwAuthorFriendlyName + '</span></strike>';



                            html += '       </td>';
                            html += '   </tr>';
                            html += '</table>';
                            for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                html += '<table bwRelatedItemId="' + wtItems.d.results[0].bwRelatedItemId + '">';
                                html += '   <tr>';
                                html += '       <td style="font-family:Verdana,Geneva,Tahoma,sans-serif;font-size:10pt;" title="' + $('.bwAuthentication').bwAuthentication('formatDateAndTimeFromBW', '\' + wtItems.d.results[ri].Modified + \'') + '" >'; // 
                                if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                    //// debugger;




                                    //html += '       <strike>';
                                    ////html += '<span style="cursor:help;">xcx26' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x</span>';
                                    //html += '<span style="cursor:help;" xcx="xcx26">' + wtItems.d.results[ri].Modified + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]</span>';
                                    //html += '       </strike>';

                                    // 10-4-2022
                                    var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[ri].Modified);
                                    html += '       <strike xcx="xcx2134666"><span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                                    html += '       <br />';
                                    html += '       <span xcx="xcx26">';

                                    html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + wtItems.d.results[ri].bwAssignedToId + '\', \'' + wtItems.d.results[ri].bwAssignedToFriendlyName + '\', \'' + wtItems.d.results[ri].bwAssignedToEmail + '\', \'undefined\');">' + wtItems.d.results[ri].bwAssignedToFriendlyName + '</span>';
                                    html += wtItems.d.results[ri].bwTaskOutcome;
                                    html += '</span>';




                                    html += '[' + wtItems.d.results[ri].bwAssignedToRaciRoleName + '(' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]</span>';
                                    html += '       </strike>';



                                } else {
                                    //var assignedToName = '';
                                    //for (var c = 0; c < UserFriendlyNames.length; c++) {
                                    //    if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                    //}
                                    //html += '' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to <span style="color:purple;font-weight:bold;">' + assignedToName + '</span> [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]' + '';

                                    // 10-4-2022
                                    var timestamp4 = bwCommonScripts.getBudgetWorkflowStandardizedDate(wtItems.d.results[ri].Created);
                                    html += '<span style="font-weight:normal;color:darkgray;">' + timestamp4 + '</span>';
                                    html += '<br />';
                                    html += '<span xcx="xcx27-1">' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ';

                                    //
                                    // displayParticipantRoleMultiPickerInACircle();
                                    //
                                    //var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                                    //var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                                    //var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');










                                    // "WorkflowStepName": "NewStep-3ad17a72-d859-4c44-9feb-e786e08ac221", "bwStatus": "NewStep-3ad17a72-d859-4c44-9feb-e786e08ac221"
                                    //var workflow2 = JSON.parse(workflow);
                                    //displayAlertDialog('In populateWorkflowAuditTrailSummary(). xcx22132 workflow: ' + JSON.stringify(workflow));

                                    var workflowStepExists;
                                    for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                        if (wtItems.d.results[ri].WorkflowStepName == workflow.Steps.Step[i]["@Name"]) {
                                            workflowStepExists = true;
                                            break;
                                        }
                                    }




                                    html += '   <span xcx="xcx123555" style="color:purple;font-weight:bold;cursor:pointer;" ';
                                    html += '       onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + wtItems.d.results[ri].bwAssignedToId + '\', \'' + wtItems.d.results[ri].bwAssignedToFriendlyName + '\', \'' + wtItems.d.results[ri].bwAssignedToEmail + '\', \'\');" ';
                                    html += '   >';
                                    html += wtItems.d.results[ri].bwAssignedToFriendlyName;
                                    html += '   </span>';
                                    html += ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]';
                                    html += '</span>';
                                    if (!workflowStepExists) {
                                        html += '<span style="color:tomato;">MISSING WORKFLOW STEP "' + wtItems.d.results[ri].WorkflowStepName + '"</span>';
                                    }
                                    //
                                    //end: displayParticipantRoleMultiPickerInACircle();
                                    //

                                }
                                html += '       </td>';
                                html += '   </tr>';
                                html += '</table>';
                            }
                            //// debugger;
                            $('#' + requestDialogParentId + '_spanWorkflowAuditTrailSummary').html(html);

                            //html = '';
                            //html += '<table>';
                            //html += '   <tr>';
                            //html += '       <td>&nbsp;</td>';
                            //html += '   </tr>';
                            //html += '   <tr>';
                            //html += '       <td>';
                            ////html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                            //html += '           <a href="javascript:$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + bwBudgetRequestId + '\', \'' + participantId + '\', \'' + brTitle + '\');">Click here to view the Budget Request</a>';
                            //html += '       </td>';
                            //html += '   </tr>';
                            //html += '</table>';

                            //$('#spanArDialogViewBudgetRequestLink').html(html);

                            $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                            //        }
                            //    } catch (e) {
                            //        console.log('Exception in populateWorkflowAuditTrailSummary().GetUserDetails.done(): ' + e.message + ', ' + e.stack);
                            //        displayAlertDialog('Exception in populateWorkflowAuditTrailSummary().GetUserDetails.done(): ' + e.message + ', ' + e.stack);
                            //    }
                            //})
                            //    .fail(function (data) {
                            //        console.log('Error in bwRequest.populateWorkflowAuditTrailSummary().GetUserDetails.fail(). GetUserDetails.fail() ' + JSON.stringify(data));
                            //        displayAlertDialog('Error in bwRequest.populateWorkflowAuditTrailSummary().GetUserDetails.fail(). GetUserDetails.fail() ' + JSON.stringify(data));
                            //    });
                            //getUserDetails(userIds[uids], null, uids);
                            //}
                        }
                    } catch (e) {
                        console.log('Exception in populateWorkflowAuditTrailSummary():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in populateWorkflowAuditTrailSummary():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (error) {
                    console.log('Error in bwRequest.populateWorkflowAuditTrailSummary().1:' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.populateWorkflowAuditTrailSummary().1:' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            console.log('Exception in populateWorkflowAuditTrailSummary(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in populateWorkflowAuditTrailSummary(): ' + e.message + ', ' + e.stack);
        }
    },
    // end: Display workflow audit trail dialog, render, and populate.

    expandOrCollapseAllWorkflowSteps: function (requestDialogParentId) {
        try {
            console.log('In bwRequest.js.expandOrCollapseAllWorkflowSteps().'); // 9-30-2022

            var elements = document.getElementById(requestDialogParentId).getElementsByClassName('steprow');
            var display = elements[0].style.display;
            for (var i = 0; i < elements.length; i++) {
                if (display == 'none') {
                    elements[i].style.display = 'table-row';
                } else if (display == 'table-row') {
                    elements[i].style.display = 'none';
                } else {
                    console.log('In expandOrCollapseAllWorkflowSteps(). Unexpected value for display: ' + display);
                    displayAlertDialog('In expandOrCollapseAllWorkflowSteps(). Unexpected value for display: ' + display);
                }

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.expandOrCollapseAllWorkflowSteps(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.expandOrCollapseAllWorkflowSteps(): ' + e.message + ', ' + e.stack);
        }
    },
    // 
    // THIS IS THE NEW "View Workflow/Participants" functionality that is on a "New request" form. It displays the participants when the Org is selected!!! YEAH! :D
    //
    // start: Display dialog, render, and populate.
    displayNewRequestWorkflowParticipantsDialog: function (element) {
        try {
            // elementId is either 'divNewRequest' if it is a new request, or the dialog id if it is an existing request.
            //// debugger;
            console.log('In displayNewRequestWorkflowParticipantsDialog().'); // elementId: ' + elementId);

            //alert('In displayNewRequestWorkflowParticipantsDialog().'); // elementId: ' + elementId);

            // debugger;
            //var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
            //var bwRequestTypeId = $(element).closest('#budgetrequestform')[0].getAttribute('bwrequesttypeid');
            // 1-24-2022
            var bwBudgetRequestId;
            var bwRequestTypeId;
            var budgetrequestform = $(element).closest('#budgetrequestform')[0];
            //if (budgetrequestform) {
            bwBudgetRequestId = budgetrequestform.getAttribute('bwbudgetrequestid'); //$(element).closest('#budgetrequestform').getAttribute('bwbudgetrequestid');
            bwRequestTypeId = budgetrequestform.getAttribute('bwrequesttypeid'); //$(element).closest('#budgetrequestform').getAttribute('bwrequesttypeid');
            //} else {
            //    budgetrequestform = $(element).closest('#budgetrequestform');
            //    bwBudgetRequestId = budgetrequestform.getAttribute('bwbudgetrequestid'); //$(element).closest('#budgetrequestform').getAttribute('bwbudgetrequestid');
            //    bwRequestTypeId = budgetrequestform.getAttribute('bwrequesttypeid'); //$(element).closest('#budgetrequestform').getAttribute('bwrequesttypeid');
            //}







            //var bwBudgetRequestId = $('#' + elementId).find('#budgetrequestform')[0].getAttribute('bwbudgetrequestid'); //document.getElementById('budgetrequestform').getAttribute('bwbudgetrequestid');
            //var bwRequestType = $('#' + elementId).find('#budgetrequestform')[0].getAttribute('bwrequesttype'); // eg: bwRequestType: "capitalplanproject"

            this.pinRequestDialog();
            //alert('In displayRequestWorkflowAuditTrailDialog(). Copy the code from displayArInDialog(); here. This functionality will display the workflow/racistatus/audittrail view. It is incomplete. Coming soon!');
            var thiz = this;
            var requestDialogId = 'divNewRequestWorkflowParticipantsDialog_' + bwBudgetRequestId;

            if ($('#' + requestDialogId).is(':visible')) {
                $('#' + requestDialogId).dialog('close');
            }

            var html = '';
            //html += '<div style="display:none;" id="divRequestFormDialog">';
            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            //html += '                    <span id="divRequestWorkflowAuditTrailContent"></span>';
            html += '                    <span id="divRequestFormContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';
            //html += '    </div>';

            //
            // THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
            //
            var div = document.getElementById(requestDialogId); // 4-1-2020 12-28pm adt.
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = requestDialogId;
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;
            // Now that it is part of the DOM, we can display it!
            $('#' + requestDialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: '900px',
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                close: function () {
                    console.log('In xcx3sad4(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-x-4');
                },
                open: function () {
                    try {

                        var element2 = document.getElementById(requestDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var requestDialogParentId = requestDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element2.id = requestDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';



                        html += '<table xcx="xcx3249-6" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        //html += '           <div id="slider_' + requestDialogId + '" style="width:20%;cursor:pointer;">[' + 'slider_' + requestDialogId + ']</div>';
                        html += '           <div id="slider_' + requestDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;" onclick="$(\'#' + requestDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(requestDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                        html = '';
                        //// debugger;
                        //var form = $('#divNewRequest').find('#budgetrequestform'); // var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                        var bwOrgId = $(element).closest('#budgetrequestform')[0].getAttribute('bworgid'); // $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bworgid'); // document.getElementById('budgetrequestform').getAttribute('bworgid'); // selected OrgId on the new request form: txtLocationPickerFilter attribute bworgid
                        var bwOrgName = $(element).closest('#budgetrequestform')[0].getAttribute('bworgname'); // document.getElementById('budgetrequestform').getAttribute('bworgname'); // selected OrgId on the new request form: txtLocationPickerFilter attribute bworgid



                        html += '<div id="budgetrequestworkflowparticipantsdialog" class="context-menu-newrequesteditorxx" align="left" bwbudgetrequestid="" bwworkflowtaskitemid="" bwrequesttypeid="" orgid="" orgname="">';
                        html += '<table style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none;" class="xdFormLayout">';
                        html += '    <colgroup>';
                        html += '        <col style="" />';
                        html += '    </colgroup>';
                        html += '    <tbody>';
                        html += '        <tr class="xdTableContentRow">';
                        html += '            <td style="display:block;BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px" class="xdTableContentCell">';
                        html += '                <div />';
                        html += '                <table style="width:100%;">';
                        html += '                    <tr>';
                        html += '                        <td colspan="4">';
                        html += '                           <span id="' + requestDialogId + '_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">' + bwOrgName + '</span>';
                        html += '                       </td>';
                        html += '                    </tr>';
                        html += '                    <tr>';
                        html += '                        <td width="5px"></td>';
                        html += '                        <td>';
                        html += '                   <span>';
                        html += '<img id="' + requestDialogId + '_imgRequestOrgImage" src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:100px;height:100px;"/>';


                        // Try to get a custom image. If none found, use the OOB one.

                        //var imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png';



                        var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });

                        var imagePath2;

                        var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                        if (activeStateIdentifier.status != 'SUCCESS') {

                            imagePath2 = '[No image. Unauthorized. xcx213124-34556-34-234-3245-xx]';

                        } else {

                            imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier;

                        }









                        $.get(imagePath2).done(function () {
                            setTimeout(function () { // Only needs to happen for Chrome.
                                $('#' + requestDialogId + '_imgRequestOrgImage').attr('src', imagePath2);
                            }, 500);
                        }).fail(function () {
                            //alert("This org has no image."); // do nothing 
                        });
                        // End: Getting the custom image
                        html += '                   </span>';
                        html += '                        </td>';
                        html += '                        <td colspan="2" style="text-align:right;">';
                        html += '                           &nbsp;&nbsp;<span id="' + requestDialogParentId + '_BwRequestType" style="font-size:1em;">';
                        html += '                               [._BwRequestType]';
                        html += '                           </span>';
                        html += '                           <br />';
                        html += '                           <span id="' + requestDialogParentId + '_WorkflowGuid" style="color:gray;">[._WorkflowGuid]</span>';
                        //html += '                           <br />';
                        //html += '                           <span style="text-decoration:underline;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\');" >View Workflow/Participants</span>';
                        html += '                        </td>';
                        html += '                    </tr>';
                        html += '                </table>';











                        //html += '<br />';
                        //html += '<span id="' + requestDialogParentId + '_spanWorkflowOrgNameAndOrgIdForTesting2" style="color:gray"></span>';
                        //html += '<br />';
                        //html += '<span id="' + requestDialogParentId + '_spanWorkflowGuidAndRequestTypeForTesting2" style="color:gray"></span>';

                        html += '<span id="' + requestDialogParentId + '_Content"></span>';
                        document.getElementById(requestDialogId).innerHTML = html;

                        $("#slider_" + requestDialogId).slider({
                            min: 50,
                            max: 200,
                            value: 100, // It starts off full size.
                            slide: function (event, ui) {
                                thiz.setZoom(ui.value, requestDialogId);
                            }//,
                            //change: function (event, ui) {
                            //    thiz.setZoom(ui.value, requestDialogId);
                            //}
                        });
                        thiz.setZoom(100, requestDialogId);

                        $('.ui-widget-overlay').bind('click', function () {
                            $('#' + requestDialogId).dialog('close');
                        });
                        // debugger;
                        var promise = thiz.loadWorkflowsAndCurrentWorkflow2(bwRequestTypeId); // This is the default.
                        promise.then(function (result) {
                            try {
                                // debugger;
                                //var orgPathClickable = renderTheOrgBreadcrumb2(thiz.options.store.Global, locationId);
                                //document.getElementById(requestDialogId + '_requestOrgClickableBreadcrumb').innerHTML = orgPathClickable;



                                //thiz.renderNewRequestWorkflowParticipants(requestDialogParentId, bwRequestType, brTitle, title, bwBudgetRequestId, bwWorkflowId, bwOrgId);
                                //// debugger;
                                thiz.renderNewRequestWorkflowParticipants(requestDialogParentId, result.bwWorkflowId, bwBudgetRequestId, bwOrgId); // result.bwRequestType
                            } catch (e) {
                                console.log('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                                alert('Exception in bwWorkflowEditor._create().loadWorkflowsAndCurrentWorkflow(): ' + e.message + ', ' + e.stack);
                            }
                        });

                    } catch (e) {
                        console.log('Exception in displayNewRequestWorkflowParticipantsDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                        alert('Exception in displayNewRequestWorkflowParticipantsDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                }
            });


            alert('In bwRequest.js.displayNewRequestWorkflowParticipantsDialog(). Changing z-index here. Why?? Is it necessary? xcx123124-4.');

            try {
                $('.ui-widget-overlay')[0].style.zIndex = 9;
                $('#' + requestDialogId).dialog().parents('.ui-dialog')[0].style.zIndex = 10; // THIS IS A HACK ?? IS THIS THE BEST PLACE FOR THIS ?? >>>>>>>>>>>>>>>>>>>>>>>>>>>> 2-15-2020
            } catch (e) {

            }
        } catch (e) {
            console.log('Exception in displayNewRequestWorkflowParticipantsDialog(): ' + e.message + ', ' + e.stack);
            alert('Exception in displayNewRequestWorkflowParticipantsDialog(): ' + e.message + ', ' + e.stack);
        }
    },
    expandOrCollapseWorkflowStep: function (rowId, imageId, collapsibleRowId) { // collapsibleRowId = steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0'
        try {
            console.log('In expandOrCollapseWorkflowStep(' + rowId + ', ' + imageId + ', ' + collapsibleRowId + ').');

            //
            // Get the steprow_i class name. This is how we identify the underlying rows so that we can collapse or expand the whole step/section.
            var rowindex = imageId.split('stepimage_')[1];
            var stepSectionClass = 'steprow_' + rowindex;
            //// debugger;
            var img = document.getElementById(imageId);
            var urlClosed = this.options.operationUriPrefix + 'images/drawer-close.png'; //https://budgetworkflow.com/images/drawer-close.png
            var urlOpened = this.options.operationUriPrefix + 'images/drawer-open.png';
            var collapsibleRow = document.getElementById(collapsibleRowId);
            if (img.src == urlClosed) {
                img.src = urlOpened;
                //collapsibleRow.style.display = 'none';
                var elems = document.getElementsByClassName(stepSectionClass);
                for (var i = 0; i < elems.length; i++) {
                    elems[i].style.display = 'none';
                }
            } else {
                img.src = urlClosed;
                //collapsibleRow.style.display = 'table-row';
                var elems = document.getElementsByClassName(stepSectionClass);
                for (var i = 0; i < elems.length; i++) {
                    elems[i].style.display = 'table-row';
                }
            }


            // Since a workflow step has been either expanded or collapsed, we need to redraw the lines.
            //this.renderOrgRoleConnectorsToWorkflow(true); // lastSelectedDivisionGroupEntityLocationIndexes: null, // lastSelectedDivisionGroupEntityLocation { Division, Group, LegalEntity, Location }



        } catch (e) {
            console.log('Exception in expandOrCollapseWorkflowStep(): ' + e.message + ', ' + e.stack);
        }
    },

    renderNewRequestWorkflowParticipants: function (requestDialogParentId, bwWorkflowId, bwBudgetRequestId, bwOrgId) {
        // This was originally a copy of the bwWorkflowEditor.renderWorkflowEditor method! May be an opportunity to abstract/break out this in the future.
        try {
            console.log('In renderNewRequestWorkflowParticipants().');
            //alert('In renderNewRequestWorkflowParticipants().');
            var thiz = this;

            //var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            //var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId + '_Parent';
            var budgetrequestform;
            var budgetrequestforms = document.querySelectorAll('#budgetrequestform'); // 1-24-2022 changed from jQuery as jQuery wasn't returning all forms with this code: ('#budgetrequestform'); 
            for (var i = 0; i < budgetrequestforms.length; i++) {
                var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                if (bwBudgetRequestId == _budgetRequestId) {
                    // We found the form.
                    // debugger;
                    budgetrequestform = budgetrequestforms[i];
                    break;
                }
            }
            if (!budgetrequestform) {
                alert('In bwRequest.js.renderNewRequestWorkflowParticipants(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId);
            }


            // debugger;
            //var bwOrgId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bworgid');
            //var bwRequestTypeId = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwrequesttypeid');
            var bwRequestTypeId = budgetrequestform.getAttribute('bwrequesttypeid');
            var bwOrgId = budgetrequestform.getAttribute('bworgid');

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId,
                bwRequestTypeId: bwRequestTypeId,
                bwOrgId: bwOrgId
            };

            var operationUri = this.options.operationUriPrefix + 'odata/racirolesandparticipants';
            $.ajax({
                url: operationUri,
                type: 'POST',
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (results) {
                    try {

                        var rolesAndParticipants = results;

                        console.log('In renderWorkflowPeoplePicker():2:.');
                        if (rolesAndParticipants.length == 0) {

                            displayAlertDialog('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId);

                            //var instructions = '';
                            //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                            //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;

                        } else {
                            var workflowParent = rolesAndParticipants.Workflow; //.value[0];
                            //// debugger;
                            var workflow = JSON.parse(rolesAndParticipants.Workflow.bwWorkflowJson);

                            // Display the org name and id.
                            //var bwOrgName = document.getElementById('budgetrequestform').getAttribute('bworgname'); // selected OrgId on the new request form: txtLocationPickerFilter attribute bworgid
                            //document.getElementById(requestDialogParentId + '_spanWorkflowOrgNameAndOrgIdForTesting2').innerHTML = bwOrgName + ' (' + bwOrgId + ')';
                            // Display the bwWorkflowId guid and request type
                            document.getElementById(requestDialogParentId + '_BwRequestType').innerHTML = workflowParent.bwRequestTypeId;
                            document.getElementById(requestDialogParentId + '_WorkflowGuid').innerHTML = workflowParent.bwWorkflowId;

                            var html = '';
                            if (workflow == null) {
                                html += '<span style="font-size:24pt;color:red;">NO DATA</span>';
                            } else {
                                // Include jquery-ui stylesheet.
                                //html += '<link rel="stylesheet" href="css/jquery/1.11.1/themes/smoothness/jquery-ui.min.css?v=0">'; // removed 8-18-2022
                                // Inline styles.
                                html += '<style>';
                                html += '.titlecell {';
                                html += '    vertical-align:top;';
                                html += '    padding-top:3px;';
                                html += '    padding-bottom:3px;';
                                html += '    padding-left:5px;';
                                html += '    padding-right:10px;';
                                html += '    white-space:nowrap;';
                                html += '    color:grey;';
                                html += '    text-decoration:underline;';
                                html += '}';
                                html += '.steprowcell {';
                                html += '    vertical-align:top;';
                                html += '    padding-top:10px;';
                                html += '    padding-bottom:10px;';
                                html += '    padding-left:5px;';
                                html += '    padding-right:5px;';
                                html += '    white-space:nowrap;';
                                html += '}';
                                html += '.steprow-hidden {';
                                html += '    visibility: collapse;';
                                html += '}';

                                html += '.steprow:hover {';
                                html += '    background-color: lightgoldenrodyellow;';
                                html += '}';

                                html += '.stepheadercell:hover {';
                                html += '    background-color: gainsboro !important;'; // This is the step header row which expans and collapses.
                                html += '}';

                                html += '.activeEditRow {';
                                html += '    background-color: #EBF6F9;';
                                html += '}';
                                html += '.ui-progressbar {';
                                html += '    position: relative;';
                                html += '}';
                                html += '.progress-label {';
                                html += '    position: absolute;';
                                html += '    left: 10%;';
                                html += '    top: 4px;';
                                html += '    font-weight: bold;';
                                html += '    color: black;';
                                html += '    text-shadow: 1px 1px 0 #fff;';
                                html += '}';
                                html += '#progressbar .ui-progressbar-value {';
                                html += '    background-color: cyan;';
                                html += '}';
                                html += '.transparent-dialog {';
                                html += '  background: transparent;';
                                html += '  border: none;';
                                html += '}';
                                html += '.transparent-dialog .ui-widget-header {';
                                html += '  border: none;';
                                html += '  background: transparent;';
                                html += '}';
                                html += '.transparent-dialog .ui-widget-content {';
                                html += '  background: transparent;';
                                html += '}';
                                //
                                // This is the dialog draggable handle bar colored lightgoldenrodyellow.
                                //
                                //html += '.ui-dialog-title {';
                                //html += '    background-color: lightgoldenrodyellow;';
                                //html += '    border-color: orange;';
                                //html += '}';
                                //html += '.ui-draggable-handle {';
                                //html += '    background-color: lightgoldenrodyellow !important;';
                                //html += '    border-color: red !important;';
                                //html += '}';
                                html += '.ui-corner-all {';
                                html += '    border-color: #FFE1AC !important;'; // Navajo White outlining the dialog boxes! Yeah!!! :)
                                html += '}';

                                html += '</style>';


                                html += '<span style="cursor:pointer;" onclick="alert(\'This functionality is incomplete. Coming soon!\');">[+/-] xcx234266</span>';


                                html += '<table border="1" style="border-color:#d8d8d8;">';
                                //// debugger;
                                if (!workflow) {
                                    html += '<tr>';
                                    html += '  <td>';
                                    html += '    NO WORKFLOW JSON. CANNOT PROCEED. xcx32456-4';
                                    html += '  </td>';
                                    html += '</tr>';

                                } else {
                                    // Iterate through all of the steps.
                                    for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                        var stepName = workflow.Steps.Step[i]["@Name"];
                                        if (false) {
                                            // Do nothing, not displaying these steps. << DISPLAYING all steps now!
                                        } else {
                                            var newStepName = workflow.Steps.Step[i]["@FriendlyName"];

                                            var cellColor = '#f5f6f7';

                                            if (stepName != 'Create' && stepName != 'Revise' && stepName != 'Admin') {

                                                // Display the header row for this step.
                                                html += '<tr id="stepheaderrow_' + i + '" style="border:0px;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'expandOrCollapseWorkflowStep\', \'' + 'stepname_' + i + '\', \'' + 'stepimage_' + i + '\', \'steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0' + '\');">';
                                                html += '  <td colspan="11" class="stepheadercell" style="font-weight:bold;padding:10px;background-color:' + cellColor + ';" >';
                                                html += '    <table style="width:100%;">';
                                                html += '      <tr>';
                                                html += '        <td>';
                                                //html += '          <span style="white-space:nowrap;"><span id="stepname_' + i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' + newStepName + '</span>';
                                                html += '          <span style="white-space:nowrap;">';


                                                //html += '<span id="stepname_' +i + '" class="stepname" style="cursor:pointer;" title="Double-click to edit the step name...">' +newStepName + '</span>';
                                                // EXPAND COLLAPSE!!!!!!!!!!!!!!!! 1-26-2020
                                                html += '            <span id="stepname_' + i + '" class="stepname" style="cursor:pointer;vertical-align:middle;" >';
                                                html += '              <img id="stepimage_' + i + '" src="images/drawer-open.png" title="collapse" style="cursor:pointer;width:45px;height:45px;vertical-align:middle;"  />';
                                                html += '              &nbsp;' + newStepName;


                                                if (workflow.Steps.Step[i]["@Name"] == 'Collaboration') {
                                                    //// debugger;
                                                    var timeout = workflow.Steps.Step[i]["@Timeout"];
                                                    var timeoutUnits = workflow.Steps.Step[i]["@TimeoutUnits"]
                                                    html += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + timeout + '&nbsp' + timeoutUnits;
                                                }

                                                html += '            </span>';


                                                html += '          </span>';
                                                html += '        </td>';
                                                html += '        <td></td>';
                                                html += '        <td style="text-align:center;">';
                                                // Display the consensus timeout section and the "Configure Email", and "Add PArticipants" buttons.
                                                html += '           <table style="width:100%;">';
                                                html += '               <tr>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';
                                                html += '                   <td></td>';

                                                html += '                   <td></td>';

                                                html += '                   <td style="text-align:right;">';
                                                if (stepName.toLowerCase() == 'admin') {
                                                    // No "Add a participant" button for the ADMIN step/stage.
                                                } else {
                                                    //html += '&nbsp;&nbsp;&nbsp;&nbsp;';
                                                    //html += '          <input type="button" class="buttonAddNewAssignmentRow" style="white-space:nowrap;padding:5px 10px 5px 10px;" value="✚ Add a Participant" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'addNewRow\', \'' + 'steprow-inform_' + i + '_' + '0' + '\');" />';
                                                }
                                                html += '                   </td>';
                                                html += '               </tr>';
                                                html += '           </table>';
                                                html += '        </td>';
                                                html += '      </tr>';
                                                html += '    </table>';
                                                html += '  </td>';
                                                html += '</tr>';
                                                // End: Display the header row for this step.

                                                //if (stepName == 'Create' || stepName == 'Revise' || stepName == 'Admin') {

                                                //} else {
                                                // Display Inform roles.
                                                if (workflow.Steps.Step[i].Inform && workflow.Steps.Step[i].Inform.length) {
                                                    if (workflow.Steps.Step[i].Inform.length > 0) {
                                                        for (var j = 0; j < workflow.Steps.Step[i].Inform.length; j++) {
                                                            var xid = 'steprow-inform_' + i + '_' + j;
                                                            var additionalRowClass = '';
                                                            html += '<tr id="steprow-inform_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';
                                                            html += '  <td style="width:30px;"></td>';

                                                            if (thiz.options.displayRoleIdColumn) {
                                                                if (workflow.Steps.Step[i].Inform[j]) {
                                                                    if (workflow.Steps.Step[i].Inform[j]["@Role"]) {
                                                                        html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@Role"] + '</td>';
                                                                    } else {
                                                                        html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '">' + workflow.Steps.Step[i].Inform[j]["@IdField"] + '</td>';
                                                                    }
                                                                }
                                                            }

                                                            // Todd changed 10-13-19 7-32am ast
                                                            var roleName = '';
                                                            var roleId = '';
                                                            var roleCategory = '';
                                                            if (workflow.Steps.Step[i].Inform[j]) {
                                                                roleName = workflow.Steps.Step[i].Inform[j]["@RoleName"];
                                                                roleId = workflow.Steps.Step[i].Inform[j]["@Role"];
                                                                roleCategory = 'Inform';
                                                            }
                                                            //
                                                            // Now that we have the roleName, we need to travel up through the organizational structure to determine if this role is assigned already!
                                                            //
                                                            html += '<td xcx="xcx23536-3" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Inform[j]["@Role"] + '" bwOldValue="' + roleName + '">';
                                                            var roleAssigned = true;
                                                            if (roleAssigned) {
                                                                //html += '<span style="color:grey;font-size:12pt;font-style:italic;">';
                                                                html += '<span style="font-size:12pt;">';
                                                                html += roleName;

                                                                //html += '<br />';
                                                                //html += 'Nova Scotia 98765 Inc.';

                                                                html += '</span>';
                                                            } else {
                                                                html += '<span style="color:red;font-size:12pt;font-style:italic;">';
                                                                html += roleName;
                                                                html += '</span>';
                                                            }
                                                            html += '</td>';


                                                            var tooltip = 'RACI: ';
                                                            tooltip += '\n';
                                                            tooltip += 'R = Responsible (also Recommender)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'I = Informed (also Informee)  ';


                                                            html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + '</td>';






                                                            html += '  <td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                            //// debugger; // 1
                                                            //
                                                            // Display the role participants.
                                                            //
                                                            var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                            var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, and working upwards. This makes sure that we find the correct person who this request affects the most.
                                                            for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                if (rolesAndParticipants.RolesAndUsers[orgIndex].Roles && rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                }
                                                                if (foundRoleParticipant == true) break;
                                                            }

                                                            if (bwParticipantFriendlyName) {
                                                                //// debugger; // 1
                                                                html += '<span xcx="xcx234566-4" style="cursor:pointer;color:orange;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                html += bwParticipantFriendlyName;
                                                                html += ' (' + bwOrgName + ')';
                                                                html += '</span>';
                                                            }

                                                            //html += '[PEOPLE PICKER]  [...]';
                                                            //html += '&nbsp;&nbsp;';
                                                            //html += '    <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                            html += '  </td>';

                                                            html += '</tr>';
                                                        }
                                                    }
                                                }
                                                // Display Assign roles.
                                                if (workflow.Steps.Step[i].Assign) {
                                                    if (workflow.Steps.Step[i].Assign.length > 0) {
                                                        for (var j = 0; j < workflow.Steps.Step[i].Assign.length; j++) {
                                                            var xid = 'steprow-assign_' + i + '_' + j;
                                                            var additionalRowClass = '';
                                                            html += '<tr id="steprow-assign_' + i + '_' + j + '" class="steprow' + additionalRowClass + ' steprow_' + i + '" style="cursor:pointer;display:none;" >';

                                                            html += '  <td style="width:30px;"></td>';

                                                            if (thiz.options.displayRoleIdColumn) {
                                                                html += '<td style="background-color:' + cellColor + ';" class="roleid steprowcell" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '">' + workflow.Steps.Step[i].Assign[j]["@Role"] + '</td>';
                                                            }

                                                            // Todd changed 10-13-19 7-32am ast
                                                            var roleName = '';
                                                            var roleId = '';
                                                            var roleCategory = '';
                                                            if (workflow.Steps.Step[i].Assign[j]) {
                                                                roleName = workflow.Steps.Step[i].Assign[j]["@RoleName"];
                                                                roleId = workflow.Steps.Step[i].Assign[j]["@Role"];
                                                                roleCategory = workflow.Steps.Step[i].Assign[j]["@RoleCategory"];
                                                            }

                                                            html += '<td xcx="xcx23536-4" style="background-color:' + cellColor + ';" class="rolename steprowcell" onMouseOver="this.style.backgroundColor=\'lightgoldenrodyellow\';" onMouseOut="this.style.backgroundColor=\'' + cellColor + '\';" bwStepname="' + workflow.Steps.Step[i]["@Name"] + '" bwroleid="' + workflow.Steps.Step[i].Assign[j]["@Role"] + '" bwOldValue="' + roleName + '">';

                                                            html += roleName;
                                                            html += '<br />';
                                                            html += '</td>';

                                                            var tooltip = 'RACI: ';
                                                            tooltip += '\n';
                                                            tooltip += 'R = Responsible (also Recommender)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'A = Accountable (also Approver or final approving authority)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'C = Consulted (sometimes Consultant or counsel)  ';
                                                            tooltip += '\n';
                                                            tooltip += 'I = Informed (also Informee)  ';




                                                            var checklistHtml = '';
                                                            if (workflow.Steps.Step[i].Assign[j]["@Cond"]) {
                                                                var conditionString = workflow.Steps.Step[i].Assign[j]["@Cond"];
                                                                if (conditionString.indexOf('$ChecklistsRequired~') > -1) {
                                                                    // We know checklists(s) are required, but we only have the checklists GUIDs here... can we look them up so the user can see which checklists?
                                                                    checklistHtml = '<span style="cursor:pointer;" title="This role has checklist(s) to complete: ';
                                                                    var checklists = thiz.options.Checklists;
                                                                    for (var ci = 0; ci < checklists.length; ci++) {
                                                                        if (conditionString.indexOf(checklists[ci].bwChecklistTemplatesId) > -1) {
                                                                            // We have found a checklist that needs to be completed.
                                                                            checklistHtml += '\n';
                                                                            checklistHtml += JSON.parse(checklists[ci].ChecklistJson).Title; // This is the title of the checklist.
                                                                        }
                                                                    }
                                                                    checklistHtml += '">';
                                                                    checklistHtml += '&nbsp;xcx1✔&nbsp</span>';
                                                                    //// debugger;
                                                                }
                                                            }



                                                            html += '<td title="' + tooltip + '" style="color:grey;">' + roleCategory + checklistHtml + '</td>';



                                                            html += '<td class="steprowbuttons steprowcell" style="background-color:' + cellColor + ';width:80px;text-align:right;padding-right:15px;" >';
                                                            //// debugger; // 2
                                                            //
                                                            // Display the role participants.
                                                            //
                                                            var bwParticipantId = '', bwParticipantFriendlyName = '', bwParticipantEmail = '', bwOrgName = '';

                                                            var foundRoleParticipant = false; // The order that this happens is important. The json comes from the server in the order so that we use the first participant that holds the role, starting deep in the tree, nd working upwards. This makes sure that we find the correct person who this request affects the most.
                                                            for (var orgIndex = 0; orgIndex < rolesAndParticipants.RolesAndUsers.length; orgIndex++) {
                                                                if (rolesAndParticipants.RolesAndUsers[orgIndex].Roles && rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length) {
                                                                    for (var p = 0; p < rolesAndParticipants.RolesAndUsers[orgIndex].Roles.length; p++) {
                                                                        if (roleId == rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].RoleId) {
                                                                            bwParticipantId = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantId;
                                                                            bwParticipantFriendlyName = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantFriendlyName;
                                                                            bwParticipantEmail = rolesAndParticipants.RolesAndUsers[orgIndex].Roles[p].ParticipantEmail;
                                                                            bwOrgName = rolesAndParticipants.RolesAndUsers[orgIndex].OrgName;
                                                                            foundRoleParticipant = true;
                                                                            //// debugger;
                                                                        }
                                                                        if (foundRoleParticipant == true) break;
                                                                    }
                                                                }
                                                                if (foundRoleParticipant == true) break;
                                                            }

                                                            if (bwParticipantFriendlyName) {
                                                                //// debugger; // 2
                                                                html += '<span test="xcxtest2" style="cursor:pointer;color:purple;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + bwParticipantId + '\', \'' + bwParticipantFriendlyName + '\', \'' + bwParticipantEmail + '\');">';
                                                                html += bwParticipantFriendlyName;
                                                                html += ' (' + bwOrgName + ')';
                                                                html += '</span>';
                                                            }

                                                            //html += '[PEOPLE PICKER2]  [...]';
                                                            //html += '&nbsp;&nbsp;';
                                                            //html += '  <input style="padding:5px 10px 5px 10px;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'renderEditSteprow\', \'' + xid + '\');" type="button" value="⚙ Edit">';

                                                            html += '</td>';

                                                            html += '</tr>';
                                                        }
                                                    }
                                                }
                                                //}
                                                //html += '</tr>';
                                            }
                                        }
                                    }
                                }
                                html += '</table>';





                                //html += '<div style="display:none;" id="divCreateANewRoleDialog">';
                                //html += '  <table style="width:100%;">';
                                //html += '    <tr>';
                                //html += '      <td style="width:90%;">';
                                //html += '        <span id="spanCustomSignUpDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Create a new Role</span>';
                                //html += '      </td>';
                                //html += '      <td style="width:9%;"></td>';
                                //html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                //html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divCreateANewRoleDialog\').dialog(\'close\');">X</span>';
                                //html += '      </td>';
                                //html += '    </tr>';
                                //html += '  </table>';
                                //html += '  <br /><br />';
                                //html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                //html += '  <span id="spanCustomSignUpDialogInvitationDescriptionText" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;"></span><br />';
                                //html += '  <span style="font-family: calibri;">Role Abbreviation</span><br />';
                                //html += '  <input type="text" id="txtCreateANewRoleDialog_RoleId" style="WIDTH: 93%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 40pt;" /><br /><br />';
                                //html += '  <span style="font-family: calibri;">Role Name</span><br />';
                                //html += '  <input type="text" id="txtCreateANewRoleDialog_RoleName" style="WIDTH: 93%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 40pt;" /><br /><br />';
                                //html += '  <br />';

                                //html += '  <table style="width:100%;">';
                                //html += '     <tr>';
                                //html += '       <td style="text-align:center;">';
                                //html += '  <input type="button" value="Create your new role now!" style="height:30pt;" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'createANewRole\');" />';
                                //html += '       </td>';
                                //html += '     </tr>';
                                //html += '  </table>';
                                //html += '  <br /><br />';
                                //html += '</div>';

                                html += '<div style="display:none;" id="divOrgMultiPickerDialog">';
                                html += '  <table style="width:100%;">';
                                html += '    <tr>';
                                html += '      <td style="width:90%;">';
                                html += '        <span id="spanOrgMultiPickerDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Location(s)</span>';
                                html += '      </td>';
                                html += '      <td style="width:9%;"></td>';
                                html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divOrgMultiPickerDialog\').dialog(\'close\');">X</span>';
                                html += '      </td>';
                                html += '    </tr>';
                                html += '  </table>';
                                html += '  <br /><br />';
                                html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                html += '  <span id="spanOrgMultiPickerDialogContent" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;"></span><br />';
                                html += '  <br /><br />';
                                html += '  <input type="button" value="SAVE" onclick="$(\'.bwWorkflowEditor\').bwWorkflowEditor(\'orgMultiPickerDialog_RenderResults\');" />';
                                html += '  <br /><br />';
                                html += '</div>';


                                html += '<div style="display:none;" id="divMessageDialog">';
                                html += '  <table style="width:100%;">';
                                html += '    <tr>';
                                html += '      <td style="width:90%;">';
                                html += '        <span id="spanMessageDialogTitle" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">[spanMessageDialogTitle]</span>';
                                html += '      </td>';
                                html += '      <td style="width:9%;"></td>';
                                html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divMessageDialog\').dialog(\'close\');">X</span>';
                                html += '      </td>';
                                html += '    </tr>';
                                html += '  </table>';
                                html += '  <br /><br />';
                                html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                html += '  <span id="spanMessageDialogContentTop" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 20pt;">[spanMessageDialogContentTop]</span>';
                                html += '    <br />';
                                html += '    <br />';
                                html += '    <br />';
                                html += '    <span id="spanMessageDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                html += '      [spanMessageDialogContentBottom]';
                                html += '    </span>';
                                html += '  <br /><br />';
                                html += '</div>';




                                html += '<div style="display:none;" id="divWorkflowActionsUnderlyingPropertiesDialog">';
                                html += '  <table style="width:100%;">';
                                html += '    <tr>';
                                html += '      <td style="width:90%;">';
                                html += '        <span id="spanWorkflowActionsUnderlyingPropertiesDialog" style="color: #3f3f3f;font-size:30pt;font-weight:bold;">Action Properties</span>';
                                html += '                    <br />';
                                html += '                    <span id="spanWorkflowActionsUnderlyingPropertiesDialogSubTitle" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size:12pt;font-weight:normal;">[spanWorkflowActionsUnderlyingPropertiesDialogSubTitle]</span>';
                                html += '      </td>';
                                html += '      <td style="width:9%;"></td>';
                                html += '      <td style="width:1%;cursor:pointer;vertical-align:top;">';
                                html += '        <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:30pt;font-weight:bold;" onclick="$(\'#divWorkflowActionsUnderlyingPropertiesDialog\').dialog(\'close\');">X</span>';
                                html += '      </td>';
                                html += '    </tr>';
                                html += '  </table>';
                                html += '  <br /><br />';
                                html += '  <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
                                html += '  <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentTop">[spanWorkflowActionsUnderlyingPropertiesDialogContentTop]</span>';
                                html += '    <br />';
                                html += '    <br />';
                                html += '    <br />';
                                html += '    <span id="spanWorkflowActionsUnderlyingPropertiesDialogContentBottom" style="font-weight:bold;cursor:pointer;">';
                                //html += '      [spanEmailDataItemPickerDialogContentBottom]';
                                html += '    </span>';
                                html += '  <br /><br />';
                                html += '</div>';

                                html += '<div style="display:none;" id="divProgressBarDialog">';
                                html += '<div id="progressbar" class="ui-progressbar"><div class="progress-label">Loading...</div></div>';
                                html += '</div>';

                                //document.getElementById(tagName).innerHTML = html;

                            }

                            document.getElementById(requestDialogParentId + '_Content').innerHTML = html;


                            // set zoom
                            thiz.setZoom(80, requestDialogParentId.replace('_Parent', '')); //requestDialogId);
                            // Expand all of the steps.
                            for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                var stepName = workflow.Steps.Step[i]["@Name"];
                                if (stepName != 'Create' && stepName != 'Revise' && stepName != 'Admin') {
                                    // expandOrCollapseWorkflowStep
                                    thiz.expandOrCollapseWorkflowStep('stepname_' + i, 'stepimage_' + i, 'steprow-collaboration_' + i + '_0');
                                }
                            }
                            //thiz.populateWorkflowParticipantsSummary(brTitle, title, bwBudgetRequestId, requestDialogParentId);

                            // Redraw the lines!
                            //thiz.renderOrgRoleConnectorsToWorkflow(true, 'root');
                        }
                    } catch (e) {
                        //// debugger;
                        //lpSpinner.Hide();
                        console.log('Exception in renderNewRequestWorkflowParticipants().xx.Get: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in renderNewRequestWorkflowParticipants(): ' + e.message + ', ' + e.stack);
                    }

                },
                error: function (data, errorCode, errorMessage) {
                    HideActivitySpinner();
                    var msg = 'Error in bwRequest.js.renderNewRequestWorkflowParticipants.racirolesandparticipants.error(): ' + errorMessage + ', data: ' + JSON.stringify(data);
                    console.log(msg);
                    displayAlertDialog(msg);
                }
            });

        } catch (e) {
            console.log('Exception in bwRequest.js.renderNewRequestWorkflowParticipants: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in renderNewRequestWorkflowParticipants: ' + e.message + ', ' + e.stack);
        }
    },

    loadWorkflowsAndCurrentWorkflow2: function (bwRequestTypeId) { //selectedRequestType) { // This should be renamed to "loadAllWorkflowsForOrganization"
        try {
            console.log('In loadWorkflowsAndCurrentWorkflow2().');
            var thiz = this;
            return new Promise(function (resolve, reject) {
                try {
                    console.log('In loadWorkflowsAndCurrentWorkflow2().2.');
                    var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                    var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                    var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
                    var data = {
                        bwParticipantId_LoggedIn: participantId,
                        bwActiveStateIdentifier: activeStateIdentifier,
                        bwWorkflowAppId_LoggedIn: workflowAppId,

                        bwWorkflowAppId: workflowAppId,
                        bwRequestTypeId: 'ALL',
                        //bwRequestType: 'ALL',
                        isActive: true
                    };
                    $.ajax({
                        url: thiz.options.operationUriPrefix + "_bw/orgrolesconfiguration",
                        type: "POST",
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (orcResult) {
                            try {

                                $.ajax({
                                    url: thiz.options.operationUriPrefix + "_bw/workflowconfiguration", // "odata/WorkflowConfiguration2/" + tenantId + '/' + workflowAppId + '/' + 'all',
                                    type: "POST",
                                    data: data,
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (wc2Result) {



                                        //try {
                                        //    //alert('xcx21312454 checklists loaded!! orcResult.Checklists: ' + JSON.stringify(wc2Result.Checklists));
                                        //    thiz.options.Checklists = wc2Result.Checklists; // This web service call returns extra stuff. Optimize this int he future.
                                        //    //var selectedRequestType = 'budgetrequest'; // The default.
                                        //    thiz.options.Workflows = wc2Result.value; // Loads this so all workflows are available at any time without going back to the server.





                                        //    if (bwRequestTypeId) {
                                        //        // This means a request type has been specified. Therefore lets reload accordingly.

                                        //        for (var i = 0; i < thiz.options.Workflows.length; i++) {
                                        //            if ((thiz.options.Workflows[i].bwRequestTypeId == bwRequestTypeId) && thiz.options.Workflows[i].bwWorkflowActive == true) {
                                        //                //if ((thiz.options.Workflows[i].Workflow || thiz.options.Workflows[i].bwWorkflowJson)) {
                                        //                if (thiz.options.Workflows[i].bwWorkflowJson) {
                                        //                    // 1-5-2022
                                        //                    // debugger;
                                        //                    var bwWorkflowJson = thiz.options.Workflows[i].bwWorkflowJson;
                                        //                    thiz.options.CurrentWorkflow = {
                                        //                        bwRequestTypeId: bwRequestTypeId,
                                        //                        Workflow: JSON.parse(bwWorkflowJson),
                                        //                        DraftWorkflow: JSON.parse(bwWorkflowJson)
                                        //                    }


                                        //                    //thiz.options.CurrentWorkflow["Workflow"] = JSON.parse(thiz.options.Workflows[i].bwWorkflowJson);
                                        //                    //thiz.options.CurrentWorkflow["DraftWorkflow"] = JSON.parse(thiz.options.Workflows[i].bwWorkflowJson); // Creating "DraftWorkflow" so we can tell if the workflow has been changed or not, and then inform the user that changes need to be published.

                                        //                    //car = thiz.options.Workflows[i]; // 1-4-2022
                                        //                    //alert('Set CurrentWorkflow xcx111774-8');
                                        //                    console.log('Set CurrentWorkflow xcx111774-8-2');
                                        //                    break;
                                        //                } else {
                                        //                    console.log('');
                                        //                    console.log('INVALID VALUE FOR thiz.options.Workflows[i].bwWorkflowJson:xcx2: ' + thiz.options.Workflows[i].bwWorkflowJson);
                                        //                    console.log('');
                                        //                }
                                        //            }
                                        //        }




                                        //    }

                                        //    if (wc2Result.value.length > 1) {
                                        //        thiz.options.MultipleWorkflowsEnabled = true; // The user has at some point decided to have a workflow for each request type.
                                        //    } else {
                                        //        thiz.options.MultipleWorkflowsEnabled = false;
                                        //    }

                                        //    resolve();

                                        //} catch (e) {
                                        //    console.log('Exception in bwWorkflowEditor._create().xx.Get:1: ' + e.message + ', ' + e.stack);
                                        //    displayAlertDialog('Exception in bwWorkflowEditor._create().xx.Get:1: ' + e.message + ', ' + e.stack);
                                        //    resolve();
                                        //}

                                        try {
                                            //// debugger;
                                            thiz.options.CurrentWorkflow = null; // 1-7-2022

                                            //alert('>> xcx2131 assigning .options.Checklists: ' + JSON.stringify(orcResult.Checklists));
                                            thiz.options.Checklists = orcResult.Checklists; // This web service call returns extra stuff. Optimize this int he future.
                                            console.log('LOADING .options.Workflows!!!!!! xcx4478993 <<<<<<<<<<<<<<<<<<<<');
                                            thiz.options.Workflows = wc2Result.value; // Loads this so all workflows are available at any time without going back to the server.
                                            for (var i = 0; i < thiz.options.Workflows.length; i++) {
                                                if ((thiz.options.Workflows[i].bwRequestTypeId == bwRequestTypeId) && (thiz.options.Workflows[i].isActive == true)) {
                                                    thiz.options.CurrentWorkflow = thiz.options.Workflows[i];
                                                    console.log('In loadWorkflowsAndCurrentWorkflow2(). Setting thiz.option.CurrentWorkflow for bwRequestTypeId: ' + bwRequestTypeId + ' xcx111774-6');
                                                    //alert('In loadWorkflowsAndCurrentWorkflow2(). Setting thiz.option.CurrentWorkflow for bwRequestTypeId: ' + bwRequestTypeId + ' xcx111774-6');
                                                    break;
                                                }
                                            }



                                            // 1-7-2022
                                            if (!thiz.options.CurrentWorkflow) {
                                                // debugger;
                                                console.log('In loadWorkflowsAndCurrentWorkflow2().No workflow found for bwRequestTypeId: ' + bwRequestTypeId);
                                                displayAlertDialog('In loadWorkflowsAndCurrentWorkflow2().No workflow found for bwRequestTypeId: ' + bwRequestTypeId);

                                                // debugger;
                                                //try {
                                                //thiz.options.CurrentWorkflow.Workflow = JSON.parse(thiz.options.CurrentWorkflow.bwWorkflowJson);
                                                //thiz.options.CurrentWorkflow.DraftWorkflow = JSON.parse(thiz.options.CurrentWorkflow.bwWorkflowJson); // Creating "DraftWorkflow" so we can tell if the workflow has been changed or not, and then inform the user that changes need to be published.
                                                //} catch (e) {
                                                //}
                                                //if (result.value.length > 1) {
                                                //    thiz.options.MultipleWorkflowsEnabled = true; // The user has at some point decided to have a workflow for each request type.
                                                //} else {
                                                //    thiz.options.MultipleWorkflowsEnabled = false;
                                                //}
                                                //thiz.renderWorkflowEditor1(assignmentRowChanged_ElementId); // Render the Workflow Editor. 
                                                //}
                                                //// debugger;
                                                var results = {
                                                    bwRequestType: bwRequestTypeId, //thiz.options.CurrentWorkflow.bwRequestType,
                                                    bwWorkflowId: undefined //thiz.options.CurrentWorkflow.bwWorkflowId
                                                }
                                                resolve(results);

                                            } else {
                                                // debugger;
                                                console.log('');
                                                console.log('In loadWorkflowsAndCurrentWorkflow2().Workflow found for bwRequestTypeId: ' + bwRequestTypeId);
                                                //displayAlertDialog('In loadWorkflowsAndCurrentWorkflow2().Workflow found for bwRequestTypeId: ' + bwRequestTypeId);

                                                var results = {
                                                    bwRequestType: bwRequestTypeId, //thiz.options.CurrentWorkflow.bwRequestType,
                                                    bwWorkflowId: thiz.options.CurrentWorkflow.bwWorkflowId
                                                }
                                                resolve(results);

                                            }

                                            //if (thiz.options.CurrentWorkflow == null) {
                                            //    thiz.renderWorkflowEditor1();
                                            //} else {


                                        } catch (e) {
                                            console.log('Exception in loadWorkflowsAndCurrentWorkflow2.Get:1: ' + e.message + ', ' + e.stack);
                                            displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2.Get:1: ' + e.message + ', ' + e.stack);
                                            resolve();
                                        }
                                    },
                                    error: function (data) {
                                        console.log('In xx1.fail(): ' + JSON.stringify(data));
                                        var msg;
                                        if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                                            msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                                        } else {
                                            msg = JSON.stringify(data);
                                        }
                                        alert('Exception in bwWorkflowEditor._create().xx.Get:2-1: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                                        console.log('Exception in bwWorkflowEditor._create().xx.Get:2-1: ' + JSON.stringify(data));
                                        //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
                                        //var error = JSON.parse(data.responseText)["odata.error"];
                                        //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
                                        resolve();
                                    }
                                });
                            } catch (e) {
                                console.log('Exception in loadWorkflowsAndCurrentWorkflow2():2: ' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2():2: ' + e.message + ', ' + e.stack);
                            }
                        },
                        error: function (data) {
                            //lpSpinner.Hide();
                            // debugger;
                            console.log('In xx.fail(): ' + JSON.stringify(data));
                            var msg;
                            if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
                                msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
                            } else {
                                msg = JSON.stringify(data);
                            }
                            alert('Exception in bwWorkflowEditor._create().xx.Get:2-2: ' + msg); //+ error.message.value + ' ' + error.innererror.message);
                            console.log('Exception in bwWorkflowEditor._create().xx.Get:2-2: ' + JSON.stringify(data));
                            //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
                            //var error = JSON.parse(data.responseText)["odata.error"];
                            //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
                        }
                    });
                } catch (e) {
                    console.log('Exception in loadWorkflowsAndCurrentWorkflow2():2: ' + e.message + ', ' + e.stack);
                    displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2():2: ' + e.message + ', ' + e.stack);
                }
            });

        } catch (e) {
            console.log('Exception in loadWorkflowsAndCurrentWorkflow2(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2(): ' + e.message + ', ' + e.stack);
        }
    },

    revertACompletedTask2: function (bwBudgetRequestId, bwRequestTypeId, bwWorkflowTaskItemId, bwstepindex, changedRoleAssignments, element) {
        try {
            console.log('In revertACompletedTask2().');

            changedRoleAssignments = JSON.parse(decodeURIComponent(changedRoleAssignments));
            //displayAlertDialog('In revertACompletedTask2(). removedRoleAssignments: ' + JSON.stringify(changedRoleAssignments.removedRoleAssignments));

            //
            //
            // Pass "changedRoleAssignments" to a web service, which re-runs the "Revert code", then matches up to the passed "changedRoleAssignments". 
            // If it matches, the reversion is completed.... otherwise an error is thrown, like "Something must have changed since you requested to Revert the workflow. Please go through the process again.".
            //
            //

            //var results = {
            //    results: {
            //        changedRoleAssignments: {
            //            removedRoleAssignments: [
            //                {
            //                    bwWorkflowTaskItemId: completedTasksInSubsequentSteps[i].bwWorkflowTaskItemId,
            //                    ParticipantId: completedTasksInSubsequentSteps[i].bwAssignedToId,
            //                    ParticipantEmail: completedTasksInSubsequentSteps[i].bwAssignedToEmail,
            //                    ParticipantFriendlyName: completedTasksInSubsequentSteps[i].bwAssignedToFriendlyName,
            //                    RoleName: completedTasksInSubsequentSteps[i].bwAssignedToRaciRoleName,
            //                    RoleId: completedTasksInSubsequentSteps[i].bwAssignedToRaciRoleAbbreviation,
            //                    bwTaskTitle: completedTasksInSubsequentSteps[i].bwTaskTitle
            //                }
            //            ]
            //        }
            //    }
            //}

            var notification_roleId_Array = [];
            var notifyCheckboxes_checked = $('.bwRequest_RevertWorkflowStep_Confirmation_dialog_NotifyCheckbox:checkbox:checked');
            for (var i = 0; i < notifyCheckboxes_checked.length; i++) {
                var roleId = $(notifyCheckboxes_checked[i]).attr('roleid');
                notification_roleId_Array.push(roleId);
            }

            alert('xcx123234 notification_roleId_Array: ' + JSON.stringify(notification_roleId_Array));

            //// Iterate through all of the changedRoleAssignments and add a property: EmailNotification: true/false
            //for (var i = 0; i < changedRoleAssignments.removedRoleAssignments.length; i++) {
            //    if (notification_roleId_Array.indexOf(changedRoleAssignments.removedRoleAssignments[i].RoleId) > -1) {
            //        changedRoleAssignments.removedRoleAssignments[i]["EmailNotification"] = true;
            //    } else {
            //        changedRoleAssignments.removedRoleAssignments[i]["EmailNotification"] = false;
            //    }
            //}

            var emailContents = $('#bwRequest_RevertWorkflowStep_Confirmation_dialog_EmailContents').html();

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId,
                bwBudgetRequestId: bwBudgetRequestId,
                bwRequestTypeId: bwRequestTypeId,

                bwWorkflowTaskItemId: bwWorkflowTaskItemId,
                bwstepindex: bwstepindex,
                requestWorkflowTasks: JSON.stringify(this.options.requestWorkflowTasks),

                EmailContents: emailContents,
                NotificationRoleIdArray: JSON.stringify(notification_roleId_Array),
                ChangedRoleAssignments: JSON.stringify(changedRoleAssignments),

                ModifiedById: participantId,
                ModifiedByEmail: participantEmail,
                ModifiedByFriendlyName: participantFriendlyName
            }

            $.ajax({
                url: this.options.operationUriPrefix + '_bw/revertcompletedtasks',
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                error: function (data, errorCode, errorMessage) {

                    console.log('Error in bwRequest.js.displayRequestForm.revertcompletedtasks(): ' + errorCode + ' ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.displayRequestForm.revertcompletedtasks(): ' + errorCode + ' ' + errorMessage);

                },
                success: function (results) {
                    try {

                        if (results.status != 'SUCCESS') {

                            console.log(results.message);
                            displayAlertDialog(results.message);

                        } else {

                            displayAlertDialog(results.message);

                        }

                    } catch (e) {
                        console.log('Exception in revertACompletedTask2():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in revertACompletedTask2():2: ' + e.message + ', ' + e.stack);
                    }

                }
            });

        } catch (e) {
            console.log('Exception in revertACompletedTask2(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in revertACompletedTask2(): ' + e.message + ', ' + e.stack);
        }
    },
    revertACompletedTask: function (bwBudgetRequestId, bwRequestTypeId, bwWorkflowTaskItemId, element) {
        try {
            console.log('In revertACompletedTask(). bwBudgetRequestId: ' + bwBudgetRequestId + ', bwRequestTypeId: ' + bwRequestTypeId);
            // Working on this 7-9-2023.

            if (!element) {

                displayAlertDialog('Error in revertACompletedTask(). Could not locate the workflow details.');

            } else {

                var steprowaudittasktrail = $(element).closest('.steprowaudittasktrail'); // //$(this.element).closest('#budgetrequestform')[0].getAttribute('bwrequesttitle');
                var bwstepname = $(steprowaudittasktrail).attr('bwstepname');
                var bwstepindex = $(steprowaudittasktrail).attr('bwstepindex');
                var bwroleid = $(steprowaudittasktrail).attr('bwroleid');
                var bwtaskstatus = $(steprowaudittasktrail).attr('bwtaskstatus');

                if (!(bwstepname && !isNaN(bwstepindex) && bwroleid && bwtaskstatus)) {

                    displayAlertDialog('Error in revertACompletedTask(). Invalid value. This process cannot continue. bwstepname: ' + bwstepname + ', bwstepindex: ' + bwstepindex + ', bwroleid: ' + bwroleid + ', bwtaskstatus: ' + bwtaskstatus);

                } else {

                    // Step 1: Get a confirmation that all should roll back.

                    // Step 2: Get rid of the current tasks, then roll back to the previous step in the workflow.

                    // Do we notify the participants?


                    // Here are the task properties we are looking at:
                    // "TaskType":"BUDGET_REQUEST_WORKFLOW_TASK"
                    // "bwStatus":"Completed"
                    // "WorkflowStepName":"Admin"
                    // "bwAssignedToRaciRoleAbbreviation":"ADMIN"
                    // "bwAssignedToRaciRoleName":"ADMIN"
                    // "RoleCategory":"Approver"     "RoleCategory":"Collaborator"            "RoleCategory":"Inform"

                    // Step 1: Get the workflow.
                    var workflow;
                    for (var i = 0; i < this.options.Workflows.length; i++) {
                        if (bwRequestTypeId == this.options.Workflows[i].bwRequestTypeId) {
                            workflow = JSON.parse(this.options.Workflows[i].bwWorkflowJson);
                            break;
                        }
                    }

                    //alert('xcx12312312 workflow: ' + JSON.stringify(workflow));

                    // Step 2: Validate the bwstepindex and bwstepname values.
                    if (workflow.Steps.Step[bwstepindex]["@Name"] != bwstepname) {

                        alert('Error xcx213235425: Failed to validate bwstepindex and bwstepname values.');

                    } else {

                        // Step 3: Are there subsequent steps in the workflow?
                        var completedTasksInSubsequentSteps = [];
                        if ((workflow.Steps.Step.length - 1) > bwstepindex) {

                            // Yes, there are subsequent steps.

                            // Create an array which contains all of the 'Completed' tasks, and no 'Inform' tasks.
                            var Tasks = [];
                            for (var i = 0; i < this.options.requestWorkflowTasks.length; i++) {
                                if (bwBudgetRequestId == this.options.requestWorkflowTasks[i].bwBudgetRequestId) {
                                    for (var j = 0; j < this.options.requestWorkflowTasks[i].workflowTaskItems.length; j++) {
                                        //if ((this.options.requestWorkflowTasks[i].workflowTaskItems[j].RoleCategory != 'Inform') && (this.options.requestWorkflowTasks[i].workflowTaskItems[j].bwStatus == 'Completed')) { 
                                        //if (this.options.requestWorkflowTasks[i].workflowTaskItems[j].bwStatus == 'Completed') {
                                        Tasks.push(this.options.requestWorkflowTasks[i].workflowTaskItems[j]);
                                        //}
                                    }
                                }
                            }

                            // Step 4: Get the 'Completed' tasks which exist in the subsequent steps.
                            for (var i = (Number(bwstepindex) + 1); i < workflow.Steps.Step.length; i++) {

                                for (var j = 0; j < workflow.Steps.Step[i].Assign.length; j++) { // Iterate through all the 'Assign' array (Assignments/Tasks).

                                    for (var k = 0; k < Tasks.length; k++) {

                                        if (Tasks[k].WorkflowStepName == workflow.Steps.Step[i]["@Name"]) {
                                            // We found a 'Completed' task in this workflow step.
                                            completedTasksInSubsequentSteps.push(Tasks[k]);
                                        }

                                    }
                                }

                            }


                        } else {

                            // No, there are no subsequent steps.

                        }

                        if (completedTasksInSubsequentSteps.length == 0) {
                            alert('THERE ARE NO ADDITIONAL TASKS TO ROLLBACK.');
                        } else {
                            //alert('THERE ARE THIS MANY TASKS TO ROLLBACK: ' + completedTasksInSubsequentSteps.length);

                            //var results = {
                            //    results: {
                            //        changedRoleAssignments: {
                            //            removedRoleAssignments: [{
                            //                ParticipantFriendlyName: 'testparticipantxcx312123',
                            //                RoleName: 'testrolename',
                            //                RoleId: 'testroleid'
                            //            }]//,
                            //            //addedRoleAssignments: []
                            //        }
                            //    }
                            //}

                            var results = {
                                results: {
                                    changedRoleAssignments: {
                                        removedRoleAssignments: []
                                    }
                                }
                            }

                            for (var i = 0; i < completedTasksInSubsequentSteps.length; i++) {

                                var removedRoleAssignment = {
                                    bwWorkflowTaskItemId: completedTasksInSubsequentSteps[i].bwWorkflowTaskItemId,
                                    ParticipantId: completedTasksInSubsequentSteps[i].bwAssignedToId,
                                    ParticipantEmail: completedTasksInSubsequentSteps[i].bwAssignedToEmail,
                                    ParticipantFriendlyName: completedTasksInSubsequentSteps[i].bwAssignedToFriendlyName,
                                    RoleName: completedTasksInSubsequentSteps[i].bwAssignedToRaciRoleName,
                                    RoleId: completedTasksInSubsequentSteps[i].bwAssignedToRaciRoleAbbreviation,
                                    bwTaskTitle: completedTasksInSubsequentSteps[i].bwTaskTitle
                                }

                                results.results.changedRoleAssignments.removedRoleAssignments.push(removedRoleAssignment);

                            }

                        }

                        //
                        // When we get here, it means that there are changed role assignments due to the location change. We have to notify the user, and let them decide if they want to make these changes permanent.
                        //
                        var dialogId = 'bwRequest_RevertWorkflowStep_Confirmation_dialog';
                        var div = document.getElementById(dialogId);
                        if (!div) {
                            div = document.createElement('div');
                            div.id = dialogId;
                            document.body.appendChild(div); // to place at end of document
                        }

                        $('#' + dialogId).dialog({
                            modal: true,
                            resizable: true,
                            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                            width: '900px',
                            //dialogClass: "no-close", // No close button in the upper right corner.
                            hide: false, // This means when hiding just disappear with no effects.
                            position: {
                                my: "middle top+12",
                                at: "middle top",
                                of: window
                            },
                            close: function () {
                                console.log('In xcx1234647-2(). Dialog ' + dialogId + 'is being closed.');
                            },
                            open: function () {
                                try {


                                    //alert('xcx2134234124-2 bwRequest_RevertWorkflowStep_Confirmation_dialog'); // bwRequestTypeId: ' + bwRequestTypeId);


                                    var html = '';
                                    html += '<table style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                                    html += '   <tr>';
                                    html += '       <td style="width:95%;">';
                                    //html += '           <div id="slider_' + dialogId + '" style="width:20%;cursor:pointer;"></div>';
                                    html += '       </td>';
                                    html += '       <td>';
                                    html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'' + dialogId.replace('_Parent', '') + '\');">X</span>';
                                    html += '       </td>';
                                    html += '   </tr>';
                                    html += '</table>';

                                    div.parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                                    var html = '';

                                    html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                                    //html += 'The location has been changed from "' + results.results.originalOrgName + '" to "' + results.results.newOrgName + '".';
                                    html += 'These task(s) are being rolled-back.';
                                    html += '</span>';

                                    // Removed participants.
                                    html += '<br /><br />';
                                    html += 'These people will have to complete their tasks again.'; // no longer participate in the workflow: results.results.bwRequestTypeId: ' + results.results.bwRequestTypeId;
                                    html += '<ul>';
                                    for (var i = 0; i < results.results.changedRoleAssignments.removedRoleAssignments.length; i++) {
                                        html += '<li style="color:red;">';
                                        html += '<span style="color:black;">';
                                        html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantId + '\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantFriendlyName + '\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantEmail + '\', \'undefined\');">';
                                        html += results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantFriendlyName;
                                        html += '</span>';
                                        html += ' - ' + results.results.changedRoleAssignments.removedRoleAssignments[i].RoleName + ' (' + results.results.changedRoleAssignments.removedRoleAssignments[i].RoleId + ')</span>';
                                        html += '<span style="color:black;padding-left:50px;"><input class="bwRequest_RevertWorkflowStep_Confirmation_dialog_NotifyCheckbox" roleid="' + results.results.changedRoleAssignments.removedRoleAssignments[i].RoleId + '" type="checkbox" checked="checked" />&nbsp;Notify</span>';
                                        html += '<span style="color:black;padding-left:50px;font-style:italic;" title="bwWorkflowTaskItemId: ' + results.results.changedRoleAssignments.removedRoleAssignments[i].bwWorkflowTaskItemId + '">Task: "' + results.results.changedRoleAssignments.removedRoleAssignments[i].bwTaskTitle + '"</span>';
                                        html += '</li>';
                                    }
                                    html += '</ul>';

                                    html += '<br />';
                                    html += 'Include an email message:';
                                    html += '<br />';
                                    html += '<span id="bwRequest_RevertWorkflowStep_Confirmation_dialog_EmailContents" class="xdTextBoxRequired bwRequestJson" title="" contenteditable="true" style="WORD-WRAP: break-word; HEIGHT: 90px; WHITE-SPACE: normal; OVERFLOW-X: auto; OVERFLOW-Y: auto; WIDTH: 100%;BACKGROUND-COLOR: white;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 15pt;"></span>';

                                    html += '<br /><br />';
                                    html += '<hr />';
                                    //// Informed participants.
                                    //html += '<br />';
                                    //html += 'These people will be Informed:';
                                    //html += '<ul>';
                                    //html += 'xcx32477889';
                                    ////for (var i = 0; i < results.results.changedRoleAssignments.addedRoleAssignments.length; i++) {
                                    ////    html += '<li style="color:red;">';
                                    ////    html += '<span style="color:black;">';
                                    ////    html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwAuthentication\').bwAuthentication(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantId + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantEmail + '\', \'undefined\');">';
                                    ////    html += results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName;
                                    ////    html += '</span>';
                                    ////    html += ' - ' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleName + ' (' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleId + ')</span>';
                                    ////    html += '<span style="color:black;padding-left:50px;"><input id="xcx234256" type="checkbox" checked="checked" />&nbsp;Notify</span>';
                                    ////    html += '</li>';
                                    ////}
                                    //html += '</ul>';

                                    //// Added participants.
                                    //html += '<br />';
                                    //html += 'These people will be added:';
                                    //html += '<ul>';
                                    //html += 'xcx32477889';
                                    ////for (var i = 0; i < results.results.changedRoleAssignments.addedRoleAssignments.length; i++) {
                                    ////    html += '<li style="color:red;">';
                                    ////    html += '<span style="color:black;">';
                                    ////    html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwAuthentication\').bwAuthentication(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantId + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantEmail + '\', \'undefined\');">';
                                    ////    html += results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName;
                                    ////    html += '</span>';
                                    ////    html += ' - ' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleName + ' (' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleId + ')</span>';
                                    ////    html += '<span style="color:black;padding-left:50px;"><input id="xcx234256" type="checkbox" checked="checked" />&nbsp;Notify</span>';
                                    ////    html += '</li>';
                                    ////}
                                    //html += '</ul>';

                                    //html += '<br />';
                                    //html += 'These participants will be notified of the changes.';

                                    //html += 'These participants will be notified of the changes. You can also include a comment:<br />';
                                    //html += '<textarea></textarea>';

                                    html += '<br />';
                                    html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'revertACompletedTask2\', \'' + bwBudgetRequestId + '\', \'' + bwRequestTypeId + '\', \'' + bwWorkflowTaskItemId + '\', \'' + bwstepindex + '\', \'' + encodeURIComponent(JSON.stringify(results.results.changedRoleAssignments)) + '\', this);">';
                                    html += '   Update Workflow and Notify Selected Participants';
                                    html += '</div>';

                                    html += '<br />';
                                    html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'.bwEmailEditor_RevertedRequest\').bwEmailEditor_RevertedRequest(\'displayConfigureIntroductoryEmailDialog\', \'Create\');">';
                                    html += '   Configure "A task has been rolled-back" email';
                                    html += '</div>';

                                    // 

                                    //html += '<br /><br />';
                                    //html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'undoLocationChange\', \'' + bwBudgetRequestId + '\', \'' + results.results.originalOrgId + '\', \'' + results.results.originalOrgName + '\');">';
                                    //html += '   Undo Location Change';
                                    //html += '</div>';
                                    html += '<br /><br />';
                                    html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'#' + dialogId + '\').dialog(\'close\');">';
                                    html += '   Close';
                                    html += '</div>';
                                    html += '<br /><br />';

                                    html += '<div id="divBwEmailEditor_RevertedRequest">[divBwEmailEditor_RevertedRequest]</div>';

                                    div.innerHTML = html;

                                    $('#divBwEmailEditor_RevertedRequest').bwEmailEditor_RevertedRequest({});

                                } catch (e) {
                                    var msg = 'Exception in bwRequest.js.revertACompletedTask(): ' + e.message + ', ' + e.stack;
                                    console.log(msg);
                                    displayAlertDialog(msg);
                                }
                            }
                        });

                    }

                }

            }

        } catch (e) {
            console.log('Exception in revertACompletedTask(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in revertACompletedTask(): ' + e.message + ', ' + e.stack);
        }
    },
    pinRequestDialog: function () {
        try {
            console.log('In pinRequestDialog().');
            // This makes the dialog non-modal, so that it can be dragged around and the underlying functionality accessible. This removes the overlay that makes the dialog modal, and also removes the click event which would have originally closed the request dialog.
            // The idea is to be able to have multiple requests open at once!
            $('.ui-widget-overlay').unbind('click');
            $(".ui-widget-overlay").remove();

            console.log('In pinRequestDialog(). Scrolling window to top. This is experimental. Added a setTimeout to prevent race condition... 11-17-2022');
            //setTimeout(function () {
            $(window).scrollTop(0);
            //}, 1);


            //document.getElementById("divRequestFormDialog").id = "divRequestFormDialog_2";
            //// Now that we have renamed the dialog div, we need to put it back so it will be there the next time a user wants to view another request dialog.
            //var html = '';
            ////html += '<div style="display:none;" id="divRequestFormDialog">';
            //html += '        <table style="width:100%;">';
            //html += '            <tr>';
            //html += '                <td style="width:90%;">';
            //html += '                    <span id="divRequestFormDialogContent"></span>';
            //html += '                </td>';
            //html += '            </tr>';
            //html += '        </table>';
            //html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            //html += '        <br /><br />';
            ////html += '    </div>';


            ////
            //// THIS IS PART OF THE PIN FUNCTIONALITY 4-1-2020
            ////
            //var div = document.getElementById("divRequestFormDialog"); // 4-1-2020 12-28pm adt.
            //if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
            //    div = document.createElement('div');
            //    div.id = 'divRequestFormDialog';
            //    document.body.appendChild(div); // to place at end of document
            //}
            //var divDocument = div.contentDocument;
            //divDocument.body.innerHTML = html;


        } catch (e) {
            console.log('Exception in pinRequestDialog(): ' + e.message + ', ' + e.stack);

        }
    },
    shrinkRequestDialog: function (requestDialogId) {
        try {
            //// debugger;
            console.log('In shrinkRequestDialog(). requestDialogId: ' + requestDialogId);
            var element = document.getElementById(requestDialogId); //.parentNode; // This is the best way to get a handle on the jquery dialog.
            //element.id = requestDialogId + '_Parent'; // This is how we will refer to it subsequently! This works yeah!
            this.setZoom(0.5, element); // Resizes the dialog. It's amazing how well this works.p
            this.pinRequestDialog(); // Gets rid of the clickable greyed out background... Makes the dialog not-modal.
        } catch (e) {
            console.log('Exception in shrinkRequestDialog(): ' + e.message + ', ' + e.stack);
        }
    },
    growRequestDialog: function (requestDialogId) {
        try {
            console.log('In growRequestDialog(). requestDialogId: ' + requestDialogId);
            var element = document.getElementById(requestDialogId); //.parentNode; // This is the best way to get a handle on the jquery dialog.
            this.setZoom(1, element); // Resizes the dialog. It's amazing how well this works.
            this.pinRequestDialog(); // Gets rid of the clickable greyed out background... Makes the dialog not-modal.
        } catch (e) {
            console.log('Exception in growRequestDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    zoomAndCenter: function (elementId) {
        try {
            console.log('In bwRequest.js.zoomAndCenter(). elementId: ' + elementId);
            //alert('In bwRequest.js.zoomAndCenter(). elementId: ' + elementId); // divRequestFormDialog_13041396-f4ee-4b9d-a4e5-056d409c4b04

            var elementId2 = elementId + '_Parent'; // This just makes sure it is here! :)
            var el = document.getElementById(elementId2);

            var transform = JSON.stringify(el.style["transform"]);
            if (transform) {
                var tmp = transform.split('scale(')[1];
                try {
                    var scale = tmp.split(')')[0];
                } catch (e) {
                    console.log('xcx23124 bwRequest.js.zoomAndCenter() small issue here, it works but maybe improved?......');
                }
            } else {
                var scale = '2';
            }

            if (scale == '1') {

                this.setZoom('200', elementId);


                // 12-16-2023. xcx123123423514354. Ther eis another one.
                var width1 = window.innerWidth / 7;
                console.log('xcx888747 THIS IS THE POSITIONG OF THE REQUEST DIALOG. 7 seems to be the magic number. width1: ' + width1);
                //displayAlertDialog_Persistent('xcx888747 THIS IS THE POSITIONG OF THE REQUEST DIALOG. 7 seems to be the magic number. width1: ' + width1);
                position = {
                    my: "center top",
                    at: "center-" + width1 + " top",
                    of: window,
                    collision: "fit"
                }






                $('#' + elementId).dialog({
                    //position: { my: "center top", at: "center top", of: window }
                    //position: { my: "left top", at: "left top", of: window }
                    position: position
                });

                console.log('xcx453456 Calling bwJustificationDetailsField.js.ToggleExpandJustificationDetails(). scale=1');
                //$(document).find("[aria-describedby='" + elementId + "']").find('.bwJustificationDetailsField').bwJustificationDetailsField('ToggleExpandJustificationDetails'); // NO, THIS IS JUST A PAIN IN THE ARSE. 10-20-2023.

            } else if (scale == '2') {

                //this.setZoom('300', elementId); // commented out 11-18-2023. I dont think we need the fulscreen version...?
                //$('#' + elementId).dialog({
                //    position: { my: "left top", at: "left top", of: window }
                //});

                this.setZoom('100', elementId);

                $('#' + elementId).dialog({
                    //position: { my: "center top", at: "center top", of: window }
                    //position: { my: "right top", at: "right top", of: window }
                    position: position
                });

                console.log('xcx453456 Calling bwJustificationDetailsField.js.ToggleExpandJustificationDetails(). scale=2');
                //$(document).find("[aria-describedby='" + elementId + "']").find('.bwJustificationDetailsField').bwJustificationDetailsField('ToggleExpandJustificationDetails'); // NO, THIS IS JUST A PAIN IN THE ARSE. 10-20-2023.

            } else if (scale == '3') {

                this.setZoom('100', elementId);

                $('#' + elementId).dialog({
                    //position: { my: "center top", at: "center top", of: window }
                    //position: { my: "right top", at: "right top", of: window }
                    position: position
                });

                console.log('xcx453456 Calling bwJustificationDetailsField.js.ToggleExpandJustificationDetails(). scale=3');
                //$(document).find("[aria-describedby='" + elementId + "']").find('.bwJustificationDetailsField').bwJustificationDetailsField('ToggleExpandJustificationDetails'); // NO, THIS IS JUST A PAIN IN THE ARSE. 10-20-2023.

            } else {

                var msg = 'In bwRequest.js.zoomAndCenter(). Unexpected value for transform. Expected 1 or 2 or 3. transform: ' + transform + ', scale: ' + scale;
                console.log(msg);
                //displayAlertDialog(msg);

                this.setZoom('100', elementId);

                $('#' + elementId).dialog({
                    position: { my: "center top", at: "center top", of: window }
                });

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.zoomAndCenter(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.zoomAndCenter(): ' + e.message + ', ' + e.stack);
        }
    },

    zoomAndCenterPoppedOutWindow: function (elementId) {
        try {
            console.log('In bwRequest.js.zoomAndCenterPoppedOutWindow(). elementId: ' + elementId);

            var scale = this.options.lastPoppedOutZoom;
            if (scale == '1') {

                this.setZoom('200', elementId);
                this.options.lastPoppedOutZoom = 2;

            } else if (scale == '2') {

                this.setZoom('100', elementId);
                this.options.lastPoppedOutZoom = 1;

            } else {
                var msg = 'In bwRequest.js.zoomAndCenterPoppedOutWindow(). Unexpected value for transform. Expected 1 or 2. scale: ' + scale;
                console.log(msg);
                displayAlertDialog(msg);
            }

        } catch (e) {
            console.log('Exception in bwRequest.js.zoomAndCenterPoppedOutWindow(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.zoomAndCenterPoppedOutWindow(): ' + e.message + ', ' + e.stack);
        }
    },

    setZoom: function (originalZoom, elementId) {
        try {
            console.log('In bwRequest.js.setZoom(' + originalZoom + ', ' + elementId + ')');
            //alert('In bwRequest.js.setZoom(' + originalZoom + ', ' + elementId + ')');
            var thiz = this;

            if (window.opener) {
                // This is a popped-out request wndow... we need to handle zoom differently here.
                console.log('In bwRequest.js.setZoom(). This is a popped-out request wndow... we need to handle zoom differently here. originalZoom: ' + originalZoom + ', elementId: ' + elementId);
            }

            if (originalZoom > 20) { // Don't make any smaller than this!
                var zoom = originalZoom / 100;

                if (window.opener) {
                    // This is a popped-out request wndow... we need to handle zoom differently here.

                    console.log('In setZoom(). This is a popped-out request wndow... we need to handle zoom differently here. originalZoom: ' + originalZoom + ', elementId: ' + elementId);
                    var el = document.body; //.getElementById(elementId);

                    transformOrigin = [0, 0];

                    var p = ["webkit", "moz", "ms", "o"],
                        s = "scale(" + zoom + ")",
                        oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

                    for (var i = 0; i < p.length; i++) {
                        el.style[p[i] + "Transform"] = s;
                        el.style[p[i] + "TransformOrigin"] = oString;
                    }

                    el.style["transform"] = s;
                    el.style["transformOrigin"] = oString;



                    // weird fix, elementId coming in a variety of ways. 4-3-2023
                    var rectElement_Id = '';
                    if (elementId.indexOf('divRequestFormDialog_') > -1) {
                        rectElement_Id = elementId + '_Parent';
                    } else {
                        rectElement_Id = 'divRequestFormDialog_' + elementId + '_Parent';
                    }



                    // Now get the bounding rect, and resize the entire window...
                    //var rectElement = $('#budgetrequestform').find('.xdFormLayout')[0]; 
                    var rectElement = document.getElementById(rectElement_Id); // ('#' + rectElement_Id); // The request dialog.

                    console.log('xcx888 popped out window sizing happening here rectElement_Id: ' + rectElement_Id);
                    if (rectElement) {
                        var rect = rectElement.getBoundingClientRect();

                        var height_not_baselined = rect.bottom - rect.top;
                        var width_not_baselined = rect.right - rect.left + 40; // 20px for horizontal scroll bar.

                        var height = height_not_baselined * zoom;
                        var width = width_not_baselined * zoom;

                        console.log('xcx21312342 rectElement: ' + rectElement + '. weird fix for poppede out window, the window was getting too small and just disturbing ui/flash. 4-3-2023 xcx6665 width_not_baselined: ' + width_not_baselined + ', width: ' + width + ', zoom: ' + zoom);
                        //alert('height: ' + height);
                        if (height < 200) { // weird fix, the window was getting too small and just disturbing ui/flash. 4-3-2023 xcx6665
                            height = 1000;
                        }

                        window.resizeTo(width, height);

                        console.log('xcx21335 In setZoom(' + originalZoom + ', ' + elementId + '). window.resizeTo width: ' + width + ', height: ' + height);
                    }

                } else {
                    console.log('In setZoom(' + originalZoom + ', ' + elementId + ')');

                    elementId = elementId.replace('_Parent', '');
                    elementId += '_Parent'; // This just makes sure it is here! :)
                    var el = document.getElementById(elementId);

                    transformOrigin = [0, 0];

                    var p = ["webkit", "moz", "ms", "o"],
                        s = "scale(" + zoom + ")",
                        oString = (transformOrigin[0] * 100) + "% " + (transformOrigin[1] * 100) + "%";

                    for (var i = 0; i < p.length; i++) {
                        el.style[p[i] + "Transform"] = s;
                        el.style[p[i] + "TransformOrigin"] = oString;
                    }

                    el.style["transform"] = s;
                    el.style["transformOrigin"] = oString;


                    this.pinRequestDialog(); // Gets rid of the clickable greyed out background... Makes the dialog not-modal.
                }

                //elementId.draggable("option", "containment", "window");
                //$(".selector").draggable("option", "containment", "window");

                // New attempt to use the entire browser screen/window. 4-24-2020.
                //window.addEventListener("resize", function () {
                //    try {

                //var body = document.getElementsByTagName('body')[0];
                //var clientWidth = body.scrollWidth; //offsetWidth; //getBoundingClientRect().width +; //body.clientWidth; offsetHeight
                ////var clientHeight = Math.max(body.scrollHeight, document.documentElement.clientHeight, window.innerHeight || 0); //offsetHeight; //getBoundingClientRect().height; //body.clientHeight;
                //var clientHeight = Math.max(
                //    body.scrollHeight, document.documentElement.scrollHeight,
                //    body.offsetHeight, document.documentElement.offsetHeight,
                //    body.clientHeight, document.documentElement.clientHeight
                //);

                //    } catch (e) {
                //        //alert('Exception in xxxxx: ' + e.message + ', ' + e.stack);
                //    }
                //}, false);


            }
        } catch (e) {
            console.log('Exception in setZoom(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in setZoom(): ' + e.message + ', ' + e.stack);
        }
    },
    reassignOrphanedRequestToAnActiveWorkflow: function (bwBudgetRequestId) {
        try {
            console.log('In reassignOrphanedRequestToAnActiveWorkflow().');

            alert('This functionality is incomplete. Coming soon! In reassignOrphanedRequestToAnActiveWorkflow().');

        } catch (e) {
            console.log('Exception in reassignOrphanedRequestToAnActiveWorkflow(): ' + e.message + ', ' + e.stack);
        }
    },

    viewBwRequestJson: function () {
        try {
            console.log('In viewBwRequestJson().');
            var thiz = this;
            // Display a dialog box with a big textarea so that the contents can be copied and pasted.
            //alert('In viewBwRequestJson(). This functionality is incomplete. Coming soon!');

            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = '';
            document.getElementById('spanDisplayJsonDialogContent').innerHTML = '';
            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = '';

            $("#divDisplayJsonDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                //title: 'Alert',
                width: "760",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
                open: function (event, ui) {
                    $('.ui-widget-overlay').bind('click', function () {
                        $("#divDisplayJsonDialog").dialog('close');
                    });
                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                close: function () {
                    $('#divDisplayJsonDialog').dialog('destroy');
                }
            });
            //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            var json = this.options.store; //.Global;
            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON (bwRequestJson)'; // Title
            document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'Use this to diagnose any issues.'; //We trust the app to keep this JSON in sync with the BwWorkflowUserRole table.'; // Summary text
            //$('#txtDisplayJsonDialogJSON').empty();
            //$('#txtDisplayJsonDialogJSON').append(JSON.stringify(json, null, 2));
            var html = '';
            html += JSON.stringify(json, null, 2);
            //html += '<br /><br /><span style="font-weight:bold;">DONE</span><br />';
            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

            // "Run Diagnostics" button.
            $('#btnRunDiagnostics').off('click').click(function (error) {
                //thiz.runJsonDiagnostics();
                alert('This functionality is incomplete. Coming soon!');
            });

        } catch (e) {
            console.log('Exception in viewBwRequestJson(): ' + e.message + ', ' + e.stack);
        }
    },

    viewWorkflowStepAndRoleJson: function (workflowStep) {
        try {
            console.log('In viewWorkflowStepAndRoleJson().');
            //displayAlertDialog('In viewWorkflowStepAndRoleJson(). workflowStep: ' + JSON.stringify(workflowStep));

            // debugger;
            var thiz = this;
            // Display a dialog box with a big textarea so that the contents can be copied and pasted.
            //alert('This functionality is incomplete. Coming soon! This will display the section of the workflow that defines this step/role/actions etc.');

            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = '';
            document.getElementById('spanDisplayJsonDialogContent').innerHTML = '';
            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = '';

            $("#divDisplayJsonDialog").dialog({
                modal: true,
                resizable: false,
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                width: "760",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                open: function (event, ui) {
                    $('.ui-widget-overlay').bind('click', function () { $("#divDisplayJsonDialog").dialog('close'); });
                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                close: function () {
                    $('#divDisplayJsonDialog').dialog('destroy');
                }
            });
            //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            var json = workflowStep; //this.options.store; // CHANGE THIS!             We need to get the workflow here.                 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Workflow Step/Role JSON'; // Title
            document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'Use this to diagnose any issues.'; // 
            var html = '';
            html += JSON.stringify(json, null, 2);
            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

            // "Run Diagnostics" button.
            $('#btnRunDiagnostics').off('click').click(function (error) {
                //thiz.runJsonDiagnostics();
                alert('This functionality is incomplete. Coming soon!');
            });

        } catch (e) {
            console.log('Exception in viewWorkflowStepAndRoleJson(): ' + e.message + ', ' + e.stack);
        }
    },

    requestWindow_OnResize: function () {
        try {
            console.log('In requestWindow_OnResize(). No code here at the moment...');
            //alert('In requestWindow_OnResize().');
            //location.reload();
            //const heightOutput = document.querySelector('#height');
            //const widthOutput = document.querySelector('#width');

            //var leftSection = document.getElementById('tableLeftTopRequestFormSection');
            //var rightSection = document.getElementById('tableRightBottomRequestFormSection');

            //var leftRect = leftSection.getBoundingClientRect();
            //var rightRect = rightSection.getBoundingClientRect();

            //var requiredDisplayWidth = leftRect.right + rightRect.width;

            //console.log('leftRect: ' + leftRect.right + ', rightRect: ' + rightRect.width + ', requiredDisplayWidth: ' + requiredDisplayWidth);

            //if (window.innerWidth > requiredDisplayWidth) {
            //    console.log('window > ' + requiredDisplayWidth);
            //    leftSection.style.display = 'block';
            //    rightSection.style.display = 'block';
            //} else {
            //    console.log('window < ' + requiredDisplayWidth);
            //    leftSection.style.display = 'inline-block';
            //    rightSection.style.display = 'inline-block';
            //}

            //heightOutput.textContent = window.innerHeight;
            //widthOutput.textContent = window.innerWidth;
        } catch (e) {
            console.log('Exception in requestWindow_OnResize(): ' + e.message + ', ' + e.stack);
        }
    },

    editTextbox_OnKeyUp: function (element) {
        try {
            console.log('In editTextbox_OnKeyUp(). element.id: ' + element.id);
            var bwFieldname = element.getAttribute('bwFieldname');
            var contents = element.value;
            this.options.store[bwFieldname] = contents;
        } catch (e) {
            console.log('Exception in editTextbox_OnKeyUp(): ' + e.message + ', ' + e.stack);
        }
    },
    selectFiscalYear_OnChange: function (element) {
        try {
            console.log('In selectFiscalYear_OnChange(). element.id: ' + element.id);
            var bwFieldname = element.getAttribute('bwFieldname');
            var contents = element.value;
            this.options.store[bwFieldname] = contents;
            // When the year changes, this list may as well.
            this.populateFunctionalAreas();
        } catch (e) {
            console.log('Exception in selectFiscalYear_OnChange(): ' + e.message + ', ' + e.stack);
        }
    },
    ddlFunctionalArea_OnChange: function (element) {
        try {
            console.log('In ddlFunctionalArea_OnChange(). element.id: ' + element.id);
            var bwFieldname = element.getAttribute('bwFieldname');
            var contents = element.value.split('|')[0]; // We are putting true/false after the | delimeter... can't remember why...
            this.options.store[bwFieldname] = contents;
        } catch (e) {
            console.log('Exception in ddlFunctionalArea_OnChange(): ' + e.message + ', ' + e.stack);
        }
    },
    dropDownList_OnChange: function (element) {
        try {
            console.log('In ddlFunctionalArea_OnChange(). element.id: ' + element.id);
            var bwFieldname = element.getAttribute('bwFieldname');
            var contents = element.value;
            this.options.store[bwFieldname] = contents;
        } catch (e) {
            console.log('Exception in ddlFunctionalArea_OnChange(): ' + e.message + ', ' + e.stack);
        }
    },


    createRequestJson: function () {
        try {
            console.log('In bwRequest.js.createRequestJson(). This loads this.options.store with an empty bwRequest json object. Is this necessary?');
            //alert('In bwRequest.js.createRequestJson().');

            var bwRequest = {
                BudgetRequestId: null,
                //BudgetRequestType: null,
                ARStatus: null,
                XmlDocument: null,
                Title: null,
                ProjectTitle: null,

                Project_Name: null,
                BriefDescriptionOfProject: null,
                Budget_Amount2: null,

                RequestedCapital: null,

                Requested_Expense: null,
                FunctionalAreaId: null,
                Functional_Area: null,
                EstimatedStartDate: null,
                EstimatedEndDate: null,
                Location: null,
                Cost_Center: null,
                Budget_Category: null,
                AttachmentsFolderName: null,
                FiscalYear: null,
                ProjectManager: {
                    Person: {
                        AccountId: null,
                        FriendlyName: null,
                        Email: null,
                        AccountType: null
                    }
                }
            }

            this.options.store = bwRequest;

        } catch (e) {
            console.log('Exception in bwRequest.js.createRequestJson(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.createRequestJson(): ' + e.message + ', ' + e.stack);
        }
    },



    displayChecklistInDialog: function (bwChecklistTemplatesId, brTitle, title, bwRequestType, bwBudgetRequestId, bwWorkflowId, bwOrgId) {
        try {
            console.log('In displayChecklistInDialog().');
            var thiz = this;
            window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.
            $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

            var checklistDialogId = 'divChecklistFormDialog_' + bwBudgetRequestId + '_' + bwChecklistTemplatesId;

            var html = '';

            //html += '<div style="display:none;" id="divRequestFormDialog">';
            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            //html += '                    <span id="divRequestWorkflowAuditTrailContent"></span>';
            html += '                    <span id="divChecklistFormDialogContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';
            //html += '    </div>';

            var div = document.getElementById(checklistDialogId); // 4-1-2020 12-28pm adt.
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = checklistDialogId;
                div.style.display = 'none';
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            // Now that it is part of the DOM, we can display it!
            $('#' + checklistDialogId).dialog({
                modal: true,
                resizable: true,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: "800px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                open: function (event, ui) {
                    try {

                        var element = document.getElementById(checklistDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var checklistDialogParentId = checklistDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = checklistDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';
                        html += '<table xcx="xcx3249-7" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + checklistDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';

                        html += '           <span title="print" class="printButton" dev="xcx32424-3" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + checklistDialogId + '\');">';
                        html += '               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;" />';
                        html += '           </span>';

                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;" onclick="$(\'#' + checklistDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(checklistDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;
                        //
                        // Now that the header bar is rendered, we have to render the contents of the dialog.
                        //
                        console.log('In bwRequest.js.displayChecklistInDialog(). xcx3 budgetrequestform bwRequestType: ' + bwRequestType);

                        html = '';

                        html += '<div id="budgetrequestchecklistform" bwWorkflowId="' + bwWorkflowId + '" bwrequesttype="' + bwRequestType + '" bwbudgetrequestid="' + bwBudgetRequestId + '">';

                        html += '<table style="width:100%;">';
                        html += '        <tbody>';
                        html += '            <tr>';
                        html += '                <td colspan="4">';
                        //html += '                    <span id="divPageContent1_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">';
                        //html += breadcrumbHtml;
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'root\');">Stark Enterprises</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\');">Canadian Division</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\');">Corporate</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\', \'0\');">Nova Scotia 54323 Inc.</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\', \'0\', \'0\');">Kentville</span>';
                        //html += '                    </span>';

                        html += '                </td>';
                        html += '            </tr>';
                        html += '            <tr>';
                        html += '                <td width="5"></td>';
                        html += '                <td>';
                        html += '                    <span>';
                        html += '                       <img id="' + checklistDialogId + '_imgRequestOrgImage" src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:100px;height:100px;"/>';
                        html += '                    </span>';
                        html += '                </td>';
                        html += '                <td style="text-align:right;" colspan="2">';
                        html += '                    &nbsp;&nbsp;<span class="xdlabel" id="spanRequestForm_Title">';
                        html += '                        <span xcx="xcx992234" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;">';
                        html += '                            Budget Request: ';
                        html += '                            <span title="" id="spanRequestFormBudgetRequestTitle">' + title + '                       </span>';
                        html += '                           <br />';
                        html += '                           <span style="font-size:16pt;">Description: ' + brTitle + '</span>';
                        //html += '                           <br />';
                        //html += '                           <span style="color:gray;font-size:12pt;">' + bwWorkflowId + ' (' + bwRequestType + ')</span>';
                        //html += '                           <br />';
                        //html += '                            <span class="spanButton2 context-menu-newrequesteditor" id="spanNewRequestEllipsesButton" style="height:20px;width:150px;"> ... </span>';
                        html += '                        </span>';
                        html += '                    </span>';
                        //html += '                    <br>';
                        //html += '                    <span id="spanViewWorkflowParticipantsLink" style="text-decoration:underline;cursor:pointer;font-size:10pt;color:gray;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\', this);">View Workflow/Participants</span>                           <br>                           <span id="spanRequestForm_WorkflowAndRoleDetails"><span style="color:gray;">[22250aee-8911-40f6-96b0-f3f13da4e00a (budgetrequest)]</span><br><span id="bwStepIndex" style="display:none;">4</span><span title="View RACI workflow history..." style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'BR-200001\', \'Test\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Workflow step: VP Approvals</span>&nbsp;<br><span title="RACI: &#10;R = Responsible (also Recommender)  &#10;A = Accountable (also Approver or final approving authority)  &#10;C = Consulted (sometimes Consultant or counsel)  &#10;I = Informed (also Informee)  " style="cursor:help;">Your RACI role: </span><select id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);"><option value="CIO" selected="">CIO</option><option value="ADMIN">ADMIN</option><option value="AVP">AVP</option><option value="VP">VP</option></select><br></span>                           <span id="spanRequestForm_Checklists">Pending checklists: &nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'becef88f-f43c-4e82-9ff8-0fd4d16b9555\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Cat Overnight Stay</span></span><br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'f830e44a-d29f-4261-80c6-756236355e96\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Dog Overnight Stay</span></span><br><img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">&nbsp;Complete the following checklists before you Approve: <br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'becef88f-f43c-4e82-9ff8-0fd4d16b9555\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Cat Overnight Stay</span></span><br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'f830e44a-d29f-4261-80c6-756236355e96\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Dog Overnight Stay</span></span><br></span>';
                        html += '                </td>';
                        html += '            </tr>';
                        html += '        </tbody>';
                        html += '    </table>';

                        //html += '<span style="font-size:16pt;">Budget Request: ' + title + '</span>';
                        //html += '<br />';
                        //html += '<span style="font-size:16pt;">Description: ' + brTitle + '</span>';
                        //html += '<br />';
                        //html += '<span style="color:gray">' + bwWorkflowId + ' (' + bwRequestType + ')</span>';
                        //html += '<br />';
                        html += ''
                        html += thiz.renderChecklist(bwChecklistTemplatesId); // This is where the checklist gets rendered.
                        html += '</div';

                        html += '<br />';
                        html += '<div id="' + checklistDialogId + '_divChecklistFormDialogSaveButton' + '" class="divSignInButton" style="width:90%;text-align:center;line-height:1.1em;font-weight:bold;">';
                        html += 'Save Completed Checklist';
                        html += '</div>';

                        html += '<br />';
                        html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:1.1em;font-weight:bold;" onclick="$(\'#' + checklistDialogId.replace('_Parent', '') + '\').dialog(\'close\');">';
                        html += '    Close';
                        html += '</div>';
                        html += '<br /><br />';

                        document.getElementById(checklistDialogId).innerHTML = html;

                        // Try to get a custom image. If none found, use the OOB one.
                        //var imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png';

                        var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });

                        var imagePath2;

                        var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                        if (activeStateIdentifier.status != 'SUCCESS') {

                            imagePath2 = '[No image. Unauthorized. xcx213124-34556-34-234-3245-xx]';

                        } else {

                            imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier;

                        }





                        $.get(imagePath2).done(function () {
                            setTimeout(function () { // Only needs to happen for Chrome.
                                $('#' + checklistDialogId + '_imgRequestOrgImage').attr('src', imagePath2);
                            }, 500);
                        }).fail(function () {
                            //alert("This org has no image."); // do nothing 
                        });
                        // End: Getting the custom image

                        $("#slider_" + checklistDialogId).slider({
                            min: 0,
                            max: 100,
                            value: 100, // It starts off full size.
                            slide: function (event, ui) {
                                thiz.setZoom(ui.value, checklistDialogId);
                            }//,
                            //change: function (event, ui) {
                            //    thiz.setZoom(ui.value, requestDialogId);
                            //}
                        });

                        $('.ui-widget-overlay').bind('click', function () {
                            $('#' + checklistDialogId).dialog('close');
                        });

                        // Hook up the "Save" button.
                        $('#' + checklistDialogId + '_divChecklistFormDialogSaveButton').bind('click', function () {

                            //alert('xcx123123123-1 saveChecklist');
                            $('.bwRequest').bwRequest('saveChecklist', bwChecklistTemplatesId, checklistDialogId);
                        });

                    } catch (e) {
                        console.log('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                    }

                },
                close: function () {
                    //$('#' + checklistDialogId).dialog('destroy');
                }
            });
            // Hide the title bar.
            //$("#divChecklistFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        } catch (e) {
            console.log('Exception in displayChecklistInDialog(): ' + e.message + ', ' + e.stack);
            alert('Exception in displayChecklistInDialog(): ' + e.message + ', ' + e.stack);
        }
    },
    displayChecklistInDialogReadOnly: function (bwChecklistTemplatesId, brTitle, title, bwRequestType, bwBudgetRequestId, bwWorkflowId, bwOrgId) {
        try {
            console.log('In displayChecklistInDialogReadOnly().');
            var thiz = this;
            window.scrollTo(0, 0); // Scroll to top on button click. This makes sure things render Ok, and also just seems like a nicer user experience.
            $('.bwActiveMenu').bwActiveMenu('adjustLeftSideMenu'); // This makes sure our new stretchy-left-menu redraws Ok.

            var checklistDialogId = 'divChecklistFormDialog_' + bwBudgetRequestId + '_' + bwChecklistTemplatesId;

            var html = '';

            //html += '<div style="display:none;" id="divRequestFormDialog">';
            html += '        <table style="width:100%;">';
            html += '            <tr>';
            html += '                <td style="width:90%;">';
            //html += '                    <span id="divRequestWorkflowAuditTrailContent"></span>';
            html += '                    <span id="divChecklistFormDialogContent"></span>';
            html += '                </td>';
            html += '            </tr>';
            html += '        </table>';
            html += '        <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and zooming in on the iPhone. -->';
            html += '        <br /><br />';
            //html += '    </div>';

            var div = document.getElementById(checklistDialogId); // 4-1-2020 12-28pm adt.
            if (!div) { // for some reason this gets added twice to the DOM. Figure this out someday, but for now this seems to fix it and is a good safety I suppose.
                div = document.createElement('div');
                div.id = checklistDialogId;
                div.style.display = 'none';
                document.body.appendChild(div); // to place at end of document
            }
            div.innerHTML = html;

            $('#' + checklistDialogId).dialog({
                modal: true,
                resizable: true,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: "900px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                position: {
                    my: "middle top+12",
                    at: "middle top",
                    of: window
                },
                open: function (event, ui) {
                    try {

                        var element = document.getElementById(checklistDialogId).parentNode; // This is the best way to get a handle on the jquery dialog.
                        var checklistDialogParentId = checklistDialogId + '_Parent'; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.
                        element.id = checklistDialogParentId; // We need to have an id value so we can refer to this. It doesn't have one unless we add it here.

                        // This creates the custom header/draggable bar on the dialog!!! 4-2-2020. // ☈ ☇ https://www.toptal.com/designers/htmlarrows/symbols/thunderstorm/
                        var html = '';
                        html += '<table xcx="xcx3249-8" style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                        html += '   <tr>';
                        html += '       <td style="width:95%;">';
                        html += '           <div id="slider_' + checklistDialogId + '" style="width:20%;cursor:pointer;"></div>';
                        html += '       </td>';
                        html += '       <td style="vertical-align:middle;width:5%;padding:0;border:0;margin:0;">';

                        html += '           <span title="print" class="printButton" dev="xcx32424-4" style="font-size:18pt;cursor:pointer !important;" onclick="$(\'#divBwPrintButton\').bwPrintButton(\'PrintIndividualRequestReport\', \'' + checklistDialogId + '\');">';
                        html += '               <img src="/images/iosprinter_blue.png" style="width:50px;height:50px;cursor:pointer !important;" />';
                        html += '           </span>';

                        html += '       </td>';
                        html += '       <td>';
                        html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;" onclick="$(\'#' + checklistDialogId.replace('_Parent', '') + '\').dialog(\'close\');">X</span>';
                        html += '       </td>';
                        html += '   </tr>';
                        html += '</table>';

                        document.getElementById(checklistDialogId).parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;
                        //
                        // Now that the header bar is rendered, we have to render the contents of the dialog.
                        //
                        //alert('xcx4 budgetrequestform bwRequestType: ' + bwRequestType);
                        html = '';

                        html += '<div id="budgetrequestchecklistform" bwWorkflowId="' + bwWorkflowId + '" bwrequesttype="' + bwRequestType + '" bwbudgetrequestid="' + bwBudgetRequestId + '" bwchecklisttemplatesid="' + bwChecklistTemplatesId + '">';

                        html += '<table style="width:100%;">';
                        html += '        <tbody>';
                        html += '            <tr>';
                        html += '                <td colspan="4">';
                        //html += '                    <span id="divPageContent1_requestOrgClickableBreadcrumb" style="color:purple;font-size:8pt;">';
                        //html += breadcrumbHtml;
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'root\');">Stark Enterprises</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\');">Canadian Division</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\');">Corporate</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\', \'0\');">Nova Scotia 54323 Inc.</span> &gt;';
                        //html += '                        <span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'1\', \'0\', \'0\', \'0\');">Kentville</span>';
                        //html += '                    </span>';

                        html += '                </td>';
                        html += '            </tr>';
                        html += '            <tr>';
                        html += '                <td width="5"></td>';
                        html += '                <td>';
                        html += '                    <span>';
                        html += '                       <img id="' + checklistDialogId + '_imgRequestOrgImage" src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:100px;height:100px;"/>';
                        html += '                    </span>';
                        html += '                </td>';
                        html += '                <td style="text-align:right;" colspan="2">';
                        html += '                    &nbsp;&nbsp;<span class="xdlabel" id="spanRequestForm_Title">';
                        html += '                        <span xcx="xcx99435" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;font-weight:bold;">';
                        html += '                            Budget Request:';
                        html += '                            <span title="" id="spanRequestFormBudgetRequestTitle">' + title + '                       </span>';
                        html += '                           <br />';
                        html += '                           <span style="font-size:16pt;">Description: ' + brTitle + '</span>';
                        //html += '                           <br />';
                        //html += '                           <span style="color:gray;font-size:12pt;">' + bwWorkflowId + ' (' + bwRequestType + ')</span>';
                        //html += '                           <br />';
                        //html += '                            <span class="spanButton2 context-menu-newrequesteditor" id="spanNewRequestEllipsesButton" style="height:20px;width:150px;"> ... </span>';
                        html += '                        </span>';
                        html += '                    </span>';
                        //html += '                    <br>';
                        //html += '                    <span id="spanViewWorkflowParticipantsLink" style="text-decoration:underline;cursor:pointer;font-size:10pt;color:gray;" onclick="$(\'.bwRequest\').bwRequest(\'displayNewRequestWorkflowParticipantsDialog\', this);">View Workflow/Participants</span>                           <br>                           <span id="spanRequestForm_WorkflowAndRoleDetails"><span style="color:gray;">[22250aee-8911-40f6-96b0-f3f13da4e00a (budgetrequest)]</span><br><span id="bwStepIndex" style="display:none;">4</span><span title="View RACI workflow history..." style="cursor:pointer;text-decoration:underline;" onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'BR-200001\', \'Test\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Workflow step: VP Approvals</span>&nbsp;<br><span title="RACI: &#10;R = Responsible (also Recommender)  &#10;A = Accountable (also Approver or final approving authority)  &#10;C = Consulted (sometimes Consultant or counsel)  &#10;I = Informed (also Informee)  " style="cursor:help;">Your RACI role: </span><select id="selectedRaciRole" onchange="$(\'.bwRequest\').bwRequest(\'changeRaciRole\', this);"><option value="CIO" selected="">CIO</option><option value="ADMIN">ADMIN</option><option value="AVP">AVP</option><option value="VP">VP</option></select><br></span>                           <span id="spanRequestForm_Checklists">Pending checklists: &nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'becef88f-f43c-4e82-9ff8-0fd4d16b9555\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Cat Overnight Stay</span></span><br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'f830e44a-d29f-4261-80c6-756236355e96\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Dog Overnight Stay</span></span><br><img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">&nbsp;Complete the following checklists before you Approve: <br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'becef88f-f43c-4e82-9ff8-0fd4d16b9555\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Cat Overnight Stay</span></span><br>&nbsp;<span style="text-decoration:underline;"><span style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'displayChecklistInDialog\', \'f830e44a-d29f-4261-80c6-756236355e96\', \'Test\', \'BR-200001\', \'budgetrequest\', \'8524d114-ebcd-4d53-9286-347fff3270f1\', \'22250aee-8911-40f6-96b0-f3f13da4e00a\');">Dog Overnight Stay</span></span><br></span>';
                        html += '                </td>';
                        html += '            </tr>';
                        html += '        </tbody>';
                        html += '    </table>';

                        html += '</div>';

                        //html += '<span style="font-size:16pt;">Budget Request: ' + title + '</span>';
                        //html += '<br />';
                        //html += '<span style="font-size:16pt;">Description: ' + brTitle + '</span>';
                        //html += '<br />';
                        //html += '<span style="color:gray">' + bwWorkflowId + ' (' + bwRequestType + ')</span>';
                        //html += '<br />';

                        //html += thiz.renderChecklistReadOnly(bwBudgetRequestId, bwChecklistTemplatesId, participantId); // This is where the checklist gets rendered.

                        //html += thiz.renderChecklistReadOnly(bwChecklistTemplatesId);
                        var promise = thiz.renderChecklistReadOnly(bwChecklistTemplatesId, bwBudgetRequestId);
                        promise.then(function (results) {
                            try {

                                if (results.status != 'SUCCESS') {
                                    alert('xcx2312424 ' + results.status + ', ' + results.message);
                                } else {
                                    html += results.html;
                                }

                                html += '<br />';
                                html += '<div id="' + checklistDialogId + '_divChecklistFormDialogSaveButton' + '" class="divSignInButton" style="width:90%;text-align:center;line-height:1.1em;font-weight:bold;">';
                                html += 'Request Revision';
                                html += '</div>';

                                html += '<br />';
                                html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:1.1em;font-weight:bold;" onclick="$(\'#' + checklistDialogId.replace('_Parent', '') + '\').dialog(\'close\');">';
                                html += '    Close';
                                html += '</div>';
                                html += '<br /><br />';

                                document.getElementById(checklistDialogId).innerHTML = html;

                                //alert('In bwRequest.js.displayChecklistInDialogReadOnly(). html has been rendered in checklistDialogId: ' + checklistDialogId + ', html: ' + html);


                                // Try to get a custom image. If none found, use the OOB one.
                                //var imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png';

                                var preventCachingGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                    return v.toString(16);
                                });

                                var imagePath2;

                                var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier'));

                                if (activeStateIdentifier.status != 'SUCCESS') {

                                    imagePath2 = '[No image. Unauthorized. xcx213124-34556-34-234-3245-xx]';

                                } else {

                                    imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgId + '/' + 'orgimage.png?v=' + preventCachingGuid + '&ActiveStateIdentifier=' + activeStateIdentifier.ActiveStateIdentifier;

                                }






                                $.get(imagePath2).done(function () {
                                    setTimeout(function () { // Only needs to happen for Chrome.
                                        $('#' + checklistDialogId + '_imgRequestOrgImage').attr('src', imagePath2);
                                    }, 500);
                                }).fail(function () {
                                    //alert("This org has no image."); // do nothing 
                                });
                                // End: Getting the custom image

                                $("#slider_" + checklistDialogId).slider({
                                    min: 0,
                                    max: 100,
                                    value: 100, // It starts off full size.
                                    slide: function (event, ui) {
                                        thiz.setZoom(ui.value, checklistDialogId);
                                    }//,
                                    //change: function (event, ui) {
                                    //    thiz.setZoom(ui.value, requestDialogId);
                                    //}
                                });

                                $('.ui-widget-overlay').bind('click', function () {
                                    $('#' + checklistDialogId).dialog('close');
                                });

                                // Hook up the "Save" button.
                                $('#' + checklistDialogId + '_divChecklistFormDialogSaveButton').bind('click', function () {
                                    //$('.bwRequest').bwRequest('saveChecklist', bwChecklistTemplatesId, checklistDialogId);
                                    alert('Revision functionality is incomplete. Coming soon! xcx123123123');
                                });

                            } catch (e) {
                                console.log('Exception in displayChecklistInDialogReadOnly(): ' + e.message + ', ' + e.stack);
                                alert('Exception in displayChecklistInDialogReadOnly(): ' + e.message + ', ' + e.stack);
                            }

                        }).catch(function (e) {

                            console.log('Exception in displayChecklistInDialogReadOnly.renderChecklistReadOnly():44: ' + JSON.stringify(e));
                            alert('Exception in displayChecklistInDialogReadOnly.renderChecklistReadOnly():44: ' + JSON.stringify(e));

                        });

                    } catch (e) {
                        console.log('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                        alert('Exception in displayRequestWorkflowAuditTrailDialog().dialog.open(): ' + e.message + ', ' + e.stack);
                    }
                },
                close: function () {
                    //$('#' + checklistDialogId).dialog('destroy');
                }
            });

            // Hide the title bar.
            //$("#divChecklistFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        } catch (e) {
            console.log('Exception in displayChecklistInDialogReadOnly(): ' + e.message + ', ' + e.stack);
            alert('Exception in displayChecklistInDialogReadOnly(): ' + e.message + ', ' + e.stack);
        }
    },

    renderChecklist: function (bwChecklistTemplatesId) {
        try {
            //
            // ToDo: >>>>>>>>>>>>>> This checklist should be marked read-only somehow, so that the renderChecklist method knows to only render it read-only. 
            //
            console.log('In renderChecklist. bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', this.options.Checklists: ' + JSON.stringify(this.options.Checklists));
            alert('In renderChecklist. bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', this.options.Checklists: ' + JSON.stringify(this.options.Checklists));

            var checklistIndex;
            for (var i = 0; i < this.options.Checklists.length; i++) {
                if (bwChecklistTemplatesId == this.options.Checklists[i].bwChecklistTemplatesId) {
                    checklistIndex = i;
                    break;
                }
            }

            //// debugger; // the format is a bit different depending on if it has been completed or not.
            var checklist = JSON.parse(this.options.Checklists[checklistIndex].ChecklistJson);

            var html = '';
            // Render the json.
            html += '<table class="xdFormLayout" style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px;">';
            html += '<tr>';
            html += '  <td>';
            html += '    <h2>' + checklist.Title + '</h2>';
            //html += '    <span class="printButton" title="print" onclick="cmdPrintForm();">&#x1f5a8;</span>';
            //html += '    <br />';
            for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
                //// debugger;
                if (checklist.ChecklistTemplateRow[i].TitleSection && checklist.ChecklistTemplateRow[i].TitleSection != '<br />') {
                    html += checklist.ChecklistTemplateRow[i].TitleSection;
                }
            }
            for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
                if (checklist.ChecklistTemplateRow[i].hasOwnProperty('TitleSection')) {
                    // do nothing
                } else if (checklist.ChecklistTemplateRow[i].hasOwnProperty('ChecklistItem')) {
                    html += '<table style="width:50%;">';
                    html += '<tr>';

                    html += '   <td style="width:95%;text-align:left;color:black;" class="bwSliderTitleCell">';
                    var question = checklist.ChecklistTemplateRow[i].ChecklistItem.Question.trim();
                    var lastCharacter = question.charAt(question.length - 1);
                    if (lastCharacter == '?') {
                        html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>';
                    } else {
                        html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>:';
                    }
                    html += '   </td>';
                    html += '   <td style="width:5%;" class="bwChartCalculatorLightCurrencyTableCell">';
                    html += '       <label for="configurationBehaviorRequireStartEndDatesSlider2"></label><input type="checkbox" class="bwQuestionCheckbox" id="questioncheckbox_' + i + '" />'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
                    html += '   </td>';

                    html += '</tr>';
                    html += '</table>';
                } else {
                    alert('Unrecognized json attribute: ' + checklist.ChecklistTemplateRow[i]);
                }

            }
            html += '  </td>';
            html += '</tr>';
            html += '</table>';
            //// debugger;
            return html;
            //var configurationBehaviorRequireStartEndDatesOptions2 = {
            //    checked: false, //requireStartEndDates,
            //    show_labels: true,         // Should we show the on and off labels?
            //    labels_placement: "left",  // Position of the labels: "both", "left" or "right"
            //    on_label: "YES",            // Text to be displayed when checked
            //    off_label: "NO",          // Text to be displayed when unchecked
            //    width: 50,                 // Width of the button in pixels
            //    height: 22,                // Height of the button in pixels
            //    button_width: 24,         // Width of the sliding part in pixels
            //    clear_after: null         // Override the element after which the clearing div should be inserted
            //};
            //$("input#configurationBehaviorRequireStartEndDatesSlider2").switchButton(configurationBehaviorRequireStartEndDatesOptions2);

        } catch (e) {
            console.log('Exception in renderChecklist(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in renderChecklist(): ' + e.message + ', ' + e.stack);
        }
    },
    renderChecklistReadOnly: function (bwChecklistTemplatesId, budgetRequestId) {
        console.log('In bwRequest.js.renderChecklistReadOnly().');
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                //
                // ToDo: >>>>>>>>>>>>>> This checklist should be marked read-only somehow, so that the renderChecklistReadOnly method knows to only render it read-only. 
                //
                console.log('In renderChecklistReadOnly. bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', thiz.options.Checklists: ' + JSON.stringify(thiz.options.Checklists));
                //alert('In renderChecklistReadOnly. bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', thiz.options.Checklists: ' + JSON.stringify(thiz.options.Checklists));

                var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

                var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwWorkflowAppId: workflowAppId,
                    bwBudgetRequestId: budgetRequestId,
                    isActive: true,
                    bwRequestType: 'ALL'
                };

                $.ajax({
                    url: webserviceurl + '/getsinglebudgetrequest', // This needs to return QualifyingRoleIds. They RequestingUser has to qualify for each role being in the budget request org level or above.
                    type: "POST",
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    error: function (jqXHR, settings, errorThrown) {

                        //if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                        //    console.log('Error in bwRequest.js.renderChecklistReadOnly.getsinglebudgetrequest(). xcx213124-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);

                        //} else {
                        //    console.log('Error in bwRequest.js.renderChecklistReadOnly()():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        //    alert('Error in bwRequest.js.renderChecklistReadOnly()():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        //}

                        var msg = 'Error in bwRequest.js.renderChecklistReadOnly.getsinglebudgetrequest(). xcx213124-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown;
                        //displayAlertDialog(msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }

                        reject(result);

                    },
                    success: function (results) {
                        try {

                            if (results.status != 'SUCCESS') {

                                var msg = 'Error in bwRequest.js.renderChecklistReadOnly.getsinglebudgetrequest.success(): ' + JSON.stringify(results);
                                displayAlertDialog(msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }

                                reject(result);

                            } else {

                                var brData = results.results;
                                if (!brData.BudgetRequest || !brData.BudgetRequest.bwRequestJson || (brData.BudgetRequest.bwRequestJson == '')) {

                                    var msg = 'INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx41202011 brData.BudgetRequest.bwRequestJson: ' + brData.BudgetRequest.bwRequestJson;
                                    displayAlertDialog(msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }

                                    reject(result);

                                } else {

                                    if (!brData.BudgetRequest.bwBudgetRequestId) {

                                        var msg = 'Error in bwRequest.js.renderChecklistReadOnly(). Invalid value for brData.BudgetRequest.bwBudgetRequestId: ' + brData.BudgetRequest.bwBudgetRequestId;
                                        displayAlertDialog(msg);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }

                                        reject(result);

                                    } else {

                                        var completedChecklists = JSON.parse(brData.BudgetRequest.bwRequestJson).Checklists;

                                        var checklistIndex;
                                        for (var i = 0; i < completedChecklists.length; i++) {
                                            var completedChecklist = JSON.parse(completedChecklists[i]);
                                            if (completedChecklist.bwChecklistTemplatesId == bwChecklistTemplatesId) {
                                                checklistIndex = i;
                                                break;
                                            }
                                        }

                                        var checklist = JSON.parse(completedChecklists[checklistIndex]);

                                        var html = '';

                                        html += '<table class="xdFormLayout" style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px;">';
                                        html += '<tr>';
                                        html += '  <td>';
                                        html += '    <h2>' + checklist.Title + '</h2>';
                                        //html += '    <span class="printButton" title="print" onclick="cmdPrintForm();">&#x1f5a8;</span>';
                                        //html += '    <br />';

                                        //// debugger;
                                        //alert('checklist xcx34657: ' + JSON.stringify(checklist));
                                        //console.log('checklist xcx34657: ' + JSON.stringify(checklist));
                                        html += '    <span style="color:tomato;text-decoration:underline;font-style:italic;font-size:9pt;">This checklist was completed by ' + checklist.CreatedByEmail + ' on ' + formatDateFromBW(checklist.Created) + '</span>';



                                        html += '    <br />';
                                        html += '    <br />';
                                        html += '<span onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" style="font-size:9pt;" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
                                        html += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
                                        html += '&nbsp;The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!</span>';
                                        html += '    <br />';
                                        html += '    <br />';
                                        for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
                                            //// debugger;
                                            if (checklist.ChecklistTemplateRow[i].TitleSection && checklist.ChecklistTemplateRow[i].TitleSection != '<br />') {
                                                html += checklist.ChecklistTemplateRow[i].TitleSection;
                                            }
                                        }
                                        for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
                                            if (checklist.ChecklistTemplateRow[i].hasOwnProperty('TitleSection')) {
                                                // do nothing
                                            } else if (checklist.ChecklistTemplateRow[i].hasOwnProperty('ChecklistItem')) {
                                                html += '<table style="width:50%;">';
                                                html += '<tr>';

                                                html += '   <td style="width:95%;text-align:left;color:black;" class="bwSliderTitleCell">';
                                                var question = checklist.ChecklistTemplateRow[i].ChecklistItem.Question.trim();
                                                var lastCharacter = question.charAt(question.length - 1);
                                                if (lastCharacter == '?') {
                                                    html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>';
                                                } else {
                                                    html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>:';
                                                }
                                                html += '   </td>';
                                                html += '   <td style="width:5%;" class="bwChartCalculatorLightCurrencyTableCell">';
                                                html += '       <label for="configurationBehaviorRequireStartEndDatesSlider2"></label>';
                                                if (checklist.ChecklistTemplateRow[i].ChecklistItem["Checked"] == true) {
                                                    html += '<span style="white-space:nowrap;"><input disabled="disabled" type="checkbox" class="bwQuestionCheckbox" id="questioncheckbox_' + i + '" checked="checked" />&nbsp;Yes</span>'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
                                                } else {
                                                    html += '<span style="white-space:nowrap;"><input disabled="disabled" type="checkbox" class="bwQuestionCheckbox" id="questioncheckbox_' + i + '" />&nbsp;No</span>'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
                                                }
                                                //html += '<input disabled="disabled" type="checkbox" id="questioncheckbox_' + i + '" />'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
                                                html += '   </td>';

                                                html += '</tr>';
                                                html += '</table>';
                                            } else {
                                                html += 'Unrecognized json attribute: ' + checklist.ChecklistTemplateRow[i];
                                                alert('Unrecognized json attribute: ' + checklist.ChecklistTemplateRow[i]);
                                            }

                                        }
                                        html += '  </td>';
                                        html += '</tr>';
                                        html += '</table>';

                                        var result = {
                                            status: 'SUCCESS',
                                            html: html
                                        }

                                        resolve(result);

                                        //var configurationBehaviorRequireStartEndDatesOptions2 = {
                                        //    checked: false, //requireStartEndDates,
                                        //    show_labels: true,         // Should we show the on and off labels?
                                        //    labels_placement: "left",  // Position of the labels: "both", "left" or "right"
                                        //    on_label: "YES",            // Text to be displayed when checked
                                        //    off_label: "NO",          // Text to be displayed when unchecked
                                        //    width: 50,                 // Width of the button in pixels
                                        //    height: 22,                // Height of the button in pixels
                                        //    button_width: 24,         // Width of the sliding part in pixels
                                        //    clear_after: null         // Override the element after which the clearing div should be inserted
                                        //};
                                        //$("input#configurationBehaviorRequireStartEndDatesSlider2").switchButton(configurationBehaviorRequireStartEndDatesOptions2);



                                    }

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in renderChecklistReadOnly():2: ' + e.message + ', ' + e.stack;
                            displayAlertDialog(msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }

                            reject(result);

                        }

                    }
                });

            } catch (e) {

                var msg = 'Exception in renderChecklistReadOnly(): ' + e.message + ', ' + e.stack;
                displayAlertDialog(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                reject(result);

            }
        });
    },

    saveChecklist: function (bwChecklistTemplatesId, checklistDialogId) {
        try {
            console.log('In bwRequest.js.saveChecklist(). bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', checklistDialogId: ' + checklistDialogId);
            alert('In bwRequest.js.saveChecklist(). bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', checklistDialogId: ' + checklistDialogId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
            var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
            var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

            //var proceed = confirm('Are you sure you wish to mark this checklist as completed? This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //if (proceed) {
            var checklistIndex = null;
            for (var i = 0; i < this.options.Checklists.length; i++) {
                if (bwChecklistTemplatesId == this.options.Checklists[i].bwChecklistTemplatesId) {
                    checklistIndex = i;
                    break;
                }
            }
            if (checklistIndex == null) {
                console.log('Error in saveChecklist(): Could not find the checklist.');
                alert('ERROR: Could not find the checklist.');
            } else {
                var checklistTemp = JSON.parse(JSON.stringify(this.options.Checklists[checklistIndex]));
                // Now we have to scrape the form to get whether each checkbox is selected or not.
                var checklist = JSON.parse(checklistTemp.ChecklistJson);
                // Now we have to loop through the json and match up all the check boxes!!! eg: id="questiontext_0", id="questioncheckbox_0". Compare the questiontext so we make sure the checklist hasn't been changed.

                var bwQuestionCheckboxes = document.getElementsByClassName('bwQuestionCheckbox'); // NEED TO IDENTIFY THIS BY USING THE DIALOG IDENTIFIER AS A PREFIX
                for (var i = 0; i < bwQuestionCheckboxes.length; i++) {
                    //// debugger;
                    var questionIndex = bwQuestionCheckboxes[i].id.split('_')[1];
                    var checked = bwQuestionCheckboxes[i].checked;
                    try {
                        checklist.ChecklistTemplateRow[questionIndex].ChecklistItem["Checked"] = checked; // Set the value in the json. This is what we will be saving in BwBudgetRequest.Checklists[]!!!
                    } catch (e) {
                        // debugger; // An issue setting this in the JSON!!!
                        var g = '';
                    }
                    //if (checked == true) {
                    //    var xx = checklist.ChecklistTemplateRow[questionIndex].ChecklistItem["Question"];
                    //    //// debugger;
                    //    var g = '';
                    //}
                }





                //// debugger;
                // WE GOT IT! The Json! WOO HOO!! STORE IT!!!!!!
                // Add audit information...
                checklist["Created"] = null; // This gets filled in on the server to ensure correct timezone etc.
                checklist["CreatedBy"] = participantFriendlyName;
                checklist["CreatedById"] = participantId;
                checklist["CreatedByEmail"] = participantEmail;
                checklist["Modified"] = null;
                checklist["ModifiedByFriendlyName"] = null;
                checklist["ModifiedById"] = null;
                checklist["ModifiedByEmail"] = null;
                //
                //// debugger;
                // The checklist gets stored in bwBudgetRequest.bwRequestJson.Checklists[]:
                // include modified by, friendlyname, etc fields
                //// debugger;
                //var bwBudgetRequestId = thiz.options.bwBudgetRequestId;
                //var bwWorkflowAppId = thiz.options.bwWorkflowAppId;

                var bwBudgetRequestId = $('#' + checklistDialogId).find('#budgetrequestchecklistform')[0].getAttribute('bwbudgetrequestid');
                //var bwWorkflowAppId = $('#' + checklistDialogId).find('#budgetrequestchecklistform')[0].getAttribute('bwbudgetrequestid');

                var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
                var data = {
                    bwParticipantId_LoggedIn: participantId,
                    bwActiveStateIdentifier: activeStateIdentifier,
                    bwWorkflowAppId_LoggedIn: workflowAppId,

                    bwBudgetRequestId: bwBudgetRequestId,
                    bwWorkflowAppId: workflowAppId,
                    ModifiedById: participantId,
                    ModifiedByFriendlyName: participantFriendlyName,
                    ModifiedByEmail: participantEmail,
                    Checklist: JSON.stringify(checklist)
                };

                var operationUri = thiz.options.operationUriPrefix + "_bw/bwbudgetrequests/submitchecklistforrequest";
                $.ajax({
                    url: operationUri,
                    type: "POST",
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (results) {

                        if (results.status == 'SUCCESS') {

                            $('#' + checklistDialogId).dialog('close'); // Close the checklist dialog.

                            thiz.displayArInDialog('', bwBudgetRequestId, '', '', '', '', ''); // Refresh the budget request dialog so that it reflects the new state of the checklist.

                            displayAlertDialog('The checklist was saved successfully.'); // Display the success message.

                        } else {

                            displayAlertDialog(results.message);

                        }

                    },
                    error: function (data, errorCode, errorMessage) {
                        console.log('Error assigning the budget amount: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                        displayAlertDialog('Error assigning the budget amount: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                    }
                });
            }

        } catch (e) {
            console.log('Exception in saveChecklist(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in saveChecklist(): ' + e.message + ', ' + e.stack);
        }
    },

    adminMoveWorkflowToNextStep: function () {
        try {
            console.log('In adminMoveWorkflowToNextStep().');

            alert('In adminMoveWorkflowToNextStep(). This functionality is incomplete. Coming soon!');

        } catch (e) {
            console.log('Exception in adminMoveWorkflowToNextStep(): ' + e.message + ', ' + e.stack);
        }
    },
    viewWorkflowHistoryDialog: function () {
        try {
            console.log('In viewWorkflowHistoryDialog().');
            alert('In viewWorkflowHistoryDialog(). This functionality is incomplete. Coming soon!');
        } catch (e) {
            console.log('Exception in viewWorkflowHistoryDialog(): ' + e.message + ', ' + e.stack);
        }
    },
    selectedRaciRole_OnChange: function (element) {
        try {
            console.log('In bwRequest.js.selectedRaciRole_OnChange().'); // element is the select element.

            var selectedRaciRole = element.options[element.selectedIndex].value;

            var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
            var bwWorkflowTaskItemId = element.options[element.selectedIndex].getAttribute('bwworkflowtaskitemid');

            console.log('In bwRequest.js.selectedRaciRole_OnChange(). selectedRaciRole: ' + selectedRaciRole + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

            //$('.bwRequest').bwRequest('displayRequestFormDialog', bwBudgetRequestId, selectedRaciRole, bwWorkflowTaskItemId); // Don't use this, because if this method is being called, the dialog is already displayed. Call displayRequestForm instead.

            var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId;
            this.displayRequestForm(bwBudgetRequestId, requestDialogId, bwWorkflowTaskItemId, selectedRaciRole); // 5-18-2023.

        } catch (e) {
            console.log('Exception in bwRequest.js.selectedRaciRole_OnChange(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.selectedRaciRole_OnChange(): ' + e.message + ', ' + e.stack);
        }
    },
    viewThisBudgetRequestSystemDetailsDialog: function () {
        try {
            console.log('In viewThisBudgetRequestSystemDetailsDialog().');
            alert('In viewThisBudgetRequestSystemDetailsDialog(). This functionality is incomplete. Coming soon!');



        } catch (e) {
            console.log('Exception in viewThisBudgetRequestSystemDetailsDialog(): ' + e.message + ', ' + e.stack);
        }
    },



    displayRequestTaskAuditTrailInDialog: function (appWebUrl, budgetRequestId, arName, brTitle, title, requestType, bwWorkflowId) {
        try {
            console.log('In displayRequestTaskAuditTrailInDialog().');
            //if (displayTaskDetailsBeforeRequests != true) {
            //    //
            //    // Display the request immediately. This is the slider setting on the Configuration > personal/behavior page.
            //    $('.bwRequest').bwRequest('displayRequestFormDialog', budgetRequestId, participantId, title);
            //} else {
            //

            this.pinRequestDialog();


            // Display the audit trail/approval trail first.
            if (!budgetRequestId && !brTitle) {
                // This means we are coming from a .xsl, so we have to find the values.
                budgetRequestId = $('span[xd\\:binding = "my:BudgetRequestId"]')[0].innerHTML; // my:BudgetRequestId
                appWebUrl = this.options.operationUriPrefix; //globalUrlPrefix + globalUrlForWebServices;
                brTitle = $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML; // my:Project_Name
                title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML; // eg: BR-160001

                // This shows the AR in a jquery dialog window.
                try {
                    $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                    $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                    $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                    // debugger; // xcx7

                    alert('Displaying ArDialog. xcx23425345-3-7');

                    $("#ArDialog").dialog({
                        modal: true,
                        resizable: false,
                        closeText: "Cancel",
                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                        //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                        title: brTitle + " (" + title + ")",
                        width: "720px",
                        dialogClass: "no-close", // No close button in the upper right corner.
                        hide: false, // This means when hiding just disappear with no effects.
                        open: function (event, ui) {
                            $('.ui-widget-overlay').bind('click', function () {
                                $("#ArDialog").dialog('close');
                            });
                            //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                            ////$('#invitationLink2').text(invitationUrl);
                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
                        },
                        close: function (event, ui) {
                            try {
                                displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-10');
                            } catch (e) {

                            }
                        }
                        //buttons: {
                        //    "Close": function () {
                        //        $(this).dialog("close");
                        //    }
                        //}
                    });
                    $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                    var titleHtml = '';
                    titleHtml += '☇ ☈';
                    titleHtml += '&nbsp;&nbsp;&nbsp;&nbsp;x3';
                    titleHtml += brTitle + ' (' + title + ')';
                    $('#spanArDialogTitle').html(titleHtml); //brTitle + ' (' + title + ')');

                    var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                    $.ajax({
                        url: operationUri,
                        method: "GET",
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (wtItems) {
                            //console.log('wtItems: ' + JSON.stringify(wtItems));
                            if (wtItems.d.results.length == 0) {
                                // Todd: There were no results, so put some message on the screen to indicate that.?

                                //html = '';
                                //                html += '<table>';
                                //                html += '   <tr>';
                                //                html += '       <td>&nbsp;</td>';
                                //                html += '   </tr>';
                                //                html += '   <tr>';
                                //                html += '       <td>';
                                ////html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                //html += '           <a href="javascript:$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' +budgetRequestId + '\', \'' + participantId + '\', \'' +title + '\');">Click here to view the Budget Request</a>';
                                //html += '       </td>';
                                //                html += '   </tr>';
                                //html += '</table>';

                                //$('#spanArDialogViewBudgetRequestLink').html(html);


                            } else {
                                // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                var userIds = [];
                                userIds.push(wtItems.d.results[0].bwAuthorId);
                                for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                }
                                var UserFriendlyNames = [];
                                var dataRetrievalCount = 0;
                                for (var uids = 0; uids < userIds.length; uids++) {
                                    // Ok now we have to make a deferred call to get back the Friendly Names.
                                    GetUserDetails[uids] = $.Deferred();
                                    GetUserDetails[uids]
                                        .done(function (data) {
                                            dataRetrievalCount += 1; // Increment the count!
                                            // Add the results to the array.
                                            UserFriendlyNames.push(data);
                                            // Check if all of the data has come back yet.
                                            if (dataRetrievalCount == userIds.length) {
                                                // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                var html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                var authorName = '';
                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                }
                                                html += '           <strike><span style="cursor:help;">xcx19' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';
                                                for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                    // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    //html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                    // debugger;
                                                    if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                        html += '       <strike>';
                                                        html += '<span style="cursor:help;">xcx20' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role1]</span>';
                                                        html += '       </strike>';
                                                        html += '       </td>';
                                                    } else {
                                                        var assignedToName = '';
                                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                            if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                        }
                                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Created) + '">';
                                                        html += '<span style="cursor:help;">xcx21' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + '[raci role2]</span>';
                                                        html += '       </td>';
                                                    }
                                                    //html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';
                                                }

                                                $('#spanArDialogTaskAuditTrail').html(html);

                                                html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td>&nbsp;</td>';
                                                html += '   </tr>';
                                                html += '   <tr>';
                                                html += '       <td>';
                                                //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                // debugger;
                                                html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';

                                                $('#spanArDialogViewBudgetRequestLink').html(html);

                                                $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                            }
                                        })
                                        .fail(function (data) {
                                            handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                        });
                                    getUserDetails(userIds[uids], appWebUrl, uids);
                                }
                            }
                        },
                        error: function (error) {
                            handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '1:' + errorCode + ', ' + errorMessage);
                        }
                    });
                } catch (e) {
                    handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '2:' + e.message);
                }
            } else if (!appWebUrl && !budgetRequestId && !arName && !title) {
                //displayAlertDialog('This means we are coming from the burn rate report.');
                // This means we are coming from the burn rate report.
                // First we have to get the budgetRequestId from the Title (eg: BR-00001).
                var operationUri = webserviceurl + "/getbudgetrequestidfromtitle/" + brTitle;
                $.ajax({
                    url: operationUri,
                    method: "GET",
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {

                        //displayAlertDialog(data);

                        budgetRequestId = data[0].bwBudgetRequestId;
                        appWebUrl = globalUrlPrefix + globalUrlForWebServices;
                        brTitle = data[0].ProjectTitle; // my:Project_Name
                        title = data[0].Title; // eg: BR-160001



                        // This shows the AR in a jquery dialog window.
                        try {
                            $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                            $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                            $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                            // debugger; // xcx8

                            alert('Displaying ArDialog. xcx23425345-3-8');

                            $("#ArDialog").dialog({
                                modal: true,
                                resizable: false,
                                closeText: "Cancel",
                                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                                title: brTitle + " (" + title + ")",
                                width: "720px",
                                dialogClass: "no-close", // No close button in the upper right corner.
                                hide: false, // This means when hiding just disappear with no effects.
                                open: function (event, ui) {
                                    $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); });
                                    //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                                    ////$('#invitationLink2').text(invitationUrl);
                                    //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                                    //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
                                },
                                close: function (event, ui) {
                                    try {
                                        displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-11');
                                    } catch (e) {

                                    }
                                }
                                //buttons: {
                                //    "Close": function () {
                                //        $(this).dialog("close");
                                //    }
                                //}
                            });
                            $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                            $('#spanArDialogTitle').html(brTitle + ' (' + title + ')x5');

                            var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                            $.ajax({
                                url: operationUri,
                                method: "GET",
                                headers: {
                                    "Accept": "application/json; odata=verbose"
                                },
                                success: function (wtItems) {
                                    if (wtItems.d.results.length == 0) {
                                        // Todd: There were no results, so put some message on the screen to indicate that.?
                                    } else {
                                        // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                        var userIds = [];
                                        userIds.push(wtItems.d.results[0].bwAuthorId);
                                        for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                            userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                        }
                                        var UserFriendlyNames = [];
                                        var dataRetrievalCount = 0;
                                        for (var uids = 0; uids < userIds.length; uids++) {
                                            // Ok now we have to make a deferred call to get back the Friendly Names.
                                            GetUserDetails[uids] = $.Deferred();
                                            GetUserDetails[uids]
                                                .done(function (data) {
                                                    dataRetrievalCount += 1; // Increment the count!
                                                    // Add the results to the array.
                                                    UserFriendlyNames.push(data);
                                                    // Check if all of the data has come back yet.
                                                    if (dataRetrievalCount == userIds.length) {
                                                        // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                        var html = '';
                                                        html += '<table>';
                                                        html += '   <tr>';
                                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                        var authorName = '';
                                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                            if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                        }
                                                        html += '           <strike><span style="cursor:help;">xcx22' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '[raci role 3]</span></strike>';
                                                        html += '       </td>';
                                                        html += '   </tr>';
                                                        html += '</table>';
                                                        for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                            // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                            html += '<table>';
                                                            html += '   <tr>';
                                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                            if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                                html += '       <strike>';
                                                                html += '<span style="cursor:help;">xcx23' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '[raci role 4]</span>';
                                                                html += '       </strike>';
                                                            } else {
                                                                var assignedToName = '';
                                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                                }
                                                                html += 'xcx24' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName;
                                                            }
                                                            html += '       </td>';
                                                            html += '   </tr>';
                                                            html += '</table>';
                                                        }


                                                        $('#spanArDialogTaskAuditTrail').html(html);

                                                        html = '';
                                                        html += '<table>';
                                                        html += '   <tr>';
                                                        html += '       <td>&nbsp;</td>';
                                                        html += '   </tr>';
                                                        html += '   <tr>';
                                                        html += '       <td>';
                                                        //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                        // debugger;
                                                        html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                        html += '       </td>';
                                                        html += '   </tr>';
                                                        html += '</table>';
                                                        $('#spanArDialogViewBudgetRequestLink').html(html);

                                                        $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                                    }
                                                })
                                                .fail(function (data) {
                                                    handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                                });
                                            getUserDetails(userIds[uids], appWebUrl, uids);
                                        }
                                    }
                                },
                                error: function (error) {
                                    handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '1:' + errorCode + ', ' + errorMessage);
                                }
                            });
                        } catch (e) {
                            handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '2:' + e.message);
                        }
                    },
                    error: function (error) {
                        handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '1:' + errorCode + ', ' + errorMessage);
                    }
                });
            } else {
                // Display the thing. We have enough info already!
                // This shows the AR in a jquery dialog window.
                try {
                    $('#spanArDialogTitle').empty(); // We have to empty the contents of the dialog before it is displayed.
                    $('#spanArDialogTaskAuditTrail').empty(); // We have to empty the contents of the dialog before it is displayed.
                    $('#spanArDialogViewBudgetRequestLink').empty(); // We have to empty the contents of the dialog before it is displayed.
                    // debugger; // xcx9

                    alert('Displaying ArDialog. xcx23425345-3-9');

                    $("#ArDialog").dialog({
                        modal: true,
                        resizable: false,
                        closeText: "Cancel",
                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                        //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                        title: brTitle + " (" + title + ")",
                        width: "720px",
                        dialogClass: "no-close", // No close button in the upper right corner.
                        hide: false, // This means when hiding just disappear with no effects.
                        open: function (event, ui) {
                            $('.ui-widget-overlay').bind('click', function () {
                                $("#ArDialog").dialog('close');
                            });
                            //var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
                            ////$('#invitationLink2').text(invitationUrl);
                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
                            //document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();


                            //// First, let's create our drawing surface out of an existing SVG element
                            //// If you want to create a new surface just provide dimensions
                            //// like s = Snap(800, 600);
                            //var s = Snap("#svg");
                            //// Let's create a big circle in the middle:
                            //var bigCircle = s.circle(150, 150, 100);

                        },
                        close: function (event, ui) {
                            try {
                                displayAlertDialog('In xcx23412(). The request form is being closed. We need to check if the user may be losing any changes. This functionality is incomplete. Coming soon! xcx12312-12');
                            } catch (e) {

                            }
                        }
                    });
                    //$("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                    //$('#spanArDialogTitle').html(brTitle + ' (' + title + ')x7');
                    var titleHtml = '';
                    //titleHtml += '<span style="cursor:pointer;" title="Click here to view the audit trail..." onclick="alert(\'This functionality will display the workflow/racistatus/audittrail view. It is incomplete. Coming soon!\');">☇ ☈</span>';
                    titleHtml += '<span xcx="342352-3" style="cursor:pointer;" title="Click here to view the audit trail..." onclick="$(\'.bwRequest\').bwRequest(\'displayRequestWorkflowAuditTrailDialog\', \'' + brTitle + '\', \'' + title.replace(/["]/g, '&quot;').replace(/[']/g, '&#92;&#39;') + '\', \'' + requestType + '\', \'' + budgetRequestId + '\', \'' + bwWorkflowId + '\');">☇ ☈</span>';
                    titleHtml += '&nbsp;&nbsp;&nbsp;&nbsp;';
                    titleHtml += brTitle + ' (' + title + ')xcx7.7';
                    $('#spanArDialogTitle').html(titleHtml); //brTitle + ' (' + title + ')');

                    var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                    $.ajax({
                        url: operationUri,
                        method: "GET",
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (wtItems) {
                            //// debugger;
                            if (wtItems.d.results.length == 0) {
                                // Todd: There were no results, so put some message on the screen to indicate that.?



                                //// debugger;
                                html = '';
                                html += '<table>';
                                html += '   <tr>';
                                html += '       <td>&nbsp;</td>';
                                html += '   </tr>';
                                html += '   <tr>';
                                html += '       <td>';
                                //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                // debugger;
                                html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                html += '       </td>';
                                html += '   </tr>';
                                html += '</table>';

                                $('#spanArDialogViewBudgetRequestLink').html(html);



                            } else {
                                // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                var userIds = [];
                                userIds.push(wtItems.d.results[0].bwAuthorId);
                                for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                }
                                var UserFriendlyNames = [];
                                var dataRetrievalCount = 0;
                                for (var uids = 0; uids < userIds.length; uids++) {
                                    // Ok now we have to make a deferred call to get back the Friendly Names.
                                    GetUserDetails[uids] = $.Deferred();
                                    GetUserDetails[uids]
                                        .done(function (data) {
                                            dataRetrievalCount += 1; // Increment the count!
                                            // Add the results to the array.
                                            UserFriendlyNames.push(data);
                                            // Check if all of the data has come back yet.
                                            if (dataRetrievalCount == userIds.length) {
                                                // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                var html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                var authorName = '';
                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                }
                                                html += '           <strike><span style="cursor:help;">xcx25-2' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Request submitted by ' + authorName + '</span></strike>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';
                                                for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                    // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                    if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                        html += '       <strike>';
                                                        //html += '<span style="cursor:help;">xcx26' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x</span>';
                                                        html += '<span style="cursor:help;">xcx26' + wtItems.d.results[ri].Modified + ' - ' + wtItems.d.results[ri].bwTaskOutcome + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x</span>';
                                                        html += '       </strike>';
                                                    } else {
                                                        var assignedToName = '';
                                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                            if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                        }
                                                        html += 'xcx27-2' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + ' [' + wtItems.d.results[ri].bwAssignedToRaciRoleName + ' (' + wtItems.d.results[ri].bwAssignedToRaciRoleAbbreviation + ')]x';
                                                    }
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';
                                                }

                                                $('#spanArDialogTaskAuditTrail').html(html);

                                                html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td>&nbsp;</td>';
                                                html += '   </tr>';
                                                html += '   <tr>';
                                                html += '       <td>';
                                                //html += '           <a href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                // debugger;
                                                html += '           <a onclick="$(\'.bwRequest\').bwRequest(\'displayRequestFormDialog\', \'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">Click here to view the Budget Request</a>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';

                                                $('#spanArDialogViewBudgetRequestLink').html(html);

                                                $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                            }
                                        })
                                        .fail(function (data) {
                                            handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                        });
                                    getUserDetails(userIds[uids], appWebUrl, uids);
                                }
                            }
                        },
                        error: function (error) {
                            handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '1:' + errorCode + ', ' + errorMessage);
                        }
                    });
                } catch (e) {
                    handleExceptionWithAlert('Error in bwRequest.displayRequestTaskAuditTrailInDialog()', '2:' + e.message);
                }
            }
            //}
        } catch (e) {
            console.log('Exception in displayRequestTaskAuditTrailInDialog(): ' + e.message + ', ' + e.stack);
        }
    },

    expandOrCollapseWorkflowStep2: function (rowId, imageId, collapsibleRowId, requestDialogParentId) { // collapsibleRowId = steprow-' + stepName.toLowerCase() + '_' + i + '_' + '0'
        try {
            console.log('In expandOrCollapseWorkflowStep2(' + rowId + ', ' + imageId + ', ' + collapsibleRowId + ', ' + requestDialogParentId + ').');
            //
            // Get the steprow_i class name. This is how we identify the underlying rows so that we can collapse or expand the whole step/section.
            var rowindex = imageId.split('stepimage_')[1];
            var stepSectionClass = 'steprow_' + rowindex;
            var img = $('#' + requestDialogParentId).find('#' + imageId)[0];

            var urlClosed = this.options.operationUriPrefix + 'images/drawer-close.png'; //https://budgetworkflow.com/images/drawer-close.png
            var urlOpened = this.options.operationUriPrefix + 'images/drawer-open.png';
            var collapsibleRow = $('#' + requestDialogParentId).find('#' + collapsibleRowId)[0];
            if (img.src == urlClosed) {
                img.src = urlOpened;
                //collapsibleRow.style.display = 'none';
                var elems = $('#' + requestDialogParentId).find('.' + stepSectionClass);
                for (var i = 0; i < elems.length; i++) {
                    elems[i].style.display = 'none';
                }
            } else {
                img.src = urlClosed;
                //collapsibleRow.style.display = 'table-row';
                var elems = $('#' + requestDialogParentId).find('.' + stepSectionClass);
                for (var i = 0; i < elems.length; i++) {
                    elems[i].style.display = 'table-row';
                }
            }

            // Since a workflow step has been either expanded or collapsed, we need to redraw the lines.
            //this.renderOrgRoleConnectorsToWorkflow(true); // lastSelectedDivisionGroupEntityLocationIndexes: null, // lastSelectedDivisionGroupEntityLocation { Division, Group, LegalEntity, Location }

        } catch (e) {
            console.log('Exception in expandOrCollapseWorkflowStep2(): ' + e.message + ', ' + e.stack);
        }
    },

    RequestARevisionToThisChecklist: function (bwChecklistId) {
        try {
            console.log('In RequestARevisionToThisChecklist().');

            //alert('In RequestARevisionToThisChecklist().');

        } catch (e) {
            console.log('Exception in RequestARevisionToThisChecklist(): ' + e.message + ', ' + e.stack);
        }
    },

    renderCreateRequestFullFormOnline: function (tagName) {

        console.log('In renderCreateRequestFullFormOnline().');
        var thiz = this;
        alert('In renderCreateRequestFullFormOnline(). cmdCreateBudgetRequestAndStartWorkflow method is called in here but not set with correct attributes.');
        // Display the form.
        // debugger;
        var promise = this.renderRequestFormHtml_CapitalPlan_ExistingRequestScreen();
        promise.then(function (result) {
            try {
                // debugger;
                document.getElementById(tagName).innerHTML = result; //this.renderRequestFormHtml();
                // Display the instructions.
                document.getElementById('spanRequestForm_Instructions').innerHTML = 'zComplete the form then click the "Submit" button.';
                // Display the buttons.
                var html = '';
                html += '                        <button onclick="$(\'#divCreateRequestFormDialog\').dialog(\'close\');" class="BwButton200ForRequestForm">Save</button>';
                html += '                        &nbsp;';

                // 1-13-2022
                //html += '                        <button name="startWorkflowButton" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', \'divRequestFormDialog\', \'\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submitxcx4</button>';
                html += '                        <button name="startWorkflowButton" xcx="xcx22354235-5" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', this, \'\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submitxcx4</button>';



                html += '                        &nbsp;';
                html += '                        <button onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
                // debugger; // 7-9-2020 is this the place to add the Save button? xcx3
                thiz.renderRequestFormButtons(tagName, null, null, html, 'xcx445566-12');
                //document.getElementById('spanRequestForm_Buttons').innerHTML = html;




                var clients = [
                    //{ "Description": "Storage", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                    //{ "Description": "New equipment", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                    //{ "Description": "Labor", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                    //{ "Description": "Contracting", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                    //{ "Description": "Financing costs", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 }
                ];

                var countries = [
                    {
                        Name: "", Id: 0
                    },
                    {
                        Name: "United States", Id: 1
                    },
                    {
                        Name: "Canada", Id: 2
                    },
                    {
                        Name: "United Kingdom", Id: 3
                    }
                ];

                $("#jsGridCosts").jsGrid({
                    width: "100%",
                    height: "100%", //"auto",
                    //overflowX: hidden,

                    inserting: true,
                    editing: true,
                    sorting: true,
                    paging: true,

                    data: clients,
                    noDataContent: "xClick the \"Plus\" (+) sign to add a Cost item...",
                    fields: [
                        {
                            name: "Description", type: "text", width: 150, validate: "required"
                        },
                        {
                            name: "Lease", type: "number", width: 50
                        },
                        {
                            name: "Expense", type: "number", width: 50
                        },
                        {
                            name: "Capital", type: "number", width: 50
                        },
                        {
                            name: "Total", type: "number", width: 50
                        },
                        {
                            type: "control"
                        }
                    ]
                });

                $("#jsGridPayback").jsGrid({
                    width: "100%",
                    height: "auto",

                    inserting: true,
                    editing: true,
                    sorting: true,
                    paging: true,

                    data: clients,
                    noDataContent: "xClick the \"Plus\" (+) sign to add a Payback item...",
                    fields: [
                        {
                            name: "Description", type: "text", width: 150, validate: "required"
                        },
                        {
                            name: "Lease", type: "number", width: 50
                        },
                        {
                            name: "Expense", type: "number", width: 50
                        },
                        {
                            name: "Capital", type: "number", width: 50
                        },
                        {
                            name: "Total", type: "number", width: 50
                        },
                        {
                            type: "control"
                        }
                    ]
                });

                $("#jsGridOngoingCosts").jsGrid({
                    width: "100%",
                    height: "auto",

                    inserting: true,
                    editing: true,
                    sorting: true,
                    paging: true,

                    data: clients,
                    noDataContent: "xClick the \"Plus\" (+) sign to add an Ongoing Costs item...",
                    fields: [
                        {
                            name: "Description", type: "text", width: 150, validate: "required"
                        },
                        {
                            name: "Lease", type: "number", width: 50
                        },
                        {
                            name: "Expense", type: "number", width: 50
                        },
                        {
                            name: "Capital", type: "number", width: 50
                        },
                        {
                            name: "Total", type: "number", width: 50
                        },
                        {
                            type: "control"
                        }
                    ]
                });

                //

                //var displayAttachmentsTagName = 'OfflineRequestnewrequestattachments';
                //this.populateOfflineAttachments(displayAttachmentsTagName);

            } catch (e) {
                console.log('Exception in renderCreateRequestFullFormOnline(): ' + e.message + ', ' + e.stack);
            }
        })

    },

    renderCreateRequestFullFormOffline: function (tagName) {

        console.log('In renderCreateRequestFullFormOffline(). Getting ready to call getRequestFormHtml() for an offline form.');
        var thiz = this;
        alert('In renderCreateRequestFullFormOffline(). Getting ready to call getRequestFormHtml() for an offline form.');


        if (!tagName) {
            tagName = 'divRequestFormDialogContent';
        }



        // Display the form.
        // debugger;
        //alert('xcx235-7 getting ready to call getRequestFormHtml(). bwRequestType not specified.');
        var elementId = 'xcx435367'; // 12-22-2021 "divRequestFormDialog_dd1fd1d8-8f20-4f99-9d7d-03c01ff71c8a"

        //var requestType = {
        //    Abbreviation: 'offlinerequest',
        //    RequestType: 'offlinerequest',
        //    bwRequestTypeId: ''
        //}

        alert('xcx9895: !!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<');

        // debugger; // xcx9895
        var promise = this.getRequestFormHtml('offlinerequest', true, null, 'xcx23452-13'); //bwRequestType.bwRequestTypeId); //renderRequestFormHtml_CapitalPlan_ExistingRequestScreen(); // changed 10-17-2020
        promise.then(function (result) {
            try {
                // debugger;
                document.getElementById(tagName).innerHTML = result.html; //this.renderRequestFormHtml();
                // Display the instructions.
                document.getElementById('spanRequestForm_Instructions').innerHTML = 'zComplete the form then click the "Submit" button.';
                // Display the buttons.
                var html = '';
                html += '                        <button onclick="$(\'#divCreateRequestFormDialog\').dialog(\'close\');" class="BwButton200ForRequestForm">Save</button>';
                html += '                        &nbsp;';


                html += '                        <button name="startWorkflowButton" xcx="xcx22354235-6" id="startWorkflowButton" onclick="$(\'.bwRequest\').bwRequest(\'cmdCreateBudgetRequestAndStartWorkflow\', this, \'\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submitxcx4</button>';




                html += '                        &nbsp;';
                html += '                        <button onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
                // debugger; // 7-9-2020 is this the place to add the Save button? xcx3
                thiz.renderRequestFormButtons(tagName, null, null, html, 'xcx445566-13');

                //document.getElementById('spanRequestForm_Buttons').innerHTML = html;




                // var clients = [
                ////{ "Description": "Storage", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                ////{ "Description": "New equipment", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                ////{ "Description": "Labor", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                ////{ "Description": "Contracting", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 },
                ////{ "Description": "Financing costs", "Lease": 25, "Expense": 1, "Capital": 0, "Total": 0 }
                // ];

                // var countries = [
                //     {
                //         Name: "", Id: 0
                //     },
                //     {
                //         Name: "United States", Id: 1
                //     },
                //     {
                //         Name: "Canada", Id: 2
                //     },
                //     { Name: "United Kingdom", Id: 3 }
                // ];

                // $("#jsGridCosts").jsGrid({
                //     width: "100%",
                //     height: "100%", //"auto",
                //     //overflowX: hidden,

                //     inserting: true,
                //     editing: true,
                //     sorting: true,
                //     paging: true,

                //     data: clients,
                //     noDataContent: "xClick the \"Plus\" (+) sign to add a Cost item...",
                //     fields: [
                //         {
                //             name: "Description", type: "text", width: 150, validate: "required"
                //         },
                //         {
                //             name: "Lease", type: "number", width: 50
                //         },
                //         {
                //             name: "Expense", type: "number", width: 50
                //         },
                //         {
                //             name: "Capital", type: "number", width: 50
                //         },
                //         {
                //             name: "Total", type: "number", width: 50
                //         },
                //         { type: "control" }
                //     ]
                // });

                // $("#jsGridPayback").jsGrid({
                //     width: "100%",
                //     height: "auto",

                //     inserting: true,
                //     editing: true,
                //     sorting: true,
                //     paging: true,

                //     data: clients,
                //     noDataContent: "xClick the \"Plus\" (+) sign to add a Payback item...",
                //     fields: [
                //         {
                //             name: "Description", type: "text", width: 150, validate: "required"
                //         },
                //         {
                //             name: "Lease", type: "number", width: 50
                //         },
                //         {
                //             name: "Expense", type: "number", width: 50
                //         },
                //         {
                //             name: "Capital", type: "number", width: 50
                //         },
                //         {
                //             name: "Total", type: "number", width: 50
                //         },
                //         { type: "control" }
                //     ]
                // });

                // $("#jsGridOngoingCosts").jsGrid({
                //     width: "100%",
                //     height: "auto",

                //     inserting: true,
                //     editing: true,
                //     sorting: true,
                //     paging: true,

                //     data: clients,
                //     noDataContent: "xClick the \"Plus\" (+) sign to add an Ongoing Costs item...",
                //     fields: [
                //         {
                //             name: "Description", type: "text", width: 150, validate: "required"
                //         },
                //         {
                //             name: "Lease", type: "number", width: 50
                //         },
                //         {
                //             name: "Expense", type: "number", width: 50
                //         },
                //         {
                //             name: "Capital", type: "number", width: 50
                //         },
                //         {
                //             name: "Total", type: "number", width: 50
                //         },
                //         { type: "control" }
                //     ]
                // });

                //

                //var displayAttachmentsTagName = 'OfflineRequestnewrequestattachments';
                //this.populateOfflineAttachments(displayAttachmentsTagName);

            } catch (e) {
                console.log('Exception in renderCreateRequestFullFormOffline(): ' + e.message + ', ' + e.stack);
            }
        })

    },

    cmdDisplayClientRequestsNotYetSubmittedDialog: function (displayList) {
        // Check if there are any requests stored in IndexDB locally. If so, prompt to submit the requests now.

        console.log('In cmdDisplayClientRequestsNotYetSubmittedDialogReadyToSubmit().');

        try {
            //var request = indexedDB.open(indexDBName, dbVersion);
            var thiz = this;
            if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            } else {
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
            }
            request.onblocked = function (event) {
                console.log("indexDB BLOCKED1. errorCode: " + event.target.errorCode);
            };
            request.onerror = function (event) {
                console.log('In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog(). Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
            };

            request.onsuccess = function (event) {
                console.log('In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog(). Success accessing database "' + event.target.result.name + '".');
                var db = event.target.result;

                db.onerror = function (event) {
                    console.log('Error In bwRequest.js.displayForm_DisplayCachedAr(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                };

                try {
                    var store = db.transaction('objectStoreCachedRequests', 'readonly');
                    var req;
                    req = store.objectStore('objectStoreCachedRequests').count();
                } catch (e) {
                    console.log('In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog().XXXXXXXXXXXerror: ' + e.message);
                }
                req.onsuccess = function (evt) {
                    // This is where we need to display the "Un-submitted Requests" dialog.
                    if (evt.target.result == 1 && displayList != true) {
                        // We only have to handle 1 un-submitted request.
                        var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                        objectStore.openCursor().onsuccess = function (event) {
                            try {
                                var cursor = event.target.result;
                                if (cursor) {
                                    var requestId = cursor.value.bwBudgetRequestId;

                                    // There is only one, so display it.
                                    console.log('Getting ready to display bwBudgetRequestId: ' + requestId);
                                    //cmdRenderAndLoadNewRequestFormWithUnsubmittedRequest(requestId);
                                    thiz.displayForm_DisplayCachedAr(requestId);

                                    //document.getElementById('spanClientRequestsNotYetSubmittedDialogTitle').innerHTML = 'A Request on this device is waiting to be submitted.'; // Set the title to reflect that there is only 1 request saved on the device.
                                    //document.getElementById('divClientRequestsNotYetSubmittedContent').innerHTML = ''; // Clear the last stuff.
                                    //var html = '';
                                    //html += '<span style="font-size:small;font-style:italic;">DEV: This functionality is incomplete and is in development!</span>';
                                    //html += '<br />';
                                    //html += '<br />';
                                    //html += 'You have ' + evt.target.result + ' request saved on this device that has not been submitted.';
                                    //html += '<br />';
                                    //html += '<span style="font-style:italic;font-size:small;">(If this device runs low on storage, your web browser may delete it without asking you.)</span>';
                                    //html += '<br /><br />';
                                    //html += '<div id="xxxx" class="divSignInButton" onclick="cmdRenderAndLoadNewRequestFormWithUnsubmittedRequest(\'' + requestId + '\');" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;">';
                                    //html += 'Review this Request<br />[show the form]';
                                    //html += '</div>';
                                    //document.getElementById('divClientRequestsNotYetSubmittedContent').innerHTML = html;
                                }
                            } catch (e) {
                                console.log('In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog(). xyyyyy...' + e.message + ', ' + e.stack);
                            }
                        };

                    } else if (evt.target.result > 1 || displayList == true) {
                        // We have to handle multiple un-submitted requests.
                        document.getElementById('spanClientRequestsNotYetSubmittedDialogTitle').innerHTML = evt.target.result + ' Requests on this device are waiting to be submitted.'; // Set the title to reflect that there are more than 1 request saved on the device.
                        document.getElementById('divClientRequestsNotYetSubmittedContent').innerHTML = ''; // Clear the last stuff.
                        var html = '';
                        //html += '<span style="font-size:small;font-style:italic;">DEV: This functionality is incomplete and is in development!</span>';
                        //html += '<br />';
                        //html += '<br />';
                        //html += 'You have ' + evt.target.result + ' requests saved on this device that have not been submitted.';
                        //html += '<br />';
                        html += '<span style="font-style:italic;font-size:30pt;">If this device runs low on storage, it may delete them without asking you.</span>';
                        html += '<br />';
                        html += '<br />';
                        html += '<br />';

                        // Top row.
                        html += '<table class="myStuffTable" style="width:100%;">';
                        //html += '  <tr>';
                        //html += '    <td style="font-size:30pt;font-weight:normal;">Title</td>';
                        //html += '    <td></td>';
                        //html += '  </tr>';
                        html += '  <tr>';
                        html += '    <td class="bwHPNDrillDownLinkCell" style="text-align:left;" colspan="2"><span>There are ' + evt.target.result + ' requests saved on this device.</span></td>';
                        html += '  </tr>';


                        // Second row.
                        //html += '  <tr>';
                        //html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                        //html += '    <td>xdescription</td>';
                        //html += '    <td>xtimestamp</td>';
                        //html += '    <td></td>';
                        //html += '  </tr>';

                        // Third row(s).
                        var numberOfRequests = evt.target.result;
                        var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                        objectStore.openCursor().onsuccess = function (event) {
                            try {
                                var cursor = event.target.result;
                                if (cursor) {
                                    var projectTitle = cursor.value.ProjectTitle;
                                    if (projectTitle == '') {
                                        projectTitle = '<em>[no description]</em>';
                                    }
                                    console.log('Retrieved request: ' + projectTitle + ': ' + cursor.value.bwBudgetRequestId);
                                    html += '  <tr>';
                                    html += '    <td class="tdHomePageSubNotificationIos8" style="cursor:pointer;width:95%;" onclick="displayForm_DisplayCachedAr(\'' + cursor.value.bwBudgetRequestId + '\');">';
                                    html += '      <div style="display:inline-block;">';
                                    html += '        <span title="Click to view the request." style="cursor:pointer;font-size:30pt;width:100%;">' + projectTitle + ' (<em>' + thiz.formatCurrency(cursor.value.RequestedCapital) + '</em>)</span>'; // - <em>' + cursor.value.fileDescription + '</em></span>';
                                    html += '      </div>';
                                    html += '    </td>';
                                    html += '    <td>';
                                    //html += '      <img src="images/trash-can.png" onclick="cmdDisplayDeleteUnsubmittedBudgetRequestDialog(\'' + cursor.value.bwBudgetRequestId + '\', \'' + cursor.value.ProjectTitle + '\', \'' + cursor.value.RequestedCapital + '\');" title="Delete" style="cursor:pointer;" />';
                                    html += '      <img src="images/trash-can.png" onclick="$(\'.bwRequest\').bwRequest(\'cmdDisplayDeleteUnsubmittedBudgetRequestDialog\', \'' + cursor.value.bwBudgetRequestId + '\', \'' + projectTitle + '\', \'' + cursor.value.RequestedCapital + '\');" title="Delete" class="trashcan" style="cursor:pointer;">';
                                    html += '    </td>';
                                    html += '  </tr>';


                                    //html += '  <tr>';
                                    //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:25pt;"><a href="javascript:displayForm_DisplayCachedAr(\'' + cursor.value.bwBudgetRequestId + '\');">' + cursor.value.ProjectTitle + '</a></td>';
                                    ////html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxdesc</td>';
                                    ////html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxts</td>';
                                    //html += '    <td>';
                                    //html += '      <img src="images/trash-can.png" onclick="cmdDisplayDeleteUnsubmittedBudgetRequestDialog(\'' + cursor.value.bwBudgetRequestId + '\', \'' + cursor.value.ProjectTitle + '\');" title="Delete" style="cursor:pointer;" />';
                                    //html += '    </td>';
                                    //html += '  </tr>';


                                    cursor.continue();
                                } else {
                                    console.log('DONE LOOPING, so rendering.');
                                    html += '<tr><td colspan="12"></td></tr>'; // DONE
                                    html += '</table>';
                                    document.getElementById('divClientRequestsNotYetSubmittedContent').innerHTML = html;

                                    $("#divClientRequestsNotYetSubmittedDialog").dialog({
                                        modal: true,
                                        resizable: false,
                                        //closeText: "Cancel",
                                        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                                        width: "800",
                                        dialogClass: "no-close", // No close button in the upper right corner.
                                        hide: false,//, // This means when hiding just disappear with no effects.
                                        //buttons: {
                                        //    "Close": function () {
                                        //        $(this).dialog("close");
                                        //    }
                                        //}
                                        open: function (event, ui) {
                                            $('.ui-widget-overlay').bind('click', function () {
                                                $("#divClientRequestsNotYetSubmittedDialog").dialog('close');
                                            });
                                        } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                    });
                                    $("#divClientRequestsNotYetSubmittedDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                                }
                            } catch (e) {
                                console.log('xxError: ' + e.message + ', ' + e.stack);
                            }
                        };



                    }


                };

                req.onerror = function (evt) {
                    console.error("In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog(). add error", this.error);
                };
            }
        } catch (e) {
            console.log('In bwRequest.js.cmdDisplayClientRequestsNotYetSubmittedDialog(). FAILED TO OPEN A TRANSACTION to the database...' + e.message + ', ' + e.stack);
        }
    },

    formatRequestedExpense: function () {
        var x = this.formatCurrency($('span[xd\\:binding = "my:Requested_Expense"]')[0].innerHTML);
        $('span[xd\\:binding = "my:Requested_Expense"]')[0].innerHTML = x;
    },
    formatRequestedCapital: function () {
        var x = this.formatCurrency($('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML);
        $('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML = x;
    },
    formatCurrency2: function (binding) {
        try {
            var isIos = false;
            var content = "";
            try {
                content = $('span[xd\\:binding = "' + binding + '"]')[0].innerHTML.trim();
            } catch (e) {
                // This means it is the iOS version.
                content = $('input[xd\\:binding = "' + binding + '"]')[0].value;
                isIos = true;
            }

            try {
                if (content === "" || content === "0" || content === "$0.00" || content === "NaN") {
                    if (isIos == true) {
                        $('input[xd\\:binding = "' + binding + '"]')[0].value = "";
                    } else {
                        $('span[xd\\:binding = "' + binding + '"]')[0].innerHTML = "";
                    }
                } else {
                    if (isIos == true) {
                        var x = this.formatCurrencyWithoutDollarSign(content);
                        $('input[xd\\:binding = "' + binding + '"]')[0].value = x;
                    } else {
                        var x = this.formatCurrency(content);
                        $('span[xd\\:binding = "' + binding + '"]')[0].innerHTML = x;
                    }
                }
            } catch (e3) {
                this.WriteToErrorLog('bwm.core.js.formatCurrency2(' + binding + ')', 'Could not assign a value to this element. Message: ' + e3.message);
            }

            this.recalculateCosts();
        } catch (e) {
            // Log an exception!
            var source = 'bwm.core.js.formatCurrency2(' + binding + ')';
            var message = e.message + ' ' + e.stack;
            this.WriteToErrorLog(source, message);
        }
    },

    loadXslFiles: function () {
        var thiz = this;
        // debugger;

        //var request = indexedDB.open(indexDBName, dbVersion);
        if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
            var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
        } else {
            var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
        }

        request.onblocked = function (event) {
            console.log('In bw.offline.core.js.loadXslFiles().request.onblocked: indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
        };

        request.onerror = function (event) {
            console.log('In bw.offline.core.js.loadXslFiles().request.onerror: Error opening IndexedDB database1. errorCode: ' + event.target.errorCode);
        };

        request.onsuccess = function (event) {
            var db = event.target.result;

            db.onerror = function (e) {
                console.log('In bw.offline.core.js.loadXslFiles().request.onsuccess.db.onerror: ERRRRRRRRRRRRRRRRRRRR: This may not happen in other browsers and unique to edge, but not confirmed (todd): ' + e.message + ', ' + e.target.errorMessage + ', ' + e.target.name);
            };

            var xslFiles = [];
            //xslFiles = new Array();
            // These are stored as ['path', 'internal-name'].

            // PC views.
            xslFiles.push(['/views/UnsubmittedBudgetRequest.xsl', 'UnsubmittedBudgetRequest']); // The file extension of .xsl is appended below.
            xslFiles.push(['/views/UnsubmittedQuoteRequest.xsl', 'UnsubmittedQuoteRequest']);
            xslFiles.push(['/views/UnsubmittedReimbursementRequest.xsl', 'UnsubmittedReimbursementRequest']);
            xslFiles.push(['/views/UnsubmittedRecurringExpense.xsl', 'UnsubmittedRecurringExpense']);

            //xslFiles.push(['/views/UnsubmittedBudgetRequestPrintableHtml.xsl', 'UnsubmittedBudgetRequestPrintableHtml']); // These are the printable xsl files.
            //xslFiles.push(['/views/UnsubmittedQuoteRequestPrintableHtml.xsl', 'UnsubmittedQuoteRequestPrintableHtml']);
            //xslFiles.push(['/views/UnsubmittedReimbursementRequestPrintableHtml.xsl', 'UnsubmittedReimbursementRequestPrintableHtml']);
            //xslFiles.push(['/views/UnsubmittedRecurringExpensePrintableHtml.xsl', 'UnsubmittedRecurringExpensePrintableHtml']);

            // Mobile views.
            xslFiles.push(['/viewsIos8/UnsubmittedBudgetRequest.xsl', 'UnsubmittedBudgetRequestIos8']); // The file extension of .xsl is appended below.
            xslFiles.push(['/viewsIos8/UnsubmittedQuoteRequest.xsl', 'UnsubmittedQuoteRequestIos8']);
            xslFiles.push(['/viewsIos8/UnsubmittedReimbursementRequest.xsl', 'UnsubmittedReimbursementRequestIos8']);
            xslFiles.push(['/viewsIos8/UnsubmittedRecurringExpense.xsl', 'UnsubmittedRecurringExpenseIos8']);

            // Printable views.
            xslFiles.push(['/viewsPrintableHtml/UnsubmittedBudgetRequestPrintableHtml.xsl', 'UnsubmittedBudgetRequestPrintableHtml']); // These are the printable xsl files.
            xslFiles.push(['/viewsPrintableHtml/UnsubmittedQuoteRequestPrintableHtml.xsl', 'UnsubmittedQuoteRequestPrintableHtml']);
            xslFiles.push(['/viewsPrintableHtml/UnsubmittedReimbursementRequestPrintableHtml.xsl', 'UnsubmittedReimbursementRequestPrintableHtml']);
            xslFiles.push(['/viewsPrintableHtml/UnsubmittedRecurringExpensePrintableHtml.xsl', 'UnsubmittedRecurringExpensePrintableHtml']);
            for (var i = 0; i < xslFiles.length; i++) {
                thiz.getXsltAndStoreInDatabase(db, xslFiles[i][0], xslFiles[i][1]);
            }
        }
    },

    // Check if we have created the indexDB. If not, load the XSL files that we will need in case of losing the network connection.
    getXsltAndStoreInDatabase: function (db, xsltFilePath, xsltDatabaseKey) {
        var thiz = this;
        var xhr = new XMLHttpRequest(), blob;
        xhr.onreadystatechange = function () {
            try {
                if (xhr.status == 200 && xhr.readyState == 4) {

                    blob = xhr.response;

                    console.log('Attempting to put Xsl file "' + xsltFilePath + '" as "' + xsltDatabaseKey + '" into IndexedDB. blob length: ' + blob.length);
                    //var data = {
                    //    xsltFileName: xsltDatabaseKey,
                    //    xslFile: blob.toString()
                    //};

                    var key = '' + xsltDatabaseKey;

                    var put = db.transaction("objectStoreCachedXsltFiles", "readwrite").objectStore("objectStoreCachedXsltFiles").add(blob, key).onsuccess = function (e) {

                        // TODD: I CANNOT KEY THE KEY TO WORK!!!!!!!!!!!!!!!!!!!!!!!!!!!!! I have spent several hours, so leaving it at this for now.
                        console.log('SUCCESSSSSSSSSSSSSS: Stored ' + xsltFilePath + ' as ' + xsltDatabaseKey);

                    };

                }
            } catch (e) {
                console.log('Error in getXsltAndStoreInDatabase.xhr.onreadystatechange(): ' + e.message + ', ' + e.stack);
            }
        };
        //var fileUrl = globalUrlPrefix + globalUrlForWebServices + '/views/' + xsltDatabaseKey + '.xsl'; 
        var fileUrl = thiz.options.operationUriPrefix + xsltFilePath;
        xhr.open("GET", fileUrl, true); // last parameter is async.
        xhr.responseType = "text";
        xhr.send();
    },

    TransformToHtmlTextOffline: function (xml, xsltDoc) {
        //var xmlDoc = $(xml); // This was added 1-27-16 to convert the string to a XmlDocument object.

        //console.log('In TransformToHtmlTextOffline(), xml: ' + xml);

        var thiz = this;

        try {
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xml, "application/xml");

            // IE 7 and IE on Windows 10 stops working from here onwards...
            var xsltDoc2 = parser.parseFromString(xsltDoc, "application/xml");

            // 1.
            if (typeof (XSLTProcessor) != "undefined") {
                console.log('In bwRequest.js.TransformToHtmlTextOffline(): typeof (XSLTProcessor) != "undefined"');

                var xsltProcessor = new XSLTProcessor();
                xsltProcessor.importStylesheet(xsltDoc2);
                var xmlFragment = xsltProcessor.transformToFragment(xmlDoc, document);
                if (typeof (GetXmlStringFromXmlDoc) != "undefined") {
                    console.log('In bwRequest.js.TransformToHtmlTextOffline(): typeof (GetXmlStringFromXmlDoc) != "undefined")');

                    return GetXmlStringFromXmlDoc(xmlFragment);
                } else {
                    //try {
                    // chrome friendly
                    console.log('In bwRequest.js.TransformToHtmlTextOffline(): chrome friendly');

                    var xmls = new XMLSerializer();
                    // convert dom into string
                    var sResult = xmls.serializeToString(xmlFragment);

                    if (sResult.indexOf('XML Parsing Error: syntax error') > -1) {
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): sResult: ' + sResult);
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): xml: ' + xml);
                    }



                    //extract contents of transform iix node if it is present
                    if (sResult.indexOf("<transformiix:result") > -1) {
                        sResult = sResult.substring(sResult.indexOf(">") + 1, sResult.lastIndexOf("<"));
                    }
                    return sResult;
                    //} catch (e) {
                    //    return 'Exception in bw.offline.core.js.TransformToHtmlTextOffline(chrome friendly): ' + e.message + ', ' + e.stack;
                    //}
                }
            }

            // 2.
            if (typeof (xmlDoc.transformNode) != 'undefined') {
                console.log('In bwRequest.js.TransformToHtmlTextOffline(): typeof (xmlDoc.transformNode) != "undefined"');


                return xmlDoc.transformNode(xsltDoc);
            } else {
                // I think this is support for older IE versions!!!!! IE 7?
                var activeXOb = null;

                try {
                    activeXOb = new ActiveXObject("Msxml2.XSLTemplate");
                } catch (e) {
                    console.log('In bwRequest.js.TransformToHtmlTextOffline(): Failed to create new ActiveXObject("Msxml2.XSLTemplate"): ' + e.message + ', ' + e.stack);
                }

                try {
                    // 3
                    if (activeXOb) {
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): activeXOb');

                        var xslt = activeXOb;
                        var xslDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument");
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Preparing to load xml into Msxml2.FreeThreadedDOMDocument');

                        xslDoc.loadXML(xsltDoc); // xslDoc.loadXML(xsltDoc.xml);
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Successful: xslDoc.loadXML(xsltDoc.xml). xsltDoc: ' + xsltDoc + '. xsltDoc.xml: ' + xsltDoc.xml);


                        // THIS IS WHERE IT FAILS (IE)!!!!!
                        // There was an error parsing XSLT: Error, The stylesheet does not contain a document element. 
                        // The stylesheet may be empty, or it may not be a well-formed XML document.
                        xslt.stylesheet = xslDoc;
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Successful: xslt.stylesheet = xslDoc;');



                        var xslProc = xslt.createProcessor();
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Successful: var xslProc = xslt.createProcessor();');

                        xslProc.input = xmlDoc;
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Successful: xslProc.input = xmlDoc;');

                        xslProc.transform();
                        console.log('In bwRequest.js.TransformToHtmlTextOffline(): Successful: xslProc.transform();');

                        return xslProc.output;
                    }
                }
                catch (e) {
                    // 4.
                    // This happens in IE on Windwos 10.
                    displayAlertDialog('There was an error parsing XSLT.'); // not supported by this browser.');
                    console.log('Error In bwRequest.js.TransformToHtmlTextOffline(): There was an error parsing XSLT: ' + e.name + ', ' + e.message);
                    thiz.WriteToErrorLog('Error In bwRequest.js.TransformToHtmlTextOffline()', 'There was an error parsing XSLT: ' + e.name + ', ' + e.message);
                    thiz.WriteToErrorLog('Error In bwRequest.js.TransformToHtmlTextOffline()', xml);
                    return null;
                }

            }
        } catch (e) {
            console.log('Error in TransformToHtmlTextOffline: ' + e.message + ', ' + e.stack);
        }
    },

    displayForm_DisplayCachedAr: function (budgetRequestId) {

        // First we try to get the XSLT from the server. If it times out, we get it from indexDB.


        // WE ARE ONLY DOING THIS TO MAKE SURE WE HAVE LATEST XSLT WHILE TESTING! REMOVE IN PRODUCTION! - Todd
        //loadXslFiles();
        try {
            $('#divClientRequestsNotYetSubmittedDialog').dialog('close');
        } catch (e) {
            // This makes sure the dialog is closed.
        }

        //var request = indexedDB.open(indexDBName, dbVersion);
        var thiz = this;
        if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
            var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
        } else {
            var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
        }
        request.onblocked = function (event) {
            console.log('In bwRequest.js.displayForm_DisplayCachedAr(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
            displayAlertDialog('In bwRequest.js.displayForm_DisplayCachedAr(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
        };

        request.onerror = function (event) {
            console.log('In bwRequest.js.displayForm_DisplayCachedAr(): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
            displayAlertDialog('In bwRequest.js.displayForm_DisplayCachedAr(): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
        };

        request.onsuccess = function (event) {
            console.log('In bwRequest.js.displayForm_DisplayCachedAr(): Success accessing database "' + event.target.result.name + '".');
            var db = event.target.result;

            db.onerror = function (event) {
                console.log('Error In bwRequest.js.displayForm_DisplayCachedAr(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                displayAlertDialog('Error In bwRequest.js.displayForm_DisplayCachedAr(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
            };

            //var objectStoreForXslFile = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
            db.transaction("objectStoreCachedXsltFiles").objectStore("objectStoreCachedXsltFiles").get("UnsubmittedBudgetRequestIos8").onsuccess = function (event) {
                var xslt = event.target.result; // This is the cached XSL file.

                if (xslt) {


                    //db.transaction("objectStoreCachedXsltFiles").objectStore("objectStoreCachedXsltFiles").get("UnsubmittedBudgetRequestPrintableHtml").onsuccess = function (event) {
                    //    var xsltPrintableHtml = event.target.result; // This is the cached XSL file.

                    //    if (xsltPrintableHtml) {


                    console.log('In bwRequest.js.displayForm_DisplayCachedAr(' + budgetRequestId + '). Loaded the Xsl file from the indexDB!');
                    var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");

                    objectStore.openCursor().onsuccess = function (event) {
                        try {
                            var cursor = event.target.result;
                            if (cursor) {
                                if (cursor.value.bwBudgetRequestId == budgetRequestId) {
                                    status = '<img class="imgRedDot" alt="" src="/images/red-dot.png"> You will be prompted to submit this request the next time you <a href="javascript:displayCustomLogonDialog();">sign in.</a>';

                                    var xml = cursor.value.bwDocumentXml;
                                    var s = thiz.TransformToHtmlTextOffline(xml, xslt);



                                    // WE CAN'T DO THIS because we will have duplicate element ID's in the DOM!!!!!!!
                                    // CRAP WHAT ARE WE GOING TO DO????? :/ :/ :?
                                    //var sPrintableHtml = TransformToHtmlTextOffline(xml, xsltPrintableHtml);

                                    console.log('In bwRequest.js.displayForm_DisplayCachedAr(' + budgetRequestId + '). Preparing to display in divOfflineRequestFormPageMainPageContent.');
                                    document.getElementById('divOfflineRequestFormDialogContent').innerHTML = s;

                                    // Display the dialog.
                                    $("#divOfflineRequestFormDialog").dialog({
                                        modal: true,
                                        resizable: false,
                                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                        width: "1100",
                                        dialogClass: "no-close", // No close button in the upper right corner.
                                        hide: false,//, // This means when hiding just disappear with no effects.
                                        open: function (event, ui) {
                                            // Todd: I originally commented this out because we don't want the user to close this by accident and lose everything they have typed in!
                                            // They must click the "Close" button for this form to be closed, or perhaps prompt to save changes. ADD THIS!!!
                                            $('.ui-widget-overlay').bind('click', function () {
                                                $("#divOfflineRequestFormDialog").dialog('close');
                                            });


                                            //$('#liOfflineRequestForm').show(); // GET RID OF THIS! THIS SHOULD NOT BE HAPPENING HERE! 
                                            console.log('Completed display in displayForm_DisplayCachedAr divOfflineRequestFormPageMainPageContent.');
                                            try {
                                                //$('span[xd\\:binding = "my:Status"]')[0].innerHTML = status;
                                                //decodeUriInAllFields();
                                                //formatRequestedExpense();
                                                //formatRequestedCapital();
                                                //formatCurrency2('my:Budget_Amount2');

                                                //if (xslFile.indexOf('CreateArEditForm.xsl') > -1) formatStartAndEndDates();

                                                //formatCurrency2('my:ExpenseEquipmentAndParts');
                                                //formatCurrency2('my:CostOfEquipmentAndParts');
                                                //formatCurrency2('my:ExpenseInternalLabor');
                                                //formatCurrency2('my:CostOfInternalLabor');
                                                //formatCurrency2('my:ExpenseCostOfOutsideServices');
                                                //formatCurrency2('my:CostOfOutsideServices');
                                                //formatCurrency2('my:OtherExpense');
                                                //formatCurrency2('my:OtherCapital');
                                                //formatCurrency2('my:SalesTax');
                                                //recalculateCosts();

                                                console.log('In bwRequest.js.displayForm_DisplayCachedAr(): Populating offline attachments 1!!!!')
                                                //if (xslFile.indexOf('CreateArEditForm.xsl') > -1) populateOfflineAttachments(budgetRequestId); //workflowAppId, budgetRequestId, 'attachmentsInXslForm', true);
                                                //else populateOfflineAttachments(budgetRequestId); //workflowAppId, budgetRequestId, 'attachmentsInXslForm', false);
                                                thiz.populateOfflineAttachments('attachmentsInXslForm'); // Don't need to pass the budgetRequestId because it gets it from the dom element.

                                                //if (xslFile.indexOf('CreateArEditForm.xsl') > -1) {
                                                //    // Get rid of the empty elements in the <ol> tag.
                                                //    clearEmptyListItems();
                                                //}

                                            } catch (e) {
                                                displayAlertDialog('Exception In bwRequest.js.displayForm_DisplayCachedAr(): ' + e.message + e.stack);
                                            }



                                        } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                    });
                                    $("#divOfflineRequestFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();





                                }
                                cursor.continue();
                            } else {
                                console.log('In bwRequest.js.displayForm_DisplayCachedAr. DONE LOOPING.');

                            }
                        } catch (e) {
                            console.log('Exception In bwRequest.js.displayForm_DisplayCachedAr. xxError: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('Exception In bwRequest.js.displayForm_DisplayCachedAr. xxError: ' + e.message + ', ' + e.stack);
                        }
                    };



                    //    } else {
                    //        console.log('ERRROR LOADING XSL(PrintableHtml) FILE!!! ' + xsltPrintableHtml); // console.log("xxGot Xsl file from the indexDB! "); // + imgFile); 
                    //        displayAlertDialog('ERRROR LOADING XSL(PrintableHtml) FILE!!!');
                    //    }

                    //};



                } else {
                    console.log('ERRROR LOADING XSL FILE!!! ' + xslt); // console.log("xxGot Xsl file from the indexDB! "); // + imgFile); 
                    displayAlertDialog('ERRROR LOADING XSL FILE!!!');
                }

            };
        };
    },

    PrintRequest: function () {

        $('#PrintDialog').dialog('close');
        var thiz = this;
        try {
            // Then we iterate throgh all of the html elements, and display set to inline.

            // In order to avoid duplicate element id's, we are storing this, replacing it with the printable version, then putting it back after it is printed!
            // It should work!
            try {
                var bwBudgetRequestId = document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML;
            } catch (e) {
                // Todd: This is here because the index.html uses this tag instead. Rework this at some point to get rid of this try-catch!
                try {
                    var bwBudgetRequestId = document.getElementById('UnsubmittedBudgetRequestId').innerHTML;
                } catch (e) {
                    var bwBudgetRequestId = document.getElementById('XslFormBudgetRequestId').innerHTML; // 
                }

                //
            }
            var originalFormBeforePrinting = document.getElementById('divDocumentBody').innerHTML;

            $("#divOfflineRequestFormDialog").dialog('close');

            // Now lets generate the new one (the printable version)...
            var promise = thiz.displayForm_DisplayCachedArWithPrintableHtml(bwBudgetRequestId);
            promise.then(function (result) {
                //printOutput("Result: " + result);

                console.log('Declaring attachment to the window.onafterprint event. This doesn\'t seem to work on MacBook Safari, or iOS (Safari and Chrome).');

                window.onafterprint = function (e) {
                    try {
                        console.log('Print Dialog Closed.');

                        // Put back the original contents into the dom, and re-display the form dialog.
                        document.getElementById('divDocumentBody').innerHTML = originalFormBeforePrinting;
                        $("#divOfflineRequestFormDialog").dialog('open');

                    } catch (e) {
                        console.log('Exception in window.onafterprint: ' + e.message);
                    }
                };


                console.log('navigator.userAgent: ' + navigator.userAgent);

                console.log('window.matchMedia: ' + window.matchMedia);

                //if ((navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) && !navigator.userAgent.match(/CriOS/i)) {
                //    // DOESNT WORK YET! THESE MAY HAVE ASYNC window.print call but no onafterprint event???
                //    if (window.matchMedia) {
                //        var printQuery = window.matchMedia('print');
                //        printQuery.addListener(function () {
                //            var screenQuery = window.matchMedia('screen');
                //            screenQuery.addListener(function () {
                //                //actions after print dialog close here
                //                console.log('Print Dialog Closed2. Safari on iOS?');
                //                displayAlertDialog('Print Dialog Closed2. Safari on iOS?');
                //                // Put back the original contents into the dom, and re-display the form dialog.
                //                document.getElementById('divDocumentBody').innerHTML = originalFormBeforePrinting;
                //                $("#divOfflineRequestFormDialog").dialog('open');
                //            });
                //        });
                //    }
                //} else if ((navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) && navigator.userAgent.match(/CriOS/i)) {
                if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {

                    var beforePrint = function () {
                        console.log('Functionality to run before printing.');
                    };

                    var afterPrint = function () {
                        console.log('Functionality to run after printing');

                        // Put back the original contents into the dom, and re-display the form dialog.
                        document.getElementById('divDocumentBody').innerHTML = originalFormBeforePrinting;
                        $("#divOfflineRequestFormDialog").dialog('open');
                    };

                    if (window.matchMedia) {
                        var mediaQueryList = window.matchMedia('print');
                        mediaQueryList.addListener(function (mql) {
                            if (mql.matches) {
                                beforePrint();
                            } else {
                                afterPrint();
                            }
                        });
                    }

                    window.onbeforeprint = beforePrint;

                    window.onafterprint = afterPrint;

                } else if (navigator.userAgent.match(/Macintosh/i) && navigator.userAgent.match(/Safari/i)) {
                    console.log('Print Dialog Closed4. Safari on Macintosh?');
                    // Put back the original contents into the dom, and re-display the form dialog.
                    document.getElementById('divDocumentBody').innerHTML = originalFormBeforePrinting;
                    $("#divOfflineRequestFormDialog").dialog('open');
                }

                window.print(); // In Safari on MacBook, and Safari & Chrome on iOS, this is a synchronous call!!! (unlike most other situations where it is asynchronous).
                console.log('window.print() has just been executed. In Safari on MacBook, and Safari & Chrome on iOS, this is a synchronous call.');
            });

        } catch (e) {
            console.log('Error in bw.offline.core.js.PrintRequest(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Error in bw.offline.core.js.PrintRequest()x: ' + e.message + ', ' + e.stack);
        }

        // See the following for custom css to use the media = print attribute. We are not using any aspects of this approach yet.
        // https://www.arclab.com/en/kb/htmlcss/how-to-print-a-specific-part-of-a-html-page-css-media-screen-print.html

    },

    cmdPrintForm: function () {
        // This is called from the print button on the views.
        //displayAlertDialog('Enhanced print functionality is coming soon! In the meantime, just print this page from your browser.');


        $('#PrintDialog').dialog({
            modal: true,
            resizable: false,
            //closeText: "Cancel",
            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //title: 'Sign Up',
            width: "760",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
        });

        $('#PrintDialog').dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();

        var html = '';

        //html += 'Print <span style="white-space:nowrap;">RE&#8209;18xxxx</span>';
        html += 'Print';
        document.getElementById('spanPrintDialogTitle').innerHTML = html;

        html = 'Currently there is no custom report for this screen. Coming Soon!'; // + navigator.userAgent;
        document.getElementById('spanPrintDialogContents').innerHTML = html;

    },

    decodeUriInAllFields: function () {
        $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML);
        $('span[xd\\:binding = "my:Brief_Description_of_Project"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:Brief_Description_of_Project"]')[0].innerHTML);
        //try {
        //    $('span[xd\\:binding = "my:ConsolidatedComments"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:ConsolidatedComments"]')[0].innerHTML);
        //} catch (e) { }
        try {
            $('span[xd\\:binding = "my:NecessityOfProposedExpenditure"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:NecessityOfProposedExpenditure"]')[0].innerHTML);
            $('span[xd\\:binding = "my:Location"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:Location"]')[0].innerHTML);
            //$('span[xd\\:binding = "my:LifeExpectancyOfProjectInMonths"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:LifeExpectancyOfProjectInMonths"]')[0].innerHTML);
            $('span[xd\\:binding = "my:group15/my:EstimatedCostsExplanation"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:group15/my:EstimatedCostsExplanation"]')[0].innerHTML);
            $('span[xd\\:binding = "my:SavingsNotes"]')[0].innerHTML = decodeURIComponent($('span[xd\\:binding = "my:SavingsNotes"]')[0].innerHTML);
        } catch (e) {
        }
    },

    displayForm_DisplayCachedArWithPrintableHtml: function (budgetRequestId) {
        var thiz = this;
        // First we try to get the XSLT from the server. If it times out, we get it from indexDB.
        return new Promise(function (resolve, reject) {
            try {
                // WE ARE ONLY DOING THIS TO MAKE SURE WE HAVE LATEST XSLT WHILE TESTING! REMOVE IN PRODUCTION! - Todd
                //loadXslFiles();
                //try {
                //    $('#divClientRequestsNotYetSubmittedDialog').dialog('close');
                //} catch (e) {
                //    // This makes sure the dialog is closed.
                //}

                //var request = indexedDB.open(indexDBName, dbVersion);
                if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                    var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
                } else {
                    var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
                }

                request.onblocked = function (event) {
                    console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
                    displayAlertDialog('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
                    reject();
                };

                request.onerror = function (event) {
                    console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                    displayAlertDialog('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                    reject();
                };

                request.onsuccess = function (event) {
                    console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Success accessing database "' + event.target.result.name + '".');
                    var db = event.target.result;

                    db.onerror = function (event) {
                        console.log('Error in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                        displayAlertDialog('Error in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                        reject();
                    };

                    //var objectStoreForXslFile = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                    db.transaction("objectStoreCachedXsltFiles").objectStore("objectStoreCachedXsltFiles").get("UnsubmittedBudgetRequestPrintableHtml").onsuccess = function (event) {
                        var xslt = event.target.result; // This is the cached XSL file.

                        if (xslt) {

                            console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(' + budgetRequestId + '). Loaded the Xsl file from the indexDB!');
                            var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");

                            objectStore.openCursor().onsuccess = function (event) {
                                try {
                                    var cursor = event.target.result;
                                    if (cursor) {
                                        if (cursor.value.bwBudgetRequestId == budgetRequestId) {
                                            status = '<img class="imgRedDot" alt="" src="/images/red-dot.png"> You will be prompted to submit this request the next time you <a href="javascript:displayCustomLogonDialog();">sign in.</a>';

                                            var xml = cursor.value.bwDocumentXml;

                                            console.log('Starting: TransformToHtmlTextOffline(xml, xslt)');
                                            var s = thiz.TransformToHtmlTextOffline(xml, xslt);
                                            console.log('Ending: TransformToHtmlTextOffline(xml, xslt)');

                                            console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(' + budgetRequestId + '). Preparing to display in divOfflineRequestFormPageMainPageContent.');
                                            document.getElementById('divDocumentBody').innerHTML = s;

                                            console.log('Completed display in displayForm_DisplayCachedArWithPrintableHtml divOfflineRequestFormPageMainPageContent.');
                                            try {
                                                $('span[xd\\:binding = "my:Status"]')[0].innerHTML = status;
                                                thiz.decodeUriInAllFields();
                                                thiz.formatRequestedExpense();
                                                thiz.formatRequestedCapital();
                                                thiz.formatCurrency2('my:Budget_Amount2');

                                                ////if (xslFile.indexOf('CreateArEditForm.xsl') > -1) formatStartAndEndDates();

                                                thiz.formatCurrency2('my:ExpenseEquipmentAndParts');
                                                thiz.formatCurrency2('my:CostOfEquipmentAndParts');
                                                thiz.formatCurrency2('my:ExpenseInternalLabor');
                                                thiz.formatCurrency2('my:CostOfInternalLabor');
                                                thiz.formatCurrency2('my:ExpenseCostOfOutsideServices');
                                                thiz.formatCurrency2('my:CostOfOutsideServices');
                                                thiz.formatCurrency2('my:OtherExpense');
                                                thiz.formatCurrency2('my:OtherCapital');
                                                thiz.formatCurrency2('my:SalesTax');
                                                //recalculateCosts();

                                                console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Populating offline attachments 1!!!!')
                                                //if (xslFile.indexOf('CreateArEditForm.xsl') > -1) populateOfflineAttachments(budgetRequestId); //workflowAppId, budgetRequestId, 'attachmentsInXslForm', true);
                                                //else populateOfflineAttachments(budgetRequestId); //workflowAppId, budgetRequestId, 'attachmentsInXslForm', false);



                                                //populateOfflineAttachments('attachmentsInXslForm'); // Don't need to pass the budgetRequestId because it gets it from the dom element.

                                                //if (xslFile.indexOf('CreateArEditForm.xsl') > -1) {
                                                //    // Get rid of the empty elements in the <ol> tag.
                                                //    clearEmptyListItems();
                                                //}



                                            } catch (e) {
                                                console.log('Exception in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Error rendering ' + '. ' + e.message + e.stack);
                                                displayAlertDialog('Exception in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(): Error rendering ' + '. ' + e.message + e.stack);
                                                reject();
                                            }

                                        }
                                        cursor.continue();
                                    } else {
                                        console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml. DONE LOOPING.');

                                        resolve();
                                    }
                                } catch (e) {
                                    console.log('Exception in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml. xxError: ' + e.message + ', ' + e.stack);
                                    displayAlertDialog('Exception in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml. xxError: ' + e.message + ', ' + e.stack);
                                    reject();
                                }
                            };

                        } else {
                            console.log('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml: ERRROR LOADING XSL FILE!!! ' + xslt); // console.log("xxGot Xsl file from the indexDB! "); // + imgFile); 
                            displayAlertDialog('In bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml: ERRROR LOADING XSL FILE!!!');
                            reject();
                        }

                    };
                };

            } catch (e) {
                console.log('Exception in bw.offline.core.js.displayForm_DisplayCachedArWithPrintableHtml(' + budgetRequestId + ')');
                reject();
            }
        })


    },

    cmdDisplayDeleteUnsubmittedBudgetRequestDialog: function (requestId, title, requestedAmount) {
        try {
            // debugger;
            var thiz = this;
            console.log('In bwRequest.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog(' + requestId + ', ' + title + ').');

            if (!requestId) {
                console.log('In bwRequest.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog(' + requestId + ', ' + title + '). <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< requestId is undefined!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Todd fix this.');
                var inXslForm = true;
                requestId = document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML;
                title = 'this request...';
                console.log('requestId: ' + requestId);
            }

            $("#divDeleteABudgetRequestOfflineDialog").dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                title: 'Delete ' + requestId,
                width: "570px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function () {
                    $('.ui-widget-overlay').bind('click', function () {
                        $("#divDeleteABudgetRequestOfflineDialog").dialog('close');
                    });
                }
            });

            // Hide the title bar.
            $("#divDeleteABudgetRequestOfflineDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            // Set the title.
            document.getElementById('spanDeleteABudgetRequestOfflineDialogTitle').innerHTML = 'Delete ' + title; // + ' (<em>' + formatCurrency(requestedAmount) + '</em>).';

            // Set the click event for the Delete button.
            $('#divDeleteABudgetRequestOfflineDialogDeleteRequestButton').off('click').click(function (error) {


                //var request = indexedDB.open(indexDBName, dbVersion);
                if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                    var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
                } else {
                    var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
                }

                request.onblocked = function (event) {
                    console.log("indexDB BLOCKED1. errorCode: " + event.target.errorCode);
                };
                request.onerror = function (event) {
                    console.log("In cmdDisplayDeleteUnsubmittedBudgetRequestDialog(). Error creating/accessing IndexedDB database1. errorCode: " + event.target.errorCode);
                };

                request.onsuccess = function (event) {
                    var db = event.target.result;
                    console.log('In cmdDisplayDeleteUnsubmittedBudgetRequestDialog(). Successfully opened the database "' + event.target.result.name + '".');

                    db.onerror = function (event) {
                        console.log('Error In bwRequest.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog(). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                    };

                    var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");

                    objectStore.openCursor().onsuccess = function (event) {
                        try {
                            var cursor = event.target.result;
                            if (cursor) {
                                if (cursor.value.bwBudgetRequestId == requestId) {

                                    var transaction = db.transaction("objectStoreCachedRequests", 'readwrite'); //IDBTransaction.READ_WRITE); 
                                    var del = transaction.objectStore("objectStoreCachedRequests").delete(cursor.primaryKey); // Don't need a key, it autonumbers. 

                                    //var del = db.transaction(["customers"], "readwrite").objectStore("customers").delete("444-44-4444");

                                    del.onsuccess = function (event) {
                                        console.log("In cmdDisplayDeleteUnsubmittedBudgetRequestDialog(). Successfully deleted request from the database.");

                                        if (inXslForm == true) {
                                            $('#divDeleteABudgetRequestOfflineDialog').dialog('close');
                                            $('#divOfflineRequestFormDialog').dialog('close');
                                        } else {
                                            // When coming from the list of requests...
                                            $('#divDeleteABudgetRequestOfflineDialog').dialog('close');
                                            thiz.cmdDisplayClientRequestsNotYetSubmittedDialog(true);
                                        }





                                        // TODD: If the user is logged in, this logs out the user. This needs to be fixed!


                                        if (participantId) {
                                            // Logged in.
                                            //displayAlertDialog('participantId: ' + participantId);
                                            //thiz.populateStartPageItem('divWelcome', 'Reports', '');
                                        } else {
                                            // Not logged in.
                                            // Since one was deleted, we need to regenerate the buttons. For instance, so the Archive (2) button is now Archive (1).
                                            //thiz.renderWelcomePageOffline();
                                        }







                                    };
                                    del.onerror = function (event) {
                                        console.error("In cmdDisplayDeleteUnsubmittedBudgetRequestDialog(). Error deleting request from the database.", this.error);
                                    };

                                }
                                cursor.continue();
                            } else {
                                console.log('In bwRequest.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog. DONE LOOPING.');
                            }
                        } catch (e) {
                            console.log('In bwRequest.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog. xxError: ' + e.message + ', ' + e.stack);
                        }
                    };

                };

            });

        } catch (e) {
            console.log('Exception in cmdDisplayDeleteUnsubmittedBudgetRequestDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in cmdDisplayDeleteUnsubmittedBudgetRequestDialog(): ' + e.message);
        }
    },

    displayListOfRequestsStoredInIndexDb: function () {
        // Now we have to check if there are any requests saved on the users' device.
        // Check if there are any requests stored in IndexDB locally.
        try {
            var thiz = this;
            $('#divOfflineRequestsList').empty();
            //var request = indexedDB.open(indexDBName, dbVersion);
            if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            } else {
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
            }

            request.onerror = function (event) {
                console.log('In my.js.displayListOfRequestsStoredInIndexDb(). Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
            };

            request.onsuccess = function (event) {
                console.log('In my.js.displayListOfRequestsStoredInIndexDb(). Success accessing database "' + event.target.result.name + '".');
                var db = event.target.result;
                try {
                    var store = db.transaction('objectStoreCachedRequests', 'readonly');
                    var req;
                    req = store.objectStore('objectStoreCachedRequests').count();
                } catch (e) {
                    console.log('In displayListOfRequestsStoredInIndexDb(): XXXXXXXXXXXerror: ' + e.message);
                }
                req.onsuccess = function (evt) {
                    //var html2 = 'xx';
                    var numberOfRequests = evt.target.result;
                    // This is where we need to show the status on the home page. 
                    if (numberOfRequests == 1) {
                        var html2 = '<span style="font-family:\'Courier New\';font-size:30pt;"><a onclick="$(\'.bwRequest\').bwRequest(\'cmdDisplayClientRequestsNotYetSubmittedDialog\');">You have ' + numberOfRequests + ' un-submitted request saved on this device.</a></span>';
                        //$('#divHomePageAlert').append(html2);
                    } else if (numberOfRequests > 1) {
                        var html2 = '<span style="font-family:\'Courier New\';font-size:30pt;"><a onclick="$(\'.bwRequest\').bwRequest(\'cmdDisplayClientRequestsNotYetSubmittedDialog\');">You have ' + numberOfRequests + ' un-submitted requests saved on this device.</a></span>';
                        //$('#divHomePageAlert').append(html2);
                    } else {
                        var html2 = '<span style="font-family:\'Courier New\';font-size:30pt;">You have no un-submitted requests saved on this device.</span>';
                        // <span style="font-family:'Courier New';font-size:30pt;">[List offline requests]</span>
                    }

                    if (numberOfRequests > 0) {
                        // Display the requests stored on this device.

                        console.log('If this device runs low on storage, your web browser may delete them without asking you.');

                        html2 += '<br />';
                        html2 += 'If this device runs low on storage, your web browser may delete them without asking you.';
                        html2 += '<br />';

                        html2 += '<table>';



                        var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                        objectStore.openCursor().onsuccess = function (event) {
                            try {
                                var cursor = event.target.result;
                                if (cursor) {
                                    var projectTitle = '';
                                    console.log('Retrieved request: ' + cursor.value.ProjectTitle + ': ' + cursor.value.bwBudgetRequestId);
                                    html2 += '  <tr>';
                                    //html2 += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;"><a href="javascript:cmdRenderAndLoadNewRequestFormWithUnsubmittedRequest(\'' + cursor.value.bwBudgetRequestId + '\');">' + cursor.value.ProjectTitle + '</a></td>';

                                    html2 += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;"><a onclick="$(\'.bwRequest\').bwRequest(\'displayForm_DisplayCachedAr\', \'' + cursor.value.bwBudgetRequestId + '\');">' + cursor.value.ProjectTitle + '</a></td>';

                                    //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxdesc</td>';
                                    //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxFunctionalAreaId';
                                    //html += cursor.value.FunctionalAreaId;
                                    //html += '    </td>';
                                    //html += '    <td style="text-align:right;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;">' + 'xxcap' + formatCurrency(cursor.value.BudgetAmount) + '</td>';
                                    //html += '    <td style="text-align:right;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;">' + 'xxexp' + formatCurrency(cursor.value.BudgetAmount) + '</td>';
                                    //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxtotal</td>';
                                    html2 += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxts</td>';
                                    //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxatt</td>';
                                    html2 += '    <td>';
                                    html2 += '      <img src="images/trash-can.png" onclick="$(\'.bwRequest\').bwRequest(\'cmdDisplayDeleteUnsubmittedBudgetRequestDialog\', \'' + cursor.value.bwBudgetRequestId + '\', \'' + cursor.value.ProjectTitle + '\');" title="Delete" style="cursor:pointer;" />';
                                    html2 += '    </td>';
                                    html2 += '  </tr>';

                                    cursor.continue();
                                } else {
                                    console.log('DONE LOOPING, so rendering.');
                                    html2 += '<tr><td colspan="12"></td></tr>'; // DONE
                                    html2 += '</table>';

                                    //document.getElementById('divClientRequestsNotYetSubmittedContent').innerHTML = html;

                                    $('#divOfflineRequestsList').append(html2);

                                }
                            } catch (e) {
                                console.log('xxyyyfgError: ' + e.message + ', ' + e.stack);
                            }
                        };
















                    } else {
                        $('#divOfflineRequestsList').append(html2);
                    }



                };

                req.onerror = function (evt) {
                    console.error("In my.js.displayListOfRequestsStoredInIndexDb(). add error", this.error);
                };
            }
        } catch (e) {
            console.log('In my.js.displayListOfRequestsStoredInIndexDb(). FAILED TO OPEN A TRANSACTION to the database...' + e.message + ', ' + e.stack);
        }



    },







    cmdDisplayConfirmFileUploadOfflineDialog: function (displayAttachmentsTagName, fileUploadTagName, _budgetRequestId) {
        try {
            //displayAlertDialog('In cmdDisplayConfirmFileUploadOfflineDialog().');
            console.log('In bwRequest.js.cmdDisplayConfirmFileUploadOfflineDialog(' + displayAttachmentsTagName + ', ' + fileUploadTagName + ', ' + _budgetRequestId + ').');
            // Clear the title and description from the last time this was displayed.
            document.getElementById('txtConfirmFileUploadOfflineDialogFilename').value = '';
            $('#txtConfirmFileUploadOfflineDialogFileDescription').empty();


            $("#divConfirmFileUploadOfflineDialog").dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                title: '',
                width: "800px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function (event, ui) {
                    $('.ui-widget-overlay').bind('click', function () { $("#divConfirmFileUploadOfflineDialog").dialog('close'); });
                } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            });

            // Hide the title bar.
            $("#divConfirmFileUploadOfflineDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            // 
            document.getElementById('spanConfirmFileUploadOfflineDialogUploadTheFileNowButton').innerHTML = '<button title="Click here to upload the attachment." class="BwButton" onclick="$(\'.bwRequest\').bwRequest(\'ProcessOfflineUpload\', \'' + displayAttachmentsTagName + '\', \'' + fileUploadTagName + '\', \'' + _budgetRequestId + '\');">Upload</button>';
            //
            document.getElementById('spanConfirmFileUploadOfflineDialogCancelButton').innerHTML = '<button title="" class="BwButton" onclick="$(\'#divConfirmFileUploadOfflineDialog\').dialog(\'close\');">Cancel</button>';


            // Hook up the Upload button click event code. Unbind it first to make sure it gets the right one.
            //$('#btnUploadTheFileNow').unbind('click', function () {

            //});

            //$('#btnUploadTheFileNow').click(function (error) {

            //    console.log('In cmdDisplayConfirmFileUploadOfflineDialog(' + displayAttachmentsTagName + ', ' + fileUploadTagName + ', ' + _budgetRequestId + '). Calling ProcessOfflineUpload(' + displayAttachmentsTagName + ', ' + _budgetRequestId + ');');
            //    ProcessOfflineUpload(displayAttachmentsTagName, fileUploadTagName, _budgetRequestId);
            //    $('#divConfirmFileUploadDialog').dialog("close");
            //});

            //var js = '';
            //js += 'alert("xxxx");';
            //js += 'ProcessOfflineUpload("' + displayAttachmentsTagName + '", "' + _budgetRequestId + '");';
            //js += '$("#divConfirmFileUploadDialog").dialog("close");';
            //document.getElementById('btnUploadTheFileNow').onclick = js;


            // Hook up the Cancel button code.
            //$('#btnCancelUploadTheFileNow').click(function (error) {
            //    $('#divConfirmFileUploadDialog').dialog("close");
            //    $('#OfflineRequestinputFile').replaceWith($('#OfflineRequestinputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
            //});

        } catch (e) {
            console.log('Error in bwRequest.js.cmdDisplayConfirmFileUploadOfflineDialog(' + displayAttachmentsTagName + ', ' + fileUploadTagName + ', ' + _budgetRequestId + '): ' + e.message + ', ' + e.stack);
            this.displayAlertDialog('Error in bwRequest.js.cmdDisplayConfirmFileUploadOfflineDialog(' + displayAttachmentsTagName + ', ' + fileUploadTagName + ', ' + _budgetRequestId + '): ' + e.message + ', ' + e.stack);
        }
    },

    uploadAttachmentOffline: function (displayAttachmentsTagName, uploadFileTagName) {
        console.log('In uploadAttachmentOffline(' + displayAttachmentsTagName + ', ' + uploadFileTagName + ').1');

        try {
            //var _budgetRequestId = $('span[xd\\:binding = "my:BudgetRequestId"]')[0].innerHTML; // OfflineRequestBudgetRequestId
            try {
                var _budgetRequestId = document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML;
            } catch (e) {
                // It gets here if it is a new request to be saved to this device.
                var _budgetRequestId = document.getElementById('OfflineRequestBudgetRequestId').innerHTML;
            }
            console.log('In bwRequest.js.uploadAttachmentOffline(' + displayAttachmentsTagName + ', ' + uploadFileTagName + '). Preparing to upload file for _budgetRequestId: ' + _budgetRequestId);

            var x = document.getElementById(uploadFileTagName); //'OfflineRequestinputFile');
            var file = x.files[0];
            if (file.size > 100000000) {
                // Don't allow files over 5MB.
                displayAlertDialog('Currently the system does not allow files over 100MB. Calling clone.');
                //$('#OfflineRequestinputFile').replaceWith($('#OfflineRequestinputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
                $('#' + uploadFileTagName).replaceWith($('#' + uploadFileTagName).clone()); // Clear the file upload box. May not work in all browsers doing it this way.
            } else {

                this.cmdDisplayConfirmFileUploadOfflineDialog(displayAttachmentsTagName, uploadFileTagName, _budgetRequestId);

            }
        } catch (e) {
            console.log('Exception in uploadAttachmentOffline(' + displayAttachmentsTagName + ', ' + uploadFileTagName + '): ' + e.message + ', ' + e.stack);
            this.displayAlertDialog('Exception in uploadAttachmentOffline(' + displayAttachmentsTagName + ', ' + uploadFileTagName + '): ' + e.message);
        }
        // TODD: MAY HAVE TO ADD THIS LATER!!!!
        //// Ensure the HTML5 FileReader API is supported
        //if (window.FileReader) {
        //    var parts = document.getElementById("inputFile").value.split("\\");
        //    var filename = parts[parts.length - 1];
        //    file = document.getElementById("inputFile").files[0];
        //    //BW.Jsom.Libs.upload("Documents", filename, file);

        //    var fr = new FileReader();
        //    fr.onload = receivedBinary;
        //    fr.readAsDataURL(file);

        //} else {
        //    displayAlertDialog("The HTML5 FileSystem APIs are not fully supported in this browser.");
        //}

    },


    populateOfflineAttachments: function (attachmentsTagId) {
        //console.log('In populateOfflineAttachments().'); //' + _budgetRequestId + ').');
        try {
            console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '). Rendering the list of files.');
            var thiz = this;
            //$('#OfflineRequestnewrequestattachments').empty();
            $('#' + attachmentsTagId).empty();



            if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            } else {
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
            }

            //var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName); //, thiz.options.indexDBVersion);
            request.onblocked = function (event) {
                console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
                displayAlertDialog('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): indexDB BLOCKED1. errorCode: ' + event.target.errorCode);
            };
            request.onerror = function (event) {
                console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                displayAlertDialog('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
            };

            request.onsuccess = function (event) {
                console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): Success accessing database "' + event.target.result.name + '".');

                //$('#OfflineRequestnewrequestattachments').append('retrieving attachments.......');

                var db = event.target.result;

                db.onerror = function (event) {
                    console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                    displayAlertDialog('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '). DATABASE ERROR!!!!!!!!!! :' + 'Error accessing database "' + event.target.result.name + '". errorCode: ' + event.target.errorCode);
                };

                //try {
                var store = db.transaction('OfflineAttachedFiles', 'readonly');
                var req;
                req = store.objectStore('OfflineAttachedFiles').count();
                //} catch (e) {
                //    console.log('bwRequest.js.populateOfflineAttachments() XXXXXXXXXXXerror: ' + e.message);
                //}
                // Requests are executed in the order in which they were made against the
                // transaction, and their results are returned in the same order.
                // Thus the count text below will be displayed before the actual pub list
                // (not that it is algorithmically important in this case).
                req.onsuccess = function (evt) {
                    //document.getElementById('CachedRequestStatus').innerHTML = '<i>Dev: You have ' + evt.target.result + ' cached requests. View them by clicking the Archive button.</i>';


                    // cmdListAllBudgetRequestsUsingClientDatasetApproach
                    //cmdListAllBudgetRequestsFromClientIndexDB();
                    //$('#OfflineRequestnewrequestattachments').append('1');
                    //var filter = 'all';
                    //$('#spanBwBudgetRequests').empty();

                    try {

                        if (evt.target.result == 0) {
                            //console.log('');
                            //// Set the top bar title.
                            //$('#divArchivePageTopBarTextContents').text('Archive: Budget Requests');
                            $('#' + attachmentsTagId)[0].innerHTML = '<i>no attachments found</i>'; //('2');
                            //var html = '';
                            //html += '<br /><br />';
                            //html += '<span style="font-size:large;font-style:italic;">There have been no Budget Requests created on this device yet.</span>';
                            //document.getElementById('spanBwBudgetRequests').innerHTML = html;
                        } else {
                            //$('#OfflineRequestnewrequestattachments').append('3');
                            console.log('In populateOfflineAttachments(' + attachmentsTagId + '). Found ' + evt.target.result + ' files on my device.');

                            // Render the  contents.
                            var html = '';
                            html += '<br /><br />';


                            // Third (data) row(s).
                            var numberOfRequests = evt.target.result;
                            var objectStore = db.transaction("OfflineAttachedFiles").objectStore("OfflineAttachedFiles");
                            objectStore.openCursor().onsuccess = function (event) {
                                try {
                                    var cursor = event.target.result;
                                    if (cursor) {
                                        //var projectTitle = '';
                                        //console.log('Retrieved request: ' + cursor.value.ProjectTitle + ': ' + cursor.value.bwBudgetRequestId);
                                        //html += '  <tr>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;"><a href="javascript:displayCachedArOnTheHomePage(\'' + cursor.value.bwBudgetRequestId + '\', \'' + cursor.value.ProjectTitle + '\');">' + cursor.value.ProjectTitle + '</a></td>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxdesc</td>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxFunctionalAreaId';
                                        //html += cursor.value.FunctionalAreaId;
                                        //html += '    </td>';
                                        //html += '    <td style="text-align:right;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;">' + 'xxcap' + formatCurrency(cursor.value.BudgetAmount) + '</td>';
                                        //html += '    <td style="text-align:right;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;">' + 'xxexp' + formatCurrency(cursor.value.BudgetAmount) + '</td>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxtotal</td>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxts</td>';
                                        //html += '    <td style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size:14pt;">xxatt</td>';
                                        //html += '    <td>';
                                        //html += '      <img src="images/trash-can.png" onclick="cmdDisplayDeleteUnsubmittedBudgetRequestDialog(\'' + cursor.value.bwBudgetRequestId + '\', \'' + cursor.value.ProjectTitle + '\');" title="Delete" style="cursor:pointer;" />';
                                        //html += '    </td>';
                                        //html += '  </tr>';

                                        //var _budgetRequestId = document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML; // OfflineRequestBudgetRequestId// Loses scope and therefor value, so need to load it again. So why pass it into this function? Look at this and remove in the future.
                                        try {
                                            var _budgetRequestId = document.getElementById('OfflineRequestBudgetRequestIdInXslForm').innerHTML;
                                        } catch (e) {
                                            // It gets here if it is a new request to be saved to this device.
                                            var _budgetRequestId = document.getElementById('OfflineRequestBudgetRequestId').innerHTML;
                                        }

                                        console.log('In populateOfflineAttachments(' + attachmentsTagId + '): _budgetRequestId: ' + _budgetRequestId + ', cursor.value.bwBudgetRequestId: ' + cursor.value.bwBudgetRequestId);
                                        if (_budgetRequestId == cursor.value.bwBudgetRequestId) {

                                            console.log('In populateOfflineAttachments(' + attachmentsTagId + '). Rendering list of attachments for _budgetRequestId: ' + _budgetRequestId);
                                            //var dbRecord = {
                                            //    fileContents: file,
                                            //    fileName: 'xxfileName',
                                            //    fileDescription: 'xxfileDescription',
                                            //    bwBudgetRequestId: _budgetRequestId
                                            //};
                                            var filename = cursor.value.fileName; //fileContents.name; // We could use the original file name, but we won't mess with it.
                                            //var size = cursor.value.fileContents.size; 
                                            var description = cursor.value.fileDescription;
                                            var _budgetRequestId = cursor.value.bwBudgetRequestId;

                                            console.log('In populateOfflineAttachments(' + attachmentsTagId + '): _budgetRequestId == cursor.value.bwBudgetRequestId');

                                            var imgFile;
                                            if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
                                                // iOS does not support storing files as blobs in indexDB, so this is the workaround.
                                                // THIS IS THE WORKAROUND FOR THE IOS STORING BLOB IN INDEXDB ISSUE:

                                                if (cursor.value.encodingType == 'uInt8Array') {
                                                    // THIS IS HOW THIS DATA WAS STORED!!!!!!
                                                    ////Convert back to bytes
                                                    //var byteArray = atob(sharedFileFromIosFileContents);
                                                    ////Make back into unsigned array
                                                    //var asArray = new Uint8Array(byteArray.length);
                                                    //for (var i = 0, len = byteArray.length; i < len; ++i) {
                                                    //    //Get back as int
                                                    //    asArray[i] = byteArray.charCodeAt(i);
                                                    //}
                                                    //var fileData = asArray.buffer;


                                                    //Convert back to bytes
                                                    //var byteArray = atob(cursor.value.fileContents);

                                                    ////Make back into unsigned array
                                                    //var asArray = new Uint8Array(byteArray.length);
                                                    //for (var i = 0, len = byteArray.length; i < len; ++i) {
                                                    //    //Get back as int
                                                    //    asArray[i] = byteArray.charCodeAt(i);
                                                    //    //fileData += String.fromCharCode(byteArray[i])
                                                    //}

                                                    //var imgFile = '';
                                                    //for (var i = 0, len = byteArray.length; i < len; ++i) {
                                                    //    //Get back as int
                                                    //    //asArray[i] = byteArray.charCodeAt(i);
                                                    //    imgFile += String.fromCharCode(asArray[i])
                                                    //}


                                                    //Make into a blob of proper type
                                                    //var imgFile = [asArray.buffer]; //new Blob([asArray.buffer], { type: "image/jpeg" });




                                                    // Todd: FINISH THIS!!! IT DOESN't WORK!!!
                                                    //imgFile = cursor.value.fileContents;
                                                    var mimeType;
                                                    if (filename.toUpperCase().indexOf('.JPG') != -1 || filename.toUpperCase().indexOf('.JPEG')) {
                                                        mimeType = 'image/jpeg';
                                                    } else if (filename.toUpperCase().indexOf('.PNG') != -1) {
                                                        mimeType = 'image/png';
                                                    } else if (filename.toUpperCase().indexOf('.BMP') != -1) {
                                                        mimeType = 'image/bmp';
                                                    } else if (filename.toUpperCase().indexOf('.GIF') != -1) {
                                                        mimeType = 'image/gif';
                                                    } else if (filename.toUpperCase().indexOf('.TIFF') != -1) {
                                                        mimeType = 'image/tiff';
                                                    } //else if (filename.toUpperCase().indexOf('.SVG') != -1) {
                                                    //  mimeType = '';
                                                    //}

                                                    //    //Make into a blob of proper type
                                                    //    imgFile = new Blob([asArray.buffer], {
                                                    //        type: mimeType
                                                    //    });

                                                    imgFile = new Blob([cursor.value.fileContents], {
                                                        type: mimeType
                                                    });





                                                } else {
                                                    // 'blob'

                                                    //Convert back to bytes
                                                    var data = atob(cursor.value.fileContents);

                                                    //Make back into unsigned array
                                                    var asArray = new Uint8Array(data.length);

                                                    for (var i = 0, len = data.length; i < len; ++i) {
                                                        //Get back as int
                                                        asArray[i] = data.charCodeAt(i);
                                                    }

                                                    // We need to get the correct mime type!
                                                    var mimeType;
                                                    if (filename.toUpperCase().indexOf('.JPG') != -1 || filename.toUpperCase().indexOf('.JPEG')) {
                                                        mimeType = 'image/jpeg';
                                                    } else if (filename.toUpperCase().indexOf('.PNG') != -1) {
                                                        mimeType = 'image/png';
                                                    } else if (filename.toUpperCase().indexOf('.BMP') != -1) {
                                                        mimeType = 'image/bmp';
                                                    } else if (filename.toUpperCase().indexOf('.GIF') != -1) {
                                                        mimeType = 'image/gif';
                                                    } else if (filename.toUpperCase().indexOf('.TIFF') != -1) {
                                                        mimeType = 'image/tiff';
                                                    } //else if (filename.toUpperCase().indexOf('.SVG') != -1) {
                                                    //  mimeType = '';
                                                    //}

                                                    //Make into a blob of proper type
                                                    imgFile = new Blob([asArray.buffer], {
                                                        type: mimeType
                                                    });


                                                }







                                            } else {

                                                // THIS WORKS FOR BLOB APPROACH. NOT ON IOS. 
                                                imgFile = cursor.value.fileContents;
                                            }

                                            // Get window.URL object
                                            var URL = window.URL || window.webkitURL;

                                            // Create ObjectURL
                                            var fileUrl = URL.createObjectURL(imgFile);

                                            console.log('In populateOfflineAttachments(' + attachmentsTagId + '): Got fileUrl: ' + fileUrl);
                                            //displayAlertDialog('In populateOfflineAttachments(' + attachmentsTagId + '): Got fileUrl: ' + fileUrl);

                                            // Centered on the screen.
                                            var width = 800;
                                            var height = 600;
                                            var left = (screen.width - width) / 2;
                                            var top = (screen.height - height) / 2;

                                            var html = '';

                                            html += '<table style="width:100%;">';
                                            html += '  <tr>';
                                            html += '    <td style="width:10%;">';
                                            // Display the image thumbnail.
                                            if (filename.toLowerCase().indexOf('.png') > -1 || filename.toLowerCase().indexOf('.jpg') > -1 || filename.toLowerCase().indexOf('.jpeg') > -1 || filename.toLowerCase().indexOf('.jfif') > -1 || filename.toLowerCase().indexOf('.webp') > -1) {
                                                html += '<img src="' + fileUrl + '" style="height:120px;display:block;margin-left:auto;margin-right:auto;cursor:pointer;" alt="" ';
                                                if (Platform == 'IOS8') {
                                                    html += 'onclick="displayAttachmentInDialogOffline2(\'' + filename + '\', \'' + description + '\', \'' + _budgetRequestId + '\', \'' + attachmentsTagId + '\');"';
                                                } else {
                                                    html += 'onclick="window.open(\'' + fileUrl + '\', \'window1\', \'width=' + width + ', height=' + height + ', top=' + top + ', left=' + left + ', resizable=yes\');return false;"';
                                                }
                                                html += ' />';
                                            }
                                            html += '    </td>';
                                            html += '    <td style="width:90%;">';

                                            // We need an if statement here to choose between iOS and Windows.
                                            var Platform = 'IOS8';
                                            if (Platform == 'IOS8') {
                                                html += '<div xcx="xcx21342346-6" class="attachmentsSectionFileLink" onclick="displayAttachmentInDialogOffline2(\'' + filename + '\', \'' + description + '\', \'' + _budgetRequestId + '\', \'' + attachmentsTagId + '\');">';
                                            } else {
                                                html += '<div xcx="xcx21342346-7" class="attachmentsSectionFileLink" onclick="window.open(\'' + fileUrl + '\', \'window1\', \'width=' + width + ', height=' + height + ', top=' + top + ', left=' + left + ', resizable=yes\');return false;">';
                                            }
                                            //if (Platform == 'IOS8') {
                                            //    html += '<div class="attachmentsSectionFileLink" style="height:50px;border:1px thin red;" onclick="displayAttachmentInDialogOffline(\'' + filename + '\', \'' + description + '\', \'' + _budgetRequestId + '\', \'' + attachmentsTagId + '\');">';
                                            //} else {
                                            //    html += '<div class="attachmentsSectionFileLink" style="height:50px;border:1px thin red;" onclick="window.open(\'' + fileUrl + '\', \'window1\', \'width=' + width + ', height=' + height + ', top=' + top + ', left=' + left + ', resizable=yes\');return false;">';
                                            //}
                                            html += filename;
                                            // Display the file attachment description.
                                            if (description.length > 0) {
                                                html += '&nbsp;&nbsp;<span class="attachmentsSectionDescription"> - "' + description + '"</span>';
                                            } else {
                                                html += '&nbsp;&nbsp;<span class="attachmentsSectionDescription"> - [no description]' + description + '</span>';
                                            }
                                            // if (showRemoveAttachmentButton == 'true') {
                                            //var attachmentsSectionId = 'xx';
                                            var _workflowAppId = 'xx';
                                            var i = 0;
                                            html += '</div>';
                                            //html += '&nbsp;&nbsp;<input type="button" style="cursor:pointer;" id="removeBudgetRequestAttachment' + i + '" value="Remove" onclick="removeAttachmentOffline(\'' + filename + '\', \'' + attachmentsTagId + '\', \'' + _workflowAppId + '\', \'' + _budgetRequestId + '\');" />';
                                            html += '    </td>';
                                            html += '  </tr>';
                                            html += '</table>';



                                            html += '</br>';

                                            console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '). Preparing to render in attachmentsTagId ' + attachmentsTagId);

                                            $('#' + attachmentsTagId).append(html);

                                            console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '). After rendering in attachmentsTagId ' + attachmentsTagId);


                                            try {
                                                $('#divFileUploadSpinnerDialog').dialog('close'); // Close the file upload spinner.
                                            } catch (e) {
                                            }

                                        }
                                        cursor.continue();
                                    }
                                } catch (e) {
                                    console.log('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '):8: ' + e.message + ', ' + e.stack);
                                    displayAlertDialog('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '):8: ' + e.message + ', ' + e.stack);
                                }
                            };

                        }
                    } catch (e) {
                        console.log('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '):9: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '):9: ' + e.message + ', ' + e.stack);
                    }
                };

                req.onerror = function (evt) {
                    console.error('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + ').req.onerror: add error', this.error);
                    console.log('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + ').req.onerror:10: ' + this.error);
                    displayAlertDialog('In bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + ').req.onerror:10: ' + this.error);
                };

            }
        } catch (e) {
            console.log('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.populateOfflineAttachments(' + attachmentsTagId + '): ' + e.message + ', ' + e.stack);
        }

    },

    ProcessOfflineUpload: function (displayAttachmentsTagName, fileUploadTagName, _budgetRequestId) {
        var thiz = this;
        try {
            console.log('In bw.offline.core.js.ProcessOfflineUpload(' + displayAttachmentsTagName + ', ' + _budgetRequestId + ').');

            var x = document.getElementById(fileUploadTagName);
            var file = x.files[0];

            $('#divConfirmFileUploadOfflineDialog').dialog("close");

            // Show the upload spinner!
            $("#divFileUploadSpinnerDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                //title: 'Delete ' + requestId,
                width: "970px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                open: function () {
                    $('.ui-widget-overlay').bind('click', function () {
                        $("#divFileUploadSpinnerDialog").dialog('close');
                    });
                }
            });
            // Hide the title bar.
            $("#divFileUploadSpinnerDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            // Set the title. eg: "Uploading [fileName]..."
            document.getElementById('spanFileUploadSpinnerDialogTitle').innerHTML = 'Uploading ' + file.name + '...';
            //// Set teh spinner
            //document.getElementById('divFileUploadSpinnerDialogContent').innerHTML = 'style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 40pt;font-weight:bold;"spinnergif!</span';






            console.log('In bw.offline.core.js.ProcessOfflineUpload(' + displayAttachmentsTagName + ', ' + _budgetRequestId + '). file.name: ' + file.name);
            if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            } else {
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
            }
            //var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName); //, thiz.options.indexDBVersion);
            request.onblocked = function (e) {
                console.error(e.target);
                console.log('In bw.offline.core.js.ProcessOfflineUpload().request.onblocked: ' + e.target.error.name || e.target.error || e.target.errorCode);
                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().request.onblocked: ' + e.target.error.name || e.target.error || e.target.errorCode);
            };
            request.onerror = function (e) {
                console.error(e.target);
                console.log('In bw.offline.core.js.ProcessOfflineUpload().request.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().request.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
            };

            request.onsuccess = function (event) {
                try {
                    console.log("In ProcessOfflineUpload().request.onsuccess. Success accessing IndexedDB database.");
                    var db = event.target.result;

                    db.onerror = function (e) {
                        console.error(e.target);
                        console.log('In bw.offline.core.js.ProcessOfflineUpload().db.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                        displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().db.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                    };

                    // Check if the user specified a new filename. If so, make sure the file extension is the same!
                    var originalFilename = file.name;
                    var filename;
                    if (document.getElementById('txtConfirmFileUploadOfflineDialogFilename').value.trim() == '') {
                        filename = file.name;
                    } else {
                        filename = document.getElementById('txtConfirmFileUploadOfflineDialogFilename').value.trim().split('.')[0] + '.' + originalFilename.split('.')[1]; // Put the same extension on it.
                    }

                    var description = document.getElementById('txtConfirmFileUploadOfflineDialogFileDescription').value.trim();

                    // Create with a GUID. The workflow will give it a better name.
                    var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });

                    if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
                        // THIS IS THE WORKAROUND FOR THE IOS STORING BLOB IN INDEXDB ISSUE:

                        console.log('THIS IS THE WORKAROUND FOR THE IOS STORING BLOB IN INDEXDB ISSUE');
                        var reader = new FileReader();
                        reader.onload = function (event) {
                            //var fileData = '';
                            //var buffer = event.target.result;
                            //var uInt8Array = new Uint8Array(buffer);
                            //var i = uInt8Array.length;
                            //var binaryString = new Array(i);
                            //while (i--) {
                            //    //Convert each to character
                            //    binaryString[i] = String.fromCharCode(uInt8Array[i]);
                            //}

                            ////Make into a string
                            //var data = binaryString.join('');

                            ////Use built in btoa to make it a base64 encoded string
                            //var base64 = window.btoa(data); //todd todd todd todd



                            // Todd: I changed from the above code to this on 2-15-18 11-29am ast.
                            var uInt8Array = new Uint8Array(event.target.result);


                            var dbRecord = {
                                encodingType: 'uInt8Array', // This has the following so far: 'blob', 'uInt8Array', 
                                fileContents: uInt8Array, //base64, // If this fails it may be bacause it is empty/undefined. Maybe need to check this in the future.
                                fileName: filename,
                                fileDescription: description,
                                bwBudgetRequestId: _budgetRequestId,
                                id: guid
                            };

                            console.log('File size: ' + file.size + ', dbRecord: ' + JSON.stringify(dbRecord));

                            try {
                                var transaction = db.transaction("OfflineAttachedFiles", 'readwrite'); //IDBTransaction.READ_WRITE); 
                            } catch (e) {
                                console.log('ERROR ACCESSING OfflineAttachedFiles DATABASE11!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                            }

                            try {
                                var put = transaction.objectStore("OfflineAttachedFiles").add(dbRecord); // Don't need a key, it autonumbers. 
                            } catch (e) {
                                console.log('ERROR ACCESSING OfflineAttachedFiles DATABASE22!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                            }
                            console.log('In bw.offline.core.js.ProcessOfflineUpload(). Successfully executed var put = transaction.objectStore(OfflineAttachedFiles).add(dbRecord);');

                            put.onsuccess = function (event) {
                                try {
                                    console.log('In bw.offline.core.js.ProcessOfflineUpload(). Successfully stored file in the database. Calling clone.');
                                    alert('In bw.offline.core.js.ProcessOfflineUpload(). Successfully stored file in the database. Calling clone.');

                                    // We have to clear the file input element so it launches ok next time.
                                    $('#' + fileUploadTagName).replaceWith($('#' + fileUploadTagName).clone()); // Clear the file upload box. May not work in all browsers doing it this way.

                                    // For some weird reason this doesn't work here!!! I think it is because we are accessing indexDB again in populateOfflineAttachments(). 
                                    // We probably need to just include the indexDB access here, but I want to reuse it so we will just do it this way for now.
                                    //$("#divFileUploadSpinnerDialog").dialog('close'); // Close the file upload spinner.

                                    thiz.populateOfflineAttachments(displayAttachmentsTagName);

                                } catch (e) {
                                    displayAlertDialog('Exception in bw.offline.core.js.ProcessOfflineUpload().put.onsuccess: ' + e.message + ', ' + e.stack);
                                }
                            };
                            put.onerror = function (e) {
                                console.error(e.target);
                                console.log('In bw.offline.core.js.ProcessOfflineUpload().put.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().put.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                            };
                            put.transaction.oncomplete = function (e) {
                                console.log('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.oncomplete.');
                            };
                            put.transaction.onerror = function (e) {
                                console.log('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                            };

                        };
                        reader.readAsArrayBuffer(file); // This works for text. 

                    } else {

                        // THIS WORKS FOR BLOB APPROACH. NOT ON IOS. 
                        console.log('THIS WORKS FOR BLOB APPROACH. NOT ON IOS.');

                        var h = '';
                        h += 'Todd - I currently think this only works for:<br /><br />';
                        h += '- PNG on Mac (Chrome). Safari needs to be fixed!<br />';
                        h += '- PNG on Windows 10 is Ok (IE and Edge).<br />';
                        h += '- iOS - not working.<br />';
                        h += '- Android - not sure.<br />';
                        h += '- Ubuntu (Firefox) - not sure.<br /><br />';
                        // Todd - I currently think this only works for: 
                        // - PNG on Mac (Chrome). Safari needs to be fixed! 
                        // - PNG on Windows 10 is Ok (IE and Edge).
                        // - iOS - not working.
                        // - Android - not sure.
                        // - Ubuntu (Firefox) - not sure.
                        console.log(h);

                        var dbRecord = {
                            encodingType: 'blob', // This has the following so far: 'blob', 'uInt8Array', 
                            fileContents: file, // Forcing test text to test. remove the quotes!!!
                            fileName: filename,
                            fileDescription: description,
                            bwBudgetRequestId: _budgetRequestId,
                            id: guid
                        };

                        console.log('File size: ' + file.size + ', dbRecord: ' + JSON.stringify(dbRecord));

                        try {
                            var transaction = db.transaction('OfflineAttachedFiles', 'readwrite'); //IDBTransaction.READ_WRITE); 
                        } catch (e) {
                            if (e.message == 'NotFoundError') {
                                // The database has been destroyed by the browser, or did not get created properly in the beginning.
                                console.log('In bw.offline.core.js.ProcessOfflineUpload(). The database has been destroyed by the browser, or did not get created properly in the beginning.');
                                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload(). The database has been destroyed by the browser, or did not get created properly in the beginning.');
                                //var objectStoreOfflineFiles = db.createObjectStore("OfflineAttachedFiles", { autoIncrement: true, keyPath: "id" }); // Offline file attachments. This may seem weird with the keypath, but it fixes iPhone behaviour.
                                ////objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                                ////objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                                ////objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                                ////objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                                ////objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                                //objectStoreOfflineFiles.transaction.oncomplete = function (event) {
                                //    console.log('In xxx.objectStoreOfflineFiles.transaction.oncomplete(). Preparing to create indexes.');
                                //    objectStoreOfflineFiles.createIndex("encodingType", "encodingType", { unique: false }); // This has the following so far: 'blob', 'uInt8Array', 
                                //    objectStoreOfflineFiles.createIndex("fileContents", "fileContents", { unique: false });
                                //    objectStoreOfflineFiles.createIndex("fileName", "fileName", { unique: false });
                                //    objectStoreOfflineFiles.createIndex("fileDescription", "fileDescription", { unique: false });
                                //    objectStoreOfflineFiles.createIndex("bwBudgetRequestId", "bwBudgetRequestId", { unique: false });
                                //    console.log('In xxx.objectStoreOfflineFiles.transaction.oncomplete(). Successfully created indexes.');

                                //    //var transaction = db.transaction("OfflineAttachedFiles", 'readwrite'); //IDBTransaction.READ_WRITE); 
                                //};
                            } else {
                                console.log('In bw.offline.core.js.ProcessOfflineUpload(). ERROR ACCESSING OfflineAttachedFiles DATABASE33!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                                displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload(). ERROR ACCESSING OfflineAttachedFiles DATABASE33!!!!!!!!!!!!' + e.message + ', ' + e.stack);
                            }
                        }
                        try {
                            var put = transaction.objectStore("OfflineAttachedFiles").add(dbRecord); // Don't need a key, it autonumbers. 
                        } catch (e) {
                            console.log('In bw.offline.core.js.ProcessOfflineUpload(). Exception performing add on indexDB: ' + e.message + ', ' + e.stack);
                            displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload(). Exception performing add on indexDB: ' + e.message + ', ' + e.stack);
                        }
                        console.log('In bw.offline.core.js.ProcessOfflineUpload(). Successfully executed var put = transaction.objectStore(OfflineAttachedFiles).add(dbRecord);');

                        put.onsuccess = function (event) {
                            console.log("In bw.offline.core.js.ProcessOfflineUpload(). Successfully stored file in the database.");
                            thiz.populateOfflineAttachments(displayAttachmentsTagName); //_budgetRequestId);
                        };
                        put.onerror = function (e) {
                            console.error(e.target);
                            console.log('In bw.offline.core.js.ProcessOfflineUpload().put.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                            displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().put.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                        };
                        put.transaction.oncomplete = function (e) {
                            console.log('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.oncomplete.');
                        };
                        put.transaction.onerror = function (e) {
                            console.log('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                            displayAlertDialog('In bw.offline.core.js.ProcessOfflineUpload().put.transaction.onerror: ' + e.target.error.name || e.target.error || e.target.errorCode);
                        };

                    }

                } catch (e) {
                    console.log('Exception in bw.offline.core.js.ProcessOfflineUpload(xxx). indexDBName: ' + thiz.options.indexDBName + ', indexDBVersion: ' + thiz.options.indexDBVersion + ', error: ' + e.message + ', ' + e.stack);
                    displayAlertDialog('Exception in bw.offline.core.js.ProcessOfflineUpload(xxx). indexDBName: ' + thiz.options.indexDBName + ', indexDBVersion: ' + thiz.options.indexDBVersion + ', error: ' + e.message + ', ' + e.stack);
                }
            };

        } catch (e) {
            displayAlertDialog('Exception In bw.offline.core.js.ProcessOfflineUpload:7:(' + displayAttachmentsTagName + ', ' + _budgetRequestId + '): ' + e.message + ', ' + e.stack);
        }
    },

    clearNewBudgetRequestFormFields: function () {
        // This clears the fields because the request has been submitted. We don't want these to show up opulated when the user goes to submit another one.
        try {
            //document.getElementById('strProjectTitle').value = '';
            //document.getElementById('strBriefDescriptionOfProject').value = '';
            //document.getElementById('dblRequestedCapital').value = '';
            //document.getElementById('txtProjectManagerName').value = '';
            //document.getElementById('txtProjectManagerId').value = '';
            //document.getElementById('txtProjectManagerEmail').value = '';
            //document.getElementById('dtEstimatedStartDate').value = '';
            //document.getElementById('dtEstimatedEndDate').value = '';
            //document.getElementById('inputFile').value = '';
        } catch (e) {
            this.displayAlertDialog('Error in bwRequest.js.clearNewBudgetRequestFormFields().');
        }
    },

    cmdCreateBudgetRequestAndSaveToMyDevice: function () {

        try {
            this.displayAlertDialog('This functionality is being worked on. It may not work as expected. Click the Cancel button to return to the home page. This functionality is coming soon!');
            var thiz = this;
            if (thiz.options.indexDBVersion > 0) { // In Edge, if we specify 0, it raises an error.
                var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            } else {
                if (!thiz.options.indexedDBInstance) {
                    // debugger;
                    //
                    //
                    //
                    // WE NEED TO FIGURE OUT THE BEST WAY TO INSTANTIATE thiz.options.indexedDBInstance !!! 10-20-2020 6-01pm adt.
                    //
                    //
                    //
                    //





                } else {
                    var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName);
                }
            }
            //var request = thiz.options.indexedDBInstance.open(thiz.options.indexDBName, thiz.options.indexDBVersion);
            request.onblocked = function (event) {
                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onblocked() errorCode: ' + event.target.errorCode);
                displayAlertDialog('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onblocked() errorCode: ' + event.target.errorCode);
            };
            request.onerror = function (event) {
                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onerror() errorCode: ' + event.target.errorCode);
                displayAlertDialog('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onerror() errorCode: ' + event.target.errorCode);
            };

            request.onsuccess = function (event) {
                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess() Attempting to access IndexedDB database: "' + event.target.result.name + '".');

                var db = event.target.result;
                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess(). Successfully opened the database "' + event.target.result.name + '".');

                // Create a cached request.

                //var newBudgetRequest = 'xxnewBudgetRequestxx';
                var _newRequest = [];
                var tenantId = ''; // Until the user logs in, we can't find this out.
                // // debugger; // workflowAppId check. xcx7
                var workflowAppId = ''; // Until the user logs in, we can't find this out.
                var participantFriendlyName = ''; // Until the user logs in, we can't find this out.
                var participantId = ''; // Until the user logs in, we can't find this out.
                var participantEmail = ''; // Until the user logs in, we can't find this out.

                try {
                    // First we get the guid that was created when the new request form was displayed. It is done here because we need the guid prior to doing attachment file uploads so that they get stored in the correct location.
                    var guid = document.getElementById('OfflineRequestBudgetRequestId').innerHTML;
                    // Then we have to check if this is a recurring expense, and if the user wants to submit the first budget request immediately.
                    //var isARecurringExpense = document.getElementById('cbNewRequestRecurringExpenseEnabled').checked;

                    var isARecurringExpense = false;
                    try {
                        if ($('#selectOfflineRequestNewRequestFormRequestTypeDropDown option:selected').val() == 'recurringexpense') {
                            isARecurringExpense = true;
                        }
                    } catch (e) {
                        console.log('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess() while looking up #selectOfflineRequestNewRequestFormRequestTypeDropDown option:selected).val(): ' + e.message);
                        displayAlertDialog('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess() while looking up #selectOfflineRequestNewRequestFormRequestTypeDropDown option:selected).val(): ' + e.message);
                    }
                    if (isARecurringExpense == true) {

                        //displayAlertDialog('This is a Recurring Expense. cmdCreateBudgetRequestAndStartWorkflow()');

                        var recurringExpenseId = document.getElementById('OfflineRequestRecurringExpenseId').innerHTML;

                        //displayAlertDialog('RecurringExpenseId: ' + reGuid);

                        var recurringExpenseReminderDate = document.getElementById('dtOfflineRequestRecurringExpenseReminderDate').value;
                        var submitTheFirstRecurringExpenseImmediately = document.getElementById('cbOfflineNewRequestRecurringExpenseSubmitImmediately').checked;
                        //if (validateCapexForm2()) {
                        // First we will save the recurring expense, then we will submit the first one if the user chose this option.
                        var xmlDocument = createXmlDocument_InitRecurringExpense(recurringExpenseId);
                        var projectTitle = document.getElementById('strOfflineRequestProjectTitle').value;

                        //displayAlertDialog('projectTitle: ' + projectTitle);

                        //var _recurringExpense = [];
                        //var _functionalAreaId = document.getElementById('ddlOfflineRequestFunctionalArea').value.split('|')[0];
                        //var _pmAccountId = document.getElementById('txtOfflineRequestProjectManagerId').value;
                        var requestedCapital = document.getElementById('dblOfflineRequestRequestedCapital').value.replace(/[^0-9-.]/g, '');
                        //var requestedExpense = document.getElementById('dblRequestedExpense').value;
                        var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
                        //var created = getCreatedTimestamp();
                        //var duedate = getDueDateTimestamp();
                        _newRequest = {
                            submitTheFirstRecurringExpenseImmediately: submitTheFirstRecurringExpenseImmediately,
                            bwRecurringExpenseId: recurringExpenseId,
                            bwTenantId: tenantId,
                            bwWorkflowAppId: workflowAppId,
                            bwWorkflowId: null,
                            CreatedBy: participantFriendlyName,
                            CreatedById: participantId,
                            CreatedByEmail: participantEmail,
                            ReminderDate: recurringExpenseReminderDate,
                            bwDocumentXml: xmlDocument.toString(),
                            ProjectTitle: projectTitle.toString(),
                            BudgetAmount: null,
                            RequestedCapital: requestedCapital,
                            RequestedExpense: requestedExpense,
                            FunctionalAreaId: null, // _functionalAreaId,
                            Quote: 'false',
                            ManagerId: null //_pmAccountId
                            // TODD: WE NEED firendly name and email here as well.
                        };
                    } else {
                        // This is not a recurring expense, just a regular budget request!
                        //var filename = guid + ".xml";
                        //if (validateCapexForm2()) {
                        var xmlDocument = thiz.createXmlDocument_InitOfflineAr(guid);
                        if (xmlDocument == 'FAILED') {
                            displayAlertDialog('Failed to create XML.');

                            //console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.put.onsuccess(): Successfully stored _newRequest in the database. ' + JSON.stringify(_newRequest));
                            //renderWelcomePageOffline(); // Return the user to the home page.


                        } else {

                            try {
                                var projectTitle = document.getElementById('strProjectTitle').value;
                            } catch (e) {
                                var projectTitle = document.getElementById('strProjectTitle').innerHTML;
                            }
                            //var _budgetRequest = [];
                            //try {
                            //    var _functionalAreaId = document.getElementById('ddlOfflineRequestFunctionalArea').value.split('|')[0];
                            //} catch(e) {
                            //    var _functionalAreaId = document.getElementById('ddlOfflineRequestFunctionalArea').innerHTML.split('|')[0];
                            //}
                            var _pmAccountId; // = document.getElementById('txtOfflineRequestProjectManagerId').value;
                            var requestedCapital = 0;
                            //try {
                            //    var requestedCapital = document.getElementById('dblOfflineRequestRequestedCapital').value.replace(/[^0-9-.]/g, '');
                            //} catch (e) {
                            //    var requestedCapital = document.getElementById('dblOfflineRequestRequestedCapital').innerHTML.replace(/[^0-9-.]/g, '');
                            //}
                            //var requestedExpense = document.getElementById('dblRequestedExpense').value;
                            var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
                            var created = thiz.getCreatedTimestamp();
                            var duedate = thiz.getDueDateTimestamp();

                            var isAQuote = false;
                            if ($('#selectOfflineNewRequestFormRequestTypeDropDown option:selected').val() == 'quoterequest') {
                                isAQuote = true;
                            }

                            _newRequest = {
                                //filename: filename,
                                bwBudgetRequestId: guid.toString(),
                                bwTenantId: tenantId,
                                bwWorkflowAppId: workflowAppId,
                                bwWorkflowId: null,
                                IsSupplementalRequest: 'false',
                                RelatedBudgetRequestId: null,

                                IsRecurringExpense: 'false', // Recurring expense.
                                RelatedRecurringExpenseId: null, // Recurring expense.

                                CreatedBy: participantEmail,
                                CreatedById: participantId,
                                CreatedByEmail: participantEmail,
                                bwDocumentXml: xmlDocument.toString(),
                                ProjectTitle: projectTitle.toString(),
                                BudgetAmount: null,
                                RequestedCapital: requestedCapital,
                                RequestedExpense: requestedExpense,
                                FunctionalAreaId: null, //_functionalAreaId,
                                ARStatus: 'Submitted',
                                BudgetWorkflowStatus: 'Assign Budget',
                                Quote: isAQuote,
                                ManagerId: null, //_pmAccountId,
                                bwWorkflowToken: '0' // 0 signifies the beginning of the workflow.
                            };







                            console.log("In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess(): New request successfully stored in _newRequest variable.");

                            //if (_newRequest != undefined) {
                            //    renderThereAreCachedRequestsStatus();
                            //}



                            // Create and revoke ObjectURL
                            //var imgURL = URL.createObjectURL(imgFile);
                            //if (_newRequest != undefined) {

                            try {
                                // Open a transaction to the database
                                var transaction = db.transaction("objectStoreCachedRequests", 'readwrite'); //IDBTransaction.READ_WRITE); 
                            } catch (e) {
                                console.log('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess()2:. FAILED TO OPEN A TRANSACTION to the database...' + e.message + ', ' + e.stack);
                                displayAlertDialog('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess()2:. FAILED TO OPEN A TRANSACTION to the database...' + e.message + ', ' + e.stack);
                            }


                            var put = transaction.objectStore("objectStoreCachedRequests").put(_newRequest); // Don't need a key, it autonumbers. 

                            put.onsuccess = function (event) {
                                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.put.onsuccess(): Successfully stored _newRequest in the database. ' + JSON.stringify(_newRequest));
                                //try {
                                // This is for ios8.html
                                //thiz.renderWelcomePageOffline(); // Return the user to the home page.
                                //} catch (e) {
                                //    //  This is for index.html
                                //    renderWelcomePage();
                                //}
                                $('#divCreateRequestFormDialog').dialog('close');
                                displayAlertDialog('Successfully stored the new request on your device. It will be available to submit when you log in.');
                                thiz.displayListOfRequestsStoredInIndexDb(); // Update the displayed list.
                            };
                            put.onerror = function (event) {
                                console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.put.onerror(): Error storing _newRequest in the database. ' + this.error);
                                displayAlertDialog('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.put.onerror(): Error storing _newRequest in the database. ' + this.error);
                            };



                            //renderThereAreCachedRequestsStatus(_newRequest);
                            //
                            //}


                            console.log('In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess():. Stored new request in IndexedDB:22.');

















                        }
                        //} else {
                        //    // Validation failed for some reason. This is caught in validateCapexForm2 so we don't need to do anything here.
                        //    // displayAlertDialog('Error: Validation failed for some reason.');
                        //}
                    }
                } catch (e) {
                    console.log('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess()1: ' + e.message + ', ' + e.stack);
                    displayAlertDialog('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess()1: ' + e.message + ', ' + e.stack);
                }





            }
        } catch (e) {
            console.log('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess():3: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception In bwRequest.js.cmdCreateBudgetRequestAndSaveToMyDevice.request.onsuccess():3: ' + e.message + ', ' + e.stack);
        }
    },







    cmdCreateBudgetRequestAndStartWorkflow: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.cmdCreateBudgetRequestAndStartWorkflow(). bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;

            ShowActivitySpinner('Submitting the request...');

            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-6');
            var promise = this.scrapeBwRequestJson(bwBudgetRequestId);
            promise.then(function (results) {
                try {

                    console.log('Returning from scrapeBwRequestJson(). xcx2131241-6');

                    if (results.status != 'SUCCESS') {

                        var msg = 'Error in cmdCreateBudgetRequestAndStartWorkflow(). ' + results.status + ', ' + results.mesage;
                        displayAlertDialog(msg);

                    } else {

                        var bwRequestJson = results.bwRequestJson;

                        // check that bwRequestJson exists and is in JSON object format? 8-15-2020
                        console.log('In cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson().bwRequestJson.xcx2: ' + JSON.stringify(bwRequestJson, 2, null));

                        //
                        // WE ALWAYS NEED ORG INFO. FAIL THIS IMMEDIATELY IF NOT PRESENT.
                        //
                        //
                        if (!(bwRequestJson.bwOrgId && bwRequestJson.bwOrgName)) { // 12-9-2021 Do we need to specify OrgName? Hmmmm && bwRequestJson.bwOrgName)) {

                            HideActivitySpinner();
                            console.log('FATAL ERROR in cmdCreateBudgetRequestAndStartWorkflow(). The organization has not been specified. bwOrgId: ' + bwRequestJson.bwOrgId + ', bwOrgName: ' + bwRequestJson.bwOrgName);
                            displayAlertDialog('FATAL ERROR in cmdCreateBudgetRequestAndStartWorkflow(). The organization has not been specified. bwOrgId: ' + bwRequestJson.bwOrgId + ', bwOrgName: ' + bwRequestJson.bwOrgName + ', bwRequestJson: ' + JSON.stringify(bwRequestJson));

                        } else {

                            var budgetrequestform;
                            var budgetrequestforms = $('#budgetrequestform');
                            for (var i = 0; i < budgetrequestforms.length; i++) {
                                var _budgetRequestId = $(budgetrequestforms[i])[0].getAttribute('bwbudgetrequestid');
                                if (bwBudgetRequestId == _budgetRequestId) {
                                    // We found the form.
                                    budgetrequestform = $(budgetrequestforms[i])[0];
                                    break;
                                }
                            }

                            if (!budgetrequestform) {

                                HideActivitySpinner();
                                displayAlertDialog('Error in bwRequest.js.cmdCreateBudgetRequestAndStartWorkflow(). Could not find the request form. xcx1232563 budgetrequestform: ' + JSON.stringify(budgetrequestform));

                            } else {

                                // TO-DO: 7-14-2020
                                // Validate the bwRequestJson. Go through and check all widgets to see if they have required fields/red asterisks...
                                // Create the array of required fields.
                                var incompleteRequiredFields = [];

                                // 1-13-2022
                                //var widgets = $('#' + requestDialogId + ' [bwwidgetname]');
                                var widgets = $(budgetrequestform).find('.bwwidgetname'); // + ' [bwwidgetname]');
                                // debugger;

                                for (var i = 0; i < widgets.length; i++) {
                                    var widgetName = widgets[i].getAttribute('bwwidgetname');
                                    var isARequiredField = $(widgets[i])[widgetName]('isARequiredField');
                                    //// debugger;
                                    if (isARequiredField == true) {
                                        var data = $(widgets[i])[widgetName]('getData');
                                        if (!data) { // If data comes back as null, then make it show up as a required field!! We need this completed before we can submit this request.
                                            var fieldTitle = $(widgets[i])[widgetName]('getfieldTitle');
                                            incompleteRequiredFields.push(fieldTitle);
                                        }
                                    }
                                }

                                if (incompleteRequiredFields.length > 0) {

                                    HideActivitySpinner();
                                    var html = '';
                                    html += 'Please complete these fields before submitting this request: ' + '<br />';
                                    for (var i = 0; i < incompleteRequiredFields.length; i++) {
                                        html += '<span style="font-style:italic;">- ' + incompleteRequiredFields[i] + '</span><br />';
                                    }
                                    displayAlertDialog(html);

                                } else {

                                    var isAQuote = false;
                                    //if ($('#selectNewRequestFormRequestTypeDropDown option:selected').val() == 'quoterequest') {
                                    if (bwRequestJson.bwRequestType == 'quoterequest') {
                                        isAQuote = true;
                                    }

                                    // bwBudgetRequestPlaceholder1 is the column name, to be changed in the future.
                                    var isAReimbursementRequest = false;
                                    //if ($('#selectNewRequestFormRequestTypeDropDown option:selected').val() == 'expenserequest') {
                                    if (bwRequestJson.bwRequestType == 'expenserequest') {
                                        isAReimbursementRequest = true;
                                    }

                                    // debugger; // CHECKOUT!!!!!!!!!!!!!!!!!! bwRequestJson for fiscal year and request type abbreviation (using this for the title prefix eg: BR-)

                                    if (!bwRequestJson.RequestedCapital) {
                                        //displayAlertDialog('No value was entered for RequestedCapital. This is a required field.xcx2');
                                        bwRequestJson.RequestedCapital = 0;
                                    }


                                    // debugger; // We should have a good bwRequestJson here with no duplicate scraping!!!!!!!!!!!!!!!!!!!!! Check Below: bwRequestJson.RequestedCapital.value <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                    var ProjectManager_ParticipantId;
                                    if (bwRequestJson.ProjectManager && bwRequestJson.ProjectManager.ParticipantId) {
                                        ProjectManager_ParticipantId = bwRequestJson.ProjectManager.ParticipantId;
                                    } else {
                                        console.log('No bwRequestJson.ProjectManager element found on the form.');
                                    }


                                    // 1-13-2022
                                    var bwRequestTypeId = $(budgetrequestforms[i])[0].getAttribute('bwrequesttypeid'); //var _budgetRequestId = $(budgetrequestforms[i])[0].getAttribute('bwbudgetrequestid');
                                    console.log('>>>>>>>>>>>>>> bwRequestTypeId xcx678854: ' + bwRequestTypeId);
                                    // debugger;


                                    // 1-23-2022
                                    var bwRequestTypeAbbreviation;
                                    var bwEnabledRequestTypes = $('.bwAuthentication').bwAuthentication('option', 'bwEnabledRequestTypes').EnabledItems;
                                    //var requestTypes = bwEnabledRequestTypes.EnabledItems; // Global, populated in the beginning when the app loads.
                                    for (var i = 0; i < bwEnabledRequestTypes.length; i++) {
                                        if (bwRequestTypeId == bwEnabledRequestTypes.bwRequestTypeId) {
                                            bwRequestTypeAbbreviation = bwEnabledRequestTypes.Abbreviation;
                                        }
                                    }



                                    var projectTitle = '';
                                    if (bwRequestJson.ProjectTitle && bwRequestJson.ProjectTitle.value) {
                                        projectTitle = bwRequestJson.ProjectTitle.value; // We get here when there is no "Description" (ProjectTitle) widget on the request form. For instance, for restaurant receipts, we don't need a title for the request.
                                    }
                                    // debugger;

                                    var requestedCapital = '';
                                    if (bwRequestJson.RequestedCapital && bwRequestJson.RequestedCapital.value) {
                                        requestedCapital = bwRequestJson.RequestedCapital.value; // We get here when there is no "Description" (ProjectTitle) widget on the request form. For instance, for restaurant receipts, we don't need a title for the request.
                                        if (requestedCapital) {
                                            requestedCapital = requestedCapital.replace('$', '');
                                        }
                                    }

                                    var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                                    var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                                    var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                                    var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                                    //var activeStateIdentifier = JSON.parse($('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier')).ActiveStateIdentifier;
                                    var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
                                    //alert('xcx2131232 activeStateIdentifier: ' + activeStateIdentifier);
                                    // debugger; // Check that the bwRequestJson has the comments stored/scraped in it properly. Check bwOrgName!! 1-31-2022

                                    _budgetRequest = {
                                        bwParticipantId_LoggedIn: participantId,
                                        bwActiveStateIdentifier: activeStateIdentifier,
                                        bwWorkflowAppId_LoggedIn: workflowAppId,

                                        //bwWorkflowAppId: workflowAppId,
                                        //bwBudgetRequestId: bwBudgetRequestId,
                                        //bwParticipantId: participantId

                                        bwBudgetRequestId: bwRequestJson.bwBudgetRequestId, //thiz.options.bwBudgetRequestId, //guid.toString(), // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<WHAT IS THIS???????????????
                                        bwTenantId: bwRequestJson.bwTenantId,
                                        bwWorkflowAppId: bwRequestJson.bwWorkflowAppId,


                                        //bwWorkflowId: bwRequestJson.bwWorkflowId, // added 9-29-2020





                                        bwRequestTypeId: bwRequestTypeId, //bwRequestJson.bwRequestType,
                                        bwRequestTypeAbbreviation: bwRequestTypeAbbreviation,





                                        //bwWorkflowId: null, // This gets figured out on the server side.
                                        IsSupplementalRequest: 'false',
                                        RelatedBudgetRequestId: null,

                                        IsRecurringExpense: 'false', // Recurring expense.
                                        RelatedRecurringExpenseId: null, // Recurring expense.

                                        CreatedById: participantId,
                                        CreatedBy: participantFriendlyName, // participantEmail // Changed 3-4-2022
                                        CreatedByEmail: participantEmail,

                                        bwRequestJson: JSON.stringify(bwRequestJson), //thiz.options.store),



                                        // 1-22-2022
                                        ProjectTitle: projectTitle, // bwRequestJson.ProjectTitle.value, //thiz.options.store.ProjectTitle, //projectTitle.toString(),
                                        RequestedCapital: requestedCapital, // bwRequestJson.RequestedCapital.value, //thiz.options.store.RequestedCapital,



                                        BudgetAmount: null,

                                        //RequestedExpense: bwRequestJson.RequestedExpense.value, //thiz.options.store.RequestedExpense,
                                        //FunctionalAreaId: bwRequestJson.FunctionalAreaId.value, //thiz.options.store.FunctionalAreaId, //_functionalAreaId,

                                        OrgId: bwRequestJson.bwOrgId, //document.getElementById('txtLocationPickerFilter').getAttribute('bwOrgId'),
                                        OrgName: bwRequestJson.bwOrgName, //document.getElementById('txtLocationPickerFilter').value,

                                        ARStatus: 'Submitted',
                                        BudgetWorkflowStatus: 'Admin', //'Assign Budget',
                                        Quote: isAQuote,
                                        bwBudgetRequestPlaceholder1: isAReimbursementRequest,
                                        ManagerId: ProjectManager_ParticipantId, // bwRequestJson.ProjectManager.ParticipantId, //thiz.options.store.ProjectManager.Person.AccountId, //_pmAccountId,
                                        bwWorkflowToken: '0' // 0 signifies the beginning of the workflow.
                                    };
                                    debugger;
                                    //var operationUri = thiz.options.operationUriPrefix + "_bw/bwbudgetrequests/initbudgetrequest"; // This web service needs to check if a workflow is already underway for this request!
                                    var operationUri = thiz.options.operationUriPrefix + "_bw/initializebudgetrequest"; // This web service needs to check if a workflow is already underway for this request!
                                    $.ajax({
                                        url: operationUri,
                                        type: "POST",
                                        data: _budgetRequest,
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        error: function (data, errorCode, errorMessage) {
                                            debugger;
                                            alert('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
                                            HideActivitySpinner();
                                            displayAlertDialog('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
                                            //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'Error creating the budget request in budgetrequests library. ' + JSON.stringify(data);

                                        },
                                        success: function (results) {
                                            try {
                                                debugger;
                                                HideActivitySpinner();

                                                if (!((results.status == 'SUCCESS') || (results.status == 'COMPLETED'))) {

                                                    console.log('The budget request may not be submitted. This may be a duplicate BudgetRequestIdxcx2. Unexpected response: ' + results.status + ', ' + results.message);
                                                    if (!results.message) {

                                                        //
                                                        //
                                                        // WE HAVE A PROBLEM HERE. 12-13-2023.
                                                        //
                                                        //

                                                        displayAlertDialog('The budget request may not be submitted. xcx123142155678990. Unexpected response: results: ' + JSON.stringify(results) + ', status: ' + results.status + ', message: ' + results.message);

                                                    } else {
                                                        var tmpIndex = results.message.indexOf('This most likely means this organization does not have a workflow for this request type:');
                                                        if (tmpIndex > -1) {
                                                            // This means there is no workflow for this request type. We will give the user the option to "Save to their device" right here so it is just 1 button click.

                                                            console.log('');
                                                            console.log('**************');
                                                            console.log('This means there is no workflow for this request type. We will give the user the option to "Save to their device" right here so it is just 1 button click.');
                                                            console.log('**************');
                                                            console.log('');
                                                            var bwRequestTypeId = results.message.substring(tmpIndex).split(':')[1].trim();
                                                            displayAlertDialog('There is no workflow available for this request type (' + bwRequestTypeId + ').<br /><br />Click the "Save" button to save it now.'); //, and come back later when there is a workflow for this request type.');

                                                        } else {
                                                            displayAlertDialog('The budget request may not be submitted. Unexpected response: ' + results.status + ', ' + results.message);
                                                        }

                                                    }

                                                } else {

                                                    displayAlertDialog_QuickNotice('The request has been submitted');


                                                    // REMOVED 11-7-2023. We dont need this anymore because when we submit, we immediately return to the Home screen.
                                                    // Disable the "Submit" button so that this doesn't happen twice!!! 
                                                    $(budgetrequestform).find('#startWorkflowButton')[0].setAttribute('disabled', 'disabled');
                                                    $(budgetrequestform).find('#spanRequestForm_Instructions').html('This request has been submitted.');



                                                    console.log('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN. xcx2321312-1.');
                                                    //alert('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN.  xcx2321312-1.');

                                                    //
                                                    // 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN.
                                                    //
                                                    $('.bwAuthentication').bwAuthentication('option', 'NEW_REQUEST_LastSavedJson', null);

                                                    //
                                                    // Find the New Request form, and remove it from the DOM. This accomplishes a few things:
                                                    //      - It prevents the bwBudgetRequestId from being submitted a second time. 
                                                    //      - It ensures that the user is presented with a blank "New Request Form" the next time around.
                                                    //
                                                    var forms = $(document).find('.budgetrequestform');
                                                    for (var i = 0; i < forms.length; i++) {
                                                        var bwrequesttitle = $(forms[i]).attr('bwrequesttitle'); // These 2 attributes should already be populated: bwrequesttypeid, bwrequesttitle.
                                                        if (bwrequesttitle == 'New') { // This makes sure we can find and regularly save the contents of the NEW REQUEST form, if it is open/displayed.
                                                            forms[i].remove(); // Remove it from the DOM.
                                                            break;
                                                        }
                                                    }

                                                    $('.bwActiveMenu').bwActiveMenu('RenderContentForButton', this, 'HOME');












                                                    // Now we have to delete it from IndexDb.
                                                    // debugger;
                                                    var db = $('.bwCoreComponent').bwCoreComponent('getIndexDbInstance');
                                                    if (!db.transaction) {
                                                        // No indexdb? not sure... 4-19-2022
                                                        console.log("In cmdDisplayDeleteUnsubmittedBudgetRequestDialog():xcx1234234: Could not find indexdb..?");
                                                        //populateStartPageItem('divWelcome', 'Reports', '');

                                                        // 1-13-2022
                                                        //$('#' + requestDialogId).dialog('close'); // Close the request dialog.
                                                        var tmpDialog = $(budgetrequestform).closest('.ui-dialog');
                                                        $(tmpDialog).dialog('close'); // Close the request dialog.

                                                        $('.bwActiveMenu').bwActiveMenu('RenderContentForButton', 'NEW_REQUEST_FORM_CANCEL_BUTTON', 'HOME');

                                                    } else {
                                                        var objectStore = db.transaction("objectStoreCachedRequests").objectStore("objectStoreCachedRequests");
                                                        objectStore.openCursor().onsuccess = function (event) {
                                                            try {
                                                                // debugger;
                                                                var cursor = event.target.result;
                                                                if (cursor) {
                                                                    if (cursor.value.bwBudgetRequestId == bwRequestJson.bwBudgetRequestId) {
                                                                        var transaction = db.transaction("objectStoreCachedRequests", 'readwrite');
                                                                        var del = transaction.objectStore("objectStoreCachedRequests").delete(cursor.primaryKey); // Don't need a key, it autonumbers. 

                                                                        del.onsuccess = function (event) {
                                                                            try {
                                                                                // debugger;
                                                                                console.log("In cmdDisplayDeleteUnsubmittedBudgetRequestDialog.objectStore.openCursor.onsuccess.del.onsuccess(). Successfully deleted request from the database.");
                                                                                //populateStartPageItem('divWelcome', 'Reports', '');

                                                                                // 1-13-2022
                                                                                //$('#' + requestDialogId).dialog('close'); // Close the request dialog.
                                                                                var tmpDialog = $(budgetrequestform).closest('.ui-dialog');
                                                                                $(tmpDialog).dialog('close'); // Close the request dialog.

                                                                                $('.bwActiveMenu').bwActiveMenu('RenderContentForButton', 'NEW_REQUEST_FORM_CANCEL_BUTTON', 'HOME');


                                                                                //displayAlertDialog('The budget request has been submitted');

                                                                            } catch (e) {
                                                                                console.log('Exception in my.js.cmdCreateBudgetRequestAndStartWorkflow.objectStore.openCursor.onsuccess.del.onsuccess(' + requestId + ', ' + title + ', ' + requestedAmount + '): ' + e.message + ', ' + e.stack);
                                                                                displayAlertDialog('Exception in my.js.cmdCreateBudgetRequestAndStartWorkflow.objectStore.openCursor.onsuccess.del.onsuccess(' + requestId + ', ' + title + ', ' + requestedAmount + '): ' + e.message + ', ' + e.stack);
                                                                            }

                                                                        };

                                                                        del.onerror = function (event) {
                                                                            // debugger;
                                                                            console.error("In cmdCreateBudgetRequestAndStartWorkflow.objectStore.openCursor.onsuccess.del.onerror(). Error deleting request from the database.", this.error);
                                                                            displayAlertDialog("In cmdCreateBudgetRequestAndStartWorkflow.objectStore.openCursor.onsuccess.del.onerror(). Error deleting request from the database.", this.error);
                                                                        };

                                                                    }
                                                                    cursor.continue();

                                                                    // debugger;

                                                                } else {
                                                                    console.log('In my.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog3. DONE LOOPING.');
                                                                }
                                                            } catch (e) {
                                                                console.log('Exception in my.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog4. xxError: ' + e.message + ', ' + e.stack);
                                                                displayAlertDialog('Exception in my.js.cmdDisplayDeleteUnsubmittedBudgetRequestDialog4. xxError: ' + e.message + ', ' + e.stack);
                                                            }
                                                        };
                                                    }

                                                }

                                            } catch (e) {

                                                HideActivitySpinner();
                                                var msg = 'Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson.initbudgetrequest(): ' + e.message + ', ' + e.stack;
                                                console.log(msg);
                                                displayAlertDialog(msg);
                                                //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson.initbudgetrequest(): ' + e.message + ', ' + e.stack;
                                                $(budgetrequestform).find('#spanRequestForm_Error')[0].innerHTML = msg;
                                            }
                                        }
                                    });
                                }
                            }
                        }
                    }

                } catch (e) {

                    HideActivitySpinner();
                    var msg = 'Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson():2-2: ' + e.message + ', ' + e.stack;
                    console.log(msg);
                    displayAlertDialog(msg);
                    //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'Exception in cmdCreateBudgetRequestAndStartWorkflow().scrapeBwRequestJson():2: ' + e.message + ', ' + e.stack;
                    $(budgetrequestform).find('#spanRequestForm_Error')[0].innerHTML = msg;

                }
            });

        } catch (e) {

            HideActivitySpinner();
            console.log('Exception in bwRequest.js.cmdCreateBudgetRequestAndStartWorkflow(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.cmdCreateBudgetRequestAndStartWorkflow(): ' + e.message + ', ' + e.stack);

        }
    },
    scrapeBwRequestJson: function (bwBudgetRequestId) {
        //
        // This is the only place where the SCRAPING should be taking place! 11-11-2022. See also method initializeRequestFormWidgets().
        //
        var thiz = this;
        return new Promise(function (resolve, reject) {
            try {
                console.log('In scrapeBwRequestJson(' + bwBudgetRequestId + ').');
                //alert('In scrapeBwRequestJson(' + bwBudgetRequestId + ').');

                if (!bwBudgetRequestId) {

                    var msg = 'Error in scrapeBwRequestJson(). Unexpected value for bwBudgetRequestId: ' + bwBudgetRequestId;
                    displayAlertDialog(msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }

                    reject(result);

                } else {

                    var bwRequestJson = {};

                    var window1 = window; // This is how we make this work for popped-out request dialog windows.
                    if (window.opener) {
                        window1 = window.opener;
                    }

                    // Find the request form.
                    console.log('In bwRequest.js.scrapeBwRequestJson(). Finding the budgetrequestform.');
                    var budgetrequestform;
                    var budgetrequestforms = window1.document.getElementsByClassName('budgetrequestform');
                    for (var i = 0; i < budgetrequestforms.length; i++) {
                        var _budgetRequestId = budgetrequestforms[i].getAttribute('bwbudgetrequestid');
                        if (bwBudgetRequestId == _budgetRequestId) {
                            // We found the form.
                            console.log('>>>>>>> In bwRequest.js.scrapeBwRequestJson(). WE FOUND THE FORM in the main window. bwBudgetRequestId: ' + bwBudgetRequestId);
                            //displayAlertDialog_Persistent('>>>>>>> In bwRequest.js.scrapeBwRequestJson(). WE FOUND THE FORM in the main window. bwBudgetRequestId: ' + bwBudgetRequestId);
                            budgetrequestform = budgetrequestforms[i];
                            break;
                        }
                    }

                    debugger;
                    if (!budgetrequestform) {
                        //
                        //
                        // Now lets also get all of the popped out windows. 5-9-2024.
                        //
                        //
                        //alert('In bwRequest.js.scrapeBwRequestJson(). Didnt find a request, so looking in the POPPED OUT windows.');


                        //var window1 = window; // This is how we make this work for popped-out request dialog windows.
                        //if (window.opener) {
                        //    window1 = window.opener;
                        //}

                        var poppedOutRequestWindows = window1.$('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');

                        var weFoundTheFormInAPoppedOutWindow = false;
                        //debugger; // <<<<<<<<<<<<<<<<<< <<<<<<<<<<<< <<<<<<<<<<<<<< ##################################
                        //var poppedOutRequestWindows = $('.bwAuthentication:first').bwAuthentication('option', 'poppedOutRequestWindows');
                        ////var budgetrequestforms_poppedout = document.getElementsByClassName('budgetrequestform');
                        if (poppedOutRequestWindows && poppedOutRequestWindows.length) {
                            for (var i = 0; i < poppedOutRequestWindows.length; i++) {

                                if (bwBudgetRequestId == poppedOutRequestWindows[i].bwBudgetRequestId) {
                                    // We found the form.
                                    debugger;
                                    var document1 = poppedOutRequestWindows[i].windowObjectReference.document;
                                    budgetrequestform = document1.getElementsByClassName('budgetrequestform')[0];
                                    weFoundTheFormInAPoppedOutWindow = true;
                                    console.log('In bwRequest.js.scrapeBwRequestJson(). WE FOUND THE FORM in a popped-out window. bwBudgetRequestId: ' + bwBudgetRequestId);
                                    break;
                                }
                            }
                        }
                    }
                    debugger;




                    if (!budgetrequestform) {

                        //
                        // We can get here if the user clicks on an executive summary but has logged-in somewhere else... so the code cannot fnd the form bwbudgetrequestid attribute. 4-9-2023.
                        //
                        var msg = 'In bwRequest.js.scrapeBwRequestJson(). Could not find the form for bwBudgetRequestId: ' + bwBudgetRequestId + '. If there is a dialog displayed, going to close it now.... xcx774433.';
                        console.log(msg);

                        // Try to close the dialog..... Just in case...
                        console.log('In bwRequest.js.scrapeBwRequestJson(). Try to close the dialog..... Just in case... NO!!! xcx8903245 not sure what this is lol!');


                        var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId;
                        $('#' + requestDialogId).dialog('option', 'bwForceClose', true);
                        $('#' + requestDialogId).dialog('close');

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }

                        reject(result);

                    } else {

                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                        var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                        var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                        var bwRequestTypeId = budgetrequestform.getAttribute('bwrequesttypeid'); // eg: bwRequestType: "capitalplanproject"
                        var bwOrgId = budgetrequestform.getAttribute('bworgid'); // selected OrgId on the new request form: txtLocationPickerFilter attribute bworgid
                        var bwOrgName = budgetrequestform.getAttribute('bworgname'); // selected OrgId on the new request form: txtLocationPickerFilter attribute bworgid
                        var bwFiscalYear = budgetrequestform.getAttribute('bwfiscalyear');
                        var title = budgetrequestform.getAttribute('bwrequesttitle'); // added 3-30-2023

                        if (weFoundTheFormInAPoppedOutWindow && (weFoundTheFormInAPoppedOutWindow == true)) {
                            console.log('In bwRequest.js.scrapeBwRequestJson(). WE FOUND THE FORM in a popped-out window. bwRequestTypeId: ' + bwRequestTypeId + ', bwOrgId: ' + bwOrgId);
                        }

                        bwRequestJson["bwWorkflowAppId"] = workflowAppId;
                        bwRequestJson["Created"] = new Date();
                        bwRequestJson["CreatedById"] = participantId;
                        bwRequestJson["CreatedByFriendlyName"] = participantFriendlyName;
                        bwRequestJson["CreatedByEmail"] = participantEmail;
                        bwRequestJson["bwRequestTypeId"] = bwRequestTypeId;
                        bwRequestJson["bwFiscalYear"] = bwFiscalYear;
                        bwRequestJson["bwOrgId"] = bwOrgId;
                        bwRequestJson["bwOrgName"] = bwOrgName;
                        bwRequestJson["bwBudgetRequestId"] = bwBudgetRequestId;
                        bwRequestJson["Title"] = title; // added 3-30-2023

                        // 
                        // Find all form widgets on a form by looking for the "bwwidgetname" attribute, and populate bwRequestJson. revised 11-10-2022
                        //
                        var dataElements = $(budgetrequestform).find('[bwwidgetname]');

                        // Then we have to make an array of bwwidgetname... this is the list of form widgets on the form.
                        var formWidgets = [];
                        for (var i = 0; i < dataElements.length; i++) {
                            var formWidgetName = dataElements[i].getAttribute('bwwidgetname');
                            formWidgets.push(formWidgetName);
                        }

                        console.log('In bwRequest.js.scrapeBwRequestJson(). Found these form widgets: ' + JSON.stringify(formWidgets));

                        if (weFoundTheFormInAPoppedOutWindow && (weFoundTheFormInAPoppedOutWindow == true)) {
                            console.log('In bwRequest.js.scrapeBwRequestJson(). WE FOUND THE FORM in a popped-out window. Found these form widgets: ' + JSON.stringify(formWidgets));
                        }

                        //
                        // Then we go through the list of form widgets, and save their JSON data to bwRequestJson.
                        //
                        for (var i = 0; i < formWidgets.length; i++) {

                            var element = $(budgetrequestform).find('.' + formWidgets[i] + ':first');

                            //debugger;

                            if (!$(element)[formWidgets[i]]) {

                                // 12-26-2023. NO LONGER DISPLAYING THIS message to the user. Currently it stubmled on ProjectTitle.js, which I believe has been depracated/removed/renamed. A remnant on the form defiinition.
                                var msg = '12-26-2023. NO LONGER DISPLAYING THIS message to the user. Currently it stubmled on ProjectTitle.js, which I believe has been depracated/removed/renamed. A remnant on the form defiinition. xcx2131245368894';

                                console.log(msg);
                                alert(msg);

                            } else {

                                //
                                // THIS IS A PLACE WHERE WE VALIDATE THE DATA TYPES. 
                                // For example, we make sure a 'currency' value is in fact a currency value. [xxxx.xx] 2 decimal places, no commas, no $ sign.
                                //
                                //debugger;
                                //var somethingIsWrongWithThisWidget = true;
                                //try {
                                //debugger;
                                //    alert('xcx231232-1 Calling getData().');
                                //    var test = $(element)[formWidgets[i]]('getData');
                                //    somethingIsWrongWithThisWidget = false;
                                //} catch (e) { }

                                var widgetValue;
                                try {
                                    console.log('xcx23123123-1. In scrapeBwRequestJson(). Calling getData() for ' + formWidgets[i] + '.');
                                    widgetValue = $(element)[formWidgets[i]]('getData');
                                } catch (e) { }

                                if (typeof widgetValue == 'undefined') {

                                    var msg = '';
                                    msg += '>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<';
                                    msg += '>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<';
                                    msg += 'Error in bwRequest.js.scrapeBwRequestJson(): This widget has failed / is not instantiated: ' + formWidgets[i] + ', bwRequestTypeId: ' + bwRequestTypeId;
                                    msg += '>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<';
                                    msg += '>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<';

                                    console.log(msg);
                                    displayAlertDialog_Persistent('Error in bwRequest.js.scrapeBwRequestJson(): This widget has failed/is not instantiated: ' + formWidgets[i] + ', bwRequestTypeId: ' + bwRequestTypeId);

                                } else {

                                    var widgetDataType = $(element)[formWidgets[i]]('getDataType');

                                    var foundDataType = true;
                                    switch (widgetDataType) {
                                        case 'invoice':

                                            break;
                                        case 'currency':

                                            break;
                                        case 'string':

                                            break;
                                        case 'organization_location': // For example: bwLocationPicker.

                                            break;
                                        case 'attachments': // For example: bwAttachments.

                                            break;
                                        case 'spreadsheet': // For example: bwCostsGrid.

                                            break;
                                        case 'inventory': // For example: bwSelectInventoryItems.

                                            break;
                                        case 'user': // For example: bwPeoplePicker_Customer.

                                            break;
                                        default:

                                            foundDataType = false;
                                            //throw new Error('xcx32576656. Unexpected datatype specified for widget "' + formWidgets[i] + '": ' + widgetDataType);
                                            break;
                                    }

                                    var fieldValue;
                                    if (foundDataType == false) {

                                        var msg = 'xcx32576656. Unexpected datatype specified for widget "' + formWidgets[i] + '". widgetDataType: ' + JSON.stringify(widgetDataType) + ', widgetValue: ' + JSON.stringify(widgetValue) + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', title: ' + title;
                                        console.log(msg);
                                        displayAlertDialog(msg);
                                        fieldValue = {
                                            value: msg,
                                            bwDataRequired: $(element)[formWidgets[i]]('isARequiredField'),
                                            bwDataType: widgetDataType,
                                            tagName: formWidgets[i]
                                        };

                                    } else if (widgetDataType == 'invoice') {

                                        fieldValue = {
                                            value: widgetValue,
                                            isPaid: $(element)[formWidgets[i]]('getIsPaid'), // This method is particular to the invoice widget.
                                            bwDataRequired: $(element)[formWidgets[i]]('isARequiredField'),
                                            bwDataType: widgetDataType,
                                            tagName: formWidgets[i]
                                        };

                                    } else {

                                        fieldValue = {
                                            value: widgetValue, //$(element)[formWidgets[i]]('getData'),
                                            bwDataRequired: $(element)[formWidgets[i]]('isARequiredField'),
                                            bwDataType: widgetDataType,
                                            tagName: formWidgets[i]
                                        };

                                    }

                                    try {
                                        var x = JSON.stringify(fieldValue); // this try-catch prevents bad json and circular references. 12-21-2022
                                        bwRequestJson[formWidgets[i]] = fieldValue; // Add this form widget json to bwRequestJson.
                                    } catch (e) {
                                        //debugger; // Check fieldValue to see what went wrong...
                                        // If we get here, we have some bad JSON.
                                        displayAlertDialog('Caught Exception in xcx12123 BAD JSON. This exception has been handlded. formwidget: ' + formWidgets[i] + ', widgetDataType: ' + widgetDataType + '. Dev: Add correct widgetDataType code here.? ' + e.message + ', ' + e.stack);
                                        bwRequestJson[formWidgets[i]] = { value: null, tagName: formWidgets[i] };
                                    }

                                }

                            }

                        }

                        var result = {
                            status: 'SUCCESS',
                            message: 'SUCCESS',
                            bwRequestJson: bwRequestJson
                        }

                        resolve(result);

                    }

                }

            } catch (e) {

                var msg = 'Exception in bwRequest.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                displayAlertDialog(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                reject(result);

            }
        })
    },
    viewScrapedBwRequestJson: function (bwBudgetRequestId) {
        try {

            //var bwBudgetRequestId = document.getElementById('budgetrequestform').getAttribute('bwbudgetrequestid');
            //var requestDialogId = 'divNewRequestWorkflowParticipantsDialog_' + bwBudgetRequestId;
            // debugger; // 9-26-2020
            console.log('In viewScrapedBwRequestJson(). bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;
            // Display a dialog box with a big textarea so that the contents can be copied and pasted.
            $("#divDisplayJsonDialog").dialog({
                modal: true,
                resizable: false,
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                width: "760",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                open: function (event, ui) {
                    $('.ui-widget-overlay').bind('click', function () {
                        $("#divDisplayJsonDialog").dialog('close');
                    });
                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                close: function () {
                    $('#divDisplayJsonDialog').dialog('destroy');
                }
            });
            //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = '';
            document.getElementById('spanDisplayJsonDialogContent').innerHTML = '';
            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = '';

            console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-7');
            var promise = this.scrapeBwRequestJson(bwBudgetRequestId);
            promise.then(function (bwRequestJson) {
                try {

                    alert('Returning from scrapeBwRequestJson(). xcx2131241-7');

                    document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
                    document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequestJson (scraped).'; // Summary text
                    var html = '';
                    html += JSON.stringify(bwRequestJson, null, 2);
                    document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

                    // "Run Diagnostics" button.
                    $('#btnRunDiagnostics').off('click').click(function (error) {
                        thiz.runJsonDiagnostics();
                    });
                } catch (e) {
                    console.log('Exception in viewScrapedBwRequestJson.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack);
                    document.getElementById('txtDisplayJsonDialogJSON').innerHTML = 'Exception in viewScrapedBwRequestJson.scrapeBwRequestJson(): ' + e.message + ', ' + e.stack;
                }
            });

        } catch (e) {
            console.log('Exception in viewScrapedBwRequestJson(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in viewScrapedBwRequestJson(): ' + e.message + ', ' + e.stack);
        }
    },

    viewDatabaseBwRequestJson: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.viewDatabaseBwRequestJson(). bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId,
                bwBudgetRequestId: bwBudgetRequestId //,
                //isActive: true//,
                //bwRequestType: 'ALL'
            };

            $.ajax({
                url: webserviceurl + '/getsinglebudgetrequest',
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                error: function (jqXHR, settings, errorThrown) {
                    debugger;
                    $('.bwPageScrollingHandler').bwPageScrollingHandler('CloseDialogAndPreventNextWindowScrollEvent', requestDialogId); // Make sure the dialog is closed.

                    if (jqXHR.status == 401) { // HTTP 401 "Unauthorized".

                        console.log('HTTP 401 "Unauthorized".');
                        console.log('HTTP 401 "Unauthorized".');
                        console.log('Error in bwRequest.js.viewDatabaseBwRequestJson(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        //alert('Error in bwRequest.js.displayRequestForm.getsinglebudgetrequest(). xcx213124-1-1 Unauthorized. Please refresh your browser and log in again. jqXHR.status: ' + jqXHR.status + ', settings: ' + settings + ', errorThrown: ' + errorThrown);
                        console.log('HTTP 401 "Unauthorized".');
                        console.log('HTTP 401 "Unauthorized".');

                    } else {
                        console.log('Error in bwRequest.js.viewDatabaseBwRequestJson():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                        alert('Error in bwRequest.js.viewDatabaseBwRequestJson():1: ' + settings + ', ' + errorThrown + ' I suspect this may be a service unavailable error but not sure by any means! More investigation needed!' + JSON.stringify(jqXHR));
                    }

                },
                success: function (results) {
                    try {
                        if (results.status != 'SUCCESS') {

                            console.log('Error in bwRequest.js.viewDatabaseBwRequestJson(). ' + results.status + ', ' + results.message);
                            displayAlertDialog('Error in bwRequest.js.viewDatabaseBwRequestJson(). ' + results.status + ', ' + results.message);

                        } else {

                            // Display a dialog box with a big textarea so that the contents can be copied and pasted.
                            $("#divDisplayJsonDialog").dialog({
                                modal: true,
                                resizable: false,
                                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                                width: "760",
                                dialogClass: "no-close", // No close button in the upper right corner.
                                hide: false,//, // This means when hiding just disappear with no effects.
                                open: function (event, ui) {
                                    $('.ui-widget-overlay').bind('click', function () {
                                        $("#divDisplayJsonDialog").dialog('close');
                                    });
                                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                close: function () {
                                    $('#divDisplayJsonDialog').dialog('destroy');
                                }
                            });
                            //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                            debugger;

                            var bwBudgetRequest = results.results.bwBudgetRequest;

                            bwBudgetRequest.bwRequestJson = JSON.parse(results.results.bwBudgetRequest.bwRequestJson);

                            document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
                            document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequestJson (database).'; // Summary text

                            var html = '';
                            html += JSON.stringify(bwBudgetRequest, null, 2);
                            document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

                            // "Run Diagnostics" button.
                            $('#btnRunDiagnostics').off('click').click(function (error) {
                                thiz.runJsonDiagnostics();
                            });



                            //var br = results.results.bwBudgetRequest;
                            //if (!br || !br.bwRequestJson || br.bwRequestJson == '') {

                            //    displayAlertDialog('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx4120203');

                            //} else {

                            //    var bwRequestJson = JSON.parse(br.bwRequestJson);

                            //    document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
                            //    document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequestJson (database).'; // Summary text

                            //    var html = '';
                            //    html += JSON.stringify(bwRequestJson, null, 2);
                            //    document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

                            //    // "Run Diagnostics" button.
                            //    $('#btnRunDiagnostics').off('click').click(function (error) {
                            //        thiz.runJsonDiagnostics();
                            //    });

                            //}
                        }

                    } catch (e) {
                        console.log('Exception in bwRequest.js.viewDatabaseBwRequestJson():2: ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.viewDatabaseBwRequestJson():2: ' + e.message + ', ' + e.stack);
                    }
                }
            });

            //var operationUri = webserviceurl + "/bwbudgetrequests/" + bwBudgetRequestId;
            //$.ajax({
            //    url: operationUri,
            //    method: "GET",
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (brData) {
            //        try {

            //            if (!brData.d) {

            //                displayAlertDialog('Error in bwRequest.js.viewDatabaseBwRequestJson(): ' + brData);

            //            } else {

            //                // Display a dialog box with a big textarea so that the contents can be copied and pasted.
            //                $("#divDisplayJsonDialog").dialog({
            //                    modal: true,
            //                    resizable: false,
            //                    closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //                    width: "760",
            //                    dialogClass: "no-close", // No close button in the upper right corner.
            //                    hide: false,//, // This means when hiding just disappear with no effects.
            //                    open: function (event, ui) {
            //                        $('.ui-widget-overlay').bind('click', function () {
            //                            $("#divDisplayJsonDialog").dialog('close');
            //                        });
            //                    }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            //                    close: function () {
            //                        $('#divDisplayJsonDialog').dialog('destroy');
            //                    }
            //                });
            //                //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            //                var br = brData.d.results[0][0];
            //                if (!br || !br.bwRequestJson || br.bwRequestJson == '') {

            //                    displayAlertDialog('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx4120203');

            //                } else {

            //                    var bwRequestJson = JSON.parse(br.bwRequestJson);

            //                    document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
            //                    document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequestJson (database).'; // Summary text

            //                    var html = '';
            //                    html += JSON.stringify(bwRequestJson, null, 2);
            //                    document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

            //                    // "Run Diagnostics" button.
            //                    $('#btnRunDiagnostics').off('click').click(function (error) {
            //                        thiz.runJsonDiagnostics();
            //                    });

            //                }
            //            }
            //        } catch (e) {
            //            console.log('Exception in bwRequest.js.viewDatabaseBwRequestJson(). ' + e.message + ', ' + e.stack);
            //            displayAlertDialog('Exception in bwRequest.js.viewDatabaseBwRequestJson(). ' + e.message + ', ' + e.stack);
            //        }
            //    },
            //    error: function (data) {
            //        var msg = 'Error in bwRequest.js.viewDatabaseBwRequestJson: ' + data.message.value;
            //        console.log(msg);
            //        displayAlertDialog(msg);
            //    }
            //});
        } catch (e) {
            console.log('Exception in bwRequest.js.viewDatabaseBwRequestJson(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.viewDatabaseBwRequestJson(): ' + e.message + ', ' + e.stack);
        }
    },
    viewDatabaseBwRequestJson2: function (bwBudgetRequestId) {
        try {
            console.log('In bwRequest.js.viewDatabaseBwRequestJson2(). bwBudgetRequestId: ' + bwBudgetRequestId);
            var thiz = this;
            debugger;
            var operationUri = webserviceurl + "/bwbudgetrequests/" + bwBudgetRequestId;
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (brData) {
                    try {
                        debugger;
                        if (!brData.d) {

                            displayAlertDialog('Error in bwRequest.js.viewDatabaseBwRequestJson2(): ' + brData);

                        } else {

                            // Display a dialog box with a big textarea so that the contents can be copied and pasted.
                            $("#divDisplayJsonDialog").dialog({
                                modal: true,
                                resizable: false,
                                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                                width: "760",
                                dialogClass: "no-close", // No close button in the upper right corner.
                                hide: false,//, // This means when hiding just disappear with no effects.
                                open: function (event, ui) {
                                    $('.ui-widget-overlay').bind('click', function () {
                                        $("#divDisplayJsonDialog").dialog('close');
                                    });
                                }, // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                                close: function () {
                                    $('#divDisplayJsonDialog').dialog('destroy');
                                }
                            });
                            //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                            var br = brData.d.results[0][0];
                            if (!br) {

                                displayAlertDialog('INVALID bwRequest RETURNED. THIS PROCESS CANNOT CONTINUE. xcx4120203-2');

                            } else {

                                //var json = JSON.parse(br);

                                document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
                                document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequest (database).'; // Summary text

                                var html = '';
                                html += JSON.stringify(br, null, 2);
                                document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

                                // "Run Diagnostics" button.
                                $('#btnRunDiagnostics').off('click').click(function (error) {
                                    thiz.runJsonDiagnostics();
                                });

                            }
                        }
                    } catch (e) {
                        console.log('Exception in bwRequest.js.viewDatabaseBwRequestJson2(). ' + e.message + ', ' + e.stack);
                        displayAlertDialog('Exception in bwRequest.js.viewDatabaseBwRequestJson2(). ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data) {
                    var msg = 'Error in bwRequest.js.viewDatabaseBwRequestJson2: ' + data.message.value;
                    console.log(msg);
                    displayAlertDialog(msg);
                }
            });
        } catch (e) {
            console.log('Exception in bwRequest.js.viewDatabaseBwRequestJson2(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.viewDatabaseBwRequestJson2(): ' + e.message + ', ' + e.stack);
        }
    },

    viewTaskJsonInDialog: function (bwWorkflowTaskItemId) {
        try {
            console.log('In viewTaskJsonInDialog(). bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
            var thiz = this;

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

            //
            // Get the xx for this task.
            //
            data = {
                bwWorkflowAppId: workflowAppId,
                bwWorkflowTaskItemId: bwWorkflowTaskItemId
            };
            var operationUri = webserviceurl + "/bwworkflow/gettask";
            $.ajax({
                url: operationUri,
                type: "POST",
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (result) {

                    if (result.message != 'SUCCESS') {

                        displayAlertDialog(JSON.stringify(result.message));

                    } else {

                        displayAlertDialog(JSON.stringify(result.data));

                    }

                },
                error: function (data, errorCode, errorMessage) {
                    //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.displayUpdateDailyOverdueTaskNotificationDateDialog().itemizebudgetrequestdependencies  xcx332-3: ' + errorMessage);
                }
            });

            //var operationUri = webserviceurl + "/bwbudgetrequests/" + bwBudgetRequestId;
            //$.ajax({
            //    url: operationUri,
            //    method: "GET",
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (brData) {
            //        try {

            //            if (!brData.d) {
            //                displayAlertDialog('Error in viewTaskJsonInDialog(): ' + brData);
            //            } else {

            //                // Display a dialog box with a big textarea so that the contents can be copied and pasted.
            //                $("#divDisplayJsonDialog").dialog({
            //                    modal: true,
            //                    resizable: false,
            //                    closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //                    width: "760",
            //                    dialogClass: "no-close", // No close button in the upper right corner.
            //                    hide: false,//, // This means when hiding just disappear with no effects.
            //                    open: function (event, ui) {
            //                        $('.ui-widget-overlay').bind('click', function () {
            //                            $("#divDisplayJsonDialog").dialog('close');
            //                        });
            //                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            //                });
            //                //$("#divDisplayJsonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            //                var br = brData.d.results[0][0];
            //                if (!br || !br.bwRequestJson || br.bwRequestJson == '') {
            //                    displayAlertDialog('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.xcx4120203');
            //                } else {
            //                    var bwRequestJson = JSON.parse(br.bwRequestJson);

            //                    document.getElementById('spanDisplayJsonDialogTitle').innerHTML = 'Request JSON'; // Title
            //                    document.getElementById('spanDisplayJsonDialogContent').innerHTML = 'This is the BwRequestJson (database).'; // Summary text
            //                    var html = '';
            //                    html += JSON.stringify(bwRequestJson, null, 2);
            //                    document.getElementById('txtDisplayJsonDialogJSON').innerHTML = html;

            //                    // "Run Diagnostics" button.
            //                    $('#btnRunDiagnostics').click(function (error) {
            //                        thiz.runJsonDiagnostics();
            //                    });
            //                }
            //            }
            //        } catch (e) {
            //            displayAlertDialog('Exception in viewTaskJsonInDialog(). ' + e.message + ', ' + e.stack);
            //        }
            //    },
            //    error: function (data) {
            //        //lpSpinner.Hide();
            //        //var error = JSON.parse(data.responseText)["odata.error"];
            //        var errormsg = 'Error in viewTaskJsonInDialog: ' + data.message.value;
            //        //if (error.innererror.message) errormsg += ' ' + error.innererror.message;
            //        //if (error.innererror.internalexception.message) errormsg += ' ' + error.innererror.internalexception.message;
            //        //deferred.reject("Data Loading Error : " + errormsg);
            //        console.log(errormsg);
            //        displayAlertDialog(errormsg);
            //    }
            //});
        } catch (e) {
            console.log('Exception in viewTaskJsonInDialog(): ' + e.message + ', ' + e.stack);
            this.displayAlertDialog('Exception in viewTaskJsonInDialog(): ' + e.message + ', ' + e.stack);
        }
    },


    isNumberGreaterThanZero: function (n) {
        var result = false;
        if (!isNaN(parseFloat(n)) && isFinite(n)) {
            var x = parseFloat(n);
            if (x <= 0) {
                result = false; // The number is less than or equal to zero.
            } else {
                result = true;
            }
        } else {
            result = false; // n is NaN (not a number).
        }
        return result;
    },

    formatRequestedCapital_InitBudgetRequest: function () {
        try {
            var x = this.formatCurrency(document.getElementById('dblRequestedCapital').value);
            document.getElementById('dblRequestedCapital').value = x;
        } catch (e) {
            console.log('Exception in formatRequestedCapital_InitBudgetRequest(): ' + e.message + ', ' + e.stack);
            //displayAlertDialog('Exception in formatRequestedCapital_InitBudgetRequest(): ' + e.message + ', ' + e.stack);
        }
    },

    validateCapexForm3: function () {
        try {
            console.log('In validateCapexForm3().');
            // This method gets called prior to saving.
            var validation = true;
            // Validate the following fields:
            // Project Title
            if (document.getElementById('strProjectTitle').value == "") {
                validation = false;
                this.displayAlertDialog('Please enter a "Description" before submitting your request.');
                //document.getElementById('strProjectTitle').focus();
            }

            // Category
            //if (validation)
            //    if (document.getElementById('ddlCategory').value == "") {
            //        validation = false;
            //        displayAlertDialog('Please select a "Category" before submitting your request.'); 
            //        document.getElementById('ddlCategory').focus();
            //    }
            var requireRequestDetails = true;
            // Brief Description of Project
            if (validation)
                if (document.getElementById('strBriefDescriptionOfProject').value == "") {
                    if (requireRequestDetails == true) {
                        validation = false;
                        this.displayAlertDialog('Please enter some "Details" before submitting your request.');
                        //document.getElementById('strBriefDescriptionOfProjectInXslForm').focus();
                    }
                }

            // Requested Capital
            if (validation)
                try {
                    try {
                        var requestedCapital = document.getElementById('dblRequestedCapital').value;
                    } catch (e) {
                        var requestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
                    }


                    console.log('dblRequestedCapital: ' + requestedCapital);
                    if (requestedCapital == "") {
                        validation = false;
                        this.displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
                        //document.getElementById('dblRequestedCapital').focus();
                    } else {
                        var x = requestedCapital;
                        var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
                        if (!this.isNumberGreaterThanZero(y)) {
                            validation = false;
                            this.displayAlertDialog('xPlease enter a value greater than zero for "Requested Amount" before submitting your request.');
                            document.getElementById('dblRequestedCapital').innerHTML = ''; // clear the textbox before the cursor gets put back into it.
                            //document.getElementById('dblRequestedCapital').focus();
                        }
                    }
                } catch (e) {
                    validation = false;
                    this.displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
                    //document.getElementById('dblRequestedCapitalInXslForm2').focus();
                }

            //// Requested Expense
            //if (validation)
            //    try {
            //        if (document.getElementById('dblRequestedExpense').value == "") {
            //            validation = false;
            //            displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
            //            document.getElementById('dblRequestedExpense').focus();
            //        } else {
            //            var x = document.getElementById('dblRequestedExpense').value;
            //            var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
            //            //if (!isNumberGreaterThanZero(y)) {
            //            //    validation = false;
            //            //    displayAlertDialog('Please enter a value greater than zero for "Requested Expense" before submitting your request.');
            //            //    document.getElementById('dblRequestedExpense').value = ''; // clear the textbox before the cursor gets put back into it.
            //            //    document.getElementById('dblRequestedExpense').focus();
            //            //}
            //        }
            //    } catch (e) {
            //        validation = false;
            //        displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
            //        document.getElementById('dblRequestedExpense').focus();
            //    }

            // Project Manager
            var newBudgetRequestManagerTitle = 'Project Manager';
            if (validation) {
                try {
                    var projectManagerName = document.getElementById('txtProjectManagerName').value;
                } catch (e) {
                    var projectManagerName = document.getElementById('txtProjectManagerName').innerHTML;
                }

                console.log('projectManagerName: ' + projectManagerName);
                if (projectManagerName == '') {
                    validation = false;
                    this.displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.');
                }
            }

            // Year
            if (validation)
                try {
                    if (document.getElementById('selectFiscalYear').innerHTML == "") {
                        validation = false;
                        this.displayAlertDialog('Please select a "Year" before submitting your request.');
                        //document.getElementById('selectFiscalYear').focus();
                    }
                } catch (e) {
                    validation = false;
                    console.log('Exception trying to retrieve Year value from "selectFiscalYear".')
                }
            // Functional Area
            //displayAlertDialog('selectedIndex: ' + document.getElementById('ddlFunctionalArea').selectedIndex);
            if (validation)
                try {
                    if (document.getElementById('ddlFunctionalArea').selectedIndex == 0) {
                        validation = false;
                        this.displayAlertDialog('Please select a "Financial Area" before submitting your request.');
                    }
                } catch (e) {
                    validation = false;
                    console.log('Exception trying to retrieve Functional Area value from "ddlFunctionalArea".')
                }


            //// debugger;
            var orgId = document.getElementById('txtLocationPickerFilter').getAttribute('bwOrgId');
            var orgName = document.getElementById('txtLocationPickerFilter').value;


            //if (validation)
            //    try {
            //        if (document.getElementById('ddlLocation').value.selectedIndex == 0) {
            //            validation = false;
            //            this.displayAlertDialog('Please select a "Location" before submitting your request.');
            //        }
            //    } catch (e) {
            //        validation = false;
            //        console.log('Exception trying to retrieve Location value from "ddlLocation".')
            //    }


            // TODD: I commented out the following validation just to get things moving forwrd. I need to come back and put this back into place!!!!!!!!!!!!!!

            // Estimated Start Date
            //var estimatedStartDate = '';
            //if (validation) {
            //    //var iPhone;
            //    //try {
            //    //    estimatedStartDate = document.getElementById('dtEstimatedStartDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
            //    //    iPhone = false;
            //    //} catch (e) {
            //    // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            //    var myDate = document.getElementById('dtEstimatedStartDate').value;
            //    if (myDate.length > 0) {
            //        var arr = myDate.split("-");
            //        estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            //        if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
            //    }
            //    //    iPhone = true;
            //    //}
            //    // Now that we have the date, validate it.
            //    try {
            //        if (estimatedStartDate != "") {
            //            var dateFromSelection = new Date(estimatedStartDate); // Instantiate the object to see if there are any errors.
            //            var d = dateFromSelection.getDate();
            //            var m = dateFromSelection.getMonth();
            //            var y = dateFromSelection.getFullYear();
            //            var formulatedDate = new Date(y, m, d);
            //            if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
            //                var today = new Date(); // It's a valid date, but we need to check if it's before Today!!

            //                // Todd added fix #9-8-14-002 to bw.initar.core.js.
            //                today.setHours(0, 0, 0, 0);
            //                dateFromSelection.setHours(0, 0, 0, 0);

            //                if (dateFromSelection < today) {
            //                    validation = false;
            //                    displayAlertDialog('Please specify an "Estimated Start Date" which occurs today or in the future before submitting your request.');
            //                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
            //                }
            //            } else {
            //                validation = false;
            //                displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
            //                //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
            //            }
            //        } else {
            //            if (requireStartEndDates == true) {
            //                validation = false;
            //                displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
            //                //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
            //            }
            //        }
            //    } catch (e) {
            //        validation = false;
            //        displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
            //        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
            //    }
            //}

            //// Estimated End Date
            //if (validation) {
            //    var estimatedEndDate = '';
            //    //var iPhone;
            //    //try {
            //    //    estimatedEndDate = document.getElementById('dtEstimatedEndDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
            //    //    iPhone = false;
            //    //} catch (e) {
            //    // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            //    var myDate = document.getElementById('dtEstimatedEndDate').value;
            //    if (myDate.length > 0) {
            //        var arr = myDate.split("-");
            //        estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            //        if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
            //    }
            //    //iPhone = true;
            //    //}
            //    // Now that we have the date, validate it.
            //    try {
            //        if (estimatedEndDate != "") {
            //            var dateFromSelection = new Date(estimatedEndDate); // Instantiate the object to see if there are any errors.
            //            var d = dateFromSelection.getDate();
            //            var m = dateFromSelection.getMonth();
            //            var y = dateFromSelection.getFullYear();
            //            var formulatedDate = new Date(y, m, d);
            //            if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
            //                var today = new Date(); // It's a valid date, but we need to check if it's before Today!!
            //                if (dateFromSelection < today) {
            //                    validation = false;
            //                    displayAlertDialog('Please specify an "Estimated End Date" which occurs in the future before submitting your request.');
            //                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
            //                } else {
            //                    var startDate = new Date(estimatedStartDate);
            //                    if (dateFromSelection < startDate) {
            //                        validation = false;
            //                        displayAlertDialog('Please specify an "Estimated End Date" which occurs the same day, or after the "Estimated Start Date" before submitting your request.');
            //                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
            //                    }
            //                }
            //            } else {
            //                validation = false;
            //                displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
            //                //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
            //            }
            //        } else {
            //            if (requireStartEndDates == true) {
            //                validation = false;
            //                displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
            //                //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
            //            }
            //        }
            //    } catch (e) {
            //        validation = false;
            //        displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
            //        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
            //    }
            //}
            // Attachments *******NOT NECESSARY TO VALIDATE*******

            return validation;
        } catch (e) {
            console.log('Exception in validateCapexForm2(): ' + e.message + ', ' + e.stack);
            return false;
        }
    },

    formatCurrency: function (num) {
        //num = num.toString().replace(/\$|\,/g, '');
        //if (isNaN(num))
        //    num = "0";
        //var sign = (num == (num = Math.abs(num)));
        //num = Math.floor(num * 100 + 0.50000000001);
        //var cents = num % 100;
        //num = Math.floor(num / 100).toString();
        //if (cents < 10)
        //    cents = "0" + cents;
        //for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3) ; i++)
        //    num = num.substring(0, num.length - (4 * i + 3)) + ',' +
        //    num.substring(num.length - (4 * i + 3));
        //return (((sign) ? '' : '-') + '$' + num + '.' + cents);

        var selectedCurrencySymbol = 'Dollar';

        // selectedCurrencySymbol. Values include: Dollar, Pound, Euro, Rand, Franc, Yen, Rouble, Peso, Rupee, Guilder.
        // Now we have to disable the button for the page we are on at the moment.
        var currencySymbol = '';
        switch (selectedCurrencySymbol) {
            case 'Dollar':
                currencySymbol = '$';
                break;
            case 'Pound':
                currencySymbol = '£';
                break;
            case 'Euro':
                currencySymbol = '€';
                break;
            case 'Rand':
                currencySymbol = 'R';
                break;
            case 'Franc':
                currencySymbol = '₣';
                break;
            case 'Yen':
                currencySymbol = '¥';
                break;
            case 'Rouble':
                currencySymbol = '₽';
                break;
            case 'Peso':
                currencySymbol = '₱';
                break;
            case 'Rupee':
                currencySymbol = '₹';
                break;
            case 'Guilder':
                currencySymbol = 'ƒ';
                break;
            default:
                currencySymbol = '$';
                break;
        }

        if (num) {
            //num = num.toString().replace(/\$|\,/g, '');
            num = num.toString().replace(/\$|\,/g, '');

            num = num.toString().replace(/\£|\,/g, '');
            num = num.toString().replace(/\€|\,/g, '');
            num = num.toString().replace(/\R|\,/g, '');
            num = num.toString().replace(/\₣|\,/g, '');
            num = num.toString().replace(/\¥|\,/g, '');
            num = num.toString().replace(/\₽|\,/g, '');
            num = num.toString().replace(/\₱|\,/g, '');
            num = num.toString().replace(/\₹|\,/g, '');
            num = num.toString().replace(/\ƒ|\,/g, '');

            if (isNaN(num))
                num = "0";
            var sign = (num == (num = Math.abs(num)));
            num = Math.floor(num * 100 + 0.50000000001);
            var cents = num % 100;
            num = Math.floor(num / 100).toString();
            if (cents < 10)
                cents = "0" + cents;
            for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++)
                num = num.substring(0, num.length - (4 * i + 3)) + ',' +
                    num.substring(num.length - (4 * i + 3));
            return (((sign) ? '' : '-') + currencySymbol + num + '.' + cents);
        } else {
            return currencySymbol + '0.00'; //0; // This was 0 but I changed it 4-15-18 3-36am ast.
        }
    },




    displayCreateRequestFormDialog: function () {
        try {
            // debugger; //is this even used? COMMENT OUT IF NOT SO!
            console.log('In displayCreateRequestFormDialog().');
            alert('In displayCreateRequestFormDialog().');
            //var thiz = this;
            if (participantId) {
                //
                // The user is logged in.
                //
                $('#divCreateRequestFormDialog').dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    //title: "Select a person...", //"Enter your early adopter code...",
                    width: "800px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    open: function () {
                        $('.ui-widget-overlay').bind('click', function () {
                            $("#divCreateRequestFormDialog").dialog('close');
                        });
                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                });
                $("#divCreateRequestFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                this.renderCreateRequestFullFormOnline();
                this.renderNewRequestForm();

            } else {
                //
                // The user is not logged in, so create an offline request.
                //
                //$('#txtPeoplePickerDialogSearchBox').empty(); // Clear the search text box.
                $('#divCreateRequestFormDialog').dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    //title: "Select a person...", //"Enter your early adopter code...",
                    width: "800px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    open: function () {
                        $('.ui-widget-overlay').bind('click', function () {
                            $("#divCreateRequestFormDialog").dialog('close');
                        });
                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                });
                $("#divCreateRequestFormDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();



                // debugger;
                this.renderCreateRequestFullFormOffline();
                this.renderNewRequestForm();
            }
        } catch (e) {
            console.log('Exception in displayCreateRequestFormDialog: ' + e.message + ', ' + e.stack);
        }
    },

    undoLocationChange: function (bwBudgetRequestId, originalOrgId, originalOrgName) {
        try {
            console.log('In bwRequest.js.undoLocationChange. bwBudgetRequestId: ' + bwBudgetRequestId + ', originalOrgId: ' + originalOrgId + ', originalOrgName: ' + originalOrgName);
            //alert('In bwRequest.js.undoLocationChange. bwBudgetRequestId: ' + bwBudgetRequestId + ', originalOrgId: ' + originalOrgId + ', originalOrgName: ' + originalOrgName);

            // This is meant to be invoked from a request form. We use the bwBudgetRequestId to find the form, and then we can fin the Location and change it back to the original value.
            // Find the form.
            var form;
            var forms = $('.budgetrequestform');
            for (var i = 0; i < forms.length; i++) {
                if (forms[i].getAttribute('bwbudgetrequestid') == bwBudgetRequestId) {
                    console.log('In bwRequest.js.undoLocationChange(). FOUND THE FORM');
                    form = forms[i];
                }
            }
            if (!form) {
                console.log('Error in bwRequest.js.undoLocationChange(). NO FORM FOUND for bwBudgetRequestId: ' + bwBudgetRequestId);
                displayAlertDialog('Error in bwRequest.js.undoLocationChange(). NO FORM FOUND for bwBudgetRequestId: ' + bwBudgetRequestId);
            } else {

                // Set the location form widget back to the original value.
                $(form).find('.bwLocationPicker').bwLocationPicker('selectLocation', originalOrgId, originalOrgName);

                $('#bwRequest_REFUSED_SAVE_CHANGED_ORGID_dialog').dialog('close'); // Close the dialog.

            }

        } catch (e) {
            console.log('Exception in bwRequest.js.undoLocationChange: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.undoLocationChange: ' + e.message + ', ' + e.stack);
        }
    },


    displayOneTimeReminder: function (e) {
        try {
            console.log('In bwRequest.js.displayOneTimeReminder().');

            displayAlertDialog('This Request has an UPCOMING REMINDER. [Show details here... xMon May 6, 2:45pmx Hover for executive summary... In bwRequest.js.displayOneTimeReminder().');


        } catch (e) {
            console.log('Exception in bwRequest.js.displayOneTimeReminder: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.displayOneTimeReminder: ' + e.message + ', ' + e.stack);
        }
    },


    saveAndPublishTheRequest: function (requestDialogId, displaySuccessMessage, bwBudgetRequestId, bwRequestTypeId) {
        //
        // This Promise is a bit different, because it has to handle all of it's own display dialogs... that is because we invoke from HTML onclick and it's just easier that way, and clearer to the developer. Does it need to be a Promise? Hmm... 1-6-2022
        //
        try {
            ShowActivitySpinner('Saving the request...');
            console.log('In bwRequest.js.saveAndPublishTheRequest(). Publish so that everyone sees the latest updates to the request.');
            var thiz = this;
            return new Promise(function (resolve, reject) {
                try {

                    var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                    var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                    var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                    var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                    if (bwBudgetRequestId) {
                        // This is kind of funky, at some point we should only be passing bwBudgetRequestId into this method, not requestDIalogId... 7-18-2022
                    } else {
                        bwBudgetRequestId = $('#' + requestDialogId).find('.budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                    }

                    console.log('Calling bwRequest.js.scrapeBwRequestJson(). xcx1231242-8');
                    var promise = thiz.scrapeBwRequestJson(bwBudgetRequestId);
                    promise.then(function (results) {
                        try {

                            if (results.status != 'SUCCESS') {

                                var msg = 'Error in saveAndPublishTheRequest.scrapeBwRequestJson(). ' + results.status + ', ' + results.message;

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }

                                reject(result);

                            } else {

                                //var bwRequestJson = JSON.parse(JSON.stringify(results.bwRequestJson));
                                var bwRequestJson = results.bwRequestJson;

                                bwBudgetRequest = {
                                    bwWorkflowAppId: workflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,

                                    ModifiedById: participantId,
                                    ModifiedByEmail: participantEmail,
                                    ModifiedByFriendlyName: participantFriendlyName,

                                    bwRequestJson: JSON.stringify(bwRequestJson),

                                    //ProjectTitle: projectTitle,
                                    BudgetAmount: null, // FIX<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                    //RequestedCapital: requestedCapital,
                                    //RequestedExpense: requestedExpense,

                                    //OrgId: bwOrgId,
                                    //OrgName: bwOrgName,

                                    //ManagerId: managerId,
                                    //ManagerEmail: managerEmail,
                                    //ManagerFriendlyName: managerFriendlyName,


                                    bwRequestTypeId: bwRequestTypeId // This value only gets passed if it is the first time. 7-18-2022
                                };

                                //
                                // The following json properties have to bubble up from bwRequestJson, to be duplicated at the top level of the request json. This is done to maximize query speed in Mongo. It is the only duplicated data in the entire system, so don't complain lol!! :)
                                // OrgId, OrgName, ProjectTitle, RequestedCapital.
                                //
                                if (bwRequestJson.bwLocationPicker && bwRequestJson.bwLocationPicker.value && bwRequestJson.bwLocationPicker.value.bwOrgId) {
                                    bwBudgetRequest["OrgId"] = bwRequestJson.bwLocationPicker.value.bwOrgId;
                                }

                                if (bwRequestJson.bwLocationPicker && bwRequestJson.bwLocationPicker.value && bwRequestJson.bwLocationPicker.value.bwOrgName) {
                                    bwBudgetRequest["OrgName"] = bwRequestJson.bwLocationPicker.value.bwOrgName;
                                }

                                if (bwRequestJson.ProjectTitle && bwRequestJson.ProjectTitle.value) {
                                    bwBudgetRequest["ProjectTitle"] = bwRequestJson.ProjectTitle.value;
                                }

                                if (bwRequestJson.bwRequestedCapitalField && bwRequestJson.bwRequestedCapitalField.value) {
                                    bwBudgetRequest["RequestedCapital"] = bwRequestJson.bwRequestedCapitalField.value;
                                }

                                if (bwRequestJson.RequestedExpense) {
                                    bwBudgetRequest["RequestedExpense"] = bwRequestJson.RequestedExpense.value;
                                }

                                if (bwRequestJson.ProjectManager) {
                                    bwBudgetRequest["ManagerId"] = bwRequestJson.ProjectManager.ParticipantId;
                                    bwBudgetRequest["ManagerEmail"] = bwRequestJson.ProjectManager.ParticipantEmail;
                                    bwBudgetRequest["ManagerFriendlyName"] = bwRequestJson.ProjectManager.ParticipantFriendlyName;
                                }

                                bwRequestJson["ModifiedById"] = participantId;
                                bwRequestJson["ModifiedByFriendlyName"] = participantFriendlyName;
                                bwRequestJson["ModifiedByEmail"] = participantEmail;
                                bwRequestJson["Modified"] = new Date();

                                var bwRequestJson2 = JSON.parse(JSON.stringify(results.bwRequestJson));

                                console.log('In saveAndPublishTheRequest(). bwRequestJson was returned.'); //: ' + JSON.stringify(bwRequestJson, 2, null)); << 12-21-2022 getting a circular structure in the bwRequestJson, so commented this out.

                                console.log('In bwRequest.js.saveAndPublishTheRequest(). Saving bwRequestJson, getting ready to call /bwbudgetrequests/saveAndPublishTheRequest(): ' + JSON.stringify(bwRequestJson));

                                var operationUri = thiz.options.operationUriPrefix + "_bw/bwbudgetrequests/saveAndPublishTheRequest";
                                $.ajax({
                                    url: operationUri,
                                    type: "POST",
                                    data: bwBudgetRequest,
                                    headers: {
                                        "Accept": "application/json; odata=verbose"
                                    },
                                    success: function (results) {
                                        try {

                                            console.log('xcx211232 xcx231333 results: ' + JSON.stringify(results));

                                            HideActivitySpinner();
                                            if (results.status == 'SUCCESS') {

                                                var msg = '<br />The request has been saved/published<br /><br />';

                                                if (displaySuccessMessage == 'true') { // This is done because the "Approve" method may want to display the message instead, for example.

                                                    displayAlertDialog_QuickNotice(msg, 200);

                                                }

                                                console.log('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN. xcx2321312-2.');

                                                // This may be Ok as it seems to be addressed elsewhere, according to my testing (submit a new request, go back and make a new one, and the fiels should all be empty, not retAINING THE PREVIOUS INFORMATION.). We should find out where that is happening and make a clear note of it there, along with a console.log entry. 7-1-2024.
                                                //alert('DEV: fix: 11-7-2023. NOW WE CLEAR THE CACHED NEW REQUEST AND RETURN TO THE HOME SCREEN.  xcx2321312-2.');

                                                // This updates any executive sumarries being displayed.
                                                console.log('In bwRequest.js.saveAndPublishTheRequest(). Calling bwAuthentication.js.redrawSingleExecutiveSummary().');
                                                debugger;
                                                $('.bwAuthentication').bwAuthentication('redrawSingleExecutiveSummary', bwBudgetRequestId, bwBudgetRequest);

                                                // 1-14-2023
                                                // Find the request in the thiz.options.lastSavedJson array. If it's there, replace it, otherwise, add it.
                                                // This also happens in populateRequestForm().
                                                var lastSavedJsonIndex = -1;
                                                for (var i = 0; i < thiz.options.lastSavedJson.length; i++) {
                                                    if (thiz.options.lastSavedJson[i].bwBudgetRequestId == bwBudgetRequestId) {
                                                        lastSavedJsonIndex = i;
                                                        break;
                                                    }
                                                }
                                                //console.log('xcx2314-2 Updating thiz.options.lastSavedJson.');
                                                if (lastSavedJsonIndex > -1) {
                                                    //thiz.options.lastSavedJson[lastSavedJsonIndex] = bwRequestJson2;
                                                    thiz.options.lastSavedJson[lastSavedJsonIndex] = bwRequestJson2;
                                                } else {
                                                    //thiz.options.lastSavedJson.push(bwRequestJson2);
                                                    thiz.options.lastSavedJson.push(bwRequestJson2);
                                                }

                                                console.log('In bwRequest.js.saveAndPublishTheRequest(). Successfully added bwRequestJson to thiz.options.lastSavedJson for our "You have changes that need to be saved" check.');

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: msg
                                                }
                                                resolve(result);

                                            } else if (results.status == 'REFUSED_SAVE_CHANGED_ORGID') {

                                                alert('results.status == "REFUSED_SAVE_CHANGED_ORGID" xcx213123');

                                                if (!(results.results && results.results.changedRoleAssignments)) {

                                                    // There are no changes to the role assignments, so proceed. WE SHOULD NEVER GET HERE!!!!
                                                    var msg = 'Error in bwRequest.js.saveAndPublishTheRequest(). results.status: REFUSED_SAVE_CHANGED_ORGID. Unexpected null value for changedRoleAssignments. xcx123235.';
                                                    console.log(msg);
                                                    displayAlertDialog(msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    resolve(result);

                                                } else {

                                                    //
                                                    //
                                                    // When we get here, it means that there are changed role assignments due to the location change. We have to notify the user, and let them decide if they want to make these changes permanent.
                                                    //
                                                    //

                                                    var dialogId = 'bwRequest_REFUSED_SAVE_CHANGED_ORGID_dialog';
                                                    var div = document.getElementById(dialogId);
                                                    if (!div) {
                                                        div = document.createElement('div');
                                                        div.id = dialogId;
                                                        document.body.appendChild(div); // to place at end of document
                                                    }

                                                    $('#' + dialogId).dialog({
                                                        modal: true,
                                                        resizable: true,
                                                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                                                        width: '900px',
                                                        //dialogClass: "no-close", // No close button in the upper right corner.
                                                        hide: false, // This means when hiding just disappear with no effects.
                                                        position: {
                                                            my: "middle top+12",
                                                            at: "middle top",
                                                            of: window
                                                        },
                                                        close: function () {
                                                            console.log('In xcx1234647(). Dialog ' + dialogId + 'is being closed.');
                                                        },
                                                        open: function () {
                                                            try {


                                                                console.log('xcx2134234124 bwRequest_REFUSED_SAVE_CHANGED_ORGID_dialog bwRequestTypeId: ' + bwRequestTypeId);


                                                                var html = '';
                                                                html += '<table style="width:100%;" onclick="$(\'.bwRequest\').bwRequest(\'pinRequestDialog\');">'; // This click event is like "pin". Once the user clicks the header of the request dialog, it no longer is modal and persists on the screen until they choose to close it.
                                                                html += '   <tr>';
                                                                html += '       <td style="width:95%;">';
                                                                //html += '           <div id="slider_' + dialogId + '" style="width:20%;cursor:pointer;"></div>';
                                                                html += '       </td>';
                                                                html += '       <td>';
                                                                html += '           <span class="dialogXButton" style="font-size:25pt;cursor:pointer;width:100%;font-weight:bold;" onclick="$(\'.bwPageScrollingHandler\').bwPageScrollingHandler(\'CloseDialogAndPreventNextWindowScrollEvent\', \'' + dialogId.replace('_Parent', '') + '\');">X</span>';
                                                                html += '       </td>';
                                                                html += '   </tr>';
                                                                html += '</table>';

                                                                div.parentNode.querySelector(".ui-dialog-titlebar").innerHTML = html;

                                                                var html = '';

                                                                html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;font-weight:bold;">';
                                                                html += 'The location has been changed from "' + results.results.originalOrgName + '" to "' + results.results.newOrgName + '".';
                                                                html += '</span>';

                                                                html += '<br /><br />';
                                                                html += 'These people will no longer participate in the workflow:'; // results.results.bwRequestTypeId: ' + results.results.bwRequestTypeId;
                                                                html += '<ul>';
                                                                for (var i = 0; i < results.results.changedRoleAssignments.removedRoleAssignments.length; i++) {
                                                                    html += '<li style="color:red;">';
                                                                    html += '<span style="color:black;">';
                                                                    html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantId + '\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantFriendlyName + '\', \'' + results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantEmail + '\', \'undefined\');">';
                                                                    html += results.results.changedRoleAssignments.removedRoleAssignments[i].ParticipantFriendlyName;
                                                                    html += '</span>';
                                                                    html += ' - ' + results.results.changedRoleAssignments.removedRoleAssignments[i].RoleName + ' (' + results.results.changedRoleAssignments.removedRoleAssignments[i].RoleId + ')</span>';
                                                                    html += '<span style="color:black;padding-left:50px;"><input id="xcx234256" type="checkbox" checked="checked" />&nbsp;Notify</span>';
                                                                    html += '</li>';
                                                                }
                                                                html += '</ul>';

                                                                html += '<br />';
                                                                html += 'These people will be added:';
                                                                html += '<ul>';
                                                                for (var i = 0; i < results.results.changedRoleAssignments.addedRoleAssignments.length; i++) {
                                                                    html += '<li style="color:red;">';
                                                                    html += '<span style="color:black;">';
                                                                    html += '<span style="color:purple;font-weight:bold;cursor:pointer;" onclick="$(\'.bwCircleDialog2\').bwCircleDialog2(\'displayParticipantRoleMultiPickerInACircle\', true, \'\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantId + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName + '\', \'' + results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantEmail + '\', \'undefined\');">';
                                                                    html += results.results.changedRoleAssignments.addedRoleAssignments[i].ParticipantFriendlyName;
                                                                    html += '</span>';
                                                                    html += ' - ' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleName + ' (' + results.results.changedRoleAssignments.addedRoleAssignments[i].RoleId + ')</span>';
                                                                    html += '<span style="color:black;padding-left:50px;"><input id="xcx234256" type="checkbox" checked="checked" />&nbsp;Notify</span>';
                                                                    html += '</li>';
                                                                }
                                                                html += '</ul>';

                                                                //html += '<br />';
                                                                //html += 'These participants will be notified of the changes.';

                                                                //html += 'These participants will be notified of the changes. You can also include a comment:<br />';
                                                                //html += '<textarea></textarea>';



                                                                html += '<br />';


                                                                //html += 'bwOrganizationViewer.js<br /><img src="images/temp/location_has_been_changed_UI.png" style="max-width:800px;" />';

                                                                html += '<hr /><div id="divBwOrganizationViewer"></div><hr />';


                                                                html += '<br />';
                                                                html += '<br />';






                                                                html += '<br />';
                                                                html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="alert(\'This functionality is incomplete. xcx21342425.\');">';
                                                                html += '   Update Request and Notify Selected Participants';
                                                                html += '</div>';
                                                                html += '<br />';
                                                                html += '<hr />';
                                                                html += '<br /><br />';
                                                                html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'undoLocationChange\', \'' + bwBudgetRequestId + '\', \'' + results.results.originalOrgId + '\', \'' + results.results.originalOrgName + '\');">';
                                                                html += '   Undo Location Change';
                                                                html += '</div>';
                                                                html += '<br /><br />';
                                                                html += '<div class="divSignInButton" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;cursor:pointer;" onclick="$(\'#' + dialogId + '\').dialog(\'close\');">';
                                                                html += '   Close';
                                                                html += '</div>';
                                                                html += '<br /><br />';

                                                                div.innerHTML = html;



                                                                var options = {

                                                                    RoleAssignments: results.results, // results.results.changedRoleAssignments.removedRoleAssignments[i].RoleName,
                                                                    displayWorkflowPicker: true//,
                                                                    //bwTenantId: tenantId,
                                                                    //bwWorkflowAppId: workflowAppId,
                                                                    //bwEnabledRequestTypes: bwEnabledRequestTypes
                                                                };
                                                                //var $bworgroleseditor = $("#divBwOrganizationEditor").bwOrganizationEditor(options);
                                                                $('#divBwOrganizationViewer').bwOrganizationViewer(options);




                                                            } catch (e) {
                                                                var msg = 'Exception in bwRequest.js.saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack;
                                                                console.log(msg);
                                                                displayAlertDialog(msg);
                                                            }
                                                        }
                                                    });

                                                    var msg = 'The budget request may not be saved/published. ' + results.message;

                                                    var result = {
                                                        status: 'REFUSED_SAVE_CHANGED_ORGID',
                                                        message: msg
                                                    }
                                                    resolve(result);

                                                }

                                            } else {

                                                //    if (displaySuccessMessage == 'true') { // This is done because the "Approve" method may want to display the message instead, for example.
                                                var msg = 'Error in bwRequest.js.saveAndPublishTheRequest(). The budget request may not be saved/published. Unexpected response: ' + results.status + ': ' + results.message;
                                                console.log(msg);
                                                displayAlertDialog(msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                resolve(result);

                                            }
                                        } catch (e) {

                                            HideActivitySpinner();
                                            var msg = 'Exception in saveAndPublishTheRequest().saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack;
                                            console.log(msg);
                                            displayAlertDialog(msg);
                                            //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        }
                                    },
                                    error: function (data, errorCode, errorMessage) {

                                        HideActivitySpinner();
                                        var msg = 'Error saving/publishing the budget request in budgetrequests library. ' + JSON.stringify(results.message);
                                        displayAlertDialog(msg);
                                        //$('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = 'Error creating the budget request in budgetrequests library. ' + JSON.stringify(data);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }
                                        reject(result);

                                    }
                                });
                            }
                        } catch (e) {

                            HideActivitySpinner();
                            var msg = 'Exception in saveAndPublishTheRequest():3: ' + e.message + ', ' + e.stack;
                            console.log(msg);
                            displayAlertDialog(msg);
                            // spanRequestForm_Error
                            $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            reject(result);

                        }
                    }).catch(function (e) {

                        HideActivitySpinner();
                        var msg = 'Exception in saveAndPublishTheRequest():2: ' + JSON.stringify(e);
                        displayAlertDialog(msg);
                        $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

                        var result = {
                            status: 'EXCEPTION',
                            message: msg
                        }
                        reject(result);

                    });
                } catch (e) {

                    HideActivitySpinner();
                    var msg = 'Exception in saveAndPublishTheRequest():1: requestDialogId: ' + requestDialogId + ', ' + e.message + ', ' + e.stack;
                    console.log(msg);
                    displayAlertDialog(msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }
            });
        } catch (e) {

            HideActivitySpinner();
            var msg = 'Exception in saveAndPublishTheRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);
            $('#' + requestDialogId).find('#spanRequestForm_Error')[0].innerHTML = msg;

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    },
    successfulTaskCompletion_AlertDialog_Close: function (bwBudgetRequestId, bwWorkflowTaskItemId) {
        try {
            console.log('In successfulTaskCompletion_AlertDialog_Close().');

            if (bwBudgetRequestId && bwWorkflowTaskItemId) {

                // If we have these values, then close the request as well.
                $('#divSuccessfulTaskCompletion_AlertDialog').dialog('close');


                var window1 = window; // This is how we make this work for popped-out request dialog windows.
                if (window.opener) {
                    window1 = window.opener;
                }

                var requests = window1.$('.budgetrequestform');
                if (requests && requests.length && requests.length > 0) {
                    for (var i = 0; i < requests.length; i++) {

                        var budgetRequestId = window1.$(requests[i]).attr('bwbudgetrequestid');
                        var workflowTaskItemId = window1.$(requests[i]).attr('bwworkflowtaskitemid');

                        if ((bwBudgetRequestId == budgetRequestId) && (bwWorkflowTaskItemId == workflowTaskItemId)) {

                            // We found it. Remove!
                            //console.log('In bwAuthentication.js.checkIfWeNeedToUpdateTheHomepage(). We just completed this task... remove it from the display. bwBudgetRequestId: ' + bwBudgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                            //requests[i].remove(); // Remove it from the dom.
                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('close');

                        }
                    }
                }

            } else {

                $('#divSuccessfulTaskCompletion_AlertDialog').dialog('close');

            }

        } catch (e) {
            console.log('Exception in successfulTaskCompletion_AlertDialog_Close(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in successfulTaskCompletion_AlertDialog_Close(): ' + e.message + ', ' + e.stack);
        }
    },
    displaySuccessfulTaskCompletion_AlertDialog: function (message, bwBudgetRequestId, bwWorkflowTaskItemId) {
        try {
            console.log('In displaySuccessfulTaskCompletion_AlertDialog().');

            // This alert dialog needs to have 2 close buttons:
            // - Close the request
            // - Keep the request open

            var dialogId = 'divSuccessfulTaskCompletion_AlertDialog';

            var div = document.getElementById(dialogId);
            if (!div) {

                div = document.createElement('div');
                div.id = dialogId;
                div.style.display = 'none';
                document.body.appendChild(div); // Place at end of document

            }

            var html = '';

            html += '<div id="divSuccessfulTaskCompletion_AlertDialog_MessageContent" style="font-size:40pt;"></div>';
            html += '<br /><br />';
            html += '<br />';
            html += '<div class="divDialogButton" onclick="$(\'.bwRequest\').bwRequest(\'successfulTaskCompletion_AlertDialog_Close\', \'' + bwBudgetRequestId + '\', \'' + bwWorkflowTaskItemId + '\');">';
            html += '    Close the request';
            html += '</div>';
            html += '<br />';
            html += '<div class="divDialogButton" onclick="$(\'.bwRequest\').bwRequest(\'successfulTaskCompletion_AlertDialog_Close\');">';
            html += '    Keep the request open';
            html += '</div>';
            html += '<br /><br />';

            div.innerHTML = html;

            $('#' + dialogId).dialog({
                modal: true,
                resizable: false,
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                width: "720",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                open: function (event, ui) {

                    $('.ui-widget-overlay').bind('click', function () { $('#' + dialogId).dialog('close'); });

                } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            });
            $('#' + dialogId).dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            document.getElementById('divSuccessfulTaskCompletion_AlertDialog_MessageContent').innerHTML = message;

        } catch (e) {
            console.log('Exception in displaySuccessfulTaskCompletion_AlertDialog(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displaySuccessfulTaskCompletion_AlertDialog(): ' + e.message + ', ' + e.stack);
        }
    },
    cmdApproveRequest: function (element, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, participantId, participantEmail, participantFriendlyName, roleMember_participantId, roleMember_participantEmail, roleMember_participantFriendlyName) {
        try {
            ShowActivitySpinner('Approving the request...');
            console.log('In bwRequest.js.cmdApproveRequest(). Approve the request and submit comments.');
            var thiz = this;

            if (!element) {

                HideActivitySpinner();
                var msg = 'In cmdApproveRequest(). Reference to this form was not passed. This process cannot continue. This is likely because the Approve button javascript needs to be changed in the workflow.';
                displayAlertDialog(msg);

            } else {

                var requestDialogId = $(element).closest('.ui-dialog')[0].id;

                var promise = this.saveAndPublishTheRequest(requestDialogId);
                promise.then(function () {
                    try {
                        var systemMessage; // 12-24-2021 This is a SYSTEM MESSAGE which we may want added to the comments for auditing reasons.

                        if (onBehalfOf_RoleId) {
                            //alert('In bwRequest.js.cmdApproveRequest(). ADMIN IS APPROVING ON BEHALF OF. THIS FUNCTIONALITY IS INCOMPLETE. Coming soon!');

                            systemMessage = 'SYSTEM MESSSAGE: ADMIN "' + participantFriendlyName + '" (' + participantEmail + ') has approved this request on behalf of the "' + onBehalfOf_RoleId + '" (' + onBehalfOf_RoleName + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').';

                        }

                        var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                        var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                        var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                        var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                        var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                        var bwWorkflowTaskItemId = $(element).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');

                        if ((!bwWorkflowTaskItemId) || (bwWorkflowTaskItemId == 'undefined')) {
                            alert('In bwRequest.js.cmdApproveRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                            displayAlertDialog('In bwRequest.js.cmdApproveRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                        }

                        console.log('In cmdApproveRequest(). bwBudgetRequestId: ' + bwBudgetRequestId + ', tenantId: ' + tenantId + ', workflowAppId: ' + workflowAppId); // this.options.bwBudgetRequestId);

                        //alert('ToDo: We need to check if the user has entered comments (if required) and if they have any checklists they need to complete. Also, are any required fields missing?');

                        var data = {
                            bwParticipantId_LoggedIn: participantId,
                            bwActiveStateIdentifier: activeStateIdentifier,
                            bwWorkflowAppId_LoggedIn: workflowAppId,

                            bwWorkflowAppId: workflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId
                        };
                        alert('In ??(). xcx12325-3. Calling /workflowconfiguration5().');
                        $.ajax({
                            url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                            type: "POST",
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            error: function (data, errorCode, errorMessage) {

                                console.log('xcx23123-3 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);
                                displayAlertDialog('xcx23123-3 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);

                            },
                            success: function (result) {
                                try {

                                    if (result.Workflow.length == 0) {

                                        HideActivitySpinner();
                                        var msg = 'ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId;
                                        console.log(msg);
                                        displayAlertDialog(msg);
                                        //alert('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId); //thiz.options.bwBudgetRequestId);
                                        //var instructions = '';
                                        //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                        //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;
                                    } else {

                                        var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                        var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId; // divRequestFormDialog_f112e677-7b2e-4842-b036-9eefa1781949

                                        //alert('Unfinished code: xcx324564785');
                                        // changed 12-30-2021 // var stepIndex = $('#' + requestDialogId).find('#bwStepIndex')[0].innerHTML;
                                        //// debugger;
                                        var workflowStatus = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowstatus_bwworkflowstepname', workflowStatus); // 12-30-2021 // This needs to match, it is how we locate the step. // bwworkflowstatus attribute in budgetrequestform
                                        var stepIndex = null;
                                        for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                            stepName = workflow.Steps.Step[i]["@Name"];
                                            if (stepName == workflowStatus) {
                                                stepIndex = i;
                                                break;
                                            }
                                        }







                                        var selectedRole = $('#' + requestDialogId).find('#selectedRaciRole')[0].value;
                                        //
                                        //var reviewerComments = document.getElementById(requestDialogId + '_ReviewerComments').innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        var reviewerComments = $('#' + requestDialogId).find('#ReviewerComments')[0].innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        //// debugger;
                                        //var stepIndex = document.getElementById('bwStepIndex').innerHTML;
                                        //var selectedRole = document.getElementById('selectedRaciRole').value;
                                        //// debugger; // CHECK THAT THE SELECTED ROLE ID IS CORRECT!
                                        // Now that we have the step and role, we can look up the requirements in the workflow.
                                        var commentsRequired = false;
                                        var checklistsRequired = false;
                                        for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                            if (workflow.Steps.Step[stepIndex].Assign[x]["@Role"] == selectedRole) {
                                                var assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                var cond = assign["@Cond"];
                                                if (cond) {
                                                    if (cond.indexOf('$ChecklistsRequired~') > -1) {
                                                        //var msg = 'You are required to complete the following checklist(s): ';
                                                        checklistsRequired = true;
                                                    }
                                                }
                                                for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign[x].Action.length; i++) {
                                                    if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@Name"] == 'Approve') {
                                                        if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"]) {
                                                            commentsRequired = Boolean(workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"].toLowerCase());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        // NOW WE HAVE TO CHECK IF THE CHECKLISTS HAVE ACTUALLY BEEN SUBMITTED/COMPLETED
                                        //
                                        if (checklistsRequired == true) {
                                            // debugger;
                                            var cond = assign["@Cond"];
                                            var checklistsRequiredArray = cond.split('$ChecklistsRequired~')[1].split('&')[0].split(',');
                                            if (thiz.options.store.Checklists) {
                                                for (var i = 0; i < thiz.options.store.Checklists.length; i++) {
                                                    var checklist = JSON.parse(thiz.options.store.Checklists[i]);
                                                    var bwChecklistTemplatesId = checklist.bwChecklistTemplatesId;
                                                    if (checklistsRequiredArray.indexOf(bwChecklistTemplatesId) > -1) {
                                                        // Remove it from the checklistsRequired list.
                                                        for (var x = 0; x < checklistsRequiredArray.length; x++) { // WE ARE LOOPING THROUGH THIS UNTILL ALL ARE GONE. AT SOME POINT WE SHOULD NOT NEED THIS FIX.
                                                            var index = checklistsRequiredArray.indexOf(bwChecklistTemplatesId);
                                                            checklistsRequiredArray.splice(index, 1);
                                                        }
                                                    } else {
                                                        // do nothing.
                                                    }
                                                }
                                                if (checklistsRequiredArray.length == 0) {
                                                    checklistsRequired = false;
                                                }
                                            } else {
                                                checklistsRequired = false;
                                            }
                                        }
                                        var isValid = true;
                                        //// debugger;
                                        if (commentsRequired == true && reviewerComments.length == 0) {
                                            //if (!(reviewerComments && reviewerComments != '')) {
                                            isValid = false;
                                            alert('COMMENTS ARE REQUIRED BEFORE YOU CAN APPROVE.XCX395');
                                            //}
                                        } else if (checklistsRequired == true) {
                                            isValid = false;
                                            alert(checklistsRequiredArray.length + ' checklists are required before you approve and complete this step. They may not all be yours...xcx396.');

                                        } else if (commentsRequired == true && checklistsRequired == true) {
                                            isValid = false;
                                            alert('COMMENTS AND CHECKLIST(S) ARE REQUIRED BEFORE YOU CAN APPROVE.XCX397');
                                        }
                                        if (isValid != true) {

                                            HideActivitySpinner();
                                            var msg = 'Error in bwRequest.js.cmdApproveRequest(). Invalid value for isValid: ' + isValid;
                                            console.log(msg);
                                            displayAlertDialog(msg);

                                        } else {
                                            // Approve the request.

                                            var created = getCreatedTimestamp();
                                            var duedate = getDueDateTimestamp();

                                            //alert('NEED TO GET bwRequestJson so we can make changes to it, including adding comments.');

                                            var _budgetRequest = {
                                                bwParticipantId_LoggedIn: participantId, // Authorization 10-11-2022
                                                bwActiveStateIdentifier: activeStateIdentifier, // Authorization
                                                bwWorkflowAppId_LoggedIn: workflowAppId, // Authorization

                                                bwBudgetRequestId: bwBudgetRequestId,
                                                bwTenantId: tenantId,
                                                bwWorkflowAppId: workflowAppId,

                                                bwWorkflowTaskItemId: bwWorkflowTaskItemId, // added 12-23-2021

                                                //bwRequestJson: xx, // added 12-24-2021

                                                ModifiedByFriendlyName: participantFriendlyName,
                                                ModifiedById: participantId,
                                                ModifiedByEmail: participantEmail,
                                                // THIS HAS TO BE FIXED!!!!!!!!!!!!!!!!!!!!!!! THE SERVER SHOULD PROBABLY LOOK THIS UP IN THE WORKFLOW!!!!!!!!!!!!!!
                                                CurrentOwner: participantId,
                                                bwAssignedTo: participantEmail,
                                                bwAssignedToId: participantId,
                                                participantFriendlyName: participantFriendlyName,
                                                selectedRoleId: selectedRole,
                                                reviewerComments: reviewerComments,
                                                systemMessage: systemMessage // 12-24-2021 This is a SYSTEM MESSAGE which we want added to the comments for auditing reasons.
                                            };
                                            var operationUri = thiz.options.operationUriPrefix + "_bw/bwbudgetrequests/approverequest"; // This is the only place where this web service is called.
                                            $.ajax({
                                                url: operationUri,
                                                type: "POST",
                                                data: _budgetRequest,
                                                //timeout: 3000, // We need to make sure this responds quickly!!!!
                                                headers: {
                                                    "Accept": "application/json; odata=verbose"
                                                },
                                                success: function (results) {
                                                    try {

                                                        HideActivitySpinner();
                                                        if (results.status != 'SUCCESS') {

                                                            console.log('Error in bwRequest.js.cmdApproveRequest(). xcx99304: ' + JSON.stringify(results));
                                                            displayAlertDialog('Error in bwRequest.js.cmdApproveRequest(): ' + JSON.stringify(results));

                                                        } else {

                                                            // This alert dialog needs to have 2 close buttons:
                                                            // - Close the request
                                                            // - Keep the request open
                                                            thiz.displaySuccessfulTaskCompletion_AlertDialog(results.message, bwBudgetRequestId, bwWorkflowTaskItemId);

                                                            // Redisplay the request so that it reflects the updated state of the workflow. // 2-10-2022
                                                            $('#divRequestFormDialog_' + bwBudgetRequestId).dialog('option', 'bwForceClose', true);
                                                            thiz.displayArInDialog('https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', '');

                                                            //
                                                            // ALSO WE NEED TO CLOSE ANY TASK ITEMS DISPLAYED IN THE EXECUTIVE SUMMARIES ETC...... 5-18-2023
                                                            //
                                                            // class "executiveSummaryInCarousel"
                                                            // attributes: bwbudgetrequestid, bwworkflowtaskitemid // bwBudgetRequestId, bwWorkflowTaskItemId

                                                            var window1 = window; // This is how we make this work for popped-out request dialog windows.
                                                            if (window.opener) {
                                                                window1 = window.opener;
                                                            }

                                                            var executiveSummaries = window1.$('.executiveSummaryInCarousel');
                                                            if (executiveSummaries && executiveSummaries.length && executiveSummaries.length > 0) {
                                                                for (var i = 0; i < executiveSummaries.length; i++) {

                                                                    var budgetRequestId = window1.$(executiveSummaries[i]).attr('bwbudgetrequestid');
                                                                    var workflowTaskItemId = window1.$(executiveSummaries[i]).attr('bwworkflowtaskitemid');

                                                                    if ((bwBudgetRequestId == budgetRequestId) && (bwWorkflowTaskItemId == workflowTaskItemId)) {
                                                                        // We found it. Remove!

                                                                        console.log('In bwAuthentication.js.checkIfWeNeedToUpdateTheHomepage(). We just completed this task... remove it from the display. bwBudgetRequestId: ' + bwBudgetRequestId + ', bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);

                                                                        executiveSummaries[i].remove(); // Remove it from the dom.

                                                                        //
                                                                        //
                                                                        // TO DO: WE ALSO NEED TO REMOVE THE ROLE FROM THE DROP DOWN!!!!!!!!! <<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                        //
                                                                        //

                                                                        // selectedRaciRole

                                                                        var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId;
                                                                        var element = $('#' + requestDialogId).find('#selectedRaciRole')[0];
                                                                        if (element) {
                                                                            var options = $(element).find('option');
                                                                            for (var i = 0; i < options.length; i++) {
                                                                                // bwworkflowtaskitemid
                                                                                var workflowTaskItemId = $(options[i]).attr('bwworkflowtaskitemid');
                                                                                if (bwWorkflowTaskItemId == workflowTaskItemId) {
                                                                                    // Found it!
                                                                                    options[i].remove(); // Remove it from the dom.

                                                                                }
                                                                            }
                                                                        }





                                                                    }
                                                                }
                                                            }

                                                            //
                                                            // end: ALSO WE NEED TO CLOSE ANY TASK ITEMS DISPLAYED IN THE EXECUTIVE SUMMARIES ETC...... 5-18-2023
                                                            //

                                                        }

                                                    } catch (e) {

                                                        HideActivitySpinner();
                                                        console.log('Exception in bwRequest.js.cmdApproveRequest().post.approverequest.success(): ' + e.message + ', ' + e.stack);
                                                        alert('Exception in bwRequest.js.cmdApproveRequest().post.approverequest.success(): ' + e.message + ', ' + e.stack);

                                                    }
                                                },
                                                error: function (data, errorCode, errorMessage) {

                                                    console.log('Error in bwRequest.js.cmdApproveRequest().post.approverequest: Error approving the request: ' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));

                                                    if (errorCode == 'timeout') {

                                                        displayAlertDialog('The approval had an error. <span style="display:normal;">' + +errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data) + '</span>');
                                                        HideActivitySpinner();

                                                    } else {

                                                        alert('Error in bwRequest.js.cmdApproveRequest().post.approverequest: Error approving the request: ' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                                                        HideActivitySpinner();
                                                    }

                                                }
                                            });
                                        }
                                    }
                                } catch (e) {

                                    HideActivitySpinner();
                                    var msg = 'Exception in bwRequest.js.cmdApproveRequest().xcx234: ' + e.message + ', ' + e.stack;
                                    console.log(msg);
                                    displayAlertDialog(msg);
                                    document.getElementById('spanRequestForm_Error').innerHTML += msg;

                                }
                            }
                        });

                    } catch (e) {

                        HideActivitySpinner();
                        var msg = 'Exception in bwRequest.js.cmdApproveRequest():2: ' + e.message + ', ' + e.stack;
                        console.log(msg);
                        displayAlertDialog(msg);

                    }

                });
            }
        } catch (e) {

            HideActivitySpinner();
            var msg = 'Exception in bwRequest.js.cmdApproveRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },
    cmdReviewRequest: function (element, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, participantId, participantEmail, participantFriendlyName, roleMember_participantId, roleMember_participantEmail, roleMember_participantFriendlyName) {
        try {
            console.log('In bwRequest.js.cmdReviewRequest(). ??xcx1234puttitleattribute desc here');
            alert('In bwRequest.js.cmdReviewRequest(). ??xcx1234puttitleattribute desc here');
            var thiz = this;

            //// debugger; // We are now pasing the button (element) as 'this'. 6-6-2020

            if (!element) {

                var msg = 'In cmdReviewRequest(). Reference to this form was not passed. This process cannot continue. This is likely because the Approve button javascript needs to be changed in the workflow.';
                console.log(msg);
                displayAlertDialog(msg);

            } else {
                //// debugger;
                var requestDialogId = $(element).closest('.ui-dialog')[0].id;
                //alert('requestDialogId: ' + requestDialogId);
                //// debugger;
                var promise = this.saveAndPublishTheRequest(requestDialogId);
                promise.then(function () {
                    try {
                        var systemMessage; // 12-24-2021 This is a SYSTEM MESSAGE which we may want added to the comments for auditing reasons.

                        if (onBehalfOf_RoleId) {
                            //alert('In bwRequest.js.cmdReviewRequest(). ADMIN IS APPROVING ON BEHALF OF. THIS FUNCTIONALITY IS INCOMPLETE. Coming soon!');

                            systemMessage = 'SYSTEM MESSSAGE: ADMIN "' + participantFriendlyName + '" (' + participantEmail + ') has approved this request on behalf of the "' + onBehalfOf_RoleId + '" (' + onBehalfOf_RoleName + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').';

                        }






                        //var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                        var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                        var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                        var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                        var bwWorkflowTaskItemId = $(element).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');

                        if ((!bwWorkflowTaskItemId) || (bwWorkflowTaskItemId == 'undefined')) {
                            alert('In bwRequest.js.cmdReviewRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                            displayAlertDialog('In bwRequest.js.cmdReviewRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                        }

                        console.log('In cmdReviewRequest(). bwBudgetRequestId: ' + bwBudgetRequestId + ', tenantId: ' + tenantId + ', workflowAppId: ' + workflowAppId); // this.options.bwBudgetRequestId);
                        //var thiz = this;


                        //alert('ToDo: We need to check if the user has entered comments (if required) and if they have any checklists they need to complete. Also, are any required fields missing?');


                        var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                        var data = {
                            bwParticipantId_LoggedIn: participantId,
                            bwActiveStateIdentifier: activeStateIdentifier,
                            bwWorkflowAppId_LoggedIn: workflowAppId,

                            bwWorkflowAppId: workflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId
                        };
                        alert('In ??(). xcx12325-5. Calling /workflowconfiguration5().');
                        $.ajax({
                            url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                            type: "POST",
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            error: function (data, errorCode, errorMessage) {

                                console.log('Error in bwRequest.js.cmdReviewRequest():3: ' + errorCode + ' ' + errorMessage);
                                displayAlertDialog('Error in bwRequest.js.cmdReviewRequest():3: ' + errorCode + ' ' + errorMessage);

                            },
                            success: function (result) {
                                try {

                                    if (result.Workflow.length == 0) {
                                        alert('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId); //thiz.options.bwBudgetRequestId);
                                        //var instructions = '';
                                        //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                        //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;
                                    } else {
                                        // debugger;
                                        var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                        var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId; // divRequestFormDialog_f112e677-7b2e-4842-b036-9eefa1781949



                                        //alert('Unfinished code: xcx324564785');
                                        // changed 12-30-2021 // var stepIndex = $('#' + requestDialogId).find('#bwStepIndex')[0].innerHTML;
                                        //// debugger;
                                        var workflowStatus = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowstatus_bwworkflowstepname', workflowStatus); // 12-30-2021 // This needs to match, it is how we locate the step. // bwworkflowstatus attribute in budgetrequestform
                                        var stepIndex = null;
                                        for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                            stepName = workflow.Steps.Step[i]["@Name"];
                                            if (stepName == workflowStatus) {
                                                stepIndex = i;
                                                break;
                                            }
                                        }







                                        var selectedRole = $('#' + requestDialogId).find('#selectedRaciRole')[0].value;
                                        //
                                        //var reviewerComments = document.getElementById(requestDialogId + '_ReviewerComments').innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        var reviewerComments = $('#' + requestDialogId).find('#ReviewerComments')[0].innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        //// debugger;
                                        //var stepIndex = document.getElementById('bwStepIndex').innerHTML;
                                        //var selectedRole = document.getElementById('selectedRaciRole').value;
                                        //// debugger; // CHECK THAT THE SELECTED ROLE ID IS CORRECT!
                                        // Now that we have the step and role, we can look up the requirements in the workflow.
                                        var commentsRequired = false;
                                        var checklistsRequired = false;
                                        for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                            if (workflow.Steps.Step[stepIndex].Assign[x]["@Role"] == selectedRole) {
                                                var assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                var cond = assign["@Cond"];
                                                if (cond) {
                                                    if (cond.indexOf('$ChecklistsRequired~') > -1) {
                                                        //var msg = 'You are required to complete the following checklist(s): ';
                                                        checklistsRequired = true;
                                                    }
                                                }
                                                for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign[x].Action.length; i++) {
                                                    if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@Name"] == 'Approve') {
                                                        if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"]) {
                                                            commentsRequired = Boolean(workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"].toLowerCase());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        // NOW WE HAVE TO CHECK IF THE CHECKLISTS HAVE ACTUALLY BEEN SUBMITTED/COMPLETED
                                        //
                                        if (checklistsRequired == true) {
                                            // debugger;
                                            var cond = assign["@Cond"];
                                            var checklistsRequiredArray = cond.split('$ChecklistsRequired~')[1].split('&')[0].split(',');
                                            if (thiz.options.store.Checklists) {
                                                for (var i = 0; i < thiz.options.store.Checklists.length; i++) {
                                                    var checklist = JSON.parse(thiz.options.store.Checklists[i]);
                                                    var bwChecklistTemplatesId = checklist.bwChecklistTemplatesId;
                                                    if (checklistsRequiredArray.indexOf(bwChecklistTemplatesId) > -1) {
                                                        // Remove it from the checklistsRequired list.
                                                        for (var x = 0; x < checklistsRequiredArray.length; x++) { // WE ARE LOOPING THROUGH THIS UNTILL ALL ARE GONE. AT SOME POINT WE SHOULD NOT NEED THIS FIX.
                                                            var index = checklistsRequiredArray.indexOf(bwChecklistTemplatesId);
                                                            checklistsRequiredArray.splice(index, 1);
                                                        }
                                                    } else {
                                                        // do nothing.
                                                    }
                                                }
                                                if (checklistsRequiredArray.length == 0) {
                                                    checklistsRequired = false;
                                                }
                                            } else {
                                                checklistsRequired = false;
                                            }
                                        }
                                        var isValid = true;
                                        //// debugger;
                                        if (commentsRequired == true && reviewerComments.length == 0) {
                                            //if (!(reviewerComments && reviewerComments != '')) {
                                            isValid = false;
                                            alert('COMMENTS ARE REQUIRED BEFORE YOU CAN APPROVE.XCX395');
                                            //}
                                        } else if (checklistsRequired == true) {
                                            isValid = false;
                                            alert(checklistsRequiredArray.length + ' checklists are required before you approve and complete this step. They may not all be yours...xcx396.');

                                        } else if (commentsRequired == true && checklistsRequired == true) {
                                            isValid = false;
                                            alert('COMMENTS AND CHECKLIST(S) ARE REQUIRED BEFORE YOU CAN APPROVE.XCX397');
                                        }
                                        if (isValid == true) {
                                            // Approve the request.

                                            var created = getCreatedTimestamp();
                                            var duedate = getDueDateTimestamp();
                                            //// debugger;


                                            //alert('NEED TO GET bwRequestJson so we can make changes to it, including adding comments.');

                                            var _budgetRequest = {
                                                bwBudgetRequestId: bwBudgetRequestId,
                                                bwTenantId: tenantId,
                                                bwWorkflowAppId: workflowAppId,

                                                bwWorkflowTaskItemId: bwWorkflowTaskItemId, // added 12-23-2021

                                                //bwRequestJson: xx, // added 12-24-2021

                                                ModifiedByFriendlyName: participantFriendlyName,
                                                ModifiedById: participantId,
                                                ModifiedByEmail: participantEmail,
                                                // THIS HAS TO BE FIXED!!!!!!!!!!!!!!!!!!!!!!! THE SERVER SHOULD PROBABLY LOOK THIS UP IN THE WORKFLOW!!!!!!!!!!!!!!
                                                CurrentOwner: participantId,
                                                bwAssignedTo: participantEmail,
                                                bwAssignedToId: participantId,
                                                participantFriendlyName: participantFriendlyName,
                                                selectedRoleId: selectedRole,
                                                reviewerComments: reviewerComments,
                                                systemMessage: systemMessage // 12-24-2021 This is a SYSTEM MESSAGE which we want added to the comments for auditing reasons.
                                            };
                                            var operationUri = webserviceurl + "/bwbudgetrequests/reviewrequest";
                                            $.ajax({
                                                url: operationUri,
                                                type: "POST",
                                                timeout: thiz.options.ajaxTimeout,
                                                data: _budgetRequest,
                                                headers: {
                                                    "Accept": "application/json; odata=verbose"
                                                },
                                                success: function (data) {
                                                    try {
                                                        //// debugger;

                                                        //thiz.hideRequestButtonADMINOnBehalfOfDialog();


                                                        displayAlertDialog(data);



                                                        //
                                                        // Redisplay the request so that it reflects the updated state of the workflow. // 2-10-2022
                                                        //
                                                        //$('.bwRequest').bwRequest('displayArInDialog', 'https://budgetworkflow.com', bwBudgetRequestId, Title, ProjectTitle, Title, bwAssignedToRaciRoleAbbreviation, bwWorkflowTaskItemId);
                                                        //$('.bwRequest').bwRequest('displayArInDialog', 'https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', '');
                                                        thiz.displayArInDialog('https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', '');





                                                    } catch (e) {
                                                        console.log('Exception in bwRequest.cmdReviewRequest().post.reviewrequest.success(): ' + e.message + ', ' + e.stack);
                                                        displayAlertDialog('Exception in bwRequest.cmdReviewRequest().post.reviewrequest.success(): ' + e.message + ', ' + e.stack);
                                                    }
                                                },
                                                error: function (data, errorCode, errorMessage) {
                                                    console.log('Error in bwRequest.cmdReviewRequest().post.reviewrequest: Error reviewing the request: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                                                    displayAlertDialog('Error in bwRequest.cmdReviewRequest().post.reviewrequest: Error reviewing the request: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                                                }
                                            });
                                        }
                                    }

                                } catch (e) {

                                    var msg = 'Exception in cmdReviewRequest():3: ' + e.message + ', ' + e.stack;
                                    console.log(msg);
                                    displayAlertDialog(msg);

                                }
                            }
                        });

                    } catch (e) {

                        var msg = 'Exception in cmdReviewRequest():2: ' + e.message + ', ' + e.stack;
                        console.log(msg);
                        displayAlertDialog(msg);

                    }

                });
            }
        } catch (e) {

            var msg = 'Exception in cmdReviewRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },

    cmdReviseHoldRequest: function (element, onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, participantId, participantEmail, participantFriendlyName, roleMember_participantId, roleMember_participantEmail, roleMember_participantFriendlyName) {
        try {
            console.log('In bwRequest.js.cmdReviseHoldRequest(). This sends the request back to the original creator.');
            //alert('In bwRequest.js.cmdReviseHoldRequest(). This sends the request back to the original creator. This functionality is incomplete. Coming soon!');

            var thiz = this;

            if (!element) {

                var msg = 'In bwRequest.js.cmdReviseHoldRequest(). Reference to this form was not passed. This process cannot continue. This is likely because the Approve button javascript needs to be changed in the workflow.';
                console.log(msg);
                displayAlertDialog(msg);

            } else {

                var requestDialogId = $(element).closest('.ui-dialog')[0].id;

                var promise = this.saveAndPublishTheRequest(requestDialogId);
                promise.then(function () {
                    try {
                        var systemMessage; // 12-24-2021 This is a SYSTEM MESSAGE which we may want added to the comments for auditing reasons.

                        if (onBehalfOf_RoleId) {
                            //alert('In bwRequest.js.cmdReviseHoldRequest(). ADMIN IS APPROVING ON BEHALF OF. THIS FUNCTIONALITY IS INCOMPLETE. Coming soon!');

                            systemMessage = 'SYSTEM MESSSAGE: ADMIN "' + participantFriendlyName + '" (' + participantEmail + ') has approved this request on behalf of the "' + onBehalfOf_RoleId + '" (' + onBehalfOf_RoleName + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').';

                        }


                        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
                        var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
                        var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
                        var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

                        var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

                        var bwBudgetRequestId = $(element).closest('#budgetrequestform')[0].getAttribute('bwbudgetrequestid');
                        var bwWorkflowTaskItemId = $(element).closest('#budgetrequestform')[0].getAttribute('bwworkflowtaskitemid');

                        if ((!bwWorkflowTaskItemId) || (bwWorkflowTaskItemId == 'undefined')) {
                            alert('In bwRequest.js.cmdReviseHoldRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                            displayAlertDialog('In bwRequest.js.cmdReviseHoldRequest(). Invaid value for bwWorkflowTaskItemId: ' + bwWorkflowTaskItemId);
                        }

                        console.log('In bwRequest.js.cmdReviseHoldRequest(). bwBudgetRequestId: ' + bwBudgetRequestId + ', workflowAppId: ' + workflowAppId); // this.options.bwBudgetRequestId);

                        //alert('ToDo: We need to check if the user has entered comments (if required) and if they have any checklists they need to complete. Also, are any required fields missing?');

                        var data = {
                            bwParticipantId_LoggedIn: participantId,
                            bwActiveStateIdentifier: activeStateIdentifier,
                            bwWorkflowAppId_LoggedIn: workflowAppId,

                            bwWorkflowAppId: workflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId
                        };
                        alert('In ??(). xcx12325-6. Calling /workflowconfiguration5().');
                        $.ajax({
                            url: thiz.options.operationUriPrefix + '_bw/workflowconfiguration5',
                            type: "POST",
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            error: function (data, errorCode, errorMessage) {

                                console.log('xcx23123-4 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);
                                displayAlertDialog('xcx23123-4 Error in bwRequest.js.displayRequestForm(): ' + errorCode + ' ' + errorMessage);

                            },
                            success: function (result) {
                                try {

                                    if (result.Workflow.length == 0) {
                                        alert('ERROR: Cannot locate workflowxcx9 for bwBudgetRequestId: ' + bwBudgetRequestId); //thiz.options.bwBudgetRequestId);
                                        //var instructions = '';
                                        //instructions = '<span style="color:tomato;">ERROR: Could not find the workflow: ' + brData.BudgetRequests[0].bwWorkflowId + '. <a href="">Click here to automatically reassign to the active workflow for "' + brData.BudgetRequests[0].bwRequestType + '".</a></span>';
                                        //$('#' + requestDialogId).find('#spanRequestForm_Instructions')[0].innerHTML = instructions;
                                    } else {
                                        // debugger;
                                        var workflow = JSON.parse(result.Workflow[0].bwWorkflowJson);

                                        var requestDialogId = 'divRequestFormDialog_' + bwBudgetRequestId; // divRequestFormDialog_f112e677-7b2e-4842-b036-9eefa1781949



                                        //alert('Unfinished code: xcx324564785');
                                        // changed 12-30-2021 // var stepIndex = $('#' + requestDialogId).find('#bwStepIndex')[0].innerHTML;
                                        //// debugger;
                                        var workflowStatus = $('#' + requestDialogId).find('#budgetrequestform')[0].getAttribute('bwworkflowstatus_bwworkflowstepname', workflowStatus); // 12-30-2021 // This needs to match, it is how we locate the step. // bwworkflowstatus attribute in budgetrequestform
                                        var stepIndex = null;
                                        for (var i = 0; i < workflow.Steps.Step.length; i++) {
                                            stepName = workflow.Steps.Step[i]["@Name"];
                                            if (stepName == workflowStatus) {
                                                stepIndex = i;
                                                break;
                                            }
                                        }







                                        var selectedRole = $('#' + requestDialogId).find('#selectedRaciRole')[0].value;
                                        //
                                        //var reviewerComments = document.getElementById(requestDialogId + '_ReviewerComments').innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        var reviewerComments = $('#' + requestDialogId).find('#ReviewerComments')[0].innerHTML.replace('<br>', '').trim(); // null_ReviewerComments
                                        //// debugger;
                                        //var stepIndex = document.getElementById('bwStepIndex').innerHTML;
                                        //var selectedRole = document.getElementById('selectedRaciRole').value;
                                        //// debugger; // CHECK THAT THE SELECTED ROLE ID IS CORRECT!
                                        // Now that we have the step and role, we can look up the requirements in the workflow.
                                        var commentsRequired = false;
                                        var checklistsRequired = false;
                                        for (var x = 0; x < workflow.Steps.Step[stepIndex].Assign.length; x++) {
                                            if (workflow.Steps.Step[stepIndex].Assign[x]["@Role"] == selectedRole) {
                                                var assign = workflow.Steps.Step[stepIndex].Assign[x];
                                                var cond = assign["@Cond"];
                                                if (cond) {
                                                    if (cond.indexOf('$ChecklistsRequired~') > -1) {
                                                        //var msg = 'You are required to complete the following checklist(s): ';
                                                        checklistsRequired = true;
                                                    }
                                                }
                                                for (var i = 0; i < workflow.Steps.Step[stepIndex].Assign[x].Action.length; i++) {
                                                    if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@Name"] == 'Approve') {
                                                        if (workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"]) {
                                                            commentsRequired = Boolean(workflow.Steps.Step[stepIndex].Assign[x].Action[i]["@RequireComments"].toLowerCase());
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        // NOW WE HAVE TO CHECK IF THE CHECKLISTS HAVE ACTUALLY BEEN SUBMITTED/COMPLETED
                                        //
                                        if (checklistsRequired == true) {
                                            // debugger;
                                            var cond = assign["@Cond"];
                                            var checklistsRequiredArray = cond.split('$ChecklistsRequired~')[1].split('&')[0].split(',');
                                            if (thiz.options.store.Checklists) {
                                                for (var i = 0; i < thiz.options.store.Checklists.length; i++) {
                                                    var checklist = JSON.parse(thiz.options.store.Checklists[i]);
                                                    var bwChecklistTemplatesId = checklist.bwChecklistTemplatesId;
                                                    if (checklistsRequiredArray.indexOf(bwChecklistTemplatesId) > -1) {
                                                        // Remove it from the checklistsRequired list.
                                                        for (var x = 0; x < checklistsRequiredArray.length; x++) { // WE ARE LOOPING THROUGH THIS UNTILL ALL ARE GONE. AT SOME POINT WE SHOULD NOT NEED THIS FIX.
                                                            var index = checklistsRequiredArray.indexOf(bwChecklistTemplatesId);
                                                            checklistsRequiredArray.splice(index, 1);
                                                        }
                                                    } else {
                                                        // do nothing.
                                                    }
                                                }
                                                if (checklistsRequiredArray.length == 0) {
                                                    checklistsRequired = false;
                                                }
                                            } else {
                                                checklistsRequired = false;
                                            }
                                        }
                                        var isValid = true;
                                        //// debugger;
                                        if (commentsRequired == true && reviewerComments.length == 0) {
                                            //if (!(reviewerComments && reviewerComments != '')) {
                                            isValid = false;
                                            alert('COMMENTS ARE REQUIRED BEFORE YOU CAN APPROVE.XCX395');
                                            //}
                                        } else if (checklistsRequired == true) {
                                            isValid = false;
                                            alert(checklistsRequiredArray.length + ' checklists are required before you approve and complete this step. They may not all be yours...xcx396.');

                                        } else if (commentsRequired == true && checklistsRequired == true) {
                                            isValid = false;
                                            alert('COMMENTS AND CHECKLIST(S) ARE REQUIRED BEFORE YOU CAN APPROVE.XCX397');
                                        }
                                        if (isValid == true) {
                                            // Approve the request.

                                            var created = getCreatedTimestamp();
                                            var duedate = getDueDateTimestamp();
                                            //// debugger;


                                            //alert('NEED TO GET bwRequestJson so we can make changes to it, including adding comments.');

                                            var _budgetRequest = {
                                                bwParticipantId_LoggedIn: participantId, // Authorization 10-11-2022
                                                bwActiveStateIdentifier: activeStateIdentifier, // Authorization
                                                bwWorkflowAppId_LoggedIn: workflowAppId, // Authorization

                                                bwBudgetRequestId: bwBudgetRequestId,
                                                //bwTenantId: tenantId,
                                                bwWorkflowAppId: workflowAppId,

                                                bwWorkflowTaskItemId: bwWorkflowTaskItemId, // added 12-23-2021

                                                //bwRequestJson: xx, // added 12-24-2021

                                                ModifiedByFriendlyName: participantFriendlyName,
                                                ModifiedById: participantId,
                                                ModifiedByEmail: participantEmail,
                                                // THIS HAS TO BE FIXED!!!!!!!!!!!!!!!!!!!!!!! THE SERVER SHOULD PROBABLY LOOK THIS UP IN THE WORKFLOW!!!!!!!!!!!!!!
                                                CurrentOwner: participantId,
                                                bwAssignedTo: participantEmail,
                                                bwAssignedToId: participantId,
                                                participantFriendlyName: participantFriendlyName,
                                                selectedRoleId: selectedRole,
                                                reviewerComments: reviewerComments,
                                                systemMessage: systemMessage // 12-24-2021 This is a SYSTEM MESSAGE which we want added to the comments for auditing reasons.
                                            };
                                            var operationUri = webserviceurl + "/bwbudgetrequests/reviseholdrequest";
                                            $.ajax({
                                                url: operationUri,
                                                type: "POST",
                                                data: _budgetRequest,
                                                headers: {
                                                    "Accept": "application/json; odata=verbose"
                                                },
                                                success: function (data) {
                                                    try {

                                                        if (data.status != 'SUCCESS') {

                                                            console.log('Error in reviseholdrequest xcx99304: ' + JSON.stringify(data));
                                                            displayAlertDialog('Error in reviseholdrequest: ' + JSON.stringify(data));

                                                        } else {

                                                            displayAlertDialog(data.message);

                                                            // Redisplay the request so that it reflects the updated state of the workflow. // 2-10-2022
                                                            thiz.displayArInDialog('https://budgetworkflow.com', bwBudgetRequestId, '', '', '', '', '');

                                                        }

                                                    } catch (e) {
                                                        console.log('Exception in bwRequest.js.cmdReviseHoldRequest().post.approverequest.success(): ' + e.message + ', ' + e.stack);
                                                        displayAlertDialog('Exception in bwRequest.js.cmdReviseHoldRequest().post.approverequest.success(): ' + e.message + ', ' + e.stack);
                                                    }
                                                },
                                                error: function (data, errorCode, errorMessage) {
                                                    console.log('Error in bwRequest.js.cmdReviseHoldRequest().post.approverequest: Error approving the request: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                                                    displayAlertDialog('Error in bwRequest.js.cmdReviseHoldRequest().post.approverequest: Error approving the request: ' + errorCode + ', ' + errorMessage + JSON.stringify(data));
                                                }
                                            });
                                        }
                                    }
                                } catch (e) {

                                    var msg = 'Exception in bwRequest.js.cmdReviseHoldRequest().Get: ' + e.message + ', ' + e.stack;
                                    console.log(msg);
                                    displayAlertDialog(msg);
                                    document.getElementById('spanRequestForm_Error').innerHTML += msg;
                                }
                            }
                        });

                    } catch (e) {

                        var msg = 'Exception in bwRequest.js.cmdReviseHoldRequest():2: ' + e.message + ', ' + e.stack;
                        console.log(msg);
                        displayAlertDialog(msg);

                    }

                });
            }

        } catch (e) {

            var msg = 'Exception in bwRequest.js.cmdReviseHoldRequest(): ' + e.message + ', ' + e.stack;
            console.log(msg);
            displayAlertDialog(msg);

        }
    },
    cmdDeclineRequest: function () {
        try {
            console.log('In bwRequest.js.cmdDeclineRequest(). This declines the request and marks it as Completed/Done, but not active/approved.');
            alert('In bwRequest.js.cmdDeclineRequest(). This declines the request and marks it as Completed/Done/Abandoned?, but not active/approved. This functionality is incomplete. Coming soon!');




        } catch (e) {

        }
    },




    removeDuplicateUsingSet: function (arr) {
        var unique_array = Array.from(new Set(arr))
        return unique_array
    },

    removeDuplicates: function (arr) {
        var unique_array = []
        for (var i = 0; i < arr.length; i++) {
            if (unique_array.indexOf(arr[i]) == -1) {
                unique_array.push(arr[i])
            }
        }
        return unique_array
    },


    createXmlDocument_InitArFromOfflineRequest: function (budgetRequestId) {

        console.log('In createXmlDocument_InitArFromOfflineRequest(' + budgetRequestId + ')');
        var thiz = this;
        var doc = '<?xml version="1.0" encoding="UTF-8"?>';
        try {
            //var doc = '<?xml version="1.0" encoding="UTF-8"?>';
            //doc += '<?mso-infoPathSolution name="urn:schemas-microsoft-com:office:infopath:Budget-Form:-myXSD-2012-09-11T20-22-29" href="manifest.xsf" solutionVersion="1.0.1.2243" productVersion="14.0.0" PIVersion="1.0.0.0" ?>';
            //doc += '<?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.3"?>';
            //doc += '<?mso-infoPath-file-attachment-present?>';
            //doc += '<my:myFields xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

            doc += '<my:myFields  xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29"  xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

            doc += '<my:BudgetRequestId>' + budgetRequestId + '</my:BudgetRequestId>';

            //// Works in IE: var curRequestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
            //var curRequestedCapital = document.getElementById('dblRequestedCapitalInXslForm2').innerHTML; // Works in Safari and IE.
            //var requestedCapital = parseFloat(curRequestedCapital.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
            //doc += '<my:Requested_Capital>' + requestedCapital + '</my:Requested_Capital>';

            // Works in IE:
            //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>';
            //doc += '<my:Brief_Description_of_Project>' + document.getElementById('strBriefDescriptionOfProject').innerHTML + '</my:Brief_Description_of_Project>';
            //doc += '<my:Project_Name>' + document.getElementById('strProjectTitle').innerHTML + '</my:Project_Name>';
            // Works in Safari and IE:

            //var tmpFuncAreaValueArray = document.getElementById('ddlFunctionalAreaInXslForm').value.split('|');
            ////var tmpFuncAreaValueArray = explode('|', tmpFuncAreaValue);

            //doc += '<my:Functional_Area_Id>' + tmpFuncAreaValueArray[0] + '</my:Functional_Area_Id>'; // Get the ID
            ////doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>'; // Get the Title

            //var curFunctionalArea = $('#ddlFunctionalAreaInXslForm option:selected').text();
            //curFunctionalArea = curFunctionalArea.replace(/&/g, '&amp;');
            //doc += '<my:Functional_Area>' + curFunctionalArea + '</my:Functional_Area>'; // Get the Title


            //console.log('In createXmlDocument_InitArFromOfflineRequest(). curFunctionalArea: ' + curFunctionalArea);

            //var quoteVal;
            //if (tmpFuncAreaValueArray[1] == true) quoteVal = true;
            //else quoteVal = false;
            //doc += '<my:Quote>' + quoteVal + '</my:Quote>';


            //try {
            //    var curBriefDescription = encodeURIComponent(document.getElementById('strBriefDescriptionOfProjectInXslForm').value);
            //} catch(e) {
            //var curBriefDescription = encodeURIComponent(document.getElementById('strBriefDescriptionOfProjectInXslForm').innerHTML);
            //}
            //doc += '<my:Brief_Description_of_Project>' + curBriefDescription + '</my:Brief_Description_of_Project>';


            //console.log('In createXmlDocument_InitArFromOfflineRequest(). curBriefDescription: ' + curBriefDescription);

            //var curProjectName = encodeURIComponent(document.getElementById('strProjectTitle').value);
            //var curProjectName = encodeURIComponent(document.getElementById('strProjectTitleInXslForm').innerHTML);
            //doc += '<my:Project_Name>' + curProjectName + '</my:Project_Name>';

            //console.log('In createXmlDocument_InitArFromOfflineRequest(). curProjectName: ' + curProjectName);

            // Works in IE: var curRequestedExpense = document.getElementById('dblRequestedExpense').innerHTML;
            //var curRequestedExpense = document.getElementById('dblRequestedExpense').value;
            //var requestedExpense = parseFloat(curRequestedExpense.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
            //doc += '<my:Requested_Expense xsi:nil="true">' + requestedExpense + '</my:Requested_Expense>';
            doc += '<my:Requested_Expense xsi:nil="true">0</my:Requested_Expense>';

            var estimatedStartDate;
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
            var arr = estimatedStartDate.split("-");
            estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
            //}
            doc += '<my:Estimated_Start_Date>' + estimatedStartDate + '</my:Estimated_Start_Date>'; // format is 'MM-dd-yyyy'

            var estimatedEndDate;
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
            var arr = estimatedEndDate.split("-");
            estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
            //}
            doc += '<my:Estimated_End_Date>' + estimatedEndDate + '</my:Estimated_End_Date>'; // format is 'MM-dd-yyyy'

            doc += '<my:Budget_Amount2 xsi:nil="true"></my:Budget_Amount2>';
            doc += '<my:Location></my:Location>';
            //doc += '<my:Cost_Center></my:Cost_Center>';
            //doc += '<my:FormStatus>FALSE</my:FormStatus>';
            //// Works in IE: doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').innerHTML + '</my:Budget_Category>';
            ////doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').value + '</my:Budget_Category>';
            //doc += '<my:Budget_Category></my:Budget_Category>';
            //doc += '<my:field3 xsi:nil="true"></my:field3>';

            doc += '<my:AttachmentsFolderName>';
            //doc += attachmentsFolderName;
            doc += '</my:AttachmentsFolderName>';

            doc += '<my:CapexAttachmentsGroup>';
            doc += '    <my:CapexAttachments>';
            //var att = $('#attachments').innerHTML;
            //doc += '    	<my:CapexAttachment xsi:nil="true">' + att + '</my:CapexAttachment>';
            doc += '    </my:CapexAttachments>';
            doc += '</my:CapexAttachmentsGroup>';

            // Works in IE: doc += '<my:Year>' + document.getElementById('ddlYear').innerHTML + '</my:Year>';
            //doc += '<my:Year>' + document.getElementById('ddlYear').value + '</my:Year>';
            doc += '<my:field4></my:field4>';

            //var displayName = document.getElementById('txtProjectManagerName').value;
            //var accountId = document.getElementById('txtProjectManagerId').value;
            //var accountType = document.getElementById('txtProjectManagerEmail').value;
            //doc += '<my:Project_Manager_Hidden>';
            //doc += '	<pc:Person>';
            //doc += '		<pc:DisplayName>' + displayName + '</pc:DisplayName>';
            //doc += '		<pc:AccountId>' + encodeURIComponent(accountId) + '</pc:AccountId>';
            //doc += '		<pc:AccountType>' + accountType + '</pc:AccountType>';
            //doc += '	</pc:Person>';
            //doc += '</my:Project_Manager_Hidden>';
            doc += '</my:myFields>';
        } catch (e) {
            var xml = doc;
            doc = 'FAILED';
            thiz.WriteToErrorLog('Error in bwRequest.js.createXmlDocument_InitArFromOfflineRequest()', 'Error creating the AR XML: ' + e.name + ', ' + e.message);
            thiz.WriteToErrorLog('bwRequest.js.createXmlDocument_InitArFromOfflineRequest()', xml);
            console.log('Exception in bwRequest.js.createXmlDocument_InitArFromOfflineRequest(): name: ' + e.name + ', message: ' + e.message + ', stack: ' + e.stack + ', xml: ' + xml);
            displayAlertDialog('Exception in bwRequest.js.createXmlDocument_InitArFromOfflineRequest(): name: ' + e.name + ', message: ' + e.message + ', stack: ' + e.stack + ', xml: ' + xml);
        }

        return doc;
    },

    getCreatedTimestamp: function () {
        var now = new Date();
        var year = now.getFullYear();
        var month = now.getMonth() + 1;
        var day = now.getDate();
        var hour = now.getHours();
        var minutes = now.getMinutes();
        var seconds = now.getSeconds();
        var created = year + '-' + month + '-' + day + 'T' + hour + ':' + minutes + ':' + seconds;
        return created;
    },

    getDueDateTimestamp: function () {
        var now = new Date();
        var year = now.getFullYear();
        var month = now.getMonth() + 1;
        var day = now.getDate();
        var hour = now.getHours();
        var minutes = now.getMinutes();
        var seconds = now.getSeconds();
        var dueDay = now.getDate() + 1;
        var dueDate = year + '-' + month + '-' + dueDay + 'T:' + hour + ':' + minutes + ':' + seconds;
        return dueDate;
    },


    populateFunctionalAreas: function (requestDialogId) {
        try {
            var thiz = this;
            var operationUri = webserviceurl + "/getfunctionalareasbyappid/" + this.options.bwWorkflowAppId + "/" + "RETURNALL";
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    try {
                        //// debugger;
                        //var year = document.getElementById('ddlYear').value;
                        //var year = '2016'; // todd hardcoded
                        //var year = new Date().getFullYear().toString(); // todd hardcoded.
                        //$('#ddlFunctionalArea').empty(); // Clear the previous entries before we populate it.
                        if (thiz.options.store.FiscalYear == null) {
                            thiz.options.store.FiscalYear = '2020'; // TODD FIX THIS!! new Date().getFullYear().toString(); // It is a new request, so we will just use the current year.
                        }
                        if (thiz.options.bwWorkflowAppId == null) {
                            // Not logged in so we will use these defaults for the time being.
                            var result = [
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Buildings'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Computer equipment'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Office equipment'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Furniture and fixtures'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Intangible assets'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Land'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Machinery'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Software'
                                },
                                {
                                    bwFunctionalAreaYear: '2020', IsHidden: 'false', bwFunctionalAreaId: '1', bwFunctionalAreaQuote: 'false', bwFunctionalAreaTitle: 'Vehicles'
                                },
                            ];
                            var data = {
                                d: {
                                    results: result
                                }
                            };
                        }
                        //Buildings (including subsequent costs that extend the useful life of a building)
                        //Computer equipment
                        //Office equipment
                        //Furniture and fixtures (including the cost of furniture that is aggregated and treated as a single unit, such as a group of desks)
                        //Intangible assets (such as a purchased taxi license or a patent)
                        //Land (including the cost of upgrading the land, such as the cost of an irrigation system or a parking lot)
                        //Machinery (including the costs required to bring the equipment to its intended location and for its intended use)
                        //Software
                        //Vehicles


                        var financialAreasToDisplay = [];
                        financialAreasToDisplay = new Array();
                        //var areThereAnyFasDisplayed = false;
                        for (var i = 0; i < data.d.results.length; i++) {
                            //// debugger;
                            if (data.d.results[i].bwFunctionalAreaYear == thiz.options.store.FiscalYear) {
                                //$("<option value='" + data.d.results[i].Id + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
                                if (data.d.results[i].IsHidden != 'true') {
                                    var tempFa = [];
                                    tempFa = new Array(3);
                                    tempFa[0] = data.d.results[i].bwFunctionalAreaId;
                                    tempFa[1] = data.d.results[i].bwFunctionalAreaQuote;
                                    tempFa[2] = data.d.results[i].bwFunctionalAreaTitle;
                                    financialAreasToDisplay.push(tempFa);
                                    //$("<option value='" + data.d.results[i].bwFunctionalAreaId + "|" + data.d.results[i].bwFunctionalAreaQuote + "'>" + data.d.results[i].bwFunctionalAreaTitle + "</option>").appendTo($('#ddlFunctionalArea'));
                                    //areThereAnyFasDisplayed = true;
                                }
                            }
                        }
                        //if (areThereAnyFasDisplayed == false) {
                        //// debugger;
                        if (financialAreasToDisplay.length == 0) {
                            console.log('xThere are no Financial Areas to choose from for this Budget Request, therefore you cannot submit one at this time.');
                            // go to home page
                            //populateStartPageItem('divWelcome', 'Reports', '');
                        } else {
                            // Render the drop down.
                            //// debugger;
                            //$("<option value=''>Select a functional area...</option>").appendTo($('#ddlFunctionalArea'));
                            $("<option value=''>Select a functional area...</option>").appendTo($('#' + requestDialogId).find('#ddlFunctionalArea')[0]);
                            for (var i = 0; i < financialAreasToDisplay.length; i++) {
                                $("<option value='" + financialAreasToDisplay[i][0] + "|" + financialAreasToDisplay[i][1] + "'>" + financialAreasToDisplay[i][2] + "</option>").appendTo($('#' + requestDialogId).find('#ddlFunctionalArea')[0]);
                                //$("<option value='" + financialAreasToDisplay[i][0] + "'>" + financialAreasToDisplay[i][2] + "</option>").appendTo($('#ddlFunctionalArea'));
                            }
                        }
                    } catch (e) {
                        console.log('Exception in populateFunctionalAreas(): ' + e.message + ', ' + e.stack);
                        alert('Exception in populateFunctionalAreas(). This process cannot continue: ' + e.message);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error populating functional areas.');
                    //WriteToErrorLog('Error in bw.initar.js.populateFunctionalAreas()', 'Error populating functional areas: ' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            displayAlertDialog('Error in populateFunctionalAreas(): ' + e.message);
        }
    },

    populateLocations: function (requestDialogId) {
        try {
            var thiz = this;
            var operationUri = webserviceurl + "/getlocationsbyappid/" + this.options.bwWorkflowAppId + "/" + "RETURNALL";
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    //var year = document.getElementById('ddlYear').value;
                    //var year = '2016'; // todd hardcoded
                    //var year = new Date().getFullYear().toString(); // todd hardcoded.
                    //$('#ddlFunctionalArea').empty(); // Clear the previous entries before we populate it.

                    if (thiz.options.bwWorkflowAppId == null) {
                        // Not logged in so we will use these defaults for the time being.
                        var result = [
                            { IsHidden: 'false', Name: 'Headquarters' }
                        ];
                        var data = {
                            d: {
                                results: result
                            }
                        };
                    }
                    //Buildings (including subsequent costs that extend the useful life of a building)
                    //Computer equipment
                    //Office equipment
                    //Furniture and fixtures (including the cost of furniture that is aggregated and treated as a single unit, such as a group of desks)
                    //Intangible assets (such as a purchased taxi license or a patent)
                    //Land (including the cost of upgrading the land, such as the cost of an irrigation system or a parking lot)
                    //Machinery (including the costs required to bring the equipment to its intended location and for its intended use)
                    //Software
                    //Vehicles


                    var locationsToDisplay = [];
                    //locationsToDisplay = new Array();
                    //var areThereAnyFasDisplayed = false;
                    //// debugger;
                    for (var i = 0; i < data.d.results.length; i++) {
                        //if (data.d.results[i].bwFunctionalAreaYear == year) {
                        //$("<option value='" + data.d.results[i].Id + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
                        if (data.d.results[i].IsHidden != 'true') {
                            var tempFa = [];
                            tempFa = new Array(1);
                            tempFa[0] = data.d.results[i].Name;
                            //tempFa[1] = data.d.results[i].bwFunctionalAreaQuote;
                            //tempFa[2] = data.d.results[i].bwFunctionalAreaTitle;
                            locationsToDisplay.push(tempFa);
                            //$("<option value='" + data.d.results[i].bwFunctionalAreaId + "|" + data.d.results[i].bwFunctionalAreaQuote + "'>" + data.d.results[i].bwFunctionalAreaTitle + "</option>").appendTo($('#ddlFunctionalArea'));
                            //areThereAnyFasDisplayed = true;
                        }
                        //}
                    }
                    //if (areThereAnyFasDisplayed == false) {
                    if (locationsToDisplay.length == 0) {
                        console.log('There are no Financial Areas to choose from for this Budget Request, therefore you cannot submit one at this time.x2');
                        // go to home page
                        //populateStartPageItem('divWelcome', 'Reports', '');
                    } else {
                        // Render the drop down.
                        //// debugger;
                        //$("<option value=''>Select a location...</option>").appendTo($('#ddlLocation'));
                        $("<option value=''>Select a location...</option>").appendTo($('#' + requestDialogId).find('#ddlLocation')[0]);
                        for (var i = 0; i < locationsToDisplay.length; i++) {
                            $("<option value='" + locationsToDisplay[i][0] + "|" + locationsToDisplay[i][0] + "'>" + locationsToDisplay[i][0] + "</option>").appendTo($('#' + requestDialogId).find('#ddlLocation')[0]);
                        }
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error populating locations.');
                    //WriteToErrorLog('Error in bw.initar.js.populateFunctionalAreas()', 'Error populating functional areas: ' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            displayAlertDialog('Error in populateLocations(): ' + e.message);
        }
    },


    displayArOnTheHomePage: function (budgetRequestId, participantId, title) {
        // Display the AR on the home page. This is called from the ?displayArDialog and the My Stuff section.
        // Try to close this in case it is open.
        try {
            $('#ArDialog').dialog("close");
        } catch (e) {
        }
        try {
            console.log('In Request.js.displayArOnTheHomePage(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId + ', title: ' + title);
            alert('In Request.js.displayArOnTheHomePage(). budgetRequestId: ' + budgetRequestId + ', participantId: ' + participantId + ', title: ' + title);
            //var title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML;

            //$('#bwQuickLaunchMenuTd').css({
            //    width: '0'
            //}); // This gets rid of the jumping around.

            //$('#liNewRequest').hide();
            //$('#liArchive').hide();
            //$('#liSummaryReport').hide();
            //$('#liConfiguration').hide();
            //$('#liHelp').hide();
            //$('#liWelcome').show();

            //var e1 = document.getElementById('divNewRequestMasterDiv');
            //e1.style.borderRadius = '20px 0 0 20px';

            //$('#divWelcomeMasterDivTitle').text('Authorization Request: ' + title);

            ////displayAlertDialog('SET THE TITLE3');

            //document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButton';

            ////displayAlertDialog('SET THE TITLE4');

            //$('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
            //    //renderWelcomeScreen();
            //    redirectForm();
            //});

            var html = '<div id="myxml" align="left" style="FONT-SIZE: 10pt; FONT-FAMILY: Calibri;"></div>';
            $('#divWelcomeMessage').html(html);

            var action = "";
            //filename = budgetRequestId;


            this.displayForm_DisplayArBasedOnWorkflowStatus2(budgetRequestId, action, participantId);
        } catch (e) {
            console.log('Exception in my.js.displayArOnTheHomePage(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in my.js.displayArOnTheHomePage(): ' + e.message + ', ' + e.stack);
        }
    },

    populateStartPageItem: function (divSection, _type, _reference) {
        try {
            console.log('In bwRequest.js.populateStartPageItem(). DO WE USE THIS ANYMORE??? 3-14-2023');
            alert('In bwRequest.js.populateStartPageItem(). DO WE USE THIS ANYMORE??? 3-14-2023');


            // Always make sure the logged in user details drop down is closed.
            //var isOpen = $("#bwLoggedInUserDropDown").dialog("isOpen");
            //if (isOpen) $("#bwLoggedInUserDropDown").dialog("destroy");
            //$("#bwLoggedInUserDropDown").dialog("destroy");

            //checkForAlerts();

            if (divSection == 'divWelcome') {

                alert('xcx12221321-4 CALLING renderWelcomeScreen().');
                renderWelcomeScreen(); // This may be removed at some point to leave the screen as-is instead of going all the way back to the home screen, which may be neat...time will tell.
                renderAlerts(); // This reloads the alerts that are displayed on the home/welcome page.

                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.

                $('#liWelcome').show();
                $('#liNewRequest').hide();
                $('#liArchive').hide();
                $('#liSummaryReport').hide();
                $('#liConfiguration').hide();
                $('#liHelp').hide();

                $('#divWelcomeMasterDiv').show();
                var e1 = document.getElementById('divWelcomeMasterDiv');
                e1.style.borderRadius = '20px 0 0 20px';

                renderLeftButtons('divWelcomePageLeftButtons');

            } else if (divSection == 'divNewRequestOffline') {

                //displayAlertDialog('ccc: participantId: ' + participantId);

                console.log('In bwRequest.js.populateStartPageItem("divNewRequestOffline").');

                try {


                    //document.getElementById('Article').style.display = 'none'; // This hides the bottom description text.

                    //displayAlertDialog('bwLastSelectedNewRequestType: ' + bwLastSelectedNewRequestType);
                    //if (bwLastSelectedNewRequestType == 'recurringexpense') {
                    //    $('#trNewRequestRecurringExpenseSection').show(); // Not sure if this is the best place to make sure this section is hidden, but it works for now.
                    //    $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                    //} else {
                    //$('#trNewRequestRecurringExpenseSection').hide();
                    //}

                    // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
                    // need to have this already so we can identify which budget request the file attachments belong to.
                    var _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                    document.getElementById('OfflineRequestBudgetRequestId').innerHTML = _budgetRequestId;

                    // This may be a recurring expense, so we will do the same thing just in case.
                    var _recurringExpenseId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        return v.toString(16);
                    });
                    document.getElementById('OfflineRequestRecurringExpenseId').innerHTML = _recurringExpenseId;

                    //displayAlertDialog('Set RecurringExpenseId to: ' + _recurringExpenseId);

                    // Clear the fields!
                    // value 
                    //strOfflineRequestProjectTitle
                    document.getElementById('strOfflineRequestProjectTitle').value = '';
                    document.getElementById('strOfflineRequestBriefDescriptionOfProject').value = '';
                    document.getElementById('dblOfflineRequestRequestedCapital').value = '';
                    // Estimated Start Date // Todd: To-Do! // dtOfflineRequestEstimatedStartDate
                    // Estimated End Date // Todd: To-Do! // dtOfflineRequestEstimatedEndDate
                    document.getElementById('dtOfflineRequestEstimatedStartDate').value = '';
                    document.getElementById('dtOfflineRequestEstimatedEndDate').value = '';
                    //document.getElementById('txtOfflineRequestProjectManagerName').value = '';
                    //document.getElementById('ddlOfflineRequestFunctionalArea').value = '';
                    document.getElementById('OfflineRequestnewrequestattachments').value = '';
                    // innerHTML
                    document.getElementById('strOfflineRequestProjectTitle').innerHTML = '';
                    document.getElementById('strOfflineRequestBriefDescriptionOfProject').innerHTML = '';
                    document.getElementById('dblOfflineRequestRequestedCapital').innerHTML = '';
                    // Estimated Start Date // Todd: To-Do!
                    // Estimated End Date // Todd: To-Do!
                    //document.getElementById('txtProjectManagerName').innerHTML = '';
                    //document.getElementById('ddlFunctionalArea').innerHTML = '';
                    document.getElementById('OfflineRequestnewrequestattachments').innerHTML = '';


                    //$('#bwStartPageAccordion').show();
                    //$('#bwQuickLaunchMenuTd').css({
                    //    width: '0'
                    //}); // This gets rid of the jumping around.
                    //$('#bwQuickLaunchMenu').hide();
                    $('#liWelcome').hide();
                    $('#liOfflineWelcome').hide();
                    $('#liArchive').hide();
                    $('#liNewRequest').hide();
                    $('#liAbout').hide();
                    $('#liOfflineRequestForm').show();

                    //renderLeftButtons('divOfflineRequestFormPageLeftButtons');

                    // Set the left button styles.
                    //document.getElementById('divWelcomeButton').className = 'divLeftButton';
                    //document.getElementById('divWelcomePageLeftButtonsNewRequestButton').className = 'divLeftButtonSelected';
                    //document.getElementById('divWelcomePageLeftButtonsArchiveButton').className = 'divLeftButton';
                    //document.getElementById('divWhoAreWeButton').className = 'divLeftButton';


                    //var e1 = document.getElementById('divNewRequestMasterDiv');
                    //e1.style.borderRadius = '20px 0 0 20px';

                    // Create the drop down at the top of the page, and select the last used option!
                    // First we load our array.
                    var requestTypes = [];
                    requestTypes = new Array();
                    // Budget Request
                    var request = ['budgetrequest', 'Budget Request', 'selected'];
                    requestTypes.push(request);
                    // Quote Request
                    //if (quotingEnabled == true) {
                    var request = ['quoterequest', 'Quote Request', ''];
                    requestTypes.push(request);
                    //}
                    // Reimbursement Request
                    //if (reimbursementRequestsEnabled == true) {
                    var request = ['expenserequest', 'Reimbursement Request', ''];
                    requestTypes.push(request);
                    //}
                    // Recurring Expense
                    //if (recurringExpensesEnabled == true) {
                    var request = ['recurringexpense', 'Recurring Expense', ''];
                    requestTypes.push(request);
                    //}





                    this.renderCreateRequestFormOffline();





                    // Now formulate the GUI!
                    var html = '';
                    //if (requestTypes.length == 1) {
                    //    // If there is only one, don't display as a drop down, just as plain text.
                    //    html += '<span style="font-size: 200%;">New <strong>' + requestTypes[0][1] + '</strong></span>';
                    //    document.getElementById('spanRequestForm_Title').innerHTML = html;
                    //} else {
                    // There is more than 1, so we have to display as a drop down.

                    html += '<span style="font-size: 350%;">New <strong>';
                    //html += '<select class="selectHomePageWorkflowAppDropDown" id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\' onchange="xxxx();">';
                    html += '<select id="selectOfflineNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.0em; font-weight: bold; cursor: pointer;\'>';
                    for (var i = 0; i < requestTypes.length; i++) {
                        //if (requestTypes[i][0] == bwLastSelectedNewRequestType) {
                        //    // Selected
                        //    html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                        //} else {
                        // Not selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                        //}
                    }
                    html += '</select>';
                    html += '</span>';

                    //document.getElementById('spanOfflineNewRequestFormRequestTypeDropDownSection').innerHTML = html;


                    //}


                    document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
                    //}
                    // Set if the dates are required.
                    //if (requireStartEndDates == true) {
                    //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Start date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
                    //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">End date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
                    //} else {
                    //document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Start date (estimated):</span>';
                    //document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">End date (estimated):</span>';
                    //}
                    // Set if the attachments are allowed.
                    //if (enableNewRequestAttachments == true) {
                    $('#trNewRequestAttachmentsSection').show();
                    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
                    //} else {
                    //    $('#trNewRequestAttachmentsSection').hide();
                    //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
                    //}

                    // Set if the attachments are allowed.
                    //if (enableNewRequestBarcodeAttachments == true) {
                    $('#trNewRequestBarcodeAttachmentsSection').show();



                    console.log('in bwRequest.js.populateStartPageItem("divNewRequestOffline"): XXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    // Display all of the attachments. This is temporary and will be removed!!!!
                    //populateOfflineAttachments('OfflineRequestnewrequestattachments');



                } catch (e) {
                    console.log('Exception in bwRequest.js.populateStartPageItem("divNewRequestOffline"): ' + e.message + ', ' + e.stack);
                }


            } else if (divSection == 'divNewRequest') {
                //displayAlertDialog('bwLastSelectedNewRequestType: ' + bwLastSelectedNewRequestType);
                //if (bwLastSelectedNewRequestType == 'recurringexpense') {
                //    $('#trNewRequestRecurringExpenseSection').show(); // Not sure if this is the best place to make sure this section is hidden, but it works for now.
                //    $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                //} else {
                //    $('#trNewRequestRecurringExpenseSection').hide();
                //}

                // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
                // need to have this already so we can identify which budget request the file attachments belong to.
                var _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                //document.getElementById('BudgetRequestId').innerHTML = _budgetRequestId;

                // This may be a recurring expense, so we will do the same thing just in case.
                var _recurringExpenseId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                //document.getElementById('RecurringExpenseId').innerHTML = _recurringExpenseId;

                //displayAlertDialog('Set RecurringExpenseId to: ' + _recurringExpenseId);

                // Clear the fields!
                //document.getElementById('strProjectTitle').value = '';
                //document.getElementById('strBriefDescriptionOfProject').value = '';
                //document.getElementById('dblRequestedCapital').value = '';
                //document.getElementById('txtProjectManagerName').value = '';
                //document.getElementById('ddlFunctionalArea').innerHTML = '';
                //document.getElementById('newrequestattachments').innerHTML = '';


                ////$('#bwStartPageAccordion').show();
                //$('#bwQuickLaunchMenuTd').css({
                //    width: '0'
                //}); // This gets rid of the jumping around.
                ////$('#bwQuickLaunchMenu').hide();
                //$('#liWelcome').hide();
                //$('#liArchive').hide();
                //$('#liSummaryReport').hide();
                //$('#liConfiguration').hide();
                //$('#liHelp').hide();
                //$('#liNewRequest').show();

                //var e1 = document.getElementById('divNewRequestMasterDiv');
                //e1.style.borderRadius = '20px 0 0 20px';

                // Create the drop down at the top of the page, and select the last used option!
                // First we load our array.
                //var requestTypes = [];
                //requestTypes = new Array();
                //// Budget Request
                //var request = ['budgetrequest', 'Budget Request', 'selected'];
                //requestTypes.push(request);
                //// Quote Request
                //if (quotingEnabled == true) {
                //    var request = ['quoterequest', 'Quote Request', ''];
                //    requestTypes.push(request);
                //}
                //// Reimbursement Request
                //if (reimbursementRequestsEnabled == true) {
                //    var request = ['expenserequest', 'Reimbursement Request', ''];
                //    requestTypes.push(request);
                //}
                //// Recurring Expense
                //if (recurringExpensesEnabled == true) {
                //    var request = ['recurringexpense', 'Recurring Expense', ''];
                //    requestTypes.push(request);
                //}






                //var request = ['capitalplanproject', 'Capital Plan Project', ''];
                //requestTypes.push(request);



                this.renderCreateRequestForm('divCreateRequestFormDialogContent');
                //this.renderCreateRequestFormOffline();








                // Now formulate the GUI!
                var html = '';
                if (requestTypes.length == 1) {
                    // If there is only one, don't display as a drop down, just as plain text.
                    html += '<span style="font-size: 200%;">New <strong>' + requestTypes[0][1] + '</strong></span>';
                    document.getElementById('spanRequestForm_Title').innerHTML = html;
                } else {
                    // There is more than 1, so we have to display as a drop down.
                    html += '<span style="font-size: 200%;">New <strong>';
                    //html += '<select class="selectHomePageWorkflowAppDropDown" id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\' onchange="xxxx();">';
                    // debugger;
                    html += '<select id="selectNewRequestFormRequestTypeDropDown-DOESTHISEVERGETUSED" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\'>';
                    for (var i = 0; i < requestTypes.length; i++) {
                        if (requestTypes[i][0] == bwLastSelectedNewRequestType) {
                            // Selected
                            html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                        } else {
                            // Not selected
                            html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                        }
                    }
                    html += '</select>';
                    html += '</span>';
                    document.getElementById('spanRequestForm_Title').innerHTML = html;


                    // Now hook up the change event for the drop down!!
                    $('#selectNewRequestFormRequestTypeDropDown').change(function () {



                        alert('In  selectNewRequestFormRequestTypeDropDown.change(). Is this old code??? xcx12346-3');

                        // Clear any error message in the top bar.
                        $('#divTopBar_Long').html('');


                        // debugger; // xcx448569
                        var selectedValue = $('#selectNewRequestFormRequestTypeDropDown option:selected').val();
                        bwLastSelectedNewRequestType = selectedValue;
                        // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.
                        var data = [];
                        data = {
                            bwParticipantId: participantId,
                            bwWorkflowAppId: workflowAppId,
                            bwLastSelectedNewRequestType: bwLastSelectedNewRequestType
                        };
                        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
                        $.ajax({
                            url: operationUri,
                            type: "POST", timeout: ajaxTimeout,
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (data) {
                                if (data != 'SUCCESS') {
                                    displayAlertDialog(data);
                                } else {
                                    if (selectedValue == 'recurringexpense') {
                                        // Recurring Expense was selected!!!
                                        //$('#trNewRequestQuoteSection').hide();
                                        $('#trNewRequestRecurringExpenseSection').show();

                                        //var html = '';
                                        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" disabled /><span style="font-size:10pt;color:lightgray;">Submit the first budget request immediately.</span><br />';
                                        //html += '<span style="font-size:8pt;">This does not create the budget request, it only schedules the reminder for when the budget request should be submitted.</span><br />';

                                        //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
                                        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                                        ////html += 'Justification details:<br />';
                                        ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                                        ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
                                        //html += '<span style="font-size:8pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
                                        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                                        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                                    } else {
                                        $('#trNewRequestRecurringExpenseSection').hide();
                                    }
                                }
                            },
                            error: function (data, errorCode, errorMessage) {
                                displayAlertDialog('Error in my.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                            }
                        });
                    });
                }

                populateFunctionalAreas();

                // Populate the year drop-down

                // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.
                //if (_type == 'supplemental') {
                //    // This is a supplemental request for budget request _reference, which is a guid.
                //    var html = '';
                //    html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
                //    document.getElementById('spanNewRequestFormTitle').innerHTML = html;
                //    var html = '';
                //    html += '';
                //    html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the supplemental request.">Submit</button>';
                //    html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
                //    html += '&nbsp;';
                //    document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;


                //} else {
                //var html = '';
                //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;New <strong>Budget Request</strong><br /><span></span></span><br />';
                //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
                //var html = '';
                //html += '';
                //var isSupplemental = 'false';
                //var relatedBudgetRequestId = '';
                //html += '<button id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow(\'' + isSupplemental + '\', \'' + relatedBudgetRequestId + '\');" class="BwButton200ForRequestForm" title="Click here to Submit the request.">Submit</button>';
                //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200ForRequestForm">Cancel</button>';
                //html += '&nbsp;';
                //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
                //}

                // debugger;
                // Set the manager title.
                $('#spanRequestForm_ManagerTitle').html(newBudgetRequestManagerTitle);
                // Set if the details are required.
                if (requireRequestDetails == true) {
                    document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
                } else {
                    document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
                }
                // Set if the dates are required.
                if (requireStartEndDates == true) {
                    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Start date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
                    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">End date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
                } else {
                    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Start date (estimated):</span>';
                    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">End date (estimated):</span>';
                }
                // Set if the attachments are allowed.
                if (enableNewRequestAttachments == true) {
                    $('#trNewRequestAttachmentsSection').show();
                    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
                } else {
                    $('#trNewRequestAttachmentsSection').hide();
                    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
                }

                // Set if the attachments are allowed.
                if (enableNewRequestBarcodeAttachments == true) {
                    $('#trNewRequestBarcodeAttachmentsSection').show();
                    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
                } else {
                    $('#trNewRequestBarcodeAttachmentsSection').hide();
                    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
                }

                // Set if the recurring expenses is enabled.
                //if (recurringExpensesEnabled == true) {
                //$('#trNewRequestRecurringExpenseSection').show();
                //document.getElementById('cbNewRequestRecurringExpenseEnabled').checked = false; // Default to not selected.
                // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
                //$('#cbNewRequestRecurringExpenseEnabled').click(function () {
                //    //displayAlertDialog('enable this section'); // color: #adadad;
                //    if (this.checked == true) {
                //        $('#trNewRequestQuoteSection').hide();

                //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
                //        var html = '';
                //        html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

                //        html += '<span style="font-size:10pt;">Reminder date:</span><br />';
                //        html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                //        //html += 'Justification details:<br />';
                //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
                //        html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
                //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                //        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                //    } else {
                //        $('#trNewRequestQuoteSection').show();
                //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
                //        //var html = '';
                //        //html += 'Reminder date:<br />';
                //        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                //        //html += 'Justification details:<br />';
                //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                //        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
                //        //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
                //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
                //        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = '';
                //    }




                //});
                //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
                //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

                //} else {
                //    $('#trNewRequestRecurringExpenseSection').hide();
                //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
                //}

                // Set if the quoting is enabled.
                //if (quotingEnabled == true) {
                //    $('#trNewRequestQuoteSection').show();
                //    document.getElementById('cbNewRequestQuoteEnabled').checked = false; // Default to not selected.
                //    // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
                //    $('#cbNewRequestQuoteEnabled').click(function () {
                //        //displayAlertDialog('enable this section'); // color: #adadad;
                //        if (this.checked == true) {
                //            $('#trNewRequestRecurringExpenseSection').hide();

                //            var html = '';
                //            html += 'New <strong>Quote Request</strong>';
                //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

                //            ////document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
                //            //var html = '';
                //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

                //            //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
                //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                //            ////html += 'Justification details:<br />';
                //            ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                //            ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
                //            //html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
                //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                //            //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                //        } else {
                //            $('#trNewRequestRecurringExpenseSection').show();

                //            // 







                //            var html = '';
                //            html += 'New <strong>Budget Request</strong>';
                //            html += '</span>';
                //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

                //            //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
                //            //var html = '';
                //            //html += 'Reminder date:<br />';
                //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                //            //html += 'Justification details:<br />';
                //            //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
                //            //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
                //            //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
                //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                //            document.getElementById('spanNewRequestQuoteSecondSection').innerHTML = '';
                //        }




                //    });
                //    //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
                //    //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

                //} else {
                //    $('#trNewRequestQuoteSection').hide();
                //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
                //}

                renderLeftButtons('divNewRequestPageLeftButtons');



                // Now we can hook up the Participant text box for autocomplete.
                $("#txtProjectManagerName").autocomplete({
                    source: function (request, response) {
                        //weburl = _spPageContextInfo.siteAbsoluteUrl;
                        $.ajax({
                            url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                            dataType: "json",
                            success: function (data) {
                                var searchArray = [];
                                for (var i = 0; i < data.participants.length; i++) {
                                    searchArray[i] = data.participants[i].participant;
                                }
                                response(searchArray);
                            }
                        });
                    },
                    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
                    select: function (event, ui) {
                        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
                        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
                    },
                    open: function () {
                        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
                    },
                    close: function () {
                        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        var projectManagerName = this.value.split('|')[0];
                        var projectManagerId = this.value.split('|')[1];
                        var projectManagerEmail = this.value.split('|')[2];

                        if (projectManagerName.indexOf('undefined') > -1) {
                            document.getElementById('txtProjectManagerName').value = '';
                            document.getElementById('txtProjectManagerId').value = '';
                            document.getElementById('txtProjectManagerEmail').value = '';
                        } else {
                            document.getElementById('txtProjectManagerName').value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                            document.getElementById('txtProjectManagerId').value = projectManagerId;
                            document.getElementById('txtProjectManagerEmail').value = projectManagerEmail;
                        }
                    }
                });

                monkeyPatchAutocomplete(); // This customizes the drop down when searching for users in the user text boxes.



            } else if (divSection == 'divArchive') {
                // debugger;

                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.

                var e1 = document.getElementById('divArchiveMasterDiv');
                e1.style.borderRadius = '20px 0 0 20px';

                // This is the request type drop down. Create the drop down at the top of the page, and select the last used option!
                // First we load our array.
                var requestTypes = [];
                requestTypes = new Array();
                // Budget Request
                var request = ['budgetrequests', 'Budget Requests', 'selected'];
                requestTypes.push(request);
                // Quote Request
                if (quotingEnabled == true) { // 1-2-2022 keep this somehow!
                    var request = ['quoterequests', 'Quote Requests', ''];
                    requestTypes.push(request);
                }
                // Reimbursement Request
                if (reimbursementRequestsEnabled == true) { // 1-2-2022 keep this somehow!
                    var request = ['expenserequests', 'Reimbursement Requests', ''];
                    requestTypes.push(request);
                }
                // Recurring Expense
                if (recurringExpensesEnabled == true) { // 1-2-2022 keep this somehow!
                    var request = ['recurringexpenses', 'Recurring Expenses', ''];
                    requestTypes.push(request);
                }

                var html = '';





                if (requestTypes.length == 1) {
                    // If there is only one, don't display as a drop down, just as plain text.
                    html += '<span style="font-size: 200%;">View <strong>' + requestTypes[0][1] + '</strong></span>';
                    document.getElementById('spanArchiveScreenRequestTypeDropDownSection').innerHTML = html;
                } else {
                    // There is more than 1, so we have to display as a drop down.
                    //html += '<span style="font-size: 200%;">View <strong>';
                    html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">';
                    html += 'View ';
                    html += '<select id="selectArchiveScreenRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\'>';
                    for (var i = 0; i < requestTypes.length; i++) {
                        if (requestTypes[i][0] == bwLastSelectedArchiveScreenRequestType) {
                            // Selected
                            html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                        } else {
                            // Not selected
                            html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                        }
                    }
                    html += '</select>';
                    html += '&nbsp;for&nbsp;<span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span>';
                    html += '</span>';

                    ////html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">Your currently selected budgeting network: <span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span></span>';




                    document.getElementById('spanArchiveScreenRequestTypeDropDownSection').innerHTML = html;
                    // Now hook up the change event for the drop down!!
                    $('#selectArchiveScreenRequestTypeDropDown').change(function () {
                        var selectedValue = $('#selectArchiveScreenRequestTypeDropDown option:selected').val();
                        bwLastSelectedArchiveScreenRequestType = selectedValue;
                        // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.
                        var data = [];
                        data = {
                            bwParticipantId: participantId,
                            bwWorkflowAppId: workflowAppId,
                            LastSelected_ArchiveScreen_bwRequestTypeId: LastSelected_ArchiveScreen_bwRequestTypeId
                        };
                        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectedarchivescreenrequesttype";
                        $.ajax({
                            url: operationUri,
                            type: "POST", timeout: ajaxTimeout,
                            data: data,
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (data) {
                                if (data != 'SUCCESS') {
                                    displayAlertDialog(data);
                                } else {
                                    //displayAlertDialog('selectedValue: ' + selectedValue);
                                    if (selectedValue == 'budgetrequests') {
                                        cmdListAllBudgetRequestsUsingClientDatasetApproach();
                                    } else if (selectedValue == 'quoterequests') {
                                        //displayAlertDialog('The functionality to display Quote Requests is incomplete. Coming soon!');
                                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                                        cmdListAllQuoteRequestsUsingClientDatasetApproach();
                                    } else if (selectedValue == 'expenserequests') {
                                        //displayAlertDialog('The functionality to display Reimbursement Requests is incomplete. Coming soon!');
                                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                                        cmdListAllReimbursementRequestsUsingClientDatasetApproach();
                                    } else if (selectedValue == 'recurringexpenses') {
                                        cmdDisplayArchivePageRecurringExpenses();
                                    } else if (selectedValue == 'participants') {
                                        //displayAlertDialog('The functionality to display Participant details is incomplete. Coming soon!');
                                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                                        cmdListAllParticipantsUsingClientDatasetApproach();
                                    }
                                }
                            },
                            error: function (data, errorCode, errorMessage) {
                                displayAlertDialog('Error in my.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                            }
                        });
                    });
                }


                //if (requestTypes.length == 1) {
                //    bwLastSelectedArchiveScreenRequestType == 'budgetrequests';
                //} else {
                // These 2 lines are required to display the Archive section the first time around. The change event (above) will do it subsequently when the drop down is changed.
                var selectedValue = $('#selectArchiveScreenRequestTypeDropDown option:selected').val();
                bwLastSelectedArchiveScreenRequestType = selectedValue;
                //}

                // This section will be changed. Not happy with it yet!
                //var html = '';
                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">Your currently selected budgeting network: <span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span></span>';
                //html += '<br /><br />';
                //if (recurringExpensesEnabled == true) {
                //    html += '<input type="button" value="View budget requests" onclick="cmdListAllBudgetRequestsUsingClientDatasetApproach();" style="cursor:pointer;" />&nbsp;&nbsp<input type="button" value="View recurring expenses" onclick="cmdDisplayArchivePageRecurringExpenses();" style="cursor:pointer;" />&nbsp;&nbsp';
                //}
                //html += '<input type="button" disabled value="View trashbin contents" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;" /><br /><br />';
                //$('#spanArchivePageTopTitle').html(html);
                //


                GetWorkflowAppConfigurationData9 = $.Deferred();
                GetWorkflowAppConfigurationData9
                    .done(function () {
                        //displayAlertDialog('DONE');
                        //selectArchivePageFilterDropDown_change();
                        //var selectedValue = $('#selectArchivePageFilterDropDown option:selected').val();
                        if (!bwLastSelectedArchiveScreenRequestType) bwLastSelectedArchiveScreenRequestType = 'budgetrequests';
                        if (bwLastSelectedArchiveScreenRequestType == 'budgetrequests') {
                            cmdListAllBudgetRequestsUsingClientDatasetApproach();
                        } else if (bwLastSelectedArchiveScreenRequestType == 'quoterequests') {
                            //displayAlertDialog('The functionality to display Quote Requests is incomplete. Coming soon!');
                            //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                            cmdListAllQuoteRequestsUsingClientDatasetApproach();
                        } else if (bwLastSelectedArchiveScreenRequestType == 'expenserequests') {
                            //displayAlertDialog('The functionality to display Reimbursement Requests is incomplete. Coming soon!');
                            //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                            cmdListAllReimbursementRequestsUsingClientDatasetApproach();
                        } else if (bwLastSelectedArchiveScreenRequestType == 'recurringexpenses') {
                            cmdDisplayArchivePageRecurringExpenses();
                        } else if (bwLastSelectedArchiveScreenRequestType == 'participants') {
                            cmdListAllParticipantsUsingClientDatasetApproach();
                        }

                        renderLeftButtons('divArchivePageLeftButtons');
                    })
                    .fail(function () {
                        handleExceptionWithAlert('Error in bwRequest.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
                    });
                loadWorkflowAppConfigurationDetails9();




            } else if (divSection == 'divSummaryReport') {
                //$('#bwStartPageAccordion').show();
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.
                //$('#bwQuickLaunchMenu').hide();
                $('#liWelcome').hide();
                $('#liNewRequest').hide();
                $('#liHelp').hide();
                $('#liArchive').hide();
                $('#liConfiguration').hide();
                $('#liSummaryReport').show();
                var e1 = document.getElementById('divSummaryReportMasterDiv');
                e1.style.borderRadius = '20px 0 0 20px';


                if (quotingEnabled == true) {
                    // First we have to add the checkbox to the DOM.
                    $('#divBudgetRequestsOrQuotes').html('<label for="budgetRequestsOrQuotes"></label><input type="checkbox" name="budgetRequestsOrQuotes" id="budgetRequestsOrQuotes" />');
                    // Then we attach the switchbutton.
                    var brOrQuotesOptions = {
                        show_labels: true,         // Should we show the on and off labels?
                        labels_placement: "both",  // Position of the labels: "both", "left" or "right"
                        on_label: "Quotes",            // Text to be displayed when checked
                        off_label: "Budget<br />Requests",          // Text to be displayed when unchecked
                        width: 50,                 // Width of the button in pixels
                        height: 22,                // Height of the button in pixels
                        button_width: 24,         // Width of the sliding part in pixels
                        clear_after: null         // Override the element after which the clearing div should be inserted 
                    };
                    $("input#budgetRequestsOrQuotes").switchButton(brOrQuotesOptions);
                    // Then we hook up the event.
                    $('#budgetRequestsOrQuotes').change(function () {

                        // displayAlertDialog('checking financialOrParticipantSummary2');


                        if ($('#budgetRequestsOrQuotes').is(':checked')) {

                            if (!$('#financialOrParticipantSummary').is(':checked')) {
                                renderFinancialSummary9(true);
                            } else if ($('#financialOrParticipantSummary').is(':checked')) {
                                renderParticipantSummary(true);
                            } else {
                                displayAlertDialog('financialOrParticipantSummary is in an invalid state.');
                            }
                        } else if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                            if (!$('#financialOrParticipantSummary').is(':checked')) {
                                renderFinancialSummary9(false);
                            } else if ($('#financialOrParticipantSummary').is(':checked')) {
                                renderParticipantSummary(false);
                            } else {
                                displayAlertDialog('financialOrParticipantSummary is in an invalid state.');
                            }
                        } else {
                            displayAlertDialog('budgetRequestsOrQuotes is in an invalid state.');
                        }
                    });
                } else {
                    $('#divBudgetRequestsOrQuotes').empty();
                }

                //loadWorkflowAppConfigurationDetailsForBwm(); // Todd: Just commented this 6-29-16 3-20am ast.
                //loadWorkflowAppConfigurationDetails9();

                GetWorkflowAppConfigurationData9 = $.Deferred();
                GetWorkflowAppConfigurationData9
                    .done(function () {
                        //displayAlertDialog('DONE');
                        renderLeftButtons('divSummaryPageLeftButtons');

                        // Set the year drop down. HARDCODED!!!
                        // IF MORE THAN 1 YEAR: <select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>
                        var year = new Date().getFullYear().toString(); // todd hardcoded.
                        var html = '';
                        html += year;
                        document.getElementById('spanSummaryReportYear').innerHTML = html;

                        //displayAlertDialog('checking financialOrParticipantSummary3');
                        //document.getElementById('financialOrParticipantSummary')[0].removeAttribute('checked'); //('#financialOrParticipantSummary').attr('checked', '');

                        if (!$('#financialOrParticipantSummary').is(':checked')) {
                            // "Financial Summary" has been selected.
                            //displayAlertDialog('financialSummary3');
                            if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                                //displayAlertDialog('renderFinancialSummary9(false);');
                                renderFinancialSummary9(false);
                            } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                                displayAlertDialog('renderFinancialSummary9(true);');
                                renderFinancialSummary9(true);
                            }
                        } else if ($('#financialOrParticipantSummary').is(':checked')) {
                            // "Participant Summary" has been selected.
                            //displayAlertDialog('participantSummary3');
                            if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                                renderParticipantSummary(false);
                            } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                                renderParticipantSummary(true);
                            }
                        }
                    })
                    .fail(function () {
                        handleExceptionWithAlert('Error in bwRequest.js.populateStartPageItem(divSummaryReport)', 'GetWorkflowAppConfigurationData9.fail()');
                    });
                loadWorkflowAppConfigurationDetails9();





            } else if (divSection == 'divHelp') {
                //$('#bwStartPageAccordion').show();
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.
                //$('#bwQuickLaunchMenu').hide();
                $('#liWelcome').hide();
                $('#liNewRequest').hide();
                $('#liArchive').hide();
                $('#liSummaryReport').hide();
                $('#liConfiguration').hide();
                $('#liHelp').show();
                var e1 = document.getElementById('divHelpMasterDiv');
                e1.style.borderRadius = '20px 0 0 20px';
                //displayConnectedWorkflows();

                renderLeftButtons('divHelpPageLeftButtons');
            } else if (divSection == 'divConfiguration') {
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.
                $('#liWelcome').hide();
                $('#liNewRequest').hide();
                $('#liArchive').hide();
                $('#liSummaryReport').hide();
                $('#liHelp').hide();
                $('#liConfiguration').show();
                var e1 = document.getElementById('divConfigurationMasterDiv');
                e1.style.borderRadius = '20px 0 0 20px';
                var e1 = document.getElementById('divFunctionalAreas');
                e1.style.borderRadius = '20px 0 0 20px';

                // debugger;
                generateConfigurationLeftSideMenu();

                renderLeftButtons('divConfigurationPageLeftButtons');
            } else if (divSection == 'divAddAFunctionalArea') {
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.
                $('#divFunctionalAreasMasterSubMenuDiv').text('Add a functional area:'); // Change the title of the section.
                $('#btnFunctionalAreaDelete').hide();
                $('#divFunctionalAreaSection').html($('#divFunctionalAreaTemplate').html()); // Display the functional area form.
                //$('span[xd\\:binding = "my:FunctionalAreaTitle"]')[0].focus(); // Focus on the title field.
                //generateFunctionalAreasApproverDataEntryFields();

                $('#txtFunctionalAreaId').empty; // This will make sure it is a PUT operation, which means we create a new functional area rTHER THAN UPDATING AN EXISTING ONE.

                // Set the active button with out dotted line outline etc.
                //$('#divMenuMasterDivAddAFunctionalArea').css({
                //    'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
                //});
                document.getElementById('divMenuMasterDivAddAFunctionalArea').className = 'divLeftButtonSelected';

                $('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header right-rounder bar in case it was hidden.

                hookUpThePeoplePickers(); // This hooks up the Approver #1 and #2 people pickers.
                var e1 = document.getElementById('divFunctionalAreas');
                e1.style.borderRadius = '20px 0 0 20px';
            } else if (divSection == 'divFunctionalAreas') {
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.

                //var e1 = document.getElementById('divFunctionalAreas');
                //e1.style.borderRadius = '20px 0 0 20px';
                //loadWorkflowAppConfigurationDetails9();

                //generateFunctionalAreasListButtons();



                // This is displayed to owners when the next year rolls around!
                //cmdDisplayFinancialAreaDialogYouOnlyHaveOneFinancialAreaCopyPreviousYearOption();







                GetWorkflowAppConfigurationData9 = $.Deferred();
                GetWorkflowAppConfigurationData9
                    .done(function () {
                        //displayAlertDialog('DONE');
                        generateFunctionalAreasListButtons();
                    })
                    .fail(function () {
                        handleExceptionWithAlert('Error in bwRequest.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
                    });
                loadWorkflowAppConfigurationDetails9();

                // GetWorkflowAppConfigurationData9.resolve(); // Callback.


                //} else if (divSection == 'divParticipants') {
                //    $('#bwQuickLaunchMenuTd').css({
                //        width: '0'
                //    }); // This gets rid of the jumping around.
                //    //$('#divFunctionalAreasMasterDiv').text('Participants'); // Change the title of the section.
                //    //$('#btnFunctionalAreaDelete').hide();
                //    //$('#divFunctionalAreaSection').html(''); //$('#divFunctionalAreaTemplate').html()); // Display the functional area form.

                //    //renderConfigureParticipantsScreen();
                //    //var e1 = document.getElementById('divParticipants');
                //    //e1.style.borderRadius = '20px 0 0 20px';

                //    generateParticipantsListButtons();


            }
            //else if (divSection == 'divDepartments') {
            //    $('#bwQuickLaunchMenuTd').css({
            //        width: '0'
            //    }); // This gets rid of the jumping around.
            //    var data = {
            //    };
            //    $.ajax({
            //        url: appweburl + "/bwdepartments",
            //        type: "DELETE",
            //        contentType: 'application/json',
            //        data: JSON.stringify(data),
            //        success: function (data) {
            //            $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //            if (data.length > 0) {
            //                //    var html = '';
            //                //    html += '<input ';
            //                //    html += '';
            //                //    $('#spanDepartmentTitle').append()

            //                //} else {
            //                //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //                $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
            //                $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
            //            }
            //        },
            //        error: function (data, errorCode, errorMessage) {
            //            displayAlertDialog('Error in bwRequest.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
            //        }
            //    });
            //    var e1 = document.getElementById('divFunctionalAreas');
            //    e1.style.borderRadius = '20px 0 0 20px';
            //    generateDepartmentsListButtons();
            //} //else if (divSection == 'divWorkflows') {
            //$('#bwQuickLaunchMenuTd').css({ width: '0' }); // This gets rid of the jumping around.
            //var data = {
            //};
            //$.ajax({
            //    url: appweburl + "/bwdepartments",
            //    type: "DELETE",
            //    contentType: 'application/json',
            //    data: JSON.stringify(data),
            //    success: function (data) {
            //        $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //        if (data.length > 0) {
            //            //    var html = '';
            //            //    html += '<input ';
            //            //    html += '';
            //            //    $('#spanDepartmentTitle').append()

            //            //} else {
            //            //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //            $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
            //            $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        displayAlertDialog('Error in bwRequest.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
            //    }
            //});
            //var e1 = document.getElementById('divFunctionalAreas');
            //e1.style.borderRadius = '20px 0 0 20px';
            //generateWorkflowsPage();
            else if (divSection == 'divBehavior') {
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.
                //var data = {
                //};
                //$.ajax({
                //    url: appweburl + "/bwdepartments",
                //    type: "DELETE",
                //    contentType: 'application/json',
                //    data: JSON.stringify(data),
                //    success: function (data) {
                //        $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
                //        if (data.length > 0) {
                //            //    var html = '';
                //            //    html += '<input ';
                //            //    html += '';
                //            //    $('#spanDepartmentTitle').append()

                //            //} else {
                //            //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
                //            $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
                //            $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
                //        }
                //    },
                //    error: function (data, errorCode, errorMessage) {
                //        displayAlertDialog('Error in bwRequest.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
                //    }
                //});
                //var e1 = document.getElementById('divFunctionalAreas');
                //e1.style.borderRadius = '20px 0 0 20px';
                //renderConfigurationPersonalBehavior();
            } else if (divSection == 'divWorkflowSettings') {
                $('#bwQuickLaunchMenuTd').css({
                    width: '0'
                }); // This gets rid of the jumping around.

                renderConfigurationSettings();
            }


            // TODD: THIS WORKS A BIT WEIRD< MAYBE SHOULD GO ELSE WHERE!!! it is also in renderWelcomeScreen(). 9-4-16
            // This zooms the screen when the user first navigates to the website! More about this in the Budget Workflow Manager codebase.
            if (navigator.userAgent.match(/iPhone/i)) {
                $('#bwMyPage').animate({
                    'zoom': 3
                }, 400);
            }

        } catch (e) {
            //handleExceptionWithAlert('Error in bwRequest.js.populateStartPageItem(' + divSection + ')', e.message);
            displayAlertDialog('Error in bwRequest.js.populateStartPageItem(' + divSection + '): ' + e.message);
        }
    },

    displayPeoplePickerDialog: function (friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable, peopleType, elementIdSuffix) {
        try {
            console.log('In displayPeoplePickerDialog(). elementIdSuffix: ' + elementIdSuffix);
            var thiz = this;

            if (peopleType && (peopleType == 'emailrecipient')) {

                $('#txtPeoplePickerDialogSearchBox').empty(); // Clear the search text box.
                $('#PeoplePickerDialog').dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    //title: "Select a person...", //"Enter your early adopter code...",
                    width: "570px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    open: function () {
                        $('.ui-widget-overlay').bind('click', function () {
                            $("#PeoplePickerDialog").dialog('close');
                        });
                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                });
                $("#PeoplePickerDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                $('#spanPeoplePickerDialogTitle').html('Select an email recipient...');

                // Now we can hook up the Participant text box for autocomplete.
                $("#txtPeoplePickerDialogSearchBox").autocomplete({
                    source: function (request, response) {
                        if (request.term == '') {
                            thiz.renderAllEmailRecipientsInThePeoplePicker(); // Nothing is in the search box, so show all participants.
                        } else {
                            $.ajax({
                                //url: appweburl + "/tenant/" + tenantId + "/participants/" + request.term,
                                url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                                dataType: "json",
                                success: function (data) {
                                    $('#spanPeoplePickerParticipantsList').empty();
                                    var html = '';
                                    if (data.participants.length > 0) {
                                        //var searchArray = [];
                                        for (var i = 0; i < data.participants.length; i++) {
                                            //searchArray[i] = data.participants[i].participant;
                                            //var strParticipant = '<a href="">' + data.participants[i].participant.split('|')[0] + ' <i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';
                                            // debugger; // do we ever get here?
                                            html += '<a style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField_ForEmailRecipients\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data.participants[i].participant.split('|')[0] + '\', \'' + data.participants[i].participant.split('|')[1] + '\', \'' + data.participants[i].participant.split('|')[2] + '\', \'' + buttonToEnable + '\', \'' + elementIdSuffix + '\');">' + data.participants[i].participant.split('|')[0] + '&nbsp;&nbsp;<i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';


                                            //html += strParticipant; //data.participants[i].participant;
                                            html += '<br />';
                                            //response(searchArray);
                                        }
                                    } else {
                                        // There were no results.
                                        html += '<span><i>There were no results</i></span>';
                                    }
                                    $('#spanPeoplePickerParticipantsList').append(html);
                                }
                            });
                        }
                    },
                    minLength: 0, // minLength specifies how many characters have to be typed before this gets invoked.
                    select: function (event, ui) {
                        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
                        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
                    },
                    open: function () {
                        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
                    },
                    close: function () {
                        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        var peoplePickerParticipantName = this.value.split('|')[0];
                        var peoplePickerParticipantId = this.value.split('|')[1];
                        var peoplePickerParticipantEmail = this.value.split('|')[2];

                        if (peoplePickerParticipantName.indexOf('undefined') > -1) {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = '';
                        } else {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = peoplePickerParticipantName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = peoplePickerParticipantId;
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = peoplePickerParticipantEmail;
                        }
                    }
                });

                // List all participants.
                this.renderAllEmailRecipientsInThePeoplePicker(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable, elementIdSuffix); // We do this the first time to make sure they are all displayed.

            } else if (peopleType && (peopleType == 'customer')) {

                $('#txtPeoplePickerDialogSearchBox').empty(); // Clear the search text box.
                $('#PeoplePickerDialog').dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    //title: "Select a person...", //"Enter your early adopter code...",
                    width: "570px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    open: function () {
                        $('.ui-widget-overlay').bind('click', function () {
                            $("#PeoplePickerDialog").dialog('close');
                        });
                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                });
                $("#PeoplePickerDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                $('#spanPeoplePickerDialogTitle').html('Select a customer...');

                // Now we can hook up the Participant text box for autocomplete.
                $("#txtPeoplePickerDialogSearchBox").autocomplete({
                    source: function (request, response) {
                        if (request.term == '') {
                            thiz.renderAllCustomersInThePeoplePicker(); // Nothing is in the search box, so show all participants.
                        } else {
                            $.ajax({
                                //url: appweburl + "/tenant/" + tenantId + "/participants/" + request.term,
                                url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                                dataType: "json",
                                success: function (data) {
                                    $('#spanPeoplePickerParticipantsList').empty();
                                    var html = '';
                                    if (data.participants.length > 0) {
                                        //var searchArray = [];
                                        for (var i = 0; i < data.participants.length; i++) {
                                            //searchArray[i] = data.participants[i].participant;
                                            //var strParticipant = '<a href="">' + data.participants[i].participant.split('|')[0] + ' <i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';
                                            // debugger; // do we ever get here?
                                            html += '<a onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField_ForCustomer\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data.participants[i].participant.split('|')[0] + '\', \'' + data.participants[i].participant.split('|')[1] + '\', \'' + data.participants[i].participant.split('|')[2] + '\', \'' + buttonToEnable + '\');">' + data.participants[i].participant.split('|')[0] + '&nbsp;&nbsp;<i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';


                                            //html += strParticipant; //data.participants[i].participant;
                                            html += '<br />';
                                            //response(searchArray);
                                        }
                                    } else {
                                        // There were no results.
                                        html += '<span><i>There were no results</i></span>';
                                    }
                                    $('#spanPeoplePickerParticipantsList').append(html);
                                }
                            });
                        }
                    },
                    minLength: 0, // minLength specifies how many characters have to be typed before this gets invoked.
                    select: function (event, ui) {
                        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
                        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
                    },
                    open: function () {
                        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
                    },
                    close: function () {
                        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        var peoplePickerParticipantName = this.value.split('|')[0];
                        var peoplePickerParticipantId = this.value.split('|')[1];
                        var peoplePickerParticipantEmail = this.value.split('|')[2];

                        if (peoplePickerParticipantName.indexOf('undefined') > -1) {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = '';
                        } else {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = peoplePickerParticipantName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = peoplePickerParticipantId;
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = peoplePickerParticipantEmail;
                        }
                    }
                });

                // List all participants.
                this.renderAllCustomersInThePeoplePicker(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable); // We do this the first time to make sure they are all displayed.

            } else {
                $('#txtPeoplePickerDialogSearchBox').empty(); // Clear the search text box.
                $('#PeoplePickerDialog').dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    //title: "Select a person...", //"Enter your early adopter code...",
                    width: "570px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    open: function () {
                        $('.ui-widget-overlay').bind('click', function () {
                            $("#PeoplePickerDialog").dialog('close');
                        });
                    } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                });
                $("#PeoplePickerDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                $('#spanPeoplePickerDialogTitle').html('Select a person...');

                // Now we can hook up the Participant text box for autocomplete.
                $("#txtPeoplePickerDialogSearchBox").autocomplete({
                    source: function (request, response) {
                        if (request.term == '') {
                            thiz.renderAllParticipantsInThePeoplePicker(); // Nothing is in the search box, so show all participants.
                        } else {
                            $.ajax({
                                //url: appweburl + "/tenant/" + tenantId + "/participants/" + request.term,
                                url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                                dataType: "json",
                                success: function (data) {
                                    $('#spanPeoplePickerParticipantsList').empty();
                                    var html = '';
                                    if (data.participants.length > 0) {
                                        //var searchArray = [];
                                        for (var i = 0; i < data.participants.length; i++) {
                                            //searchArray[i] = data.participants[i].participant;
                                            //var strParticipant = '<a href="">' + data.participants[i].participant.split('|')[0] + ' <i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';
                                            // debugger; // do we ever get here?
                                            html += '<a onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data.participants[i].participant.split('|')[0] + '\', \'' + data.participants[i].participant.split('|')[1] + '\', \'' + data.participants[i].participant.split('|')[2] + '\', \'' + buttonToEnable + '\');">' + data.participants[i].participant.split('|')[0] + '&nbsp;&nbsp;<i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';


                                            //html += strParticipant; //data.participants[i].participant;
                                            html += '<br />';
                                            //response(searchArray);
                                        }
                                    } else {
                                        // There were no results.
                                        html += '<span><i>There were no results</i></span>';
                                    }
                                    $('#spanPeoplePickerParticipantsList').append(html);
                                }
                            });
                        }
                    },
                    minLength: 0, // minLength specifies how many characters have to be typed before this gets invoked.
                    select: function (event, ui) {
                        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
                        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
                    },
                    open: function () {
                        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
                    },
                    close: function () {
                        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                        var peoplePickerParticipantName = this.value.split('|')[0];
                        var peoplePickerParticipantId = this.value.split('|')[1];
                        var peoplePickerParticipantEmail = this.value.split('|')[2];

                        if (peoplePickerParticipantName.indexOf('undefined') > -1) {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = '';
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = '';
                        } else {
                            document.getElementById('txtPeoplePickerDialogSearchBox').value = peoplePickerParticipantName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                            document.getElementById('txtPeoplePickerDialogParticipantId').value = peoplePickerParticipantId;
                            document.getElementById('txtPeoplePickerDialogParticipantEmail').value = peoplePickerParticipantEmail;
                        }
                    }
                });

                // List all participants.
                this.renderAllParticipantsInThePeoplePicker(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable); // We do this the first time to make sure they are all displayed.
            }

        } catch (e) {
            console.log('Exception in displayPeoplePickerDialog: ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in displayPeoplePickerDialog: ' + e.message + ', ' + e.stack);
        }
    },


    renderAllParticipantsInThePeoplePicker: function (friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable) {
        try {
            console.log('In bwRequest.js.renderAllParticipantsInThePeoplePicker().');

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            $('#spanPeoplePickerParticipantsList').empty();
            //var data = {
            //    bwWorkflowAppId: workflowAppId,
            //    bwParticipantId: participantId,
            //    bwActiveStateIdentifier: activeStateIdentifier
            //};
            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId
            };
            $.ajax({
                url: webserviceurl + "/workflow/participants",
                type: "POST",
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (result) {
                    try {

                        var data = result.BwWorkflowUsers;
                        var html = '';
                        for (var i = 0; i < data.length; i++) {
                            html += '<a onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantEmail + '\', \'' + buttonToEnable + '\');">' + data[i].bwParticipantFriendlyName + '&nbsp;&nbsp;<i>(' + data[i].bwParticipantEmail + ')</i></a>';
                            html += '<br />';
                        }
                        $('#spanPeoplePickerParticipantsList').append(html);

                    } catch (e) {
                        console.log('Exception in renderAllParticipantsInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                        displayAlertMessage('Exception in renderAllParticipantsInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    console.log('Error in my.js.renderAllParticipantsInThePeoplePicker():' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in my.js.renderAllParticipantsInThePeoplePicker():' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            console.log('Exception in renderAllParticipantsInThePeoplePicker(): ' + e.message + ', ' + e.stack);
            displayAlertMessage('Exception in renderAllParticipantsInThePeoplePicker(): ' + e.message + ', ' + e.stack);
        }
    },
    renderAllCustomersInThePeoplePicker: function (friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable) {
        try {
            console.log('In bwRequest.js.renderAllCustomersInThePeoplePicker().');

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            $('#spanPeoplePickerParticipantsList').empty();

            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId,
                bwParticipantId: participantId,
                bwActiveStateIdentifier: activeStateIdentifier
            };
            $.ajax({
                url: webserviceurl + "/workflow/participants",
                type: "POST",
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (result) {
                    try {

                        var data = result.BwWorkflowUsers;
                        var html = '';

                        var thereAreSomeCustomers = false;
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].bwParticipantRole == 'customer') {
                                thereAreSomeCustomers = true;
                                html += '<a onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField_ForCustomer\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantEmail + '\', \'' + buttonToEnable + '\');">' + data[i].bwParticipantFriendlyName + '&nbsp;&nbsp;<i>(' + data[i].bwParticipantEmail + ')</i></a>';
                                html += '<br />';
                            }
                        }

                        if (thereAreSomeCustomers == false) {
                            html += 'There are no customers in this organization.';
                        }
                        $('#spanPeoplePickerParticipantsList').append(html);

                    } catch (e) {
                        console.log('Exception in renderAllCustomersInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                        displayAlertMessage('Exception in renderAllCustomersInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    console.log('Error in my.js.renderAllCustomersInThePeoplePicker():' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in my.js.renderAllCustomersInThePeoplePicker():xcx677756: ' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            console.log('Exception in renderAllCustomersInThePeoplePicker(): ' + e.message + ', ' + e.stack);
            displayAlertMessage('Exception in renderAllCustomersInThePeoplePicker(): ' + e.message + ', ' + e.stack);
        }
    },
    renderAllEmailRecipientsInThePeoplePicker: function (friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable, elementIdSuffix) {
        try {
            console.log('In bwRequest.js.renderAllEmailRecipientsInThePeoplePicker(). elementIdSuffix: ' + elementIdSuffix);

            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');

            var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');

            $('#spanPeoplePickerParticipantsList').empty();
            //var data = {
            //    bwWorkflowAppId: workflowAppId,
            //    bwParticipantId: participantId,
            //    bwActiveStateIdentifier: activeStateIdentifier
            //};
            var data = {
                bwParticipantId_LoggedIn: participantId,
                bwActiveStateIdentifier: activeStateIdentifier,
                bwWorkflowAppId_LoggedIn: workflowAppId,

                bwWorkflowAppId: workflowAppId
            };
            $.ajax({
                url: webserviceurl + "/workflow/participants",
                type: "POST",
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (result) {
                    try {

                        var data = result.BwWorkflowUsers;
                        var html = '';

                        var thereAreSomeCustomers = false;
                        for (var i = 0; i < data.length; i++) {
                            if ((data[i].bwParticipantRole == 'customer') || (data[i].bwParticipantRole == 'emailrecipient')) {
                                thereAreSomeCustomers = true;
                                html += '<a style="cursor:pointer;" onclick="$(\'.bwRequest\').bwRequest(\'cmdReturnParticipantIdToField_ForEmailRecipient\', \'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantEmail + '\', \'' + buttonToEnable + '\', \'' + elementIdSuffix + '\');">' + data[i].bwParticipantFriendlyName + '&nbsp;&nbsp;<i>(' + data[i].bwParticipantEmail + ')</i></a>';
                                html += '<br />';
                            }
                        }

                        if (thereAreSomeCustomers == false) {
                            html += 'There are no email recipients in this organization.';
                        }
                        $('#spanPeoplePickerParticipantsList').append(html);

                    } catch (e) {
                        console.log('Exception in renderAllEmailRecipientsInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                        displayAlertMessage('Exception in renderAllEmailRecipientsInThePeoplePicker():2: ' + e.message + ', ' + e.stack);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    console.log('Error in bwRequest.js.renderAllEmailRecipientsInThePeoplePicker():' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in bwRequest.js.renderAllEmailRecipientsInThePeoplePicker():' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            console.log('Exception in bwRequest.js.renderAllEmailRecipientsInThePeoplePicker(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in bwRequest.js.renderAllEmailRecipientsInThePeoplePicker(): ' + e.message + ', ' + e.stack);
        }
    },
    cmdReturnParticipantIdToField: function (friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, buttonToEnable) {
        try {
            console.log('In cmdReturnParticipantIdToField().');
            // The people picker calls this and 
            //displayAlertDialog('You selected participant ' + selectedParticipantFriendlyName + ' to go in friendly name field ' + friendlyNameSourceField + '.\n\nThis functionality is incomplete. Coming soon!');

            document.getElementById(friendlyNameSourceField).value = selectedParticipantFriendlyName;
            document.getElementById(friendlyNameSourceField).setAttribute('title', selectedParticipantEmail);
            document.getElementById(idSourceField).value = selectedParticipantId;
            document.getElementById(emailSourceField).value = selectedParticipantEmail;
            //// debugger;
            this.options.store.ProjectManager = {
                Person: {
                    AccountId: selectedParticipantId,
                    FriendlyName: selectedParticipantFriendlyName,
                    Email: selectedParticipantEmail,
                    AccountType: null
                }
            }

            // This enables the save button that may be next to the text box.
            if (buttonToEnable && buttonToEnable != 'undefined') document.getElementById(buttonToEnable).disabled = false;

            $('#PeoplePickerDialog').dialog('close');

            // The following doesn't work for some reason.
            //$('#' + friendlyNameSourceField).blur(); // Removes the focus from the field so that the user can't type in it.
            //document.getElementById(friendlyNameSourceField).blur();
        } catch (e) {
            console.log('Exception in cmdReturnParticipantIdToField(): ' + e.message + ', ' + e.stack);
        }
    },

    cmdReturnParticipantIdToField_ForCustomer: function (friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, buttonToEnable) {
        try {
            console.log('In cmdReturnParticipantIdToField_ForCustomer().'); // _bw/addcustomertoarequest

            var bwBudgetRequestId = friendlyNameSourceField.split('_')[1];

            var budgetrequestform;
            var budgetrequestforms = document.getElementsByClassName('budgetrequestform'); //(document).find('#budgetrequestform');
            //// debugger;
            for (var i = 0; i < budgetrequestforms.length; i++) {
                var _budgetRequestId = $(budgetrequestforms[i])[0].getAttribute('bwbudgetrequestid');
                if (bwBudgetRequestId == _budgetRequestId) {
                    // We found the form.
                    budgetrequestform = $(budgetrequestforms[i])[0];
                    break;
                }
            }


            // Find the form widget on the correct form, then call the "add" method to add the selected participant/customer.

            if (!budgetrequestform) {
                alert('In cmdReturnParticipantIdToField_ForCustomer(). Could not find budgetrequestform. bwBudgetRequestId: ' + bwBudgetRequestId + ', friendlyNameSourceField: ' + friendlyNameSourceField);
            } else {

                var formwidget = $(budgetrequestform).find('.bwPeoplePicker_Customer')[0];
                if (!formwidget) {
                    alert('In cmdReturnParticipantIdToField_ForCustomer(). Could not find formwidget.');
                } else {
                    $(formwidget).bwPeoplePicker_Customer('addCustomer', friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, bwBudgetRequestId);
                }
            }

            //alert('In cmdReturnParticipantIdToField_ForCustomer(). To do: WE NEED TO UPDATE THE BwCustomerRequests TABLE immediately, and notify the user that the customer immediately has access to view this request...');
            //// The people picker calls this and 
            ////displayAlertDialog('You selected participant ' + selectedParticipantFriendlyName + ' to go in friendly name field ' + friendlyNameSourceField + '.\n\nThis functionality is incomplete. Coming soon!');

            //document.getElementById(friendlyNameSourceField).value = selectedParticipantFriendlyName;
            //document.getElementById(friendlyNameSourceField).setAttribute('title', selectedParticipantEmail);
            //document.getElementById(idSourceField).value = selectedParticipantId;
            //document.getElementById(emailSourceField).value = selectedParticipantEmail;
            ////// debugger;
            //this.options.store.ProjectManager = {
            //    Person: {
            //        AccountId: selectedParticipantId,
            //        FriendlyName: selectedParticipantFriendlyName,
            //        Email: selectedParticipantEmail,
            //        AccountType: null
            //    }
            //}

            //// This enables the save button that may be next to the text box.
            //if (buttonToEnable && buttonToEnable != 'undefined') document.getElementById(buttonToEnable).disabled = false;

            //$('#PeoplePickerDialog').dialog('close');

            //// The following doesn't work for some reason.
            ////$('#' + friendlyNameSourceField).blur(); // Removes the focus from the field so that the user can't type in it.
            ////document.getElementById(friendlyNameSourceField).blur();

        } catch (e) {
            console.log('Exception in cmdReturnParticipantIdToField_ForCustomer(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in cmdReturnParticipantIdToField_ForCustomer(): ' + e.message + ', ' + e.stack);
        }
    },
    cmdReturnParticipantIdToField_ForEmailRecipient: function (friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, buttonToEnable, elementIdSuffix) {
        try {
            console.log('In cmdReturnParticipantIdToField_ForEmailRecipient(). elementIdSuffix: ' + elementIdSuffix); // _bw/addcustomertoarequest

            //var bwBudgetRequestId = friendlyNameSourceField.split('_')[1];

            //var budgetrequestform;
            //var budgetrequestforms = document.getElementsByClassName('budgetrequestform'); //(document).find('#budgetrequestform');
            //// debugger;
            //for (var i = 0; i < budgetrequestforms.length; i++) {
            //    var _budgetRequestId = $(budgetrequestforms[i])[0].getAttribute('bwbudgetrequestid');
            //    if (bwBudgetRequestId == _budgetRequestId) {
            //        // We found the form.
            //        budgetrequestform = $(budgetrequestforms[i])[0];
            //        break;
            //    }
            //}


            // Find the form widget on the correct form, then call the "add" method to add the selected participant/customer.

            //if (!budgetrequestform) {
            //    alert('In cmdReturnParticipantIdToField_ForCustomer(). Could not find budgetrequestform. bwBudgetRequestId: ' + bwBudgetRequestId + ', friendlyNameSourceField: ' + friendlyNameSourceField);
            //} else {

            //var formwidget = $('#' + elementIdSuffix);
            // divEmailAttachmentsDialog_bwAttachments_faa59661-4182-41ab-a538-759519ecd748
            //var emailDialog = $('#divEmailAttachmentsDialog_bwAttachments_' + elementIdSuffix);
            //var widget = $('#divEmailAttachmentsDialog_bwAttachments_bwPeoplePicker_EmailRecipients_' + elementIdSuffix);
            //if (!widget) {
            //    alert('In cmdReturnParticipantIdToField_ForEmailRecipient(). Could not find emailDialog.');
            //} else {
            $('#divEmailAttachmentsDialog_bwAttachments_bwPeoplePicker_EmailRecipients_' + elementIdSuffix).bwPeoplePicker_EmailRecipients('addEmailRecipient', friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, elementIdSuffix); //bwBudgetRequestId);
            //}
            //}

            //alert('In cmdReturnParticipantIdToField_ForCustomer(). To do: WE NEED TO UPDATE THE BwCustomerRequests TABLE immediately, and notify the user that the customer immediately has access to view this request...');
            //// The people picker calls this and 
            ////displayAlertDialog('You selected participant ' + selectedParticipantFriendlyName + ' to go in friendly name field ' + friendlyNameSourceField + '.\n\nThis functionality is incomplete. Coming soon!');

            //document.getElementById(friendlyNameSourceField).value = selectedParticipantFriendlyName;
            //document.getElementById(friendlyNameSourceField).setAttribute('title', selectedParticipantEmail);
            //document.getElementById(idSourceField).value = selectedParticipantId;
            //document.getElementById(emailSourceField).value = selectedParticipantEmail;
            ////// debugger;
            //this.options.store.ProjectManager = {
            //    Person: {
            //        AccountId: selectedParticipantId,
            //        FriendlyName: selectedParticipantFriendlyName,
            //        Email: selectedParticipantEmail,
            //        AccountType: null
            //    }
            //}

            //// This enables the save button that may be next to the text box.
            //if (buttonToEnable && buttonToEnable != 'undefined') document.getElementById(buttonToEnable).disabled = false;

            //$('#PeoplePickerDialog').dialog('close');

            //// The following doesn't work for some reason.
            ////$('#' + friendlyNameSourceField).blur(); // Removes the focus from the field so that the user can't type in it.
            ////document.getElementById(friendlyNameSourceField).blur();

        } catch (e) {
            console.log('Exception in cmdReturnParticipantIdToField_ForEmailRecipient(): ' + e.message + ', ' + e.stack);
            displayAlertDialog('Exception in cmdReturnParticipantIdToField_ForEmailRecipient(): ' + e.message + ', ' + e.stack);
        }
    },
    renderParticipantInformation: function (userId) {
        try {
            console.log('renderParticipantInformation(). userId: ' + userId);
            alert('In renderParticipantInformation(). userId: ' + userId);

            //var stepGuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            //    return v.toString(16);
            //});

            //var step = {
            //    StepName: "NewStep-" + stepGuid,
            //    InformRoles: [{}],
            //    AssignRoles: [{}]
            //};
            //this.options.store.RaciSteps.push(step);

            ////alert('In addARaciStep(). this.options.store: ' + JSON.stringify(this.options.store));

            //this._create();
        } catch (e) {
            console.log('Exception in renderParticipantInformation(): ' + e.message + ', ' + e.stack);
        }
    }
    //displayAlertDialog: function (errorMessage) {
    //    try {
    //        //document.getElementById('spanErrorMessage').innerHTML = errorMessage;
    //        $("#divAlertDialog").dialog({
    //            modal: true,
    //            resizable: false,
    //            //closeText: "Cancel",
    //            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
    //            //title: 'Add a New Person',
    //            width: '800',
    //            dialogClass: "no-close", // No close button in the upper right corner.
    //            hide: false, // This means when hiding just disappear with no effects.
    //            open: function () {
    //                $('.ui-widget-overlay').bind('click', function () {
    //                    $("#divAlertDialog").dialog('close');
    //                });

    //                var element2 = $(this).find('#spanErrorMessage')[0]; //
    //                element2.innerHTML = errorMessage;
    //            },
    //            close: function () {
    //                //$(this).dialog('destroy').remove();
    //            }
    //        });
    //        $("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
    //    } catch (e) {
    //        console.log('Exception in WorkflowEditor.js.displayAlertDialog(): ' + e.message + ', ' + e.stack);
    //    }
    //}


    //showRequestButtonADMINOnBehalfOfDialog: function (onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName, participantId, participantEmail, participantFriendlyName, roleMember_participantId, roleMember_participantEmail, roleMember_participantFriendlyName, element) {
    //    try {
    //        console.log('In showRequestButtonADMINOnBehalfOfDialog().');
    //        // debugger;
    //        var thiz = this;

    //        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

    //        if (!document.getElementById('divWorkflowActionButtonsHoverDetails')) { // If the element doesn't exist create it here.
    //            // The hover dialog 
    //            var html = '';
    //            html += '<div style="display:none;border-radius:30px 0 30px 30px;border: 5px solid skyblue;background-color:white;" id="divWorkflowActionButtonsHoverDetails" >'; // onclick="$(\'.bwRequest\').bwRequest(\'displayArInDialog\',\'https://budgetworkflow.com\', \'50963ec1-dac6-423c-a0e9-29715286ab65\', \'BR-180001\', \'Test 1\', \'BR-180001\');" >';
    //            html += '   <table id="tableRowHoverDetails" style="width:100%;">';
    //            html += '       <tr>';
    //            html += '           <td style="width:90%;text-align:top;">';
    //            html += '               <span id="divWorkflowActionButtonsHoverDetails_DialogTitleAndCurrentRACIStatus" style="color: #3f3f3f;"></span>';
    //            html += '           </td>';
    //            html += '           <td style="width:9%;"></td>';
    //            html += '           <td style="width:1%;cursor:pointer;vertical-align:top;">';
    //            //html += '               <span class="dialogXButton" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;font-size: 120pt;font-weight:bold;" onclick="$(\'#divRowHoverDetails\').dialog(\'close\');">X</span>';
    //            html += '           </td>';
    //            html += '       </tr>';
    //            html += '   </table>';
    //            html += '   <input type="text" autofocus="true" style="display:none;" /> <!-- This is here to prevent the first visible field from getting the cursor and showing the keyboard. -->';
    //            html += '   <span id="divWorkflowActionButtonsHoverDetails_DialogContents" style="font-size:15pt;"></span>';
    //            html += '   <br /><br />';
    //            html += '   <span id="spanImageXXxxx" style=""></span>';


    //            //html += '<button ondblclick="$(\'.bwRequest\').bwRequest(\'cmdApproveRequest\', this, \'ADMIN\', \'undefined\', \'Admin\', \'undefined\', \'84404479-87b3-4f9c-b096-e65db5426c5e\', \'todd@budgetworkflow.com\', \'Todd Hiltz\', \'84404479-87b3-4f9c-b096-e65db5426c5e\', \'todd@budgetworkflow.com\', \'Todd Hiltz\');" >';
    //            //html += 'Approve';
    //            //html += '</button>';



    //            html += '<br /><br />';







    //            html += '</div>';

    //            $(document.body).append(html);
    //        }

    //        //var parent = document.getElementById('divWorkflowActionButtonsHoverDetails_Parent');
    //        //parent.style.cssText += 'border-radius:30px 0 30px 30px;border: 5px solid orange;';



    //        //var bwOrgid = 

    //        // Remove the event handler from <div>
    //        //document.getElementById("myDIV").removeEventListener("mousemove", myFunction);
    //        //var myFunction = function () { };
    //        //element.removeEventListener('onmouseout', myFunction);

    //        //
    //        // Display the header for the hover over details dialog.
    //        var html = '';
    //        //html += '<table>';
    //        //html += '  <tr>';
    //        //html += '    <td style="text-align:center;">';
    //        //html += '      <img id="imgRequestOrgImage2" src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:180px;height:180px;" />';

    //        //html += '        <br />';
    //        //// The "under the org image" text
    //        //html += '<span style="font-size:10pt;">';
    //        //html += workflowAppTitle + '<br />' + bwOrgName;
    //        //html += '</span>';

    //        //html += '    </td>';
    //        //html += '    <td style="vertical-align:top;">';
    //        //html += '      <span id="spanRowHoverDetails_AuditTrail_CurrentRACIStatus" style="font-size:10pt;">';
    //        //html += '        <span style="font-size:30pt;font-weight:bold;">' + title + '</span>';
    //        //html += '        <br />';
    //        ////html += '        [spanRowHoverDetails_AuditTrail_CurrentRACIStatus_xcx1]';
    //        //html += '      </span>';
    //        //html += '    </td>';
    //        //html += '  </tr>';
    //        //html += '</table>';
    //        //document.getElementById('spanRowHoverDetailsDialogTitleAndCurrentRACIStatus').innerHTML = html;
    //        // End: Display the header for the hover over details dialog.
    //        //

    //        // onBehalfOf_RoleId, onBehalfOf_RoleName, stepName, stepFriendlyName
    //        //html += projectTitle + '<br />' + briefDescriptionOfProject;
    //        //html += '<br /><br />';
    //        if (roleMember_participantId && roleMember_participantId != '') {

    //            if (onBehalfOf_RoleId.toLowerCase() == 'admin') {
    //                html += '"' + roleMember_participantFriendlyName + '" (' + roleMember_participantEmail + ') is in the role ' + onBehalfOf_RoleId + ' in workflow step "' + stepName + '".';
    //            } else {
    //                html += '"' + roleMember_participantFriendlyName + '" (' + roleMember_participantEmail + ') is in the role ' + onBehalfOf_RoleName + ' (' + onBehalfOf_RoleId + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').';
    //            }


    //        } else {
    //            html += 'No one is in the role of ' + onBehalfOf_RoleName + ' (' + onBehalfOf_RoleId + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').';
    //        }
    //        html += '<br /><br />';
    //        html += 'As an ADMIN you can approve this request on behalf of them.'; // + onBehalfOf_RoleId + ' (' + onBehalfOf_RoleName + ').';
    //        html += '<br /><br />';
    //        html += 'Click the "Approve" button to proceed with this approval.';
    //        //html += '<br /><br />';
    //        //html += 'A comment will be added to the comment thread:<br /><span style="font-size:20pt;">SYSTEM MESSSAGE: ADMIN "' + participantFriendlyName + '" (' + participantEmail + ') has approved this request on behalf of the "' + onBehalfOf_RoleId + '" (' + onBehalfOf_RoleName + ') in workflow step "' + stepFriendlyName + '" (' + stepName + ').</span>';
    //        //html += '<br /><br />';
    //        //html += 'NOTE: If you want to add additional comments, do it now, before you double-click the Approve button.';
    //        //html += '<br /><br />';
    //        document.getElementById('divWorkflowActionButtonsHoverDetails_DialogContents').innerHTML = html;


    //        $('#divWorkflowActionButtonsHoverDetails').dialog({
    //            resizable: false,
    //            //style: '',
    //            draggable: false,
    //            width: "350",
    //            position: {
    //                my: 'right top',
    //                at: 'left+20 bottom-20',
    //                of: $(element)
    //            },
    //            open: function (event, ui) {

    //                $('#divWorkflowActionButtonsHoverDetails').unbind('click', function () { });

    //                //$(this).bind('click', function () {
    //                //    console.log('Displaying the request in the dialog [calling displayArInDialog()].');
    //                //    $('.bwRequest').bwRequest('displayArInDialog', thiz.options.operationUriPrefix, bwBudgetRequestId, title, projectTitle, title);
    //                //    thiz.hideRowHoverDetails();
    //                //});

    //            }
    //        });
    //        $('#divWorkflowActionButtonsHoverDetails').dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();



    //        //html += '<img id="imgRequestOrgImage" src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:200px;height:200px;"/>';
    //        //
    //        // Try to get a custom image. If none found, use the OOB one.
    //        //
    //        //html += '<img src="' + thiz.options.operationUriPrefix + 'images/corporeal.png" style="width:200px;height:200px;"/>'; // This is the original code. Remove at some point.
    //        //// debugger;
    //        //var bwOrgid = 'root'; // 12-24-2021 GET RID OF THIS IT IS A HARDCODED HACK FIX SOMETIME






    //        //var imagePath2 = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/orgimages/' + bwOrgid + '/' + 'orgimage.png'; // thiz.options.store.OrgId
    //        //$.get(imagePath2).done(function () {
    //        //    setTimeout(function () { // Only needs to happen for Chrome.
    //        //        //var img = document.getElementById('imgRequestOrgImage');
    //        //        //img.attr.src = imagePath2;
    //        //        $('#imgRequestOrgImage2').attr('src', imagePath2);
    //        //    }, 500);
    //        //}).fail(function () {
    //        //    //alert("This org has no image."); // do nothing 
    //        //});
    //        // End: Getting the custom image
    //        //


    //        //// debugger;

    //        //$('#spanImageXXx').click(function (error) { // This is so that if the dialog is in the way, the user can still click on it and the AR will be displayted. 
    //        //    alert('YEEEEEAAAAAAAAAAAAAAHHHHHHHHHHHHHH!');
    //        //    //// debugger;
    //        //    $('.bwRequest').bwRequest('displayArInDialog', this.options.operationUriPrefix, bwBudgetRequestId, title, projectTitle, title);
    //        //    thiz.hideRowHoverDetails();

    //        //});



    //        //
    //        // Ajax call to get the primary image.
    //        //
    //        //var operationUri = this.options.operationUriPrefix + '_files/' + 'getprimaryimageforbudgetrequest/' + workflowAppId + '/' + bwBudgetRequestId; // _files allows us to use nginx to route these to a dedicated file server.
    //        //$.ajax({
    //        //    url: operationUri,
    //        //    method: "GET",
    //        //    timeout: ajaxTimeout,
    //        //    headers: {
    //        //        "Accept": "application/json; odata=verbose"
    //        //    },
    //        //    success: function (data) {

    //        //        try {

    //        //            document.getElementById('spanImageXXx').innerHTML = '';
    //        //            try {
    //        //                for (var i = 0; i < data.length; i++) {
    //        //                    var fileName = data[i].Filename;
    //        //                    if (fileName.toUpperCase().indexOf('.XLSX') > -1 || fileName.toUpperCase().indexOf('.XLS') > -1) {
    //        //                        html = '<img src="images/excelicon.png" style="width:100px;height:46px;cursor:pointer;" />';
    //        //                        document.getElementById('spanImageXXx').innerHTML += html;
    //        //                    } else {
    //        //                        var imageUrl = thiz.options.operationUriPrefix + '_files/' + workflowAppId + '/' + bwBudgetRequestId + '/' + fileName;
    //        //                        html = '<img src="' + imageUrl + '" style="height:150px;" />';
    //        //                        document.getElementById('spanImageXXx').innerHTML += html;
    //        //                    }
    //        //                }
    //        //            } catch (e) {
    //        //                console.log('Didn\'t find an image for data: ' + JSON.stringify(data));
    //        //                html = '[no image found]';
    //        //                document.getElementById('spanImageXXx').innerHTML = html;
    //        //            }


    //        //        } catch (e) {
    //        //            if (e.number) {
    //        //                displayAlertDialog('Error in showRequestButtonADMINOnBehalfOfDialog():1-1: ' + e.number + ', "' + e.message + '", ' + e.stack);
    //        //            } else {
    //        //                // This most likely means that the folders are there on the file services server, but there is nothing in them.
    //        //                //
    //        //                // Fileservices has an error, so show nothing! We will put a red exclamation pin in the attachments section eventually! - 10-1-17 todd
    //        //                //displayAlertDialog('Fileservices has an error: ' + ' "' + e.message + '"');
    //        //            }
    //        //        }
    //        //        //}
    //        //    },
    //        //    error: function (data, errorCode, errorMessage) {

    //        //        if (errorCode === 'timeout' && errorMessage === 'timeout') {
    //        //            displayAlertDialog('SERVICE UNAVAILABLE. File services is not respondingxcx2. communication timeout is set at ' + ajaxTimeout / 1000 + ' seconds: ' + errorCode + ', ' + errorMessage);
    //        //        } else {

    //        //            console.log('Error in showRequestButtonADMINOnBehalfOfDialog:2: ' + errorCode + ', ' + errorMessage);


    //        //            displayAlertDialog('Error in showRequestButtonADMINOnBehalfOfDialog:2: ' + errorCode + ', ' + errorMessage);
    //        //            // The latest error 1-17-2018 is errorCode:'error' and errorMessage:'Not Found'.
    //        //            // What does this mean? You can replicate this error!
    //        //            // at Url: https://budgetworkflow.com/ios8.html, view an offline (Un-submitted) request, and try to add an attachment.





    //        //        }

    //        //    }
    //        //});

    //    } catch (e) {
    //        console.log('Exception in showRequestButtonADMINOnBehalfOfDialog(): ' + e.message + ', ' + e.stack);
    //        displayAlertDialog('Exception in showRequestButtonADMINOnBehalfOfDialog(): ' + e.message + ', ' + e.stack);
    //    }
    //},
    //hideRequestButtonADMINOnBehalfOfDialog: function (e) {
    //    try {
    //        console.log('In hideRequestButtonADMINOnBehalfOfDialog().');
    //        // debugger;
    //        if (document.getElementById('divWorkflowActionButtonsHoverDetails').style.display != 'none') {
    //            //// This means the dialog is being displayed.
    //            //var isMouseInBox = false;

    //            ////function isMouseInBox(e) {
    //            //var textbox = document.getElementById('divRowHoverDetails');

    //            //    // Box position & sizes
    //            //    var boxX = textbox.offsetLeft;
    //            //    var boxY = textbox.offsetTop;
    //            //    var boxWidth = textbox.offsetWidth;
    //            //    var boxHeight = textbox.offsetHeight;

    //            //    // Mouse position comes from the 'mousemove' event
    //            //    var mouseX = e.pageX;
    //            //    var mouseY = e.pageY;
    //            //    if (mouseX >= boxX && mouseX <= boxX + boxWidth) {
    //            //        if (mouseY >= boxY && mouseY <= boxY + boxHeight) {
    //            //            // Mouse is in the box
    //            //            isMouseInBox = true;
    //            //            //// debugger;
    //            //        }
    //            //    }
    //            ////}


    //            //    if (isMouseInBox == false) {
    //            $('#divWorkflowActionButtonsHoverDetails').dialog('close');
    //            //}
    //        }
    //    } catch (e) {
    //        console.log('Exception in hideRequestButtonADMINOnBehalfOfDialog(): ' + e.message + ', ' + e.stack);
    //    }
    //},

    //loadWorkflowsAndCurrentWorkflow2_old: function (bwRequestTypeId) {
    //    try {
    //        console.log('In loadWorkflowsAndCurrentWorkflow2().');
    //        var thiz = this;

    //        var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
    //        var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');

    //        return new Promise(function (resolve, reject) {
    //            console.log('In loadWorkflowsAndCurrentWorkflow2().');
    //            $.ajax({
    //                url: thiz.options.operationUriPrefix + "odata/OrgRolesConfiguration/" + workflowAppId + "/true", //?$filter=Active eq true", //('eCarWorkflow')", // Get the eCarWorkflow json/definition from the database.
    //                dataType: "json",
    //                contentType: "application/json",
    //                type: "Get",
    //                timeout: thiz.options.ajaxTimeout
    //            }).done(function (result1) {
    //                $.ajax({
    //                    url: thiz.options.operationUriPrefix + "odata/WorkflowConfiguration2/" + tenantId + '/' + workflowAppId + '/' + 'all',
    //                    dataType: "json",
    //                    contentType: "application/json",
    //                    type: "Get",
    //                    timeout: thiz.options.ajaxTimeout
    //                }).done(function (result) {
    //                    try {
    //                        //// debugger;
    //                        thiz.options.CurrentWorkflow = null; // 1-7-2022

    //                        thiz.options.Checklists = result1.Checklists; // This web service call returns extra stuff. Optimize this int he future.
    //                        thiz.options.Workflows = result.value; // Loads this so all workflows are available at any time without going back to the server.
    //                        for (var i = 0; i < thiz.options.Workflows.length; i++) {
    //                            // debugger;
    //                            if (thiz.options.Workflows[i].bwRequestTypeId == bwRequestTypeId && thiz.options.Workflows[i].bwWorkflowActive == true) {
    //                                thiz.options.CurrentWorkflow = thiz.options.Workflows[i];
    //                                console.log('In loadWorkflowsAndCurrentWorkflow2(). Setting thiz.option.CurrentWorkflow for bwRequestTypeId: ' + bwRequestTypeId + ' xcx111774-6');
    //                                //alert('In loadWorkflowsAndCurrentWorkflow2(). Setting thiz.option.CurrentWorkflow for bwRequestTypeId: ' + bwRequestTypeId + ' xcx111774-6');
    //                                break;
    //                            }
    //                        }



    //                        // 1-7-2022
    //                        if (!thiz.options.CurrentWorkflow) {
    //                            // debugger;
    //                            console.log('In loadWorkflowsAndCurrentWorkflow2().No workflow found for bwRequestTypeId: ' + bwRequestTypeId);
    //                            displayAlertDialog('In loadWorkflowsAndCurrentWorkflow2().No workflow found for bwRequestTypeId: ' + bwRequestTypeId);

    //                            // debugger;
    //                            //try {
    //                            //thiz.options.CurrentWorkflow.Workflow = JSON.parse(thiz.options.CurrentWorkflow.bwWorkflowJson);
    //                            //thiz.options.CurrentWorkflow.DraftWorkflow = JSON.parse(thiz.options.CurrentWorkflow.bwWorkflowJson); // Creating "DraftWorkflow" so we can tell if the workflow has been changed or not, and then inform the user that changes need to be published.
    //                            //} catch (e) {
    //                            //}
    //                            //if (result.value.length > 1) {
    //                            //    thiz.options.MultipleWorkflowsEnabled = true; // The user has at some point decided to have a workflow for each request type.
    //                            //} else {
    //                            //    thiz.options.MultipleWorkflowsEnabled = false;
    //                            //}
    //                            //thiz.renderWorkflowEditor1(assignmentRowChanged_ElementId); // Render the Workflow Editor. 
    //                            //}
    //                            //// debugger;
    //                            var results = {
    //                                bwRequestType: bwRequestTypeId, //thiz.options.CurrentWorkflow.bwRequestType,
    //                                bwWorkflowId: undefined //thiz.options.CurrentWorkflow.bwWorkflowId
    //                            }
    //                            resolve(results);

    //                        } else {
    //                            // debugger;
    //                            console.log('');
    //                            console.log('In loadWorkflowsAndCurrentWorkflow2().Workflow found for bwRequestTypeId: ' + bwRequestTypeId);
    //                            //displayAlertDialog('In loadWorkflowsAndCurrentWorkflow2().Workflow found for bwRequestTypeId: ' + bwRequestTypeId);

    //                            var results = {
    //                                bwRequestType: bwRequestTypeId, //thiz.options.CurrentWorkflow.bwRequestType,
    //                                bwWorkflowId: thiz.options.CurrentWorkflow.bwWorkflowId
    //                            }
    //                            resolve(results);

    //                        }

    //                        //if (thiz.options.CurrentWorkflow == null) {
    //                        //    thiz.renderWorkflowEditor1();
    //                        //} else {


    //                    } catch (e) {
    //                        console.log('Exception in loadWorkflowsAndCurrentWorkflow2.Get:1: ' + e.message + ', ' + e.stack);
    //                        displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2.Get:1: ' + e.message + ', ' + e.stack);
    //                        resolve();
    //                    }
    //                }).fail(function (data) {
    //                    console.log('In xx1.fail(): ' + JSON.stringify(data));
    //                    var msg;
    //                    if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
    //                        msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
    //                    } else {
    //                        msg = JSON.stringify(data);
    //                    }
    //                    console.log('Exception in loadWorkflowsAndCurrentWorkflow2.Get:2-2: ' + JSON.stringify(data));
    //                    displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2.Get:2-2: ' + msg); //+ error.message.value + ' ' + error.innererror.message);

    //                    //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
    //                    //var error = JSON.parse(data.responseText)["odata.error"];
    //                    //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
    //                    resolve();
    //                });
    //            }).fail(function (data) {
    //                //lpSpinner.Hide();
    //                // debugger;
    //                console.log('In xx.fail(): ' + JSON.stringify(data));
    //                var msg;
    //                if (JSON.stringify(data).indexOf('The specified URL cannot be found.') > -1) {
    //                    msg = 'There has been an error contacting the server. A firewall or network appliance may be interrupting this traffic.';
    //                } else {
    //                    msg = JSON.stringify(data);
    //                }
    //                console.log('Exception in loadWorkflowsAndCurrentWorkflow2.Get:2-1: ' + JSON.stringify(data));
    //                displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2.Get:2-1: ' + msg); //+ error.message.value + ' ' + error.innererror.message);

    //                //console.log('Fail in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + JSON.stringify(data));
    //                //var error = JSON.parse(data.responseText)["odata.error"];
    //                //alert('Exception in CarForm3.aspx.populateSpendForecastNotReadOnly().spendForecastItems.update: ' + error.message.value + ' ' + error.innererror.message); // + ', EntityValidationErrors: ' + data.EntityValidationErrors);
    //            });
    //        });
    //    } catch (e) {
    //        console.log('Exception in loadWorkflowsAndCurrentWorkflow2(): ' + e.message + ', ' + e.stack);
    //        displayAlertDialog('Exception in loadWorkflowsAndCurrentWorkflow2(): ' + e.message + ', ' + e.stack);
    //    }
    //},


    //renderTheOrgBreadcrumb: function (json, orgId, requestDialogId) {
    //    try {
    //        console.log('In renderTheOrgBreadcrumb(): orgId: ' + orgId)
    //        var d1, g1, e1, l1;
    //        var orgName = '';
    //        if (orgId == json.Global.Id) {
    //            d1 = 'root';
    //            g1 = undefined;
    //            e1 = undefined;
    //            l1 = undefined;
    //        } else {
    //            for (var d = 0; d < json.Global.Divisions.Items.length; d++) {
    //                if (orgId == json.Global.Divisions.Items[d].Id) {
    //                    d1 = d;
    //                    g1 = undefined;
    //                    e1 = undefined;
    //                    l1 = undefined;
    //                    break;
    //                }
    //                for (var g = 0; g < json.Global.Divisions.Items[d].Groups.Items.length; g++) {
    //                    if (orgId == json.Global.Divisions.Items[d].Groups.Items[g].Id) {
    //                        d1 = d;
    //                        g1 = g;
    //                        e1 = undefined;
    //                        l1 = undefined;
    //                        break;
    //                    }
    //                    for (var e = 0; e < json.Global.Divisions.Items[d].Groups.Items[g].LegalEntities.Items.length; e++) {
    //                        if (orgId == json.Global.Divisions.Items[d].Groups.Items[g].LegalEntities.Items[e].Id) {
    //                            d1 = d;
    //                            g1 = g;
    //                            e1 = e;
    //                            l1 = undefined;
    //                            break;
    //                        }
    //                        for (var l = 0; l < json.Global.Divisions.Items[d].Groups.Items[g].LegalEntities.Items[e].Locations.Items.length; l++) {
    //                            if (orgId == json.Global.Divisions.Items[d].Groups.Items[g].LegalEntities.Items[e].Locations.Items[l].Id) {
    //                                d1 = d;
    //                                g1 = g;
    //                                e1 = e;
    //                                l1 = l;
    //                                break;
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }

    //        var roles, orgId, orgName, orgPath, orgPathClickable;

    //        var divisionIndex = d1;
    //        var groupIndex = g1;
    //        var entityIndex = e1;
    //        var locationIndex = l1;
    //        //// debugger;
    //        if ((locationIndex || locationIndex > -1) && locationIndex != 'undefined') {
    //            roles = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Locations.Items[locationIndex].Roles;
    //            orgId = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Locations.Items[locationIndex].Id;
    //            orgName = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Locations.Items[locationIndex].Name;
    //            orgPath = json.Global.Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Locations.Items[locationIndex].Name;
    //            orgPathClickable = '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + 'root' + '\');">' + json.Global.Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\', \'' + groupIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\', \'' + groupIndex + '\', \'' + entityIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\', \'' + groupIndex + '\', \'' + entityIndex + '\', \'' + locationIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Locations.Items[locationIndex].Name + '</span>';
    //        } else if ((entityIndex || entityIndex > -1) && entityIndex != 'undefined') {
    //            roles = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Roles;
    //            orgId = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Id;
    //            orgName = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Name;
    //            orgPath = json.Global.Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Name;
    //            orgPathClickable = '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + 'root' + '\');">' + json.Global.Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\', \'' + groupIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name + '</span>' + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].LegalEntities.Items[entityIndex].Name;
    //        } else if ((groupIndex || groupIndex > -1) && groupIndex != 'undefined') {
    //            roles = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Roles;
    //            orgId = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Id;
    //            orgName = json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name;
    //            orgPath = json.Global.Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name;
    //            orgPathClickable = '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + 'root' + '\');">' + json.Global.Name + '</span>' + ' > ' + '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + divisionIndex + '\');">' + json.Global.Divisions.Items[divisionIndex].Name + '</span>' + ' > ' + json.Global.Divisions.Items[divisionIndex].Groups.Items[groupIndex].Name;
    //        } else if ((divisionIndex || divisionIndex > -1) && divisionIndex != 'undefined') {
    //            if (divisionIndex == 'root') {
    //                roles = json.Global.Roles;
    //                orgId = json.Global.Id;
    //                orgName = json.Global.Name;
    //                orgPath = json.Global.Name;
    //                //orgPathClickable = json.Global.Name;
    //                //// debugger;
    //                orgPathClickable = '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + 'root' + '\');">' + json.Global.Name + '</span>';

    //            } else {
    //                roles = json.Global.Divisions.Items[divisionIndex].Roles;
    //                orgId = json.Global.Divisions.Items[divisionIndex].Id;
    //                orgName = json.Global.Divisions.Items[divisionIndex].Name;
    //                orgPath = json.Global.Name + ' > ' + json.Global.Divisions.Items[divisionIndex].Name;
    //                orgPathClickable = '<span style="cursor:pointer;" onclick="$(\'.bwOrganizationEditor\').bwOrganizationEditor(\'displayOrgRoleEditorInACircle\', true, \'' + 'root' + '\');">' + json.Global.Name + '</span>' + ' > ' + json.Global.Divisions.Items[divisionIndex].Name;
    //            }
    //        } else {
    //            //// debugger;
    //            alert('Error: Unexpected parameter bwRequest.renderTheOrgBreadcrumb(). divisionIndex: ' + divisionIndex + ', groupIndex: ' + groupIndex + ', entityIndex: ' + entityIndex + ', locationIndex: ' + locationIndex);
    //        }
    //        //// debugger;
    //        $('#' + requestDialogId).find('#divPageContent1_requestOrgClickableBreadcrumb')[0].innerHTML = orgPathClickable;
    //        //// debugger;
    //    } catch (e) {
    //        console.log('Exception in bwRequest.renderTheOrgBreadcrumb(): ' + e.message + ', ' + e.stack);
    //    }
    //},

    //renderChecklistReadOnly_old: function (bwBudgetRequestId, bwChecklistTemplatesId) { //, bwParticipantId) {
    //    return new Promise(function (resolve, reject) {
    //        try {
    //            //
    //            // ToDo: >>>>>>>>>>>>>> This checklist should be marked read-only somehow, so that the renderChecklist method knows to only render it read-only. 
    //            //
    //            console.log('In renderChecklistReadOnly. bwChecklistTemplatesId: ' + bwChecklistTemplatesId + ', bwBudgetRequestId: ' + bwBudgetRequestId); // + ', bwParticipantId: ' + bwParticipantId);

    //            var tenantId = $('.bwAuthentication').bwAuthentication('option', 'tenantId');
    //            var workflowAppId = $('.bwAuthentication').bwAuthentication('option', 'workflowAppId');
    //            var participantId = $('.bwAuthentication').bwAuthentication('option', 'participantId');
    //            //var participantEmail = $('.bwAuthentication').bwAuthentication('option', 'participantEmail');
    //            //var participantFriendlyName = $('.bwAuthentication').bwAuthentication('option', 'participantFriendlyName');

    //            // We hit the web service because it could have a concurrency issue perhaps.
    //            var operationUri = webserviceurl + "/bwbudgetrequests/" + tenantId + '/' + workflowAppId + '/' + bwBudgetRequestId + '/' + participantId; // CHANGED ADDED tenantId, workflowAppId to the webservice call 7-10-2020
    //            $.ajax({
    //                url: operationUri,
    //                method: "GET",
    //                headers: {
    //                    "Accept": "application/json; odata=verbose"
    //                },
    //                success: function (brData) {
    //                    try {
    //                        //// debugger; // find the fiscal year!!!<<<<<<<<<<<<<<<<<<<wait forget that it will be with the bwRequestJson
    //                        //thiz.options.store.FiscalYear = xx;
    //                        // Load our json.
    //                        // debugger; // 12-8-2021
    //                        if (brData == 'PERMISSION DENIED') {
    //                            alert(brData);
    //                        } else if (!brData.BudgetRequests[0].bwRequestJson || brData.BudgetRequests[0].bwRequestJson == '') {
    //                            //html += 'INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.';
    //                            alert('INVALID bwRequestJson RETURNED. THIS PROCESS CANNOT CONTINUE.');
    //                            reject();
    //                        } else {
    //                            //thiz.options.store = JSON.parse(brData.BudgetRequests[0].bwRequestJson);
    //                            // Display the form.
    //                            //thiz.renderRequestFullFormOnline();

    //                            var checklist
    //                            var request = JSON.parse(brData.BudgetRequests[0].bwRequestJson);
    //                            if (request.Checklists) {
    //                                var checklists = JSON.parse(brData.BudgetRequests[0].bwRequestJson).Checklists;
    //                                for (var j = 0; j < checklists.length; j++) {
    //                                    checklist = JSON.parse(checklists[j]);
    //                                    if (checklist.bwChecklistTemplatesId == bwChecklistTemplatesId) {
    //                                        // we found it.
    //                                        //// debugger;
    //                                        break;
    //                                    }
    //                                }
    //                            }
    //                            if (!checklist) {
    //                                alert('ERROR: Could not find checklist!');
    //                                //html += 'ERROR: Could not find checklist!';
    //                                reject();
    //                            } else {
    //                                // Render the json.
    //                                //// debugger;
    //                                var html = '';
    //                                html += '<table class="xdFormLayout" style="width:100%;BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 15px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px">';
    //                                html += '<tr>';
    //                                html += '  <td>';
    //                                html += '    <h2>' + checklist.Title + '</h2>';
    //                                //html += '    <span class="printButton" title="print" onclick="cmdPrintForm();">&#x1f5a8;</span>';
    //                                //html += '    <br />';

    //                                //// debugger;
    //                                //alert('checklist xcx34657: ' + JSON.stringify(checklist));
    //                                //console.log('checklist xcx34657: ' + JSON.stringify(checklist));
    //                                html += '    <span style="color:tomato;text-decoration:underline;font-style:italic;font-size:9pt;">This checklist was completed by ' + checklist.CreatedByEmail + ' on ' + formatDateFromBW(checklist.Created) + '</span>';



    //                                html += '    <br />';
    //                                html += '    <br />';
    //                                html += '<span onclick="$(\'.bwRequest\').bwRequest(\'RequestARevisionToThisChecklist\', \'false\', \'\');" style="font-size:9pt;" title="The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!">';
    //                                html += '<img width="11" height="11" style="cursor:pointer;vertical-align:top;" alt="" src="/images/red-dot.png">';
    //                                html += '&nbsp;The Checklist has been updated. Do you wish to request a revision before this step is completed? and still in this step!</span>';
    //                                html += '    <br />';
    //                                html += '    <br />';
    //                                for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
    //                                    //// debugger;
    //                                    if (checklist.ChecklistTemplateRow[i].TitleSection && checklist.ChecklistTemplateRow[i].TitleSection != '<br />') {
    //                                        html += checklist.ChecklistTemplateRow[i].TitleSection;
    //                                    }
    //                                }
    //                                for (var i = 0; i < checklist.ChecklistTemplateRow.length; i++) {
    //                                    if (checklist.ChecklistTemplateRow[i].hasOwnProperty('TitleSection')) {
    //                                        // do nothing
    //                                    } else if (checklist.ChecklistTemplateRow[i].hasOwnProperty('ChecklistItem')) {
    //                                        html += '<table style="width:50%;">';
    //                                        html += '<tr>';

    //                                        html += '   <td style="width:95%;text-align:left;color:black;" class="bwSliderTitleCell">';
    //                                        var question = checklist.ChecklistTemplateRow[i].ChecklistItem.Question.trim();
    //                                        var lastCharacter = question.charAt(question.length - 1);
    //                                        if (lastCharacter == '?') {
    //                                            html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>';
    //                                        } else {
    //                                            html += '       <span id="questiontext_' + i + '" class="bwQuestionText">' + checklist.ChecklistTemplateRow[i].ChecklistItem.Question + '</span>:';
    //                                        }
    //                                        html += '   </td>';
    //                                        html += '   <td style="width:5%;" class="bwChartCalculatorLightCurrencyTableCell">';
    //                                        html += '       <label for="configurationBehaviorRequireStartEndDatesSlider2"></label>';
    //                                        if (checklist.ChecklistTemplateRow[i].ChecklistItem["Checked"] == true) {
    //                                            html += '<span style="white-space:nowrap;"><input disabled="disabled" type="checkbox" class="bwQuestionCheckbox" id="questioncheckbox_' + i + '" checked="checked" />&nbsp;Yes</span>'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
    //                                        } else {
    //                                            html += '<span style="white-space:nowrap;"><input disabled="disabled" type="checkbox" class="bwQuestionCheckbox" id="questioncheckbox_' + i + '" />&nbsp;No</span>'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
    //                                        }
    //                                        //html += '<input disabled="disabled" type="checkbox" id="questioncheckbox_' + i + '" />'; //name="configurationBehaviorRequireStartEndDatesSlider2" id="configurationBehaviorRequireStartEndDatesSlider2" />';
    //                                        html += '   </td>';

    //                                        html += '</tr>';
    //                                        html += '</table>';
    //                                    } else {
    //                                        html += 'Unrecognized json attribute: ' + checklist.ChecklistTemplateRow[i];
    //                                        alert('Unrecognized json attribute: ' + checklist.ChecklistTemplateRow[i]);
    //                                    }

    //                                }
    //                                html += '  </td>';
    //                                html += '</tr>';
    //                                html += '</table>';
    //                                resolve(html);
    //                            }
    //                        }

    //                    } catch (e) {
    //                        console.log('Exception in renderChecklistReadOnly():1: ' + e.message + ', ' + e.stack);
    //                        alert('Exception in renderChecklistReadOnly():1: ' + e.message + ', ' + e.stack);
    //                        reject();
    //                    }
    //                },
    //                error: function (data) {
    //                    //lpSpinner.Hide();
    //                    //var error = JSON.parse(data.responseText)["odata.error"];
    //                    var errormsg = 'Error in renderChecklistReadOnly: ' + error.message.value;

    //                    alert(errormsg);

    //                    //if (error.innererror.message) errormsg += ' ' + error.innererror.message;
    //                    //if (error.innererror.internalexception.message) errormsg += ' ' + error.innererror.internalexception.message;
    //                    //deferred.reject("Data Loading Error : " + errormsg);
    //                    reject();
    //                }
    //            });
    //        } catch (e) {
    //            console.log('Exception in renderChecklistReadOnly():2: ' + e.message + ', ' + e.stack);
    //            alert('Exception in renderChecklistReadOnly():2: ' + e.message + ', ' + e.stack);
    //            reject();
    //        }
    //    });
    //},


});