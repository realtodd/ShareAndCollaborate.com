'use strict';

var ajaxTimeout = 3000; //2000; //1500;

var Platform = 'IOS8'; //  This is used to tailor things such as how the attachments section functions, and for date pickers, number fields, etc. This lets us have a single api but have it work for all devices and platforms.
var viewsFolderName = 'viewsIos8'; // Since we are using the variable above, we could probably get rid of this but we will leave it this way for now.

var iOSApp = ''; // This gets set from the iOS app to 'YES'. We need to know this when launching media file attachments.

//var voiceMemoFilePath = '';

var errors = '';
var connectionTimerObject;
//var errors = []; // This is used by "WriteToErrorLog()". When an error cannot be written it will try at a later time when we have communication with the server.
//errors = new Array();

var invitationAlreadyAccepted = false; // This solves the problem when the invitation parameter is in the query string.


var tempCloseOutXml;

var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

//var googleOAuth2ClientId = '327984438236-lcg6psf878672cg6j4eag8erjp9cnj9d.apps.googleusercontent.com'; // This is for my.budgetworkflow.com
//var googleOAuth2ClientId = '327984438236-m3nh6limbii1l4cia8dt2ubksna2frl8.apps.googleusercontent.com'; // This is for preview.budgetworkflow.com
//var googleOAuth2ClientId = '327984438236-5ipdv3eh1hnnss4mbcgofdrmlgf2askr.apps.googleusercontent.com'; // This is for localhost:2181
var googleOAuth2ClientId = '327984438236-gka01b83peci6bd8oue6o15m8c9k5jpb.apps.googleusercontent.com'; // This is for budgetrequests.com


//var globalUrlPrefix = 'http://';
var globalUrlPrefix = 'https://';

//var globalUrl = 'my.budgetworkflow.com';
//var globalUrlForWebServices = 'my.budgetworkflow.com';
//var globalUrl = 'preview.budgetworkflow.com';
//var globalUrlForWebServices = 'preview.budgetworkflow.com';
//var globalUrl = 'localhost:2181';
//var globalUrlForWebServices = 'localhost:8080';

var globalUrl = 'budgetrequests.com';
var globalUrlForWebServices = 'budgetrequests.com';

//var globalUrl = 'cdn.budgetrequests.local:44310';
//var globalUrlForWebServices = 'cdn.budgetrequests.local:8080';

var attachmentsFolderName = "";
var tenantId;

var globalArchiveFilter;

// Configuration values.spanLicenseStatus


var globalLicenses = []; // Used throughout.
//globalLicenses = new Array();
//var tmpLicense = new Array(5);
//tmpLicense[0] = 'gold';
//tmpLicense[1] = 'Gold';
//tmpLicense[2] = '665f8489-937d-439c-939a-5e27b47d08d7';
//tmpLicense[3] = '2016-6-16T4:44:32'; // This is just temporary to provide a date.
//tmpLicense[4] = 'July 1, 2016';
//globalLicenses.push(tmpLicense);
//// The following is the EFFECTIVE STATUS OF THE LICENSING!!! This is determined from what licenses have been assigned to the workflow.
//var gWorkflowLicenseStatus = 'bronze'; // basic, bronze, silver, gold. THIS IS THE FLAG WE ARE USING THROUGHOUT TO TURN ON/OFF FUNCTIONALITY.

//var gWorkflowLicenseStatus = 'basic';
var gWorkflowLicenseStatus = 'gold';


var tipsDisplayOn = false; // BwParticipant.bwTipsDisplayOn
var displayInvitationsOnHomePageDisplayOn = true;

var newBudgetRequestManagerTitle;

var bwLastSelectedArchiveScreenRequestType;
var bwLastSelectedNewRequestType;

var requireStartEndDates;
var requireRequestDetails;
var enableNewRequestAttachments;
var enableNewRequestBarcodeAttachments;
var quotingEnabled;
var closeoutsEnabled;
var capitalAndExpenseTrackingEnabled;

var reimbursementRequestsEnabled; // This allows users to file expense reports, for example.

var recurringExpensesEnabled;
var supplementalsEnabled
var strictAuditingEnabled;
//var emailNotificationLevel = 'alldiscourse';
var emailNotificationFrequency; // immediately, aggregatetwicedaily
var emailNotificationTypes; // allnotifications, onlymytasknotifications
var emailAggregatorTwiceDailyFirstTime;
var emailAggregatorTwiceDailySecondTime;
var emailAggregatorTwiceDailyTimezoneDisplayName;

// end Configuration values.

var workflowAppId; // WE SHOULD BE ABLE TO get rid of these variables when we start using the values stored in the home page drop down.
var workflowAppTitle;
//var workflowAppRole; 
var bwApprovalLevelWorkflowToken; // global set in displayForm_DisplayArBasedOnWorkflowStatus 

// from the ar.js
var filename;

var hideLoggedInUserDropDownFirstClickTracker;

var invitationUserId;

var participantId;
var participantLogonType;
var participantLogonTypeUserId;
var participantFriendlyName;
var participantEmail;
//var participantRole;

var webserviceurl;
var appweburl2;
var appweburl;
var hostweburl;
var sliceColors = ['#005391', '#B7CA10', '#3A4A01', '#87C8F0', '#8E1828', '#63A01F', '#F8D033', '#FD5E1D']; // New colors 3-9-15
var sliceHighlightedColors = ['#4C86B2', '#BFCA5B', '#75804D', '#B9DBF0', '#8B3D47', '#A0BC81', '#F4D971', '#EA8E69']; // New colors 3-9-15
// This code ensures reuse of seriescolors if it fais to work: http://stackoverflow.com/questions/13984712/jqplot-pie-donut-chart-seriescolors-array-not-reused-repeated

var GetWorkflowAppConfigurationData9; // Using this for deferred.

var GetWorkflowAppConfigurationData; // Using this for deferred.
var GetUserDetails = []; // Using this for deferred from dislayArInDialog().

// Financial Summary deferred arrays.
var RenderFinancialSummaryForSingleWorkflow; // Using this for deferred.
var GetSingleWorkflowDataForFinancialSummary; // Using this for deferred.

// Participant Summary deferred arrays.
var RenderParticipantSummaryForSingleWorkflow; // Using this for deferred.
var GetPendingBudgetRequestsByFunctionalAreaForSingleWorkflow; // Using this for deferred.
var GetSingleParticipantDataAndRender; // Using this for deferred.

var lastErrorSource = ''; // This is used by handleExceptionWithAlert() so that we don't have duplicate alert pop ups.

var newFunctionalAreaAdditionalApprovers = []; // This gets used for adding a new functional area.

var notifications = []; // This is used for the home page notifications.

// These are used in cmdListAllBudgetRequestsUsingClientDatasetApproach.
var budgetRequests;
var supplementals;
var statusesForTheStatusDropdown;


var BWMData = []; // This is the global data container.
BWMData = new Array(2);
//BWMData
//    [0] - workflowAppConfiguration Details
//       .length - # of connected workflows
//       [index] - The details
//              [0] - ListItemId of the Workflow entry in the AppWebs list
//              [1] - AppWebUrl
//              [2] - Title (eg. Engineering)
//              [3] - Total Yearly Budget
//              [4] - Functional Area Data 
//                 .length - # of Functional Areas
//                 [index]
//                        [0] - ListItemId of the Functional Area
//                        [1] - Title of the Functional Area
//                        [2] - Quote
//                        [3] - Year
//                        [4] - Yearly Budget
//                        [5] - Approver #1
//                           .length - 
//                           [index]
//                                  [0] - Approver1UserId
//                                  [1] - Approver1FriendlyName
//                                  [2] - Approver1Email
//                        [6] - Approver #2
//                           .length - 
//                           [index]
//                                  [0] - Approver2UserId
//                                  [1] - Approver2FriendlyName
//                                  [2] - Approver2Email
//                        [7] - AdditionalApprovers
//                           .length - # of Additional Approvers
//                           [index]
//                                  [0] - ApproverUserId
//                                  [1] - ApproverFriendlyName
//                                  [2] - ApproverEmail
//                                  [3] - BudgetThreshold
//                        [8] - total $ Approved // TODD: OR ACTIVE!!!! WE NEED TO INCLUDE ACTIVE ARs HERE! 8-3-16.
//                        [9] - total $ Submitted
//                        [10] - total $ Rejected
//                        [11] - Overdue Tasks by Functional Area
//                            .length - # of Overdue Tasks
//                            [index] - the details
//                                   [0] - ItemId for the item in the Budget Requests list
//                                   [1] - Title of the workflow task
//                                   [2] - Created Date of the workflow task
//                                   [3] - Modified Date of the workflow task
//                                   [4] - DueDate of the workflow task
//                                   [5] - AuthorId of the workflow task
//                                   [6] - EditorId of the workflow task
//                                   [7] - AssignedToId.results[0] of the workflow task
//                                   [8] - Status of the workflow task
//                                   [9] - PercentComplete of the workflow task
//                        [12] - Budget Requests or Quotes
//                            .length - # of Budget Requests or Quotes
//                            [index]
//                                   [0] - ItemId of the Budget Request
//                                   [1] - Title of the Budget Request
//                                   [2] - ProjectTitle of the Budget Request
//                                   [3] - FunctionalAreaId of the Budget Request
//                                   [4] - BudgetAmount of the Budget Request
//                                   [5] - ARStatus of the Budget Request
//                                   [6] - BudgetWorkflowStatus of the Budget Request
// ----------------------------------NEW!!!!---------------------------------------
//                                   [7] - ARStatusModifiedTimestamp - Needed for the burn rate report.
//                                   [8] - BudgetWorkflowStatusModifiedTimestamp - Needed for the burn rate report.

//                        [13] - IsHidden

//              [5] - bwNewBudgetRequestManagerTitle
//              [6] - bwRequireStartEndDates
//              [7] - bwRequireRequestDetails
//              [8] - bwEnableNewRequestAttachments
//              [9] - bwQuotingEnabled
// THE FOLLOWING HAS BEEN REPLACED!!!!! DOES THIS BREAK ANYTHING????????
//              [5] - Participants
//                 .length - # of participants 
//                 [index]
//                        [0] - UserId
//                        [1] - Email
//                        [2] - Friendly Name (eg. Todd Hiltz)
//                        [3] - Overdue Budget Requests or Quotes
//                           .length - # of Budget Requests or Quotes
//                           [index]
//                                  [0] - ItemId of the Budget Request
//                                  [1] - Title of the Budget Request
//                                  [2] - ProjectTitle of the Budget Request
//                                  [3] - FunctionalAreaId of the Budget Request
//                                  [4] - BudgetAmount of the Budget Request
//                                  [5] - ARStatus of the Budget Request
//                                  [6] - BudgetWorkflowStatus of the Budget Request
//    [1] - Functional Area Years (these are used to populate the year drop down)
//       [0] - functionalAreaYearsForBudgetRequests
//       [1] - functionalAreaYerasForQuotes

$(document).ready(function () {
    try {
        $.ajaxSetup({
            cache: false
        });
        //var strUrl = window.location.href;

        // Force https!!
        //if (window.location.protocol != "https:")
        //    window.location.href = "https:" + window.location.href.substring(window.location.protocol.length);

        //displayAlertDialog('yyy');


        // This ties in with the iOS badge alert by updating the title. Also it is nice because it updates the Home screen alerts on a regular basis.
        // I am kind of against things happening "by themselves", but this seems to work really good so far!!
        var intervalTimedCheckForAlertsForIosBadgeUpdateUsingTitle = window.setInterval(timedCheckForAlertsForIosBadgeUpdateUsingTitle, 15000); // 15000 milliseconds is 15 seconds.







        // Assume it is an iPhone, and check if it is an iPad.
        //if (navigator.userAgent.match(/iPad/i)) {
        //    displayAlertDialog('iPad');
        //} else {
        //    displayAlertDialog('iPhone');
        //}

        //document.unload = function (event) {
        //    return 'pagehide!';
        //};

        //window.onunload = function (event) {
        //    return 'window.onunload';
        //};

        webserviceurl = globalUrlPrefix + globalUrlForWebServices + '/_bw';
        appweburl = globalUrlPrefix + globalUrlForWebServices;
        appweburl2 = globalUrlPrefix + globalUrl;

        window.onorientationchange = readDeviceOrientation; // Hook up the event.

        // Most of the querystring stuff that happens is in the renderWelcomeScreen() method. (regarding unsubscribe and viewing AR's from an email link).
        //var participantId = getUrlParams()["participant"];
        ////var unsubscribe = getUrlParams()["unsubscribe"];
        ////var requestId = getUrlParams()["request"];
        //if (participantId) {

        //    initializeTheLogonForParticipantIdAndDisplayUnsubscribePage(participantId);

        //    // } else if (requestId && participantId) {
        //    // This is the url when the user clicks the link from the email to view the budget request.
        //    //displayAlertDialog('The user wants to view the budget request. This functionality will be completed shortly.');

        //    //displayArOnTheHomePage(requestId, participantId);
        //} else {
        // Regular logon.


        // THIS GETS PAST THE LOGON FOR TESTING
        initializeTheLogon();


        //participantLogonType = 'custom';
        //participantLogonTypeUserId = data.id;
        //participantFriendlyName = data.participantFriendlyName;
        //participantEmail = data.participantEmail;


        //initializeTheForm();



        //}
    } catch (e) {
        //displayAlertDialog('Error in ios8.js.document.ready()', e.message);
        displayAlertDialog(e.message);
    }
});

function timedCheckForAlertsForIosBadgeUpdateUsingTitle() {
    // Check if the user is logged in or not before doing this.
    if (participantId.length > 0) {
        renderAlerts();
    }
    //displayAlertDialog('In timedCheckForAlertsForIosBadgeUpdateUsingTitle()');
    //if (participantId) {
    //    var queryData = {
    //        //"bwTenantId": tenantId,
    //        "bwWorkflowAppId": workflowAppId,
    //        "bwParticipantId": participantId
    //    };
    //    var operationUri = webserviceurl + "/bwtasksoutstanding";
    //    $.ajax({
    //        url: operationUri,
    //        type: "DELETE",
    //        contentType: 'application/json',
    //        data: JSON.stringify(queryData), 
    //        success: function (taskData) {

    //            displayAlertDialog('Updating page title with ' + 'My Budgets (' + taskData.length + ')');
    //            // Change the page title to indicate the # of tasks. This will show up in the browser tab and is a cool way to show the user they have alerts.
    //            if (taskData.length > 0) document.title = 'My Budgets (' + taskData.length + ')';
    //            else document.title = 'My Budgets';
    //        },
    //        error: function (data, errorCode, errorMessage) {
    //            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
    //            displayAlertDialog('Error in ios8.js.timedCheckForAlertsForIosBadgeUpdateUsingTitle():1:' + errorCode + ', ' + errorMessage);
    //        }
    //    });
    //}
}

function readDeviceOrientation() {
    // xxxx
    if (Math.abs(window.orientation) === 90) {
        InitializeThePage('Landscape');
    } else {
        InitializeThePage('Portrait');
    }
}

function InitializeThePage(rotation) {
    if (rotation == 'Landscape') {
        //displayAlertDialog('Landscape');
        // This is where we want to regenerate the DOM in Landscape mode!
        document.getElementById('tableTopPageSpacer').style.display = 'none';
        // Need to scroll to top here!!!
        document.body.scrollTop = 0;
        document.body.clientWidth = '100%';

    } else if (rotation == 'Portrait') {
        //displayAlertDialog('Portrait');
        // This is where we want to regenerate the DOM in Portrait mode!
        document.getElementById('tableTopPageSpacer').style.display = 'inline';
        // Need to scroll to top here!!!
        document.body.scrollTop = 0;
        document.body.clientWidth = '100%';

    } else {
        displayAlertDialog('CRITICAL: Error in rotation values.');
    }
}

function sleep(miliseconds) {
    var currentTime = new Date().getTime();

    while (currentTime + miliseconds >= new Date().getTime()) {


    }
}

function checkConnectionAndRemoveAlertDialog() {

    //alert('checkConnectionAndRemoveAlertDialog');
    var item = {
        "Errors": 're-established communication'
    };
    $.ajax({
        url: webserviceurl + "/writearchivederrorstoexceptionlog",
        type: "POST", timeout: ajaxTimeout,
        data: item,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            clearInterval(connectionTimerObject); // Turn off the timer.
            connectionTimerObject = null;
            $("#divAlertDialog").dialog('close'); // Close the existing alert dialog.
            //displayAlertDialog('Reconnected!'); // Display that we are reconnected!
        },
        error: function (data) {
            // alert('ERROR checkConnectionAndRemoveAlertDialog ERROR:' + JSON.stringify(data));
        }
    });
}

function cmdDisplayCommunicationsError() {
    displayAlertDialog('Communications error.');
}

function checkConnectionAndRemoveBlueBarErrorMessage() {

    //alert('checkConnectionAndRemoveAlertDialog');
    var item = {
        "Errors": 're-established communication'
    };
    $.ajax({
        url: webserviceurl + "/writearchivederrorstoexceptionlog",
        type: "POST", timeout: ajaxTimeout,
        data: item,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            clearInterval(connectionTimerObject); // Turn off the timer.
            connectionTimerObject = null;
            //$("#divAlertDialog").dialog('close'); // Close the existing alert dialog.
            //displayAlertDialog('Reconnected!'); // Display that we are reconnected!

            document.getElementById('spanErrorLink').style.display = 'none'; //'none';
            document.getElementById('spanErrorLinkNewRequest').style.display = 'none'; //'none';
            document.getElementById('spanErrorLinkMyStuff').style.display = 'none'; //'none';
            document.getElementById('spanErrorLinkSummary').style.display = 'none'; //'none';
            document.getElementById('spanErrorLinkConfiguration').style.display = 'none'; //'none';
            document.getElementById('spanErrorLinkHelp').style.display = 'none'; //'none';
        },
        error: function (data) {
            // alert('ERROR checkConnectionAndRemoveAlertDialog ERROR:' + JSON.stringify(data));
        }
    });
}

function displayAlertDialog(errorMessage) {

    if (errorMessage) { // Don't do anything if there is no message.
        hideWorkingOnItDialog();

        try {
            WriteToErrorLog('displayAlertDialog()', errorMessage);
        } catch (e) {
            // alert('Error writing to error log in displayAlertDialog: ' + e.message);
        }

        // First we have to check if it is displayed already.
        var isDisplayed = false;
        //if ($("#dialog-divAlertDialog").hasClass("ui-dialog-content") && $("#dialog-divAlertDialog").dialog("isOpen")) {
        if ($("#divAlertDialog").hasClass("ui-dialog-content") && $("#divAlertDialog").dialog("isOpen")) {
            // This first checks that the dialog has been initialized, then it checks if it is open.
            isDisplayed = true;
        }

        if (isDisplayed == false) { // NOTE: This blocks the next alert from showing.
            // First we have to show the dialog box.
            //$("#divAlertDialog").dialog({
            //    modal: true,
            //    resizable: false,
            //    //closeText: "Cancel",
            //    closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //    title: 'Alert',
            //    width: "720",
            //    dialogClass: "no-close", // No close button in the upper right corner.
            //    hide: false,//, // This means when hiding just disappear with no effects.
            //    //buttons: {
            //    //    "Close": function () {
            //    //        $(this).dialog("close");
            //    //    }
            //    //}
            //    open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#divAlertDialog").dialog('close');});} // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            //});
            //$("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            try {
                if (errorMessage.toString().toUpperCase().indexOf("SERVICE UNAVAILABLE") > -1 || errorMessage.toString().toUpperCase().indexOf("BACKEND FETCH FAILED") > -1 || errorMessage.toString().toUpperCase().indexOf("ERROR RENDERING") > -1 || errorMessage.toString().toUpperCase().indexOf("UNDEFINED IS NOT AN OBJECT") > -1 || errorMessage.toString().toUpperCase().indexOf("NULL IS NOT AN OBJECT") > -1) {

                    $("#divAlertDialog").dialog('close'); // Close the existing alert dialog.

                    document.getElementById('spanErrorLink').style.display = 'inline'; //'none';
                    document.getElementById('spanErrorLinkNewRequest').style.display = 'inline'; //'none';
                    document.getElementById('spanErrorLinkMyStuff').style.display = 'inline'; //'none';
                    document.getElementById('spanErrorLinkSummary').style.display = 'inline'; //'none';
                    document.getElementById('spanErrorLinkConfiguration').style.display = 'inline'; //'none';
                    document.getElementById('spanErrorLinkHelp').style.display = 'inline'; //'none';

                    connectionTimerObject = setInterval('checkConnectionAndRemoveBlueBarErrorMessage()', 6000);

                    // This code pops up the modal dialog. I am converting to an Alert! link in the top blue bar because it is less intrusive.
                    //var html = '';
                    //html += 'We apologize! It looks like our servers are unavailable at the moment.';
                    //document.getElementById('spanErrorMessage').innerHTML = html;
                    //// We are hiding this when the renderAlerts() successfully repaint the screen...this means communication has been re-established.
                    //connectionTimerObject = setInterval('checkConnectionAndRemoveAlertDialog()', 6000);
                } else {


                    $("#divAlertDialog").dialog({
                        modal: true,
                        resizable: false,
                        //closeText: "Cancel",
                        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                        title: 'Alert',
                        width: "720",
                        dialogClass: "no-close", // No close button in the upper right corner.
                        hide: false,//, // This means when hiding just disappear with no effects.
                        //buttons: {
                        //    "Close": function () {
                        //        $(this).dialog("close");
                        //    }
                        //}
                        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#divAlertDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                    });
                    $("#divAlertDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                    document.getElementById('spanErrorMessage').innerHTML = errorMessage;

                }
            } catch (e) {
                displayAlertDialog(e.message + ', ' + e.stack);
            }
        }
    }
}

function cmdCloseError() {
    $("#divAlertDialog").dialog('close');
}

function cmdCloseArDialog() {
    $("#ArDialog").dialog('close');
}

//function cmdCloseAttachmentsDialog(tagname) {
//    $(tagname).dialog('close');

//}

function cmdCustomSignUp() {

    // Make sure the other dialogs are closed.
    $('#divCustomLogonDialog').dialog('close');
    //$('#divCustomLogonResetPasswordDialog').dialog('close');
    //$('#divCustomLogonDialog').dialog('close');

    $("#divCustomSignUpDialog").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Sign Up',
        width: "760",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });

    $("#divCustomSignUpDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

}



function cmdCustomLogon() {
    // The user is trying to logon.
    var userEmailAddress = document.getElementById('txtCustomLogonEmail').value;
    var userPassword = document.getElementById('txtCustomLogonPassword').value;
    if (userEmailAddress.trim() == '') {
        displayAlertDialog('Please enter an Email Address before continuing the logon process.');
        document.getElementById('txtCustomLogonEmail').focus();
    } else if (userPassword.trim() == '') {
        displayAlertDialog('Please enter an Password before continuing the logon process.');
        document.getElementById('txtCustomLogonPassword').focus();
    } else {


        //displayAlertDialog('userEmailAddress: ' + userEmailAddress + ' userPassword: ' + userPassword);
        // Ok, lets see if the password is correct.
        var data = [];
        data = {
            userEmailAddress: userEmailAddress,
            userPassword: userPassword
        };
        //displayAlertDialog('webserviceurl:' + webserviceurl);
        var operationUri = webserviceurl + "/bwworkflow/usercustomlogon";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                //displayAlertDialog(data);

                if (data.message != 'The password is correct') {
                    displayAlertDialog(data.message);
                } else {

                    // Cookie!
                    setCookie('customlogonusername', userEmailAddress, 30);
                    setCookie('customlogonpassword', userPassword, 30);

                    participantLogonType = 'custom';
                    participantLogonTypeUserId = data.id;
                    participantFriendlyName = data.participantFriendlyName;
                    participantEmail = data.participantEmail;

                    $("#divCustomLogonDialog").dialog('close'); // Close the sign in dialog.

                    initializeTheForm();
                }
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in ios8.js.cmdCustomLogon().usercustomlogon: ' + errorMessage + ' ' + JSON.stringify(data));

                if (JSON.stringify(data).toUpperCase().indexOf('ERROR 503 SERVICE UNAVAILABLE') > -1) {
                    displayAlertDialog('Our back end database is not responding. Please try again in a few minutes.');
                    WriteToErrorLog('LOGIN FAILURE1!!!!!!!!!!! Error in android.js.cmdCustomLogon().usercustomlogon: ' + operationUri + ', ' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                } else {
                    displayAlertDialog('Error in android.js.cmdCustomLogon().usercustomlogon. Incorrect .js file version: ' + operationUri + ', ' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                    WriteToErrorLog('Error in android.js.cmdCustomLogon().usercustomlogon. Incorrect .js file version: ' + operationUri + ', ' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                }
            }
        });
    }
}

function getANewPasswordViaTextMessage() {

    displayAlertDialog('In getANewPasswordViaTextMessage() this functionality is not complete.COming soon!');


    //var data = [];
    //data = {
    //    //bwParticipantId: participantId,
    //    //bwWorkflowAppId: workflowAppId
    //};
    //var operationUri = webserviceurl + "/getANewPasswordViaTextMessage"; //"/bwworkflow/itemizeparticipantdependencies";
    //$.ajax({
    //    url: operationUri,
    //    type: "POST", timeout: ajaxTimeout,
    //    data: data,
    //    headers: {
    //        "Accept": "application/json; odata=verbose"
    //    },
    //    success: function (data) {

    //    },
    //    error: function (data, errorCode, errorMessage) {
    //        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
    //        displayAlertDialog('Error in ios8.js.getANewPasswordViaTextMessage().xxxx: ' + errorMessage);
    //    }
    //});

}


function cmdDisplayForgottenPasswordDialog() {
    //$("#divCustomLogonDialog").dialog('close');

    $("#divCustomLogonResetPasswordDialog").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Sign Up',
        width: "760",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });

    $("#divCustomLogonResetPasswordDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

    // Cookies for the custom login!
    var username = getCookie('customlogonusername');
    //$('#txtCustomLogonResetPasswordEmail').val(username);
    document.getElementById('txtCustomLogonResetPasswordEmail').value = username;

}

function cmdSendResetPasswordEmail() {
    //displayAlertDialog('cmdSendResetPasswordEmail');
    var userEmailAddress = document.getElementById('txtCustomLogonResetPasswordEmail').value;
    //displayAlertDialog('userEmailAddress: ' + userEmailAddress);

    var data = [];
    data = {
        userEmailAddress: userEmailAddress
    };
    var operationUri = webserviceurl + "/bwworkflow/sendresetpasswordemail";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            if (data.message == 'INVALID EMAIL ADDRESS') {
                displayAlertDialog('This email address is not valid.');
            } else if (data.message == 'SUCCESS') {
                displayAlertDialog('The email has been sent. You should receive it shortly.');
                $("#divCustomLogonResetPasswordDialog").dialog('close'); // Close the dialog.
            } else {
                displayAlertDialog(data.message);
            }
        },
        error: function (data, errorCode, errorMessage) {
            //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in my.js.cmdSendResetPasswordEmail(): ' + errorMessage);
        }
    });

}

function cmdCustomRegistration() {
    // This is where the user creates their new logon!
    // Note: We are using cryptographic salted password hashing in order to prevent storing the passwords.
    var newUserFriendlyName = document.getElementById('txtCustomSignUpFriendlyName').value;
    var newUserEmailAddress = document.getElementById('txtCustomSignUpEmail').value;
    var newUserPassword = document.getElementById('txtCustomSignUpPassword').value;
    if (newUserFriendlyName.trim() == '') {
        displayAlertDialog('Please enter a Name before continuing the registration process.');
        document.getElementById('txtCustomSignUpFriendlyName').focus();
    } else if (newUserEmailAddress.trim() == '') {
        displayAlertDialog('Please enter an Email Address before continuing the registration process.');
        document.getElementById('txtCustomSignUpEmail').focus();
    } else if (newUserPassword.trim() == '') {
        displayAlertDialog('Please enter an Password before continuing the registration process.');
    } else if (newUserPassword.trim().length < 4 || newUserPassword.trim().length > 15) {
        displayAlertDialog('Please enter an Password that is 4-15 characters in length.');
        document.getElementById('txtCustomSignUpPassword').focus();
    } else {
        //displayAlertDialog('Looks good. Proceeding to the next step of the registration process...');
        // This is where we call the registration web service.
        var data = [];
        data = {
            newUserFriendlyName: newUserFriendlyName,
            newUserEmailAddress: newUserEmailAddress,
            newUserPassword: newUserPassword,
            appweburl: appweburl
        };
        var operationUri = webserviceurl + "/bwworkflow/registeranewuser";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data.message == 'This email address is already in use') {
                    displayAlertDialog('This email address is already registered with us. Please enter a different one, or login using the existing credentials.');
                    document.getElementById('txtCustomLogonEmail').focus();
                } else if (data.message == 'SUCCESS') {
                    participantId = data.participant.bwParticipantId;
                    participantFriendlyName = data.participant.bwParticipantFriendlyName;
                    participantEmail = data.participant.bwParticipantEmail;
                    tenantId = data.participant.bwTenantId;
                    workflowAppId = data.participant.bwLastSelectedWorkflowAppId;
                    workflowAppTitle = data.participant.bwWorkflowAppTitle;
                    participantLogonType = 'custom';
                    participantLogonTypeUserId = participantId;

                    emailNotificationFrequency = data.participant.bwEmailNotificationFrequency;
                    emailNotificationTypes = data.participant.bwEmailNotificationTypes;

                    if (data.participant.bwTipsDisplayOn == 'true') tipsDisplayOn = true;
                    else tipsDisplayOn = false;

                    if (data.participant.bwInvitationsOnHomePageDisplayOn == 'true') displayInvitationsOnHomePageDisplayOn = true;
                    else displayInvitationsOnHomePageDisplayOn = false;




                    var inviteeId = '';
                    try {
                        inviteeId = getUrlParams()['invitation'].toString().split('#')[0];
                    } catch (e) {

                    }

                    if (inviteeId != '' && invitationAlreadyAccepted == false) { // USER RECEIVED AN INVITATION.
                        // Get the invitation details. We need the tenant id, the workflow app id, the role, the created by Id (the person who created the invitation) and friendly name.
                        var operationUri = webserviceurl + "/bwinvitations/" + inviteeId;
                        $.ajax({
                            url: operationUri,
                            method: "GET",
                            headers: {
                                "Accept": "application/json; odata=verbose"
                            },
                            success: function (inviteeData) {

                                displayAlertDialog('ACCEPTING INVITATION');
                                // We got rid of the notice below, and just automatically accept the invitation!
                                cmdAcceptInvitation(inviteeId, inviteeData.d.results[0].bwTenantId, inviteeData.d.results[0].bwWorkflowAppId, inviteeData.d.results[0].bwWorkflowAppTitle, inviteeData.d.results[0].bwInvitationParticipantRole);

                                //var html = '';
                                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 2.77em;">Welcome to your Budgeting Social Network</span>';
                                //html += '<br /><br />';
                                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">You were invited by ' + inviteeData.d.results[0].bwInvitationCreatedByFriendlyName + '</span>';
                                //html += '<br /><br />';
                                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><strong>Step 1.</strong> Click here to accept the invitation and start using this budget request system:&nbsp;<input type="button" id="btnAcceptInvitation" onclick="cmdAcceptInvitation(\'' + inviteeId + '\', \'' + inviteeData.d.results[0].bwTenantId + '\', \'' + inviteeData.d.results[0].bwWorkflowAppId + '\', \'' + inviteeData.d.results[0].bwWorkflowAppTitle + '\', \'' + inviteeData.d.results[0].bwInvitationParticipantRole + '\');" value="Join this Budgeting Network" style="cursor:pointer;" ></input></span>';
                                //html += '<br /><br />';
                                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><strong>Step 2.</strong> You will be taken to your Home page, where you can begin creating budget requests and participating in the decision making process.</span>';
                                //html += '<br /><br /><br />';
                                //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><em><a target="_blank" href="http://budgetworkflow.com/support/kb14101">Click here for more information...</a></em></span>';
                                //html += '<br /><br />';
                                //$('#divWelcomeMessage').html(html);
                                //renderAlerts();
                            },
                            error: function (data, errorCode, errorMessage) {
                                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                                displayAlertDialog('Error in ios8.js.cmdCustomRegistration():1:', errorCode + ', ' + errorMessage + ' data:' + data);
                            }
                        });
                    }













                    displayAlertDialog('Your login was created successfully. Enjoy using BudgetRequests.com!');
                    $('#divCustomLogonDialog').dialog('close'); // Close the sign in dialog.
                    $('#divCustomSignUpDialog').dialog('close'); // Close the create your account dialog.
                    initializeTheForm();
                } else {
                    displayAlertDialog(data.message);
                }
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.cmdCustomRegistration().registeranewuser: ' + errorMessage);
            }
        });
    }
}

function renderLeftButtons(leftButtonSectionDiv) {
    var role;
    try {
        var selectedValue = $('#selectHomePageWorkflowAppDropDown option:selected').val();
        role = selectedValue.split('|')[1];
    } catch (e) {
        // If we made it here, (because there is not drop down workflow selector on the home page) there must only be 1 workflow app, which this user is the owner of.
        role = 'owner'; // Todd: We need to look at this again!
    }

    var html = '';
    html += '';
    html += '<table style="width:100%;padding:0 0 0 0;margin:0 0 0 0;">';
    if (role == 'owner') {
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'NewRequestButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divNewRequest\', \'Reports\', \'\');">New Request</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ArchiveButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divArchive\', \'Reports\', \'\');">Archive</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'SummaryButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divSummaryReport\', \'Reports\', \'\');">Activity&nbsp;&nbsp;&nbsp;&nbsp;</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ConfigurationButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Configuration</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    } else if (role == 'archiveviewer') {
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'NewRequestButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divNewRequest\', \'Reports\', \'\');">New Request</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ArchiveButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divArchive\', \'Reports\', \'\');">Archive</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ConfigurationButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Configuration</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    } else if (role == 'reportviewer') {
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'NewRequestButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divNewRequest\', \'Reports\', \'\');">New Request</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ArchiveButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divArchive\', \'Reports\', \'\');">Archive</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'SummaryButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divSummaryReport\', \'Reports\', \'\');">Activity&nbsp;&nbsp;&nbsp;&nbsp;</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ConfigurationButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Configuration</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    } else if (role == 'configurationmanager') {
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'NewRequestButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divNewRequest\', \'Reports\', \'\');">New Request</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ArchiveButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divArchive\', \'Reports\', \'\');">Archive</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'SummaryButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divSummaryReport\', \'Reports\', \'\');">Activity&nbsp;&nbsp;&nbsp;&nbsp;</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ConfigurationButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Configuration</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    } else if (role == 'participant') {
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'NewRequestButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divNewRequest\', \'Reports\', \'\');">New Request</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'ConfigurationButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Configuration</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    } else {
        // It should never reach here!
        displayAlertDialog('Error in renderLeftButtonsForRole(' + role + ')');
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'WelcomeButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');">Home</div>';
        html += '</td>';
        html += '</tr>';
        html += '<tr><td></td></tr>';
        html += '<tr>';
        html += '<td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '<div id="' + leftButtonSectionDiv + 'HelpButton" class="divLeftButtonIos8" onclick="populateStartPageItem(\'divHelp\', \'Reports\', \'\');">Help</div>';
        html += '</td>';
        html += '</tr>';
    }
    html += '</table>';
    document.getElementById('spanLeftButtons').innerHTML = html;

    // Now we have to disable the button for the page we are on at the moment.
    switch (leftButtonSectionDiv) {
        case 'divWelcomePageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'WelcomeButton').className = 'divLeftButtonSelectedIos8';
            break;
        case 'divNewRequestPageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'NewRequestButton').className = 'divLeftButtonSelectedIos8';
            break;
        case 'divArchivePageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'ArchiveButton').className = 'divLeftButtonSelectedIos8';
            break;
        case 'divSummaryPageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'SummaryButton').className = 'divLeftButtonSelectedIos8';
            break;
        case 'divConfigurationPageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'ConfigurationButton').className = 'divLeftButtonSelectedIos8';
            break;
        case 'divHelpPageLeftButtons':
            //
            document.getElementById(leftButtonSectionDiv + 'HelpButton').className = 'divLeftButtonSelectedIos8';
            break;
        default:
            //
            displayAlertDialog('Error in renderLeftButtons(' + leftButtonSectionDiv + ').');
            break;
    }
    //$('#divIos8LeftMenu').dialog('close'); // Close the left menu.
}

function initializeTheLogonForParticipantIdAndDisplayUnsubscribePage(participantId) {
    try {
        // 1. Get the logontype.
        var logontype;
        var operationUri = webserviceurl + "/getparticipantlogontype/" + participantId;
        $.ajax({
            url: operationUri,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                logontype = data[0].bwParticipantLogonType; //JSON.stringify(data); //.bwParticipantLogonType;
                //displayAlertDialog('In initializeTheLogonForParticipantIdAndDisplayUnsubscribePage logontype:' + logontype);

                if (logontype == 'facebook') {
                    //displayAlertDialog('FACEBOOK LOGON TYPE');
                    window.fbAsyncInit = function () {
                        FB.init({
                            appId: '39139756228',
                            cookie: true,  // enable cookies to allow the server to access
                            // the session
                            xfbml: true,  // parse social plugins on this page
                            version: 'v2.2' // use version 2.2
                        });

                        // Now that we've initialized the JavaScript SDK, we call
                        // FB.getLoginStatus().  This function gets the state of the
                        // person visiting this page and can return one of three states to
                        // the callback you provide.  They can be:
                        //
                        // 1. Logged into your app ('connected')
                        // 2. Logged into Facebook, but not your app ('not_authorized')
                        // 3. Not logged into Facebook and can't tell if they are logged into
                        //    your app or not.
                        //
                        // These three cases are handled in the callback function.

                        //FB.getLoginStatus(function (response) {
                        //    facebookStatusChangeCallback(response);
                        //});
                        checkFbLoginState();
                    };
                    // Load the SDK asynchronously
                    (function (d, s, id) {
                        var js, fjs = d.getElementsByTagName(s)[0];
                        if (d.getElementById(id)) return;
                        js = d.createElement(s); js.id = id;
                        js.src = "//connect.facebook.net/en_US/sdk.js";
                        fjs.parentNode.insertBefore(js, fjs);
                    }(document, 'script', 'facebook-jssdk'));
                } else if (logontype == 'microsoft') {
                    //displayAlertDialog('MICROSOFT LOGON TYPE');
                    var uri = window.location.href;
                    var part1 = uri.split('#')[1];
                    var part2 = part1.split('access_token=')[1];
                    var accessToken = part2.split('&')[0];
                    var url = 'https://apis.live.net/v5.0/me?access_token=' + accessToken; //ACCESS_TOKEN';
                    $.ajax({
                        url: url,
                        method: "GET",
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            participantLogonType = 'microsoft';
                            participantLogonTypeUserId = data.id;
                            participantFriendlyName = data.name;
                            //participantEmail = response.email;
                            initializeTheForm();
                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error:' + errorCode + ':' + errorMessage + ':' + JSON.stringify(data));
                            //WriteToErrorLog('Error in bw.assignbudget.js.cmdRejectRequest_AssignBudget()', 'Error accessing the functional areas: ' + errorCode + ', ' + errorMessage);
                        }
                    });
                } else if (logontype == 'google') {



                    var title = 'Google logon...';
                    var unsubscribe = '';
                    try {
                        unsubscribe = getUrlParams()["unsubscribe"].toString().split('#')[0];
                    } catch (e) {
                    }
                    if (unsubscribe != '') {
                        // Include the ability to instantly unsubscribe.
                        var html = '';
                        html += '<hr>It would be better if you can log in prior to completing your email unsubscribe request, but if you prefer to do it now <br />';
                        html += 'then you can <a href="javascript:cmdForceUnsubscribe();">Click here to unsubscribe</a><br /><br />';
                        html += '<hr>';
                        html += '<i>You will receive a confirmation email. We send this out to ensure you have authorized this request.<br /><br />';
                        html += 'We will also send emails to the participants of the workflow so they know you won\'t be participating in the workflows.</i>';

                        title = 'Unsubscribe...';
                        $("#divGoogleLogonButtonUnsubscribeOptions").html(html);
                        $("#divGoogleLogonButtonUnsubscribeOptions").show();
                    }





                    $("#divGoogleLogonButton").dialog({
                        modal: true,
                        resizable: false,
                        closeText: "Cancel",
                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                        title: title, //'Google logon...',
                        width: "650px",
                        dialogClass: "no-close", // No close button in the upper right corner.
                        hide: false//, // This means when hiding just disappear with no effects.
                        //buttons: {
                        //    "Close": function () {
                        //        $(this).dialog("close");
                        //    }
                        //}
                    });
                    var loginFinished = function (authResult) {
                        //displayAlertDialog('logged in1');
                        //if (authResult) {
                        //    displayAlertDialog(authResult);
                        //}
                        //displayAlertDialog('logged in2');
                        gapi.client.load('oauth2', 'v2', function () {
                            //displayAlertDialog('logged in3');
                            gapi.client.oauth2.userinfo.get().execute(function (resp) {
                                //displayAlertDialog('logged in4');
                                participantLogonType = 'google';
                                participantLogonTypeUserId = resp.id;
                                participantFriendlyName = resp.name;
                                participantEmail = resp.email;
                                try {
                                    $("#divGoogleLogonButton").dialog('close');
                                } catch (e) {
                                }
                                //displayAlertDialog('gggg');
                                if (participantLogonTypeUserId) {
                                    initializeTheForm();
                                } else {
                                    // No id was issued, so redirect back to the index page.
                                    window.location = 'index.html';

                                }
                            });
                        });
                    };
                    var options = {
                        'callback': loginFinished,
                        'approvalprompt': 'force',
                        'clientid': googleOAuth2ClientId,
                        'scope': 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email',
                        'requestvisibleactions': 'http://schemas.google.com/CommentActivity http://schemas.google.com/ReviewActivity',
                        'cookiepolicy': 'single_host_origin'
                    };
                    var renderBtn = function () {
                        gapi.signin.render('renderMe', options);
                    }
                    renderBtn();
                }
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('You have no internet connectivity, or the website is not processing requests at this time. Additional information: Error in ios8.js.initializeTheLogonForParticipantIdAndDisplayUnsubscribePage():1:', errorCode + ', ' + errorMessage + ' data:' + data);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.initializeTheLogonForParticipantIdAndDisplayUnsubscribePage():2:', e.message);
    }
}

function cmdTopBarExpandCollapse(anchorToThisSpanTag) {


    WriteToErrorLog('', ''); // This will force archived errors to get written to the error log.



    //displayAlertDialog('This functionality is incomplete.');
    anchorToThisSpanTag = '#' + anchorToThisSpanTag; // Need the hash since we are using jquery to reference the tag.
    // First we have to show the logon dialog box.
    $("#divIos8LeftMenu").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        //title: 'Sign In',
        width: "760px",
        //dialogClass: "no-close", // No close button in the upper right corner.
        dialogClass: "Ios8LeftMenu",
        hide: false,//, // This means when hiding just disappear with no effects.
        position: {
            my: 'left top',
            at: 'left bottom',
            of: $(anchorToThisSpanTag)
        },
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#divIos8LeftMenu").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
    });

    $("#divIos8LeftMenu").dialog().parents(".ui-dialog").css("background-color", "transparent"); // This makes the dialog transparent.

    $("#divIos8LeftMenu").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove(); // This gets rid of the title bar in the dialog.


}

function cmdSecondTopBarExpandCollapse(anchorToThisSpanTag) {
    //displayAlertDialog('This functionality is incomplete.');
    anchorToThisSpanTag = '#' + anchorToThisSpanTag; // Need the hash since we are using jquery to reference the tag.
    // First we have to show the logon dialog box.
    $("#divIos8SecondLeftMenu").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        //title: 'Sign In',
        width: "760px",
        //dialogClass: "no-close", // No close button in the upper right corner.
        dialogClass: "Ios8LeftMenu",
        hide: false,//, // This means when hiding just disappear with no effects.
        position: {
            my: 'left top',
            at: 'left bottom',
            of: $(anchorToThisSpanTag)
        },
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#divIos8SecondLeftMenu").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
    });

    $("#divIos8SecondLeftMenu").dialog().parents(".ui-dialog").css("background-color", "transparent"); // This makes the dialog transparent.

    $("#divIos8SecondLeftMenu").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove(); // This gets rid of the title bar in the dialog.


}

function cmdConfigurationTopBarExpandCollapse(anchorToThisSpanTag) {
    //displayAlertDialog('This functionality is incomplete.');
    anchorToThisSpanTag = '#' + anchorToThisSpanTag; // Need the hash since we are using jquery to reference the tag.
    // First we have to show the logon dialog box.
    $("#divIos8ConfigurationLeftMenu").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        //title: 'Sign In',
        width: "760px",
        //dialogClass: "no-close", // No close button in the upper right corner.
        dialogClass: "Ios8LeftMenu",
        hide: false,//, // This means when hiding just disappear with no effects.
        position: {
            my: 'left top',
            at: 'left bottom',
            of: $(anchorToThisSpanTag)
        },
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#divIos8ConfigurationLeftMenu").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
    });

    $("#divIos8ConfigurationLeftMenu").dialog().parents(".ui-dialog").css("background-color", "transparent"); // This makes the dialog transparent.

    $("#divIos8ConfigurationLeftMenu").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove(); // This gets rid of the title bar in the dialog.


}

//function hideMainMenuDropDown() {
//    //displayAlertDialog('hideLoggedInUserDropDown. hideLoggedInUserDropDownFirstClickTracker=' + hideLoggedInUserDropDownFirstClickTracker);
//    if (hideMainMenuDropDownFirstClickTracker == false) {
//        hideMainMenuDropDownFirstClickTracker = true; // First time around we need to set this so subsequent clicks work ok!
//    } else {
//        $("#divIos8LeftMenu").dialog("close");
//        // Remove the click event.
//        var elem = document.getElementById("divDocumentBody");
//        elem.removeAttribute("click");
//    }
//}

function cmdSignInNow(dialogToClose) {

    // Make sure the other dialogs are closed.
    //$('#divCustomSignUpDialog').dialog('close');
    //$('#divCustomLogonResetPasswordDialog').dialog('close');
    $('#' + dialogToClose).dialog('close');

    $('#divCustomLogonDialog').dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Sign Up',
        width: "760",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });

    $('#divCustomLogonDialog').dialog().parents('.ui-dialog').find('.ui-dialog-titlebar').remove();

    // Cookies for the custom login!
    var username = getCookie('customlogonusername');
    var password = getCookie('customlogonpassword');
    $('#txtCustomLogonEmail').val(username);
    $('#txtCustomLogonPassword').val(password);



    //// https://budgetnet.ca/ios8.html?logontype=custom

    //var logonType = 'signin';
    ////try {
    ////    logonType = getUrlParams()['logontype'].toString().split('#')[0];
    ////    if (logonType = 'createaccount') logonType = ''; // logontype=signin
    ////} catch (e) { }

    //var invitation = '';
    //try {
    //    invitation = getUrlParams()['invitation'].toString().split('#')[0];
    //} catch (e) { }

    //var signInUrl = '';
    //if (logonType != '' && invitation != '') {
    //    signInUrl = globalUrlPrefix + globalUrl + '/ios8.html?logontype=' + logonType + '&invitation=' + invitation;
    //} else if (logonType != '') {
    //    signInUrl = globalUrlPrefix + globalUrl + '/ios8.html?logontype=' + logonType;
    //} else if (invitation != '') {
    //    signInUrl = globalUrlPrefix + globalUrl + '/ios8.html?invitation=' + invitation;
    //} else {
    //    signInUrl = globalUrlPrefix + globalUrl + '/ios8.html';
    //}

    //window.location = signInUrl;

    //var signInDialogUrl = globalUrlPrefix + globalUrl + '/ios8.html?logontype=custom&invitation=' + inviteeId; // https://budgetnet.ca?invitation=02d2f9dd-4be5-4a2c-8e7f-99bdcf7a375d // https://budgetnet.ca/ios8.html?logontype=custom
    //var createYourAccountDialogUrl = globalUrlPrefix + globalUrl + '/ios8.html?logontype=createaccount&invitation=' + inviteeId; // https://budgetnet.ca/ios8.html?logontype=createaccount&invitation=9508967e-ccf3-4ece-a51a-3a7be7c39b34
    //document.getElementById('anchorSignInNowLink').href = signInDialogUrl;


}

function initializeTheLogon() {
    try {

        var activeStateIdentifier = '';
        try {
            activeStateIdentifier = getUrlParams()['ActiveStateIdentifier'].toString().split('#')[0];
        } catch (e) {

        }

        if (activeStateIdentifier != '') {
            //
            // This means the user has already logged in on their android device, and has been passed to the browser on their android.
            // So lets reach out to the web service and get the user details.
            //

            //var operationUri = webserviceurl + "/bwparticipant/" + inviteeId;
            var operationUri = webserviceurl + "/getparticipantdetailsusingactivestateidentifier/" + activeStateIdentifier;



            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {


                    //displayAlertDialog('initializeTheLogon data: ' + JSON.stringify(data));

                    //document.getElementById('spanErrorMessage2').innerHTML = JSON.stringify(data);





                    if (data.d.message == 'FAILED' || data.d.results.length == 0) {

                        var location = globalUrlPrefix + globalUrl + '/android.html?logontype=custom';
                        window.location = location;
                        //var html = '';
                        //html += '<span>';
                        //html += 'This is not a valid session.';
                        //html += '</span>';
                        //html += '<br />';

                        //$('#spanCustomLogonDialogInvitationDescriptionText').html(html);

                        //// First we have to show the logon dialog box.
                        //$("#divCustomLogonDialog").dialog({
                        //    modal: true,
                        //    resizable: false,
                        //    //closeText: "Cancel",
                        //    closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                        //    title: 'Sign In',
                        //    width: "760px",
                        //    dialogClass: "no-close", // No close button in the upper right corner.
                        //    hide: false//, // This means when hiding just disappear with no effects.
                        //    //buttons: {
                        //    //    "Close": function () {
                        //    //        $(this).dialog("close");
                        //    //    }
                        //    //}
                        //});

                        //$("#divCustomLogonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

                    } else {
                        // Display the home screen.

                        participantLogonType = 'custom';
                        participantLogonTypeUserId = data.d.results[0].bwParticipantId;
                        participantFriendlyName = data.d.results[0].bwParticipantFriendlyName;
                        participantEmail = data.d.results[0].bwParticipantEmail;




                        initializeTheForm();
                    }


                },
                error: function (data, errorCode, errorMessage) {
                    //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in my.js.initializeTheLogon():1:' + errorCode + ', ' + errorMessage + ' data:' + JSON.stringify(data));
                }
            });

        } else {

            // First we have to show the logon dialog box.
            $("#divCustomLogonDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                title: 'Sign In',
                width: "760px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false//, // This means when hiding just disappear with no effects.
                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
            });

            $("#divCustomLogonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            // Cookies for the custom login!
            var username = getCookie('customlogonusername');
            var password = getCookie('customlogonpassword');
            $('#txtCustomLogonEmail').val(username);
            $('#txtCustomLogonPassword').val(password);

        }


        //var inviteeId = '';
        //try {
        //    inviteeId = getUrlParams()['invitation'].toString().split('#')[0];
        //} catch (e) {

        //}

        //if (inviteeId != '') {
        //    // This is an invitation! 
        //    // First we have to customize the links on the "Sign In" and "Create your account" modal dialogs.




        //    var operationUri = webserviceurl + "/bwinvitations/" + inviteeId;
        //    $.ajax({
        //        url: operationUri,
        //        method: "GET",
        //        headers: {
        //            "Accept": "application/json; odata=verbose"
        //        },
        //        success: function (data) {
        //            var html = '';

        //            //displayAlertDialog('data: ' + JSON.stringify(data));



        //            if (data.d.message == 'FAILED' || data.d.results.length == 0) {

        //                html += '<span>';
        //                html += 'This is not a valid invitation. It may have expired or been assigned to someone else. However, you can log in and create your own budget request system!';
        //                html += '</span>';
        //                html += '<br />';


        //            } else {
        //                var html = '';
        //                //html += '<table>';
        //                //html += '<tr>';
        //                //html += '<td>';
        //                html += '<span>';
        //                html += 'You have been invited by <strong>' + data.d.results[0].bwInvitationCreatedByFriendlyName + '</strong> to participate in their budget request system <strong>"' + data.d.results[0].bwWorkflowAppTitle + '"</strong>.';
        //                html += '</span>';
        //                html += '<br />';
        //                //html += '<table style="width:90%;text-align:center;">';
        //                //html += '<tr>';
        //                //html += '<td><span id="spanMicrosoftLoginLink" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;white-space:nowrap;"></span></td>';
        //                //html += '<td><span id="spanFacebookLoginLink" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;white-space:nowrap;"></span></td>';
        //                //html += '<td><span id="spanGoogleLoginLink" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;white-space:nowrap;"></span></td>';
        //                //html += '<td><span id="spanCustomLoginLink" style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;white-space:nowrap;"></span></td>';
        //                //html += '<td style="cursor:default;">LinkedIn<sup>coming soon!</sup></td>';
        //                //html += '</tr>';
        //                //html += '</table>';


        //            }

        //            $('#spanCustomSignUpDialogInvitationDescriptionText').html(html);

        //            // First we have to show the logon dialog box.
        //            $("#divCustomSignUpDialog").dialog({
        //                modal: true,
        //                resizable: false,
        //                //closeText: "Cancel",
        //                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        //                title: 'Sign In',
        //                width: "760px",
        //                dialogClass: "no-close", // No close button in the upper right corner.
        //                hide: false//, // This means when hiding just disappear with no effects.
        //                //buttons: {
        //                //    "Close": function () {
        //                //        $(this).dialog("close");
        //                //    }
        //                //}
        //            });

        //            $("#divCustomSignUpDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        //        },
        //        error: function (data, errorCode, errorMessage) {
        //            //handleExceptionWithAlert('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
        //            displayAlertDialog('Error in app.js.renderWelcomePage():1:' + errorCode + ', ' + errorMessage + ' data:' + data);
        //        }
        //    });

        //} else {

        //    // First we have to show the logon dialog box.
        //    $("#divCustomLogonDialog").dialog({
        //        modal: true,
        //        resizable: false,
        //        //closeText: "Cancel",
        //        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        //        title: 'Sign In',
        //        width: "760px",
        //        dialogClass: "no-close", // No close button in the upper right corner.
        //        hide: false//, // This means when hiding just disappear with no effects.
        //        //buttons: {
        //        //    "Close": function () {
        //        //        $(this).dialog("close");
        //        //    }
        //        //}
        //    });

        //    $("#divCustomLogonDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        //    // Cookies for the custom login!
        //    var username = getCookie('customlogonusername');
        //    var password = getCookie('customlogonpassword');
        //    $('#txtCustomLogonEmail').val(username);
        //    $('#txtCustomLogonPassword').val(password);

        //    if (username != '') {
        //        document.getElementById('txtCustomLogonPassword').focus();
        //    }

        //}
    } catch (e) {
        // TODD: PUT THIS BACK!!!!!!!
        displayAlertDialog('There was a problem logging you in. Please try again by clicking one of the logon links below.' + e.message);
        window.location.href = globalUrlPrefix + globalUrl;
    }
}

function loginWithLinkedIn() {
    IN.User.authorize(function () {
        IN.API.Profile('me').fields([
            'firstName',
            'lastName',
            'emailAddress'
        ]).result(function (profiles) {
            var me = profiles.values[0];
            participantLogonType = 'linkedin';
            if (me.hasOwnProperty('firstName')) {
                participantFriendlyName = me.firstName;
            }

            if (me.hasOwnProperty('lastName')) {
                participantFriendlyName += ' ' + me.lastName;
            }

            if (me.hasOwnProperty('emailAddress')) {
                participantEmail = me.emailAddress;
            }
            initializeTheForm();
        });
    });


}

// This function is called when someone finishes with the Login
// Button.  See the onlogin handler attached to it in the sample
// code below.
function checkFbLoginState() {
    //displayAlertDialog('YOU CLICKED THE FACEBOOK ICON');

    // This is used if we do it ont he page load. See http://stackoverflow.com/questions/10883187/facebook-login-button-callback-function
    FB.getLoginStatus(function (response) {
        facebookStatusChangeCallback(response);
    });

    //FB.login(function (response) {
    //    if (response.authResponse) {
    //        displayAlertDialog('Welcome!  Fetching your information.... ');
    //        FB.api('/me', function (response) {
    //            displayAlertDialog('Good to see you, ' + response.name + '.');
    //            participantLogonType = 'facebook';
    //            participantLogonTypeUserId = response.id;
    //            participantFriendlyName = response.name;
    //            participantEmail = response.email;
    //            // The first thing we must do is to check how many tenants this user belongs to.
    //            //renderWelcomeScreen();

    //            //$('#divFacebookLogonButton').dialog('close');

    //            initializeTheForm();
    //        });
    //    } else {
    //        displayAlertDialog('User cancelled login or did not fully authorize.');
    //    }
    //});
}

// This is called with the results from from FB.getLoginStatus().
function facebookStatusChangeCallback(response) {
    //console.log('facebookStatusChangeCallback');
    //console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
        //displayAlertDialog('FB CONNECTED - LOGGED INTO THE APP');
        // Logged into your app and Facebook.
        FB.login(function (response) {
            if (response.authResponse) {
                //displayAlertDialog('Welcome!  Fetching your information.... ');
                FB.api('/me', function (response) {
                    //displayAlertDialog('Good to see you, ' + response.name + '.');
                    participantLogonType = 'facebook';
                    participantLogonTypeUserId = response.id;
                    participantFriendlyName = response.name;
                    participantEmail = response.email;
                    try {
                        $("#divFacebookLogonButton").dialog('close');  // This closes the div dialog which shows the facebook logon button.
                    } catch (e) {

                    }
                    initializeTheForm();
                });
            } else {
                displayAlertDialog('User cancelled login or did not fully authorize.');
            }
        });
    } else if (response.status === 'not_authorized') {
        displayAlertDialog('FB NOT AUTHORIZED - logged into facebook but not the app');
        // The person is logged into Facebook, but not your app.
        //document.getElementById('status').innerHTML = 'Please log into this app.';
    } else {
        //displayAlertDialog('FB ELSE');
        // We need to check if this is an unsubscribe request, and offer the user the option to force the unsubscribe request without logging in.
        var title = 'Facebook logon...';
        var unsubscribe = '';
        try {
            unsubscribe = getUrlParams()["unsubscribe"].toString().split('#')[0];
        } catch (e) {
        }
        if (unsubscribe != '') {
            // Include the ability to instantly unsubscribe.
            var html = '';
            html += '<hr>It would be better if you can log in prior to completing your email unsubscribe request, but if you prefer to do it now <br />';
            html += 'then you can <a href="javascript:cmdForceUnsubscribe();">Click here to unsubscribe</a><br /><br />';
            html += '<hr>';
            html += '<i>You will receive a confirmation email. We send this out to ensure you have authorized this request.<br /><br />';
            html += 'We will also send emails to the participants of the workflow so they know you won\'t be participating in the workflows.</i>';
            html += '';
            title = 'Unsubscribe...';
            $("#divFacebookLogonButtonUnsubscribeOptions").html(html);
            $("#divFacebookLogonButtonUnsubscribeOptions").show();
        }




        $("#divFacebookLogonButton").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: title, //'Facebook logon...',
            width: "650px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
        });
    }
}

function cmdForceUnsubscribe() {
    // This is called when the user doesn't want to log in before unsubscribing.
    displayAlertDialog('This functionality is incomplete. Coming soon! cmdForceUnsubscribe().');

}

function cmdUnsubscribe() {
    // This is called when a user has logged in before unsubscribing.
    //displayAlertDialog('cmdUnsubscribe(). Participant:' + participantId);
    // This needs to call the POST web service, /unsubscribe.
    var unsubscribe = [];
    unsubscribe = {
        participantId: participantId
    };
    var operationUri = webserviceurl + "/unsubscribe";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: unsubscribe,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
            //renderWelcomeScreen();
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdUnsubscribe():1:' + errorMessage + ' ' + JSON.stringify(data));
            //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
        }
    });
}



// Here we run a very simple test of the Graph API after login is
// successful.  See statusChangeCallback() for when this call is made.
//function getUserInformationUsingFacebookAPI() {
//    //displayAlertDialog('getUserInformationUsingFacebookAPI()');

//    FB.api('/me', function (response) {
//        participantLogonType = 'facebook';
//        participantLogonTypeUserId = response.id;
//        participantFriendlyName = response.name;
//        participantEmail = response.email;
//        //fbFriendlyName = response.name;
//        //fbUserIdNumber = response.id;
//        //fbEmail = response.email;
//        //$('#spanLoggedInUser').text(fbFriendlyName);
//        //$('#spanLoggedInUserNewRequestPage').text(fbFriendlyName);
//        //$('#spanLoggedInUserMyStuffPage').text(fbFriendlyName);
//        //$('#spanLoggedInUserSummaryReportPage').text(fbFriendlyName);
//        //$('#spanLoggedInUserConfigurationPage').text(fbFriendlyName);
//        //$('#spanLoggedInUserHelpPage').text(fbFriendlyName);

//        // The first thing we must do is to check how many tenants this user belongs to.
//        //renderWelcomeScreenByCheckingHowManyTenantsThisUserBelongsTo();
//        renderWelcomeScreen();
//    });
//}

function initializeTheForm() {
    // Log the page hit! When a user gets here, we are considering it a new logon.
    try {
        var data = [];
        data = {
            bwTenantId: tenantId,
            bwWorkflowAppId: workflowAppId,
            bwWebsiteTrafficLogUserLogonType: participantLogonType,
            bwWebsiteTrafficLogUserLogonTypeId: participantLogonTypeUserId,
            bwParticipantId: participantId
        };
        var operationUri = webserviceurl + "/logonactivityvisitorcounter";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                //displayAlertDialog(data);
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.initializeTheForm():1:' + errorMessage + ' ' + JSON.stringify(data));
                //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
            }
        });
    } catch (e) {
        // Do nothing, just ignore it!
        displayAlertDialog('Error in ios8.js.initializeTheForm():2:' + e.message);
    }
    //
    try {
        // When a user clicks the back or refresh button, this is the additional message to the "Do you want to leave this page?" dialog.
        // Todd: THIS DOESN'T WORK FOR IOS!!!
        //window.onbeforeunload = function (event) {
        //    return 'You may have to login again.';
        //};

        $('#bwStartPageAccordion').show();

        $('#liWelcome').show();
        $('#liNewRequest').hide();
        $('#liArchive').hide();
        $('#liSummaryReport').hide();
        $('#liConfiguration').hide();
        $('#liHelp').hide();

        var financialOrParticipantSummaryOptions = {
            checked: false, // DEFAULT TO THE FINANCIAL SUMMARY. This fixes an issue when the participant summary is rendered first. The participant summary relies on the financial summary being rendered first.
            show_labels: true,         // Should we show the on and off labels?
            labels_placement: "both",  // Position of the labels: "both", "left" or "right"
            on_label: "<span style='font-size:30pt;'>Participant<br />Summary</span>",            // Text to be displayed when checked
            off_label: "<span style='font-size:30pt;'>Financial<br />Summary</span>",          // Text to be displayed when unchecked
            width: 200,                 // Width of the button in pixels //50
            height: 88,                // Height of the button in pixels //22
            button_width: 96,         // Width of the sliding part in pixels //24
            clear_after: null         // Override the element after which the clearing div should be inserted 
        };
        $("input#financialOrParticipantSummary").switchButton(financialOrParticipantSummaryOptions);

        //setCustomSizesDependingOnTheDevice();

        $('#financialOrParticipantSummary').change(function () {


            //displayAlertDialog('financialOrParticipantSummary.change()');


            if (!$('#financialOrParticipantSummary').is(':checked')) {
                if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                    renderFinancialSummary9(false);
                } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                    renderFinancialSummary9(true);
                } else {
                    displayAlertDialog('budgetRequestsOrQuotes is in an invalid state.');
                }
            } else if ($('#financialOrParticipantSummary').is(':checked')) {
                if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                    renderParticipantSummary(false);
                } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                    renderParticipantSummary(true);
                } else {
                    displayAlertDialog('budgetRequestsOrQuotes is in an invalid state.');
                }
            } else {
                displayAlertDialog('financialOrParticipantSummary is in an invalid state.');
            }
        });

        //setCustomSizesDependingOnTheDevice();

        //populateTheYearDropdown('false');



        //addInLicenseCheck(); // Todd: If you uncomment this line of code, the license check will proceed.


        // Initialize the date pickers.
        //displayAlertDialog('initializeTheForm');
        //$('#dtEstimatedStartDate').datepicker();
        //$('#dtEstimatedEndDate').datepicker();
        // Create a GUID for the attachments folder name.
        attachmentsFolderName = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        //initializePeoplePicker('peoplePicker');
        //populateYear(); 
        //tenantId = '1';

        //var year = new Date().getFullYear().toString();
        var today = new Date();
        var year = today.getFullYear();
        //var year = 2016;
        $("<option value=\"" + year.toString() + "\" selected>" + year.toString() + "</option>").appendTo($('#ddlYear'));


        //GetWorkflowAppConfigurationData9 = $.Deferred();
        //GetWorkflowAppConfigurationData9
        //    .done(function () {
        //        //displayAlertDialog('DONE');
        //        selectArchivePageFilterDropDown_change();
        //        renderLeftButtons('divArchivePageLeftButtons');
        //    })
        //    .fail(function () {
        //        displayAlertDialog('Error in ios8.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
        //    });
        //loadWorkflowAppConfigurationDetails9();



        renderWelcomeScreen();



        //}


    } catch (e) {
        displayAlertDialog('Error in ios8.js.initializeTheForm(): ' + e.message);
    }
}

function formatRequestedCapital_InitBudgetRequestIos8() {
    //var x = formatCurrencyWithoutDollarSign(document.getElementById('dblRequestedCapital').value);
    var x = document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');
    document.getElementById('dblRequestedCapital').value = x;
}

//function formatRequestedCapital_onkeyup() {

//}

function ReassignAParticipantAndReplaceWithNewUser() {
    var justDeleteAlready = true;
    try {
        var newUserFriendlyName = document.getElementById('txtReassignUserTasksDialogUserToReplaceFriendyName').value;
        justDeleteAlready = false;
    } catch (e) {
        // No need to catch, just checking if it exists!
    }
    if (justDeleteAlready == false) {
        // Here we assign the new user.
        var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        if (proceed) {
            cmdDeleteParticipantAndAssignANewUser(userId);
            $(this).dialog("close");
        }
    } else {
        // A new user does not have to be assigned since there are no dependencies.
        var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        if (proceed) {
            cmdDeleteParticipant(userId);
            $(this).dialog("close");
        }
    }
}

function cmdDisplayReassignUserTasksDialog(userId, userFriendlyName, userEmail, currentRole, logonType) {
    try {
        //displayAlertDialog('Re-assigning tasks allows you to continue if someone gets sick, or is just not available to participate at the moment, but you still want to keep them listed here as a participant so that they can create new budget requests and other functionality depending on the role you have assigned to them. If you just want to remove them, click on the trash can to delete them and the tasks will be re-assigned as you specify.\n\nThis functionality is incomplete. Coming soon! cmdDisplayReassignUserTasksDialog().')

        //document.getElementById('txtReassignUserTasksDialogUserToReplaceFriendyName').value = ''; // = ''; // Clear the text box.
        //document.getElementById('txtReassignUserTasksDialogUserToReplaceId').value = '';
        //document.getElementById('txtReassignUserTasksDialogUserToReplaceEmail').value = '';
        $("#ReassignUserTasksDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            //title: 'Reassign ' + userFriendlyName + '\'s tasks in this workflow.',
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Reassign and replace with the new user": {
            //        text: 'Reassign Tasks',
            //        id: 'btnReassignAParticipantAndReplaceWithNewUser',
            //        disabled: 'true',
            //        style: 'font-size:30pt;',
            //        click: function () {
            //            var justDeleteAlready = true;
            //            try {
            //                var newUserFriendlyName = document.getElementById('txtReassignUserTasksDialogUserToReplaceFriendyName').value;
            //                justDeleteAlready = false;
            //            } catch (e) {
            //                // No need to catch, just checking if it exists!
            //            }
            //            if (justDeleteAlready == false) {
            //                // Here we assign the new user.
            //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //                if (proceed) {
            //                    cmdDeleteParticipantAndAssignANewUser(userId);
            //                    $(this).dialog("close");
            //                }
            //            } else {
            //                // A new user does not have to be assigned since there are no dependencies.
            //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //                if (proceed) {
            //                    cmdDeleteParticipant(userId);
            //                    $(this).dialog("close");
            //                }
            //            }
            //        }
            //    },
            //    "Cancel": {
            //        text: 'Cancel',
            //        style: 'font-size:30pt;',
            //        click: function () {
            //            $(this).dialog("close");
            //        }
            //    }
            //},
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () { $("#ReassignUserTasksDialog").dialog('close'); });
                var data = [];
                data = {
                    bwParticipantId: userId,
                    bwWorkflowAppId: workflowAppId
                };
                var operationUri = webserviceurl + "/bwworkflow/itemizeparticipantdependencies"; //removeaparticipant";
                $.ajax({
                    url: operationUri,
                    type: "POST", timeout: ajaxTimeout,
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {
                        try {
                            // Show or hide the replacement user selection box depening if there are any dependencies (tasks or functional areas).
                            if (data.message != 'SUCCESS') {
                                displayAlertDialog(JSON.stringify(data)); // Todd: put a good message here.
                            } else {
                                if (data.NumberOfFunctionalAreas == 0 && data.NumberOfIncompleteTasks == 0 && data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager == 0) {
                                    // There are no dependencies.
                                    var html = '';
                                    html += 'This user has no Tasks, is not an approver for any Functional Areas, and is not a Manager for any Budget Requests.';
                                    //document.getElementById('spanReassignUserTasksDialogUserDependencyDetails').innerHTML = html;
                                    //// Hide the user selection box.
                                    //document.getElementById('spanReassignUserTasksDialogChooseAUserSection').innerHTML = '';
                                    //// Hide the Reassign button. 
                                    //$('#divReassignUserTasksDialogReassignUserButton').style = 'display:none;';
                                    // Hide the user selection box.
                                    document.getElementById('spanReassignUserTasksDialogChooseAUserSection').style.display = 'none';
                                    // Hide the Delete button. 
                                    document.getElementById('spanReassignUserTasksDialogReassignTasksButton').style.display = 'none';
                                    // Hide the "Email me" checkbox. 
                                    document.getElementById('spanReassignUserTasksDialogEmailMessage').style.display = 'none';



                                    // Change the button text.
                                    //document.getElementById('divReassignUserTasksDialogReassignUserButton').innerHTML = 'Reassign ' + userFriendlyName;

                                    //var dialogButtons = $('#ReassignUserTasksDialog').dialog('option', 'buttons');
                                    //$.each(dialogButtons, function (buttonIndex, button) {
                                    //    if (button.id === 'btnReassignUserTasksAndReplaceWithNewUser') {
                                    //        button.text = 'Reassign ' + userFriendlyName;
                                    //        button.disabled = false;
                                    //    }
                                    //})
                                    //$("#ReassignUserTasksDialog").dialog('option', 'buttons', dialogButtons);




                                } else {
                                    // Show the user selection box.
                                    document.getElementById('spanReassignUserTasksDialogChooseAUserSection').style.display = 'inline';
                                    // Show the Delete button. 
                                    document.getElementById('spanReassignUserTasksDialogReassignTasksButton').style.display = 'inline';
                                    // Show the "Email me" checkbox. 
                                    document.getElementById('spanReassignUserTasksDialogEmailMessage').style.display = 'inline';

                                    try {
                                        document.getElementById('txtReassignUserTasksDialogUserToReplaceFriendyName').value = ''; // = ''; // Clear the text box.
                                        document.getElementById('txtReassignUserTasksDialogUserToReplaceId').value = '';
                                        document.getElementById('txtReassignUserTasksDialogUserToReplaceEmail').value = '';
                                    } catch (e) {
                                        displayAlertDialog('Error:' + e.message + e.stack);
                                    }

                                    // There ARE dependencies and we need to assign a replacement user.
                                    var html = '';
                                    html += 'When this users\' tasks are reassigned, the following will need to be reassigned to a new user (alternatively you can go back and change them one at a time):';
                                    html += '<ul>';
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfFunctionalAreas + ' Financial Area(s)</span></li>';
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasks + ' incomplete Task(s)</span></li>';
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager + ' incomplete Budget Request(s) where specified as the Manager</span></li>';
                                    html += '</ul>';
                                    document.getElementById('spanReassignUserTasksDialogUserDependencyDetails').innerHTML = html;
                                    // 
                                    var html = '';
                                    html += 'Select the user to take over these items from <span style="white-space:nowrap;"><i>' + userFriendlyName + ' (' + userEmail + ')</i></span>';
                                    document.getElementById('spanReassignUserTasksDialogUserToReassignFriendlyName').innerHTML = html;

                                    //
                                    var html = '';
                                    html += '<div id="btnReassignUserTasksDialogReassignTasks" class="divSignInButton" onclick="ReassignParticipantResponsibilities(\'' + userId + '\',\'' + userFriendlyName + '\',\'' + userEmail + '\');" style="width:90%;text-align:center;line-height:0.8em;font-weight:bold;word-wrap:break-word;">';
                                    //html += 'Replace ' + userFriendlyName + ' with the new user'; // Got rid of this until we get it to wrap in the div properly.
                                    html += 'Reassign Responsibilities (#)';
                                    html += '</div>';
                                    document.getElementById('spanReassignUserTasksDialogReassignTasksButton').innerHTML = html;

                                    // Change the button text.
                                    //document.getElementById('divReassignUserTasksDialogReassignUserButton').innerHTML = 'Replace ' + userFriendlyName + ' with the new user';

                                    //var dialogButtons = $('#ReassignUserTasksDialog').dialog('option', 'buttons');
                                    //$.each(dialogButtons, function (buttonIndex, button) {
                                    //    if (button.id === 'btnReassignUserTasksAndReplaceWithNewUser') {
                                    //        button.text = 'Replace ' + userFriendlyName + ' with the new user';
                                    //        button.disabled = false;
                                    //        button.style = 'color:red;';
                                    //    }
                                    //})
                                    //$("#ReassignUserTasksDialog").dialog('option', 'buttons', dialogButtons);


                                }
                            }
                        } catch (e) {
                            displayAlertDialog('Error in android.js.cmdDisplayReassignUserTasksDialog():1: ' + e.message + ', ' + e.stack);
                        }
                    },
                    error: function (data, errorCode, errorMessage) {
                        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                        displayAlertDialog('Error in android.js.cmdDisplayReassignUserTasksDialog().itemizeparticipantdependencies: ' + errorMessage);
                    }
                });
            }
        });

        // Hide the title bar.
        $("#ReassignUserTasksDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        // Set the title.
        document.getElementById('spanReassignUserTasksDialogTitle').innerHTML = 'Reassign ' + userFriendlyName + '\'s responsibilities in this workflow.';


    } catch (e) {
        displayAlertDialog('Error in android.js.cmdDisplayReassignUserTasksDialog():3: ' + e.message + ', ' + e.stack);

    }
}


function cmdDisplayChangeUserRoleDialog(userId, userFriendlyName, userEmail, currentRole, logonType) {
    $("#ChangeUserRoleDialog").dialog({
        modal: true,
        resizable: false,
        closeText: "Cancel",
        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
        title: 'Change the role for ' + userFriendlyName + '...',
        width: "800px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        buttons: {
            "Change Role": {
                text: 'Change Role',
                id: 'btnUserRoleDialogChangeRole',
                disabled: 'true',
                style: 'color:red;font-size:30pt;',
                click: function () {
                    cmdChangeUserRoleAndSendEmail(userId, userFriendlyName, userEmail, logonType);
                    $(this).dialog("close");
                }
            },
            "Close": {
                text: 'Close',
                style: 'font-size:30pt;',
                click: function () {
                    $(this).dialog("close");
                }
            }
        },
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#ChangeUserRoleDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
    });
    // Hide the title bar.
    $("#ChangeUserRoleDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
    // Set the title.
    document.getElementById('spanChangeUserRoleDialogTitle').innerHTML = 'Change the role for ' + userFriendlyName + '.';

    // Make sure the send message checkbox is not selected to begin with.
    document.getElementById('cbUserRoleDialogEmailMessage').removeAttribute('checked', '');
    // Set the radio button selected to the current value.
    var roles = document.getElementsByName('rbChangeUserRole');
    for (var i = 0; i < roles.length; i++) {
        if (roles[i].value == currentRole) {
            roles[i].checked = true;
        }
    }
    // Checkbox message customized with user name.
    var msg = 'Send email notification to ' + userFriendlyName + ' (' + userEmail + '). You can include an additional message as well:';
    $('#spanUserRoleDialogEmailMessageText').text(msg);
    // Event listener for the email checkbox.
    $('#cbUserRoleDialogEmailMessage').click(function (error) {
        //displayAlertDialog('it was clicked');
        var _checked = document.getElementById('cbUserRoleDialogEmailMessage').checked;
        if (_checked == true) {
            var dialogButtons = $('#ChangeUserRoleDialog').dialog('option', 'buttons');
            $.each(dialogButtons, function (buttonIndex, button) {
                if (button.id === 'btnUserRoleDialogChangeRole') {
                    button.text = 'Change Role and Send Email';
                    button.style = 'color:red;font-size:30pt;';
                }
            })
            $("#ChangeUserRoleDialog").dialog('option', 'buttons', dialogButtons);
        } else {
            var dialogButtons = $('#ChangeUserRoleDialog').dialog('option', 'buttons');
            $.each(dialogButtons, function (buttonIndex, button) {
                if (button.id === 'btnUserRoleDialogChangeRole') {
                    button.text = 'Change Role';
                    button.style = 'color:red;font-size:30pt;';
                }
            })
            $("#ChangeUserRoleDialog").dialog('option', 'buttons', dialogButtons);
        }
    });
    // Event listener for the radio buttons.
    $("input:radio[name=rbChangeUserRole]").click(function (error) {
        if (this.value == currentRole) {
            // Make sure the button is disabled.
            var dialogButtons = $('#ChangeUserRoleDialog').dialog('option', 'buttons');
            $.each(dialogButtons, function (buttonIndex, button) {
                if (button.id === 'btnUserRoleDialogChangeRole') {
                    button.disabled = true;
                }
            })
            $("#ChangeUserRoleDialog").dialog('option', 'buttons', dialogButtons);
        } else {
            // Enable the Change Role button.
            var dialogButtons = $('#ChangeUserRoleDialog').dialog('option', 'buttons');
            $.each(dialogButtons, function (buttonIndex, button) {
                if (button.id === 'btnUserRoleDialogChangeRole') {
                    button.disabled = false;
                }
            })
            $("#ChangeUserRoleDialog").dialog('option', 'buttons', dialogButtons);
        }
    });
}

function deleteAParticipantAndReplaceWithNewUser() {

    var justDeleteAlready = true;
    try {
        var newUserFriendlyName = document.getElementById('txtDeleteAParticipantDialogUserToReplaceFriendyName').value;
        justDeleteAlready = false;
    } catch (e) {
        // No need to catch, just checking if it exists!
    }
    if (justDeleteAlready == false) {
        // Here we assign the new user.
        var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        if (proceed) {
            cmdDeleteParticipantAndAssignANewUser(userId);
            $(this).dialog("close");
        }
    } else {
        // A new user does not have to be assigned since there are no dependencies.
        var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        if (proceed) {
            cmdDeleteParticipant(userId);
            $(this).dialog("close");
        }
    }

}

function cmdDisplayDeleteUserDialog(userId, userFriendlyName, userEmail, currentRole, logonType) {
    try {
        //document.getElementById('txtDeleteAParticipantDialogUserToReplaceFriendyName').value = ''; // = ''; // Clear the text box.
        //document.getElementById('txtDeleteAParticipantDialogUserToReplaceId').value = '';
        //document.getElementById('txtDeleteAParticipantDialogUserToReplaceEmail').value = '';
        $("#DeleteAParticipantDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: 'Remove ' + userFriendlyName + ' from this workflow.',
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Remove and replace with the new user": {
            //        text: 'Delete',
            //        id: 'btnDeleteAParticipantAndReplaceWithNewUser',
            //        disabled: 'true',
            //        style: 'font-size:30pt;',
            //        click: function () {
            //            var justDeleteAlready = true;
            //            try {
            //                var newUserFriendlyName = document.getElementById('txtDeleteAParticipantDialogUserToReplaceFriendyName').value;
            //                justDeleteAlready = false;
            //            } catch (e) {
            //                // No need to catch, just checking if it exists!
            //            }
            //            if (justDeleteAlready == false) {
            //                // Here we assign the new user.
            //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //                if (proceed) {
            //                    cmdDeleteParticipantAndAssignANewUser(userId);
            //                    $(this).dialog("close");
            //                }
            //            } else {
            //                // A new user does not have to be assigned since there are no dependencies.
            //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //                if (proceed) {
            //                    cmdDeleteParticipant(userId);
            //                    $(this).dialog("close");
            //                }
            //            }
            //        }
            //    },
            //    "Cancel": {
            //        text: 'Cancel',
            //        style: 'font-size:30pt;',
            //        click: function () {
            //            $(this).dialog("close");
            //        }
            //    }
            //},
            open: function (event, ui) {
                try {
                    $('.ui-widget-overlay').bind('click', function () { $("#DeleteAParticipantDialog").dialog('close'); });
                    var data = [];
                    data = {
                        bwParticipantId: userId,
                        bwWorkflowAppId: workflowAppId
                    };
                    var operationUri = webserviceurl + "/bwworkflow/itemizeparticipantdependencies"; //removeaparticipant";
                    $.ajax({
                        url: operationUri,
                        type: "POST", timeout: ajaxTimeout,
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            try {
                                // Show or hide the replacement user selection box depening if there are any dependencies (tasks or functional areas).
                                if (data.message != 'SUCCESS') {
                                    displayAlertDialog(JSON.stringify(data)); // Todd: put a good message here.
                                } else {
                                    if (data.NumberOfFunctionalAreas == 0 && data.NumberOfIncompleteTasks == 0 && data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager == 0) {
                                        // There are no dependencies.
                                        var html = '';
                                        html += 'This user has no Tasks, is not an approver for any Functional Areas, and is not a Manager for any Budget Requests.';
                                        document.getElementById('spanDeleteAParticipantDialogUserDependencyDetails').innerHTML = html;
                                        // Hide the user selection box.
                                        //document.getElementById('spanDeleteAParticipantDialogChooseAUserSection').innerHTML = '';
                                        // Hide the user selection box.
                                        document.getElementById('spanDeleteAParticipantDialogChooseAUserSection').innerHTML = '';
                                        // Hide the Delete button. 
                                        //document.getElementById('divDeleteAParticipantDialogReassignTasks').style.display = 'none';


                                        //// Change the button text.
                                        //document.getElementById('divDeleteAParticipantDialogReplaceUserButton').innerHTML = 'Delete ' + userFriendlyName;
                                        ////document.getElementById('divDeleteAParticipantDialogReplaceUserButton').innerHTML = '<span style="color:red;font-size:30pt;word-wrap:normal;">' + 'Remove ' + userFriendlyName + '</span>';
                                        //document.getElementById('divDeleteAParticipantDialogReplaceUserButton').style = 'color:red;font-size:30pt;word-wrap:normal;';

                                        //// Change the button text.
                                        //var dialogButtons = $('#DeleteAParticipantDialog').dialog('option', 'buttons');
                                        //$.each(dialogButtons, function (buttonIndex, button) {
                                        //    if (button.id === 'btnDeleteAParticipantAndReplaceWithNewUser') {
                                        //        button.text = 'Delete ' + userFriendlyName;
                                        //        button.disabled = false;
                                        //    }
                                        //})
                                        //$("#DeleteAParticipantDialog").dialog('option', 'buttons', dialogButtons);




                                    } else {
                                        // There ARE dependencies and we need to assign a replacement user.
                                        var html = '';
                                        html += 'When this user is removed, the following will need to be re-assigned to a new user (or you may be able to go back and change them one at a time):';
                                        html += '<ul>';
                                        html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfFunctionalAreas + ' Financial Area(s)</span></li>';
                                        html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasks + ' incomplete Task(s)</span></li>';
                                        html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager + ' incomplete Budget Request(s) where specified as the Manager</span></li>';
                                        html += '</ul>';
                                        document.getElementById('spanDeleteAParticipantDialogUserDependencyDetails').innerHTML = html;
                                        // 
                                        var html = '';
                                        html += 'Select the user to take over these items from <span style="white-space:nowrap;"><i>' + userFriendlyName + ' (' + userEmail + ')</i></span>';
                                        document.getElementById('spanDeleteAParticipantDialogUserToDeleteFriendlyName').innerHTML = html;


                                        // Change the button text.
                                        $('#divDeleteAParticipantDialogReassignTasks').innerHTML = 'Replace ' + userFriendlyName + ' with the new user';


                                        //// Change the button text.
                                        //document.getElementById('divDeleteAParticipantDialogReplaceUserButton').innerHTML = 'Replace ' + userFriendlyName + ' with the new user';
                                        ////document.getElementById('divDeleteAParticipantDialogReplaceUserButton').innerHTML = '<span style="color:red;font-size:30pt;word-wrap:normal;">' + 'Remove ' + userFriendlyName + '</span>';
                                        //document.getElementById('divDeleteAParticipantDialogReplaceUserButton').style = 'color:red;font-size:30pt;word-wrap:normal;';

                                        //var dialogButtons = $('#DeleteAParticipantDialog').dialog('option', 'buttons');
                                        //$.each(dialogButtons, function (buttonIndex, button) {
                                        //    if (button.id === 'btnDeleteAParticipantAndReplaceWithNewUser') {
                                        //        button.text = 'Replace ' + userFriendlyName + ' with the new user';
                                        //        button.disabled = false;
                                        //        button.style = 'color:red;font-size:30pt;';
                                        //    }
                                        //})
                                        //$("#DeleteAParticipantDialog").dialog('option', 'buttons', dialogButtons);




                                    }
                                }
                            } catch (e) {
                                displayAlertDialog('Error in android.js.cmdDisplayDeleteUserDialog():1: ' + e.message);

                            }
                        },
                        error: function (data, errorCode, errorMessage) {
                            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                            displayAlertDialog('Error in android.js.cmdDisplayDeleteUserDialog().itemizeparticipantdependencies: ' + errorMessage);
                        }
                    });
                } catch (e) {

                    displayAlertDialog('Error in android.js.cmdDisplayDeleteUserDialog():2x: ' + e.message + ', ' + e.stack);
                }
            }
        });

        // Hide the title bar.
        $("#DeleteAParticipantDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        // Set the title.
        document.getElementById('spanDeleteAParticipantDialogTitle').innerHTML = 'Remove ' + userFriendlyName + ' from this workflow.';
    } catch (e) {
        displayAlertDialog('Error in android.js.cmdDisplayDeleteUserDialog():2: ' + e.message + e.stack);
    }
}

function cmdDeleteParticipantAndAssignANewUser(userId) {
    var newUserFriendlyName = document.getElementById('txtDeleteAParticipantDialogUserToReplaceFriendyName').value;
    var newUserId = document.getElementById('txtDeleteAParticipantDialogUserToReplaceId').value;
    var newUserEmail = document.getElementById('txtDeleteAParticipantDialogUserToReplaceEmail').value;
    if (newUserFriendlyName != '') {
        var data = [];
        data = {
            oldUserId: userId,
            ModifiedById: participantId,
            ModifiedByFriendlyName: participantFriendlyName,
            ModifiedByEmail: participantEmail,
            bwWorkflowAppId: workflowAppId,
            newUserFriendlyName: newUserFriendlyName,
            newUserId: newUserId,
            newUserEmail: newUserEmail
        };
        var operationUri = webserviceurl + "/bwworkflow/removeaparticipantandreassigntoanewuser";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                displayAlertDialog(data);
                populateStartPageItem('divParticipants', 'Reports', '');

            },
            error: function (data, errorCode, errorMessage) {
                //handleExceptionWithdisplayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.cmdDeleteParticipantAndAssignANewUser(): ' + errorMessage);
            }
        });
    }
}

function cmdDeleteParticipant(userId) {
    var data = [];
    data = {
        oldUserId: userId,
        bwWorkflowAppId: workflowAppId
    };
    var operationUri = webserviceurl + "/bwworkflow/removeaparticipant";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
            populateStartPageItem('divParticipants', 'Reports', '');

        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdDeleteParticipant(): ' + errorMessage);
        }
    });
}

function cmdChangeUserRoleAndSendEmail(userId, userFriendlyName, userEmail, logonType) {
    var sendEmailNotification = document.getElementById('cbUserRoleDialogEmailMessage').checked; // This returns true or false.
    var emailNotificationAdditionalMessage = document.getElementById('txtUserRoleDialogEmailMessage').textContent;
    var newRole;
    var roles = document.getElementsByName('rbChangeUserRole');
    for (var i = 0; i < roles.length; i++) {
        if (roles[i].checked) newRole = roles[i].value;
    }
    var data = [];
    data = {
        sendEmailNotification: sendEmailNotification,
        emailNotificationAdditionalMessage: emailNotificationAdditionalMessage,
        bwWorkflowAppId: workflowAppId,
        bwWorkflowAppTitle: workflowAppTitle,
        bwParticipantId: userId,
        bwParticipantFriendlyName: userFriendlyName,
        bwParticipantEmail: userEmail,
        bwParticipantLogonType: logonType,
        bwParticipantRole: newRole,
        ModifiedById: participantId,
        ModifiedByFriendlyName: participantFriendlyName,
        ModifiedByEmail: participantEmail
    };
    var operationUri = webserviceurl + "/bwparticipant/updateuserrole";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
            //window.location = 'my.html?logontype=' + participantLogonType; // This gets rid of the query string values.
            //renderWelcomeScreen();
            populateStartPageItem('divParticipants', 'Reports', ''); // Refresh the screen.
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdChangeUserRoleAndSendEmail(): ' + errorMessage + ' ' + JSON.stringify(data));
            //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
        }
    });






}

function cmdDisplayPeoplePickerDialog(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable) {

    // Clear the search box and related elements.
    document.getElementById('txtPeoplePickerDialogSearchBox').value = '';
    document.getElementById('txtPeoplePickerDialogParticipantId').value = '';
    document.getElementById('txtPeoplePickerDialogParticipantEmail').value = '';

    $("#PeoplePickerDialog").dialog({
        modal: true,
        resizable: false,
        closeText: "Cancel",
        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
        title: "Select a person...", //"Enter your early adopter code...",
        width: "800px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        //buttons: {
        //    //"Cancel": function () {
        //    //    //$(this).dialog("close");
        //    //},
        //    "Close": {
        //        text: 'Close',
        //        id: 'btnClosePeoplePickerDialog',
        //        style: "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;color:black;",
        //        click: function () {
        //            $(this).dialog("close");
        //        }
        //        //try {
        //        //    //displayAlertDialog('Now checking for alerts for deferredIndex of ' + deferredIndex.toString());
        //        //    //displayAlertDialog('Once we get the alerts back, regenerate the interface!');
        //        //    var code = $('#txtEarlyAdopterCode').val();
        //        //    if (code == '1') {
        //        //        $('#divBody').show();
        //        //        $(this).dialog("close");
        //        //    }
        //        //} catch (e) {
        //        //    //window.waitDialog.close();
        //        //    //displayAlertDialog('Error in Start.js.cmdConnectToAWorkflow.Save():9:. Message: ' + e.message + ' Description: ' + e.description);
        //        //}
        //    }
        //},
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#PeoplePickerDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
        //open: function (event, ui) {
        //    displayAlertDialog('trying to set focus');
        //    $('#txtEarlyAdopterCode').focus();
        //}
    });

    // Hide the title bar.
    $("#PeoplePickerDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
    //// Set the title.
    //document.getElementById('spanPeoplePickerDialogTitle').innerHTML = 'Delete ' + title + '.';

    // Now we can hook up the Participant text box for autocomplete.
    $("#txtPeoplePickerDialogSearchBox").autocomplete({
        source: function (request, response) {
            if (request.term == '') {
                renderAllParticipantsInThePeoplePicker(); // Nothing is in the search box, so show all participants.
            } else {
                $.ajax({
                    //url: appweburl + "/tenant/" + tenantId + "/participants/" + request.term,
                    url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                    dataType: "json",
                    success: function (data) {
                        $('#spanPeoplePickerParticipantsList').empty();
                        var html = '';
                        if (data.participants.length > 0) {
                            //var searchArray = [];
                            for (var i = 0; i < data.participants.length; i++) {
                                //searchArray[i] = data.participants[i].participant;
                                //var strParticipant = '<a href="">' + data.participants[i].participant.split('|')[0] + ' <i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';

                                html += '<a style="white-space:nowrap;" href="javascript:cmdReturnParticipantIdToField(\'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data.participants[i].participant.split('|')[0] + '\', \'' + data.participants[i].participant.split('|')[1] + '\', \'' + data.participants[i].participant.split('|')[2] + '\', \'' + buttonToEnable + '\');">' + data.participants[i].participant.split('|')[0] + '&nbsp;&nbsp;<i>(' + data.participants[i].participant.split('|')[2] + ')</i></a>';


                                //html += strParticipant; //data.participants[i].participant;
                                html += '<br />';
                                //response(searchArray);
                            }
                        } else {
                            // There were no results.
                            html += '<span><i>There were no results</i></span>';
                        }
                        $('#spanPeoplePickerParticipantsList').append(html);
                    }
                });
            }
        },
        minLength: 0, // minLength specifies how many characters have to be typed before this gets invoked.
        select: function (event, ui) {
            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
        },
        open: function () {
            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
        },
        close: function () {
            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            var peoplePickerParticipantName = this.value.split('|')[0];
            var peoplePickerParticipantId = this.value.split('|')[1];
            var peoplePickerParticipantEmail = this.value.split('|')[2];

            if (peoplePickerParticipantName.indexOf('undefined') > -1) {
                document.getElementById('txtPeoplePickerDialogSearchBox').value = '';
                document.getElementById('txtPeoplePickerDialogParticipantId').value = '';
                document.getElementById('txtPeoplePickerDialogParticipantEmail').value = '';
            } else {
                document.getElementById('txtPeoplePickerDialogSearchBox').value = peoplePickerParticipantName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                document.getElementById('txtPeoplePickerDialogParticipantId').value = peoplePickerParticipantId;
                document.getElementById('txtPeoplePickerDialogParticipantEmail').value = peoplePickerParticipantEmail;
            }
        }
    });

    // List all participants.
    renderAllParticipantsInThePeoplePicker(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable); // We do this the first time to make sure they are all displayed.

}

function renderAllParticipantsInThePeoplePicker(friendlyNameSourceField, idSourceField, emailSourceField, buttonToEnable) {
    $('#spanPeoplePickerParticipantsList').empty();
    var data = {
        "bwWorkflowId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/workflow/participants",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            for (var i = 0; i < data.length; i++) {
                html += '<a style="white-space:nowrap;" href="javascript:cmdReturnParticipantIdToField(\'' + friendlyNameSourceField + '\', \'' + idSourceField + '\', \'' + emailSourceField + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantEmail + '\', \'' + buttonToEnable + '\');">' + data[i].bwParticipantFriendlyName + '&nbsp;&nbsp;<i>(' + data[i].bwParticipantEmail + ')</i></a>';
                html += '<br />';
            }
            $('#spanPeoplePickerParticipantsList').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdListAllParticipants():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdReturnParticipantIdToField(friendlyNameSourceField, idSourceField, emailSourceField, selectedParticipantFriendlyName, selectedParticipantId, selectedParticipantEmail, buttonToEnable) {
    // The people picker calls this and 
    //displayAlertDialog('You selected participant ' + selectedParticipantFriendlyName + ' to go in friendly name field ' + friendlyNameSourceField + '.\n\nThis functionality is incomplete. Coming soon!');
    document.getElementById(friendlyNameSourceField).value = selectedParticipantFriendlyName;
    document.getElementById(friendlyNameSourceField).setAttribute('title', selectedParticipantEmail);
    document.getElementById(idSourceField).value = selectedParticipantId;
    document.getElementById(emailSourceField).value = selectedParticipantEmail;

    //$('#' + friendlyNameSourceField).val(selectedParticipantFriendlyName);
    //$('#' + idSourceField).val(selectedParticipantId);
    //$('#' + emailSourceField).val(selectedParticipantEmail);

    // This enables the save button that may be next to the text box.
    if (buttonToEnable && buttonToEnable != 'undefined') document.getElementById(buttonToEnable).disabled = false;

    $('#PeoplePickerDialog').dialog('close');
}

function renderWelcomeScreen() {

    //displayAlertDialog('renderWelcomeScreen');

    try {

        // This zooms the screen when the user first navigates to the website! More about this in the Budget Workflow Manager codebase.
        //if (navigator.userAgent.match(/iPhone/i)) {
        //    $('#bwMyPage').animate({ 'zoom': 3 }, 400);
        //}




        $('#divWelcomeMasterDivTitle').text('Home');
        $('#divMenuMasterDivWelcomeButton').css({
            'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
        });

        // First we have to display them in the top bar.
        if (participantLogonType) {
            $('#spanLoggedInUser').text(participantFriendlyName);
            $('#spanLoggedInUserNewRequestPage').text(participantFriendlyName);
            $('#spanLoggedInUserMyStuffPage').text(participantFriendlyName);
            $('#spanLoggedInUserSummaryReportPage').text(participantFriendlyName);
            $('#spanLoggedInUserConfigurationPage').text(participantFriendlyName);
            $('#spanLoggedInUserHelpPage').text(participantFriendlyName);
        }

        //var h1 = '';
        //h1 += '<img src="/images/red-dot.png" width="11" height="11" alt="" style="cursor:pointer;vertical-align:top;" />&nbsp;' + participantFriendlyName + '';
        //h1 += '';
        //h1 += '';
        //h1 += '';
        //$('#spanLoggedInUser').html(h1);
        $('#spanbwLoggedInUserDropDownTitle').html('Logged in: ' + participantFriendlyName);

        if (participantLogonType == 'facebook') {
            var html = '';
            //html += '<hr />';
            html += 'Logon provider: Facebook Id:' + participantLogonTypeUserId;
            $('#divLogonProvider').html(html);
        } else if (participantLogonType == 'microsoft') {
            var html = '';
            //html += '<hr />';
            html += 'Logon provider: Microsoft Id:' + participantLogonTypeUserId;
            $('#divLogonProvider').html(html);
        } else if (participantLogonType == 'google') {
            var html = '';
            //html += '<hr />';
            html += 'Logon provider: Google Id:' + participantLogonTypeUserId;
            $('#divLogonProvider').html(html);
        } else if (participantLogonType == 'linkedin') {
            var html = '';
            //html += '<hr />';
            html += 'Logon provider: LinkedIn Id:' + participantLogonTypeUserId;
            $('#divLogonProvider').html(html);
        } else if (participantLogonType == 'custom') {
            var html = '';
            //html += '<hr />';
            html += 'Logon provider: BudgetRequests.com<br /><span style="font-size:22pt;">Participant id:&nbsp;<span style="font-size:18px;">' + participantLogonTypeUserId + '</span></span>';
            $('#divLogonProvider').html(html);
        }



        // First we check if we should display the alert! link at the top of the page.
        //$.ajax({
        //    url: appweburl + "/bwtasksoutstanding",
        //    type: "DELETE",
        //    contentType: 'application/json',
        //    //data: JSON.stringify(data),
        //    success: function (data) {
        //        if (data.length > 0) {
        //            $('#spanAlertLink').show();
        //            $('#spanAlertLinkNewRequest').show();
        //            $('#spanAlertLinkMyStuff').show();
        //            $('#spanAlertLinkSummary').show();
        //            $('#spanAlertLinkConfiguration').show();
        //            $('#spanAlertLinkHelp').show();
        //        }
        var inviteeId = '';
        //displayAlertDialog('participantLogonType: ' + participantLogonType + '  participantId: ' +participantId + '  participantFriendlyName: ' +participantFriendlyName + '  participantEmail: ' +participantEmail + '  participantLogonTypeUserId: ' +participantLogonTypeUserId);

        if (participantId && participantFriendlyName && participantEmail && participantLogonType && participantLogonTypeUserId && invitationAlreadyAccepted == true) {
            // The user is already logged in!!!!
        } else {
            //displayAlertDialog('Getting invitation parameter in renderWelcomeScreen().');
            try {
                inviteeId = getUrlParams()['invitation'].toString().split('#')[0];
            } catch (e) {

            }
        }

        var unsubscribe = '';
        try {
            unsubscribe = getUrlParams()['unsubscribe'].toString().split('#')[0];
        } catch (e) {

        }

        var requestId1 = '';
        //var participantId1 = '';
        try {
            //participantId1 = getUrlParams()["participant"];
            requestId1 = getUrlParams()['request'].toString().split('#')[0];
        } catch (e) {

        }

        //displayAlertDialog('renderWelcomeScreen() /getparticipantdetails');

        var data = [];
        data = {
            logonProvider: participantLogonType,
            logonId: participantLogonTypeUserId,
            participantFriendlyName: participantFriendlyName,
            participantEmail: participantEmail,
            appweburl: appweburl
        };
        //var operationUri = appweburl + "/getparticipantdetails/" + participantLogonType + "/" + participantLogonTypeUserId.toString() + "/" + participantFriendlyName + "/" + participantEmail;
        var operationUri = webserviceurl + "/getparticipantdetails";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (userData) {
                try {
                    tenantId = userData.participant.bwTenantId; // global. todd this needs to accomodate multiple tenant membership eventually.
                    workflowAppId = userData.participant.bwLastSelectedWorkflowAppId;


                    // This is where the workflow app is set when the page loads, so we have to GET THE LICENSING HERE!
                    var reqData = [];
                    reqData = {
                        bwWorkflowAppId: workflowAppId
                    };
                    var operationUri = webserviceurl + "/bwworkflowapplicensesforworkflow";
                    $.ajax({
                        url: operationUri,
                        type: "POST", timeout: ajaxTimeout,
                        data: reqData,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (licenseData) {

                            //displayAlertDialog('loading ' + licenseData.length + ' licenses for ' + workflowAppId);
                            globalLicenses = new Array();
                            for (var li = 0; li < licenseData.length; li++) {

                                //displayAlertDialog('bwWorkflowAppId: ' + licenseData[li].bwWorkflowAppId);


                                var tmpLicense = new Array(5);
                                tmpLicense[0] = licenseData[li].LicensePackageCategory; // eg: 'gold'
                                tmpLicense[1] = licenseData[li].LicensePackageCategory; // eg: 'Gold', Todd: This field is not getting populated from the email parsing routine properly.
                                tmpLicense[2] = licenseData[li].bwWorkflowAppLicenseId; // eg: '665f8489-937d-439c-939a-5e27b47d08d7';
                                tmpLicense[3] = licenseData[li].LicenseClaimedTimestamp; // eg: '2016-6-16T4:44:32'; // This is just temporary to provide a date.
                                tmpLicense[4] = getLicenseExpiryFriendlyDate(licenseData[li].LicenseClaimedTimestamp); //'xJuly 1, 2016x';
                                globalLicenses.push(tmpLicense);
                                // Upgrade the global license status depending.... :)
                                var licenseText = ['basic', 'bronze', 'silver', 'gold'];
                                var newLicenseIndex = licenseText.indexOf(licenseData[li].LicensePackageCategory);
                                var oldLicenseIndex = licenseText.indexOf(gWorkflowLicenseStatus);
                                //displayAlertDialog('from the DB: ' + licenseData[li].LicensePackageCategory + '     gWorkflowLicenseStatus: ' + gWorkflowLicenseStatus + '     newLicenseIndex: ' + newLicenseIndex + '   oldLicenseIndex: ' + oldLicenseIndex);
                                if (newLicenseIndex > oldLicenseIndex) {
                                    gWorkflowLicenseStatus = licenseText[newLicenseIndex];
                                }

                            }
                            //displayAlertDialog('gWorkflowLicenseStatus: ' + gWorkflowLicenseStatus);

                            // The following is the EFFECTIVE STATUS OF THE LICENSING!!! This is determined from what licenses have been assigned to the workflow.
                            //var gWorkflowLicenseStatus = 'bronze'; // basic, bronze, silver, gold. THIS IS THE FLAG WE ARE USING THROUGHOUT TO TURN ON/OFF FUNCTIONALITY.







                            participantId = userData.participant.bwParticipantId;

                            //displayAlertDialog('userData.participant.bwParticipantId: ' + participantId);

                            participantEmail = userData.participant.bwParticipantEmail;
                            participantFriendlyName = userData.participant.bwParticipantFriendlyName;


                            //displayAlertDialog('number of workflows this user belongs to: ' + userData.participant.participantWorkflowApps.length);


                            // Locate the selected WorkflowAppId and get the Title into the global variable. 
                            for (var wa = 0; wa < userData.participant.participantWorkflowApps.length; wa++) {
                                if (workflowAppId == userData.participant.participantWorkflowApps[wa].bwWorkflowAppId) {


                                    workflowAppTitle = userData.participant.participantWorkflowApps[wa].bwWorkflowAppTitle;


                                    // TODD: ALSO DO THIS FOR THE SETTINGS
                                    bwLastSelectedArchiveScreenRequestType = userData.participant.participantWorkflowApps[wa].bwLastSelectedArchiveScreenRequestType;
                                    //
                                    bwLastSelectedNewRequestType = userData.participant.participantWorkflowApps[wa].bwLastSelectedNewRequestType;
                                    //
                                    newBudgetRequestManagerTitle = userData.participant.participantWorkflowApps[wa].bwNewBudgetRequestManagerTitle;
                                    if (userData.participant.participantWorkflowApps[wa].bwRequireStartEndDates == 'true') requireStartEndDates = true;
                                    else requireStartEndDates = false;
                                    //
                                    if (userData.participant.participantWorkflowApps[wa].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                                    else requireRequestDetails = false;
                                    //
                                    if (userData.participant.participantWorkflowApps[wa].bwEnableNewRequestAttachments == 'true') enableNewRequestAttachments = true;
                                    else enableNewRequestAttachments = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwEnableNewRequestBarcodeAttachments == 'true') enableNewRequestBarcodeAttachments = true;
                                    else enableNewRequestBarcodeAttachments = false;

                                    //tenantId = userData.participant.participantWorkflowApps[wa].bwTenantId;
                                    //displayAlertDialog('selected workflowAppId: ' + workflowAppId + ',  tenantId: ' + tenantId + ', Title: ' + workflowAppTitle + ',  Attachments? ' + enableNewRequestAttachments);


                                    //enableNewRequestAttachments = userData.participant.participantWorkflowApps[wa].bwEnableNewRequestAttachments;
                                    if (userData.participant.participantWorkflowApps[wa].bwQuotingEnabled == 'true') quotingEnabled = true;
                                    else quotingEnabled = false;
                                    //quotingEnabled = userData.participant.participantWorkflowApps[wa].bwQuotingEnabled;


                                    //displayAlertDialog('userData.participant.participantWorkflowApps[wa].bwExpenseRequestsEnabled: ' + userData.participant.participantWorkflowApps[wa].bwExpenseRequestsEnabled);

                                    if (userData.participant.participantWorkflowApps[wa].bwExpenseRequestsEnabled == 'true') reimbursementRequestsEnabled = true;
                                    else reimbursementRequestsEnabled = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwCloseoutsEnabled == 'true') closeoutsEnabled = true;
                                    else closeoutsEnabled = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwCapitalAndExpenseTrackingEnabled == 'true') capitalAndExpenseTrackingEnabled = true;
                                    else capitalAndExpenseTrackingEnabled = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwRecurringExpensesEnabled == 'true') recurringExpensesEnabled = true;
                                    else recurringExpensesEnabled = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwSupplementalsEnabled == 'true') supplementalsEnabled = true;
                                    else supplementalsEnabled = false;

                                    if (userData.participant.participantWorkflowApps[wa].bwStrictAuditingEnabled == 'true') strictAuditingEnabled = true;
                                    else strictAuditingEnabled = false;

                                }
                            }

                            if (userData.participant.bwTipsDisplayOn == 'true') tipsDisplayOn = true;
                            else tipsDisplayOn = false;

                            if (userData.participant.bwInvitationsOnHomePageDisplayOn == 'true') displayInvitationsOnHomePageDisplayOn = true;
                            else displayInvitationsOnHomePageDisplayOn = false;




                            //emailNotificationLevel = userData.participant.bwEmailNotificationLevel;

                            emailNotificationFrequency = userData.participant.bwEmailNotificationFrequency; //immediately, aggregatetwicedaily
                            emailNotificationTypes = userData.participant.bwEmailNotificationTypes; //allnotifications, onlymytasknotifications
                            emailAggregatorTwiceDailyFirstTime = userData.participant.bwEmailAggregatorTwiceDailyFirstTime;
                            emailAggregatorTwiceDailySecondTime = userData.participant.bwEmailAggregatorTwiceDailySecondTime;
                            emailAggregatorTwiceDailyTimezoneDisplayName = userData.participant.bwEmailAggregatorTwiceDailyTimezoneDisplayName;


                            var bwUnsubscribedStatus = userData.participant.bwUnsubscribedStatus;
                            if (bwUnsubscribedStatus == 'true') {
                                // The user has unsubscribed, only show them this warning, and nothing else.
                                var resubscribe = confirm('You have un-subscribed. If you wish to re-subscribe and resume using this website then click here. DEV: finish this. \n\n\nClick the OK button to proceed...');
                                if (resubscribe) {
                                    // Call the resubscribe web method!
                                    var subscribe = [];
                                    subscribe = {
                                        participantId: participantId
                                    };
                                    var operationUri = webserviceurl + "/subscribe";
                                    $.ajax({
                                        url: operationUri,
                                        type: "POST", timeout: ajaxTimeout,
                                        data: subscribe,
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        success: function (data) {
                                            displayAlertDialog(data);
                                            window.location = 'my.html?logontype=' + participantLogonType; // This gets rid of the query string values.
                                            renderWelcomeScreen();
                                        },
                                        error: function (data, errorCode, errorMessage) {
                                            displayAlertDialog('Error in ios8.js.renderWelcomeScreen():subscribe:' + errorMessage + ' ' + JSON.stringify(data));
                                            //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
                                        }
                                    });
                                }
                            } else {
                                //displayAlertDialog('renderWelcomeScreen2:' + JSON.stringify(userData));
                                // So at this point, we will always get user data back, even if it is the first time, an entry is made in the database and a new participantId has been generated.

                                // First we will enable Forest Administrator access.
                                if (userData.participant.bwParticipantRole == 'Forest Administrator') {
                                    // This is where we display the Forest Administration link.
                                    var html = '';
                                    html += '<hr />';
                                    html += '<a href="admin.html">Forest Administration</a>';
                                    $('#divForestAdministratorLinks').html(html);
                                }
                                /////////////////////////////////////////////////////////////////
                                // THE FOLLOWING ARE THE SCREENS FOR THE DIFFERENT USER SCENARIOS
                                /////////////////////////////////////////////////////////////////
                                if (requestId1 != '') {
                                    // User clicked the link in the email to view the budget request.
                                    //else if (requestId && participantId) {
                                    // This is the url when the user clicks the link from the email to view the budget request.
                                    //displayAlertDialog('The user wants to view the budget request. This functionality will be completed shortly.');

                                    $('#divMenuMasterDivWelcomeButton').click(function () {
                                        window.location = 'my.html?logontype=' + participantLogonType;
                                    });

                                    renderLeftButtons('divWelcomePageLeftButtons');
                                    displayArOnTheHomePage(requestId1, participantId, 'x3x3x3');



                                } else if (inviteeId != '' && invitationAlreadyAccepted == false) { // USER RECEIVED AN INVITATION.
                                    // Get the invitation details. We need the tenant id, the workflow app id, the role, the created by Id (the person who created the invitation) and friendly name.
                                    var operationUri = webserviceurl + "/bwinvitations/" + inviteeId;
                                    $.ajax({
                                        url: operationUri,
                                        method: "GET",
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        success: function (inviteeData) {
                                            // We got rid of the notice below, and just automatically accept the invitation!
                                            cmdAcceptInvitation(inviteeId, inviteeData.d.results[0].bwTenantId, inviteeData.d.results[0].bwWorkflowAppId, inviteeData.d.results[0].bwWorkflowAppTitle, inviteeData.d.results[0].bwInvitationParticipantRole);

                                            //var html = '';
                                            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 2.77em;">Welcome to your Budgeting Social Network</span>';
                                            //html += '<br /><br />';
                                            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">You were invited by ' + inviteeData.d.results[0].bwInvitationCreatedByFriendlyName + '</span>';
                                            //html += '<br /><br />';
                                            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><strong>Step 1.</strong> Click here to accept the invitation and start using this budget request system:&nbsp;<input type="button" id="btnAcceptInvitation" onclick="cmdAcceptInvitation(\'' + inviteeId + '\', \'' + inviteeData.d.results[0].bwTenantId + '\', \'' + inviteeData.d.results[0].bwWorkflowAppId + '\', \'' + inviteeData.d.results[0].bwWorkflowAppTitle + '\', \'' + inviteeData.d.results[0].bwInvitationParticipantRole + '\');" value="Join this Budgeting Network" style="cursor:pointer;" ></input></span>';
                                            //html += '<br /><br />';
                                            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><strong>Step 2.</strong> You will be taken to your Home page, where you can begin creating budget requests and participating in the decision making process.</span>';
                                            //html += '<br /><br /><br />';
                                            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 10pt;"><em><a target="_blank" href="http://budgetworkflow.com/support/kb14101">Click here for more information...</a></em></span>';
                                            //html += '<br /><br />';
                                            //$('#divWelcomeMessage').html(html);
                                            //renderAlerts();
                                        },
                                        error: function (data, errorCode, errorMessage) {
                                            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                                            displayAlertDialog('Error in ios8.js.renderWelcomeScreen():1:', errorCode + ', ' + errorMessage + ' data:' + data);
                                        }
                                    });
                                } else if (unsubscribe != '') {
                                    renderLeftButtons('divWelcomePageLeftButtons');

                                    $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
                                        window.location = 'my.html?logontype=' + participantLogonType;
                                        //renderWelcomeScreen();
                                        // window.location = 'my.html?logontype=' + participantLogonType;
                                    });




                                    var html = '';
                                    html += '<br />';
                                    html += '<span style="font-weight:bold;">Unsubscribe</span>';
                                    html += '<hr />';
                                    html += '<br /><br /><br />';


                                    html += '<a href="javascript:cmdUnsubscribe();">Click here to unsubscribe</a><br /><br />';
                                    //html += '<hr>';
                                    html += '<br /><br /><br />';
                                    html += '<i>You will receive a final confirmation email. We send this out to ensure you have authorized this request.<br /><br />';
                                    html += '<i>Receiving emails is integral to the functioning of this website, so you will also be removed from the ....<br /><br />';
                                    html += 'We will also notify the participants of the workflow that you no longer participate.</i>';
                                    html += '<br />';
                                    //html += '<hr />';


                                    //html += '<table>';
                                    //html += '    <tr><td>&nbsp;</td><td></td></tr>';
                                    //html += '    <tr><td>This functionality is incomplete, we are working on it. Dev notes:</td></tr>';
                                    //html += '    <tr><td>- Mark the participant as unsubscribed in the database.</td></tr>';
                                    //html += '    <tr><td>- Notify the tenant owner that the user has chosen to unsubscribe.</td></tr>';
                                    //html += '    <tr><td>- Notify participants in the workflow that the user has chosen to unsubscribe.</td></tr>';
                                    //html += '    <tr><td>- Somehow we have to have a way for them to substitute the user in any functional areas, and places where an approval process will get held up.</td></tr>';
                                    //html += '    <tr><td>- Perhaps disable a financial area where they are involved until they have had a replacement assigned.</td></tr>';
                                    //html += '</table>';
                                    //html += '';
                                    //html += '';
                                    //html += '';
                                    $('#divWelcomeMessage').html(html);

                                    $('#divWelcomeMasterDivTitle').text('Unsubscribe');

                                    //$('#divMenuMasterDivWelcomeButton').css({
                                    //    'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer'
                                    //});
                                    //$('#divMenuMasterDivWelcomeButton').click(function () {
                                    //    window.location = 'my.html?logontype=' + participantLogonType;
                                    //});

                                    document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButtonIos8';
                                    $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
                                        renderWelcomeScreen();
                                        // window.location = 'my.html?logontype=' + participantLogonType;
                                    });



                                    //} else if (tenantId == null) { // USER HAS LOGGED IN FOR THE FIRST TIME AND DOESN'T HAVE A TenantId.
                                    //    // A user has logged in for the first time. They should be able to initialize their new system, and choose that they may have received an invitation so warn them if it didn't work correctly.

                                    //    cmdCreateANewTenant();
                                    //    //}



                                } else { // USER HAS LOGGED IN BEFORE AND HAS A TenantId.


                                    //displayAlertDialog('USER HAS LOGGED IN BEFORE AND HAS A TenantId: ' + tenantId);

                                    // The user has either logged in before.
                                    var operationUri = webserviceurl + "/bwtenants/" + tenantId.toString();
                                    $.ajax({
                                        url: operationUri,
                                        method: "GET",
                                        headers: {
                                            "Accept": "application/json; odata=verbose"
                                        },
                                        success: function (tenantData) {
                                            //var faData1 = {
                                            //    //"bwTenantId": "null",
                                            //    //"bwTenantOwnerFacebookUserId": "test1",
                                            //    //"bwTenantOwnerLinkedInUserId": "test1",
                                            //    //"bwTenantOwnerFriendlyName": "Todd Hiltz1",
                                            //    //"bwTenantOwnerEmail": "todd1@capexworkflow.com",
                                            //    //"bwWorkflows": "null"
                                            //};


                                            // Todd: Disconnecting this while testing!!!
                                            //gWorkflowLicenseStatus = tenantData[0].bwTenantPackage;




                                            //var html = '';
                                            //html += '<hr />';
                                            //html += 'Package level: ' + tenantPackage;
                                            //$('#divUserDropdownTenantPackageType').html(html);



                                            var operationUri = webserviceurl + "/bwworkflowapps/" + tenantId.toString();
                                            $.ajax({
                                                url: operationUri,
                                                method: "GET",
                                                headers: {
                                                    "Accept": "application/json; odata=verbose"
                                                },
                                                success: function (workflowAppData) {
                                                    $.ajax({
                                                        url: webserviceurl + "/getfunctionalareasbyappid/" + workflowAppId + "/" + "RETURNALL",
                                                        method: "GET",
                                                        headers: {
                                                            "Accept": "application/json; odata=verbose"
                                                        },
                                                        //contentType: 'application/json',
                                                        //data: JSON.stringify(faData1),
                                                        success: function (faData) {

                                                            //displayAlertDialog('participantId: ' + participantId);

                                                            // Get the list of workflow apps that the participant has been invited to!
                                                            var participantData = {
                                                                "bwParticipantId": participantId
                                                            };
                                                            $.ajax({
                                                                url: webserviceurl + "/bwworkflowapps/listofworklflowappsthathavebeeninvitedto",
                                                                type: "DELETE",
                                                                contentType: 'application/json',
                                                                data: JSON.stringify(participantData),
                                                                success: function (iData) {

                                                                    //displayAlertDialog('DEV: Referencing isUserATenantOwner here. This is deprecated and needs to be fixed.');
                                                                    // TODD: HARDCODED LOOK AT THIS AGIN!!!
                                                                    var userIsATenantOwner = 'true';


                                                                    //if (userData.isUserATenantOwner == 'true') {
                                                                    if (userIsATenantOwner == 'true') {
                                                                        var html = '';
                                                                        // Todd commented this one out in order to try the workflow app drop down selector on the home page.
                                                                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 2.77em;">Your budgeting network: <span id="spanHomePageWorkflowAppTitle" style="font-weight:bold;">' + workflowAppTitle + '</span></span>';

                                                                        // This is the drop down selector one. Not sure if I want this yet...
                                                                        html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size:40pt;">Your budgeting network: ';
                                                                        if (iData.length == 1) {
                                                                            // There is only 1 workflow, so display it as text.
                                                                            html += '<span id="spanHomePageWorkflowAppTitle" style="font-weight:bold;cursor:default;white-space:nowrap;" title="You are the owner of this workflow.">' + iData[0].bwWorkflowAppTitle + '</span>';
                                                                        } else {
                                                                            // There is more than 1 item, so display in a drop down.
                                                                            html += '<span id="spanHomePageWorkflowAppTitle">';
                                                                            html += '<select id="selectHomePageWorkflowAppDropDown" onchange="selectHomePageWorkflowAppDropDown_change();" class="selectHomePageWorkflowAppDropDown" style="cursor:pointer;font-weight:bold;border-color:whitesmoke;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.25em;">';
                                                                            for (var i = 0; i < iData.length; i++) {
                                                                                if (workflowAppId == iData[i].bwWorkflowAppId) {
                                                                                    html += '<option value="' + iData[i].bwWorkflowAppId + '|' + iData[i].bwParticipantRole + '" selected>' + iData[i].bwWorkflowAppTitle + '</option>';
                                                                                } else {
                                                                                    html += '<option value="' + iData[i].bwWorkflowAppId + '|' + iData[i].bwParticipantRole + '">' + iData[i].bwWorkflowAppTitle + '</option>';
                                                                                }
                                                                            }
                                                                            html += '</select></span>';
                                                                        }
                                                                        html += '</span>';


                                                                        html += '<br />';
                                                                        html += '<span id="spanHomePagePersonalizedSection"></span>';






                                                                        //html += '<br /><br />';
                                                                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;"><strong>Send invitations</strong></span><br />';
                                                                        //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant();" style="cursor:pointer;font-size:16pt;">Generate a new invitation link</button></span>';
                                                                        //html += '<br /><br />';
                                                                        //html += '<span id="invitationLink"></span>';
                                                                        //html += '<br /><br />';
                                                                        //html += '<div id="divHomePageAlert"></div>';
                                                                        //html += '<br />';
                                                                        if (faData.length == 0) {
                                                                            $('#divMenuMasterDivNewRequestButton').hide(); // Hide this button for now.
                                                                            $('#divMenuMasterDivSummaryButton').hide();
                                                                            $('#divMenuMasterDivMyStuffButton').hide();
                                                                            html += 'You need to create at least one financial area before you can begin using your budget workflow.<br />';
                                                                            html += '<a href="javascript:populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Click here to create the first Financial Area</a>';
                                                                            html += '<br /><br />';
                                                                            html += '';
                                                                            html += '';
                                                                            html += '';
                                                                            html += '';
                                                                            $('#divWelcomeMessage').html(html);
                                                                        } else {
                                                                            $('#divWelcomeMessage').html(html);
                                                                            renderHomePagePersonalizedSection();
                                                                        }
                                                                        //html += '<br /><br /><hr />';
                                                                        ////html += 'You are the owner of this budget request system, "' + tenantData[0].bwTenantTitle + '". <a href="javascript:cmdTenantAdministration();">Administration</a><br /><br />';
                                                                        //html += 'You are the owner of this budget request system. <a href="javascript:cmdTenantAdministration();">Administration</a><br /><br />';

                                                                        //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
                                                                        //$('#divWelcomeMessage').html(html);
                                                                        ////checkForAlerts();
                                                                        //renderAlerts();
                                                                        //renderTenantOwnerStuff();
                                                                        //loadWorkflowAppConfigurationDetails();












                                                                    } else {
                                                                        // This section is for users who are participants and not tenant owners.
                                                                        var html = '';
                                                                        for (var i = 0; i < workflowAppData.d.results.length; i++) {
                                                                            html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 2.77em;">Your budgeting networkxx2: <strong>' + workflowAppData.d.results[i].bwWorkflowAppTitle + '</strong></span>';
                                                                        }
                                                                        html += '<br /><br />';
                                                                        html += '<div id="divHomePageAlert"></div>';
                                                                        html += '<br /><br /><br />';
                                                                        if (faData.length == 0) {
                                                                            $('#divMenuMasterDivNewRequestButton').hide(); // Hide this button for now.
                                                                            $('#divMenuMasterDivSummaryButton').hide();
                                                                            $('#divMenuMasterDivMyStuffButton').hide();
                                                                            html += 'You need to create at least one financial area before you can begin using your budget workflow.<br />';
                                                                            html += '<a href="javascript:populateStartPageItem(\'divConfiguration\', \'Reports\', \'\');">Click here to create the first Financial Area</a>';
                                                                            html += '<br /><br />';
                                                                            html += '';
                                                                            html += '';
                                                                            html += '';
                                                                            html += '';
                                                                        }
                                                                        html += '<br /><br /><hr />';
                                                                        html += 'You are a participant for this tenant, "' + tenantData[0].bwTenantTitle + '". <a href="javascript:cmdContactTheTenantAdministrator();">Contact the Tenant Administrator</a><br /><br />';
                                                                        //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
                                                                        $('#divWelcomeMessage').html(html);
                                                                        renderAlerts();
                                                                        //loadWorkflowAppConfigurationDetails9();
                                                                    }
                                                                },
                                                                error: function (data, errorCode, errorMessage) {
                                                                    //window.waitDialog.close();
                                                                    //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                                                                    displayAlertDialog('Error in ios8.js.renderWelcomeScreen():2.1:' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                                                                }
                                                            });
                                                        },
                                                        error: function (data, errorCode, errorMessage) {
                                                            //window.waitDialog.close();
                                                            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                                                            displayAlertDialog('Error in ios8.js.renderWelcomeScreen():2:' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                                                        }
                                                    });
                                                },
                                                error: function (data, errorCode, errorMessage) {
                                                    //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                                                    displayAlertDialog('Error in ios8.js.renderWelcomeScreen():3:', errorCode + ', ' + errorMessage);
                                                }
                                            });
                                        },
                                        error: function (data, errorCode, errorMessage) {
                                            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                                            displayAlertDialog('Error in ios8.js.renderWelcomeScreen():4:', errorCode + ', ' + errorMessage);
                                        }
                                    });
                                }
                            }

                            // Apply Participant configurations to the display.
                            if (tipsDisplayOn == true) {
                                $('#spanAlertLink').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                                $('#spanAlertLinkNewRequest').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                                $('#spanAlertLinkMyStuff').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                                $('#spanAlertLinkSummary').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                                $('#spanAlertLinkConfiguration').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                                $('#spanAlertLinkHelp').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                            } else {
                                $('#spanAlertLink').html('&nbsp;');
                                $('#spanAlertLinkNewRequest').html('&nbsp;');
                                $('#spanAlertLinkMyStuff').html('&nbsp;');
                                $('#spanAlertLinkSummary').html('&nbsp;');
                                $('#spanAlertLinkConfiguration').html('&nbsp;');
                                $('#spanAlertLinkHelp').html('&nbsp;');
                            }

                            // Check to show the Invitation section on the home page.
                            // displayInvitationsOnHomePageDisplayOn





                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error in ios8.js.renderWelcomeScreen():GET bwworkflowapplicenses:' + errorMessage);
                            //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
                        }
                    });
                } catch (e) {
                    displayAlertDialog('Error in ios8.js.renderWelcomeScreen():5:' + e.message);
                }
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('There has been an error contacting the server.\n\n' + errorMessage); // + ' data:' + data);
            }
        });



        $('#spanAlertLink').qtip({
            content: {
                text: '<span style="font-size:50pt;">Click here to display the tips!</span>'
            },
            position: {
                at: 'left bottom'
            },
            style: { classes: "bwQtip" }
            //position: { at: 'left center', adjust: { method: 'Shift' } },
            //style: { tip: { corner: true } }
        });
        //$('#spanAlertLink').qtip('toggle', true);


    } catch (e) {
        displayAlertDialog('Error in ios8.js.renderWelcomeScreen():6:', e.message);
    }
}

function renderHomePagePersonalizedSection() {
    var selectedWorkflowAppRole = '';
    try {
        var selectedValue = $('#selectHomePageWorkflowAppDropDown option:selected').val();
        selectedWorkflowAppRole = selectedValue.split('|')[1];
    } catch (e) {
        // If we made it here, (because there is not drop down workflow selector on the home page) there must only be 1 workflow app, which this user is the owner of.
        selectedWorkflowAppRole = 'owner';
    }

    try {

        //displayAlertDialog('xselectedWorkflowAppRole: ' + selectedWorkflowAppRole + ' [in renderHomePagePersonalizedSection]');


        var html = '';
        if (selectedWorkflowAppRole == 'owner') {
            // Make sure the relevent configuration items are displayed. 

            $('#divFunctionalAreasButton').show();
            $('#divParticipantsButton').show();
            $('#divWorkflowSettingsButton').show();

            // 

            //$('#divMenuMasterDivArchiveButton').show();
            //$('#divMenuMasterDivSummaryButton').show();
            //$('#divConfigurationLeftSideMenu').show();
            //$('#divFunctionalAreasButton').show();
            //$('#divParticipantsButton').show();
            //$('#divWorkflowSettingsButton').show();
            html += '<br /><div id="divInvitationSectionOnHomePage">';
            //if (displayInvitationsOnHomePageDisplayOn == true) {
            html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 40pt;"><strong>Send invitations</strong></span><br />';
            html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 40pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant2();" class="BwButton350">Generate a new invitation link</button></span>';
            //}
            html += '</div><br />';
            html += '<span id="invitationLink2" style="font-size:40pt;"></span>';
            html += '<br /><br />';
            html += '<div id="divHomePageAlert"></div>';
            //html += '<br />';

            //html += '<button onclick="javascript:renderAlerts();" class="BwButton">Refresh</button>';



            html += '<br /><br /><hr />';
            html += '<span style="cursor:help;font-size:30pt;" title="There is only one owner.">You are the owner of this budget request system.</span>'; // <a href="javascript:cmdTenantAdministration();">Administration</a><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);

            if (displayInvitationsOnHomePageDisplayOn == true) {
                $('#divInvitationSectionOnHomePage').show();
            } else {
                $('#divInvitationSectionOnHomePage').hide();
            }

            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        } else if (selectedWorkflowAppRole == 'participant') {
            // Hide the relevant stuff.
            $('#divMenuMasterDivArchiveButton').hide();
            $('#divMenuMasterDivSummaryButton').hide();
            $('#divConfigurationLeftSideMenu').hide();
            $('#divFunctionalAreasButton').hide();
            //$('#divDepartmentsButton').hide();
            $('#divParticipantsButton').hide();
            $('#divWorkflowSettingsButton').hide();
            html += '<br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;"><strong>Send invitations</strong></span><br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant();" style="cursor:pointer;font-size:16pt;">Generate a new invitation link</button></span>';
            //html += '<br /><br />';
            //html += '<span id="invitationLink"></span>';
            html += '<br /><br />';
            html += '<div id="divHomePageAlert"></div>';
            //html += '<br />';
            //html += '<input type="button" value="Refresh" onclick="javascript:renderAlerts();" style="cursor:pointer;" />';
            html += '<br /><br /><hr />';
            html += '<span style="cursor:help;font-size:30pt;">You are a participant in this budget request system.</span><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);
            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        } else if (selectedWorkflowAppRole == 'archiveviewer') {
            // Hide the relevant stuff in the configuration section.
            //$('#divMenuMasterDivArchiveButton').show();
            //$('#divMenuMasterDivSummaryButton').hide();
            //$('#divConfigurationLeftSideMenu').hide();
            $('#divFunctionalAreasButton').hide();
            $('#divParticipantsButton').hide();
            $('#divWorkflowSettingsButton').hide();
            html += '<br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;"><strong>Send invitations</strong></span><br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant();" style="cursor:pointer;font-size:16pt;">Generate a new invitation link</button></span>';
            //html += '<br /><br />';
            //html += '<span id="invitationLink"></span>';
            html += '<br /><br />';
            html += '<div id="divHomePageAlert"></div>';
            //html += '<br />';
            //html += '<input type="button" value="Refresh" onclick="javascript:renderAlerts();" style="cursor:pointer;" />';
            html += '<br /><br /><hr />';
            //html += 'You are a participant in this budget request system.<br /><br />';
            html += '<span style="cursor:help;font-size:30pt;">You are a participant in this budget request system.</span><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);
            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        } else if (selectedWorkflowAppRole == 'reportviewer') {
            // Hide the relevant stuff in the configuration section.
            //$('#divMenuMasterDivArchiveButton').show();
            //$('#divMenuMasterDivSummaryButton').show();
            //$('#divConfigurationLeftSideMenu').hide();
            $('#divFunctionalAreasButton').hide();
            $('#divParticipantsButton').hide();
            $('#divWorkflowSettingsButton').hide();
            html += '<br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;"><strong>Send invitations</strong></span><br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant();" style="cursor:pointer;font-size:16pt;">Generate a new invitation link</button></span>';
            //html += '<br /><br />';
            //html += '<span id="invitationLink"></span>';
            html += '<br /><br />';
            html += '<div id="divHomePageAlert"></div>';
            //html += '<br />';
            //html += '<input type="button" value="Refresh" onclick="javascript:renderAlerts();" style="cursor:pointer;" />';
            html += '<br /><br /><hr />';
            html += '<span style="cursor:help;font-size:30pt;">You are a participant in this budget request system.</span><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);
            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        } else if (selectedWorkflowAppRole == 'configurationmanager') {
            // Hide the relevant stuff in the configuration section.
            $('#divFunctionalAreasButton').show();
            $('#divParticipantsButton').show();
            $('#divWorkflowSettingsButton').show();


            //$('#divMenuMasterDivArchiveButton').show();
            //$('#divMenuMasterDivSummaryButton').show();
            //$('#divConfigurationLeftSideMenu').show();
            //$('#divFunctionalAreasButton').show();
            //$('#divParticipantsButton').show();
            //$('#divWorkflowSettingsButton').show();
            html += '<br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;"><strong>Send invitations</strong></span><br />';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 22pt;">Invite a participant to your network by copy-and-pasting the invitation link into an email:&nbsp;<button id="btnInviteNewParticipant1" onclick="cmdInviteNewParticipant();" style="cursor:pointer;font-size:16pt;">Generate a new invitation link</button></span>';
            //html += '<br /><br />';
            //html += '<span id="invitationLink"></span>';
            html += '<br /><br />';
            html += '<div id="divHomePageAlert"></div>';
            //html += '<br />';
            //html += '<input type="button" value="Refresh" onclick="javascript:renderAlerts();" style="cursor:pointer;" />';
            html += '<br /><br /><hr />';
            html += '<span style="cursor:help;font-size:30pt;">You are a participant in this budget request system.</span><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);
            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        } else {
            //$('#divMenuMasterDivConfigurationButton').hide();
            html += '<br />';
            html += '<br /><br />ERROR';
            html += '<div id="divHomePageAlert"></div>';
            html += '<br />';
            html += '<br /><br /><hr />';
            html += '<span style="cursor:help;font-size:30pt;">You are neither an owner or participant in this budget request system.</span><br /><br />';
            //html += '<i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about upgrade options</a></i>';
            $('#spanHomePagePersonalizedSection').html(html);
            renderAlerts();
            renderTenantOwnerStuff();
            //loadWorkflowAppConfigurationDetails9();
        }

        renderLeftButtons('divWelcomePageLeftButtons');



        GetWorkflowAppConfigurationData9 = $.Deferred();
        GetWorkflowAppConfigurationData9
            .done(function () {
                //displayAlertDialog('DONE');
                //renderLeftButtons('divSummaryPageLeftButtons');

                //// Set the year drop down. HARDCODED!!!
                //// IF MORE THAN 1 YEAR: <select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>
                //var html = '';
                //html += '2016';
                //document.getElementById('spanSummaryReportYear').innerHTML = html;

                //if (!$('#financialOrParticipantSummary').is(':checked')) {
                //    // "Financial Summary" has been selected.
                //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                //        renderFinancialSummary9(false);
                //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                //        renderFinancialSummary9(true);
                //    }
                //} else if ($('#financialOrParticipantSummary').is(':checked')) {
                //    // "Participant Summary" has been selected.
                //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                //        renderParticipantSummary(false);
                //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                //        renderParticipantSummary(true);
                //    }
                //}
            })
            .fail(function () {
                displayAlertDialog('Error in ios8.js.renderHomePagePersonalizedSection()', 'GetWorkflowAppConfigurationData9.fail()');
            });
        loadWorkflowAppConfigurationDetails9();
    } catch (e) {
        displayAlertDialog('Error in renderHomePagePersonalizedSection(): ' + e.message + ' ' + e.stack);
    }
}

function cmdContactTheTenantAdministrator() {
    displayAlertDialog('This functionality is not yet completed Coming soon! cmdContactTheTenantAdministrator().');
}

function renderAlerts() {
    // Render the pending items. Only do this if the home page is displayed!!!
    // if($('#testElement').is(':visible')){
    //alert('spanTopBarExpandCollapseWelcome.is(:visible): ' + $('#spanTopBarExpandCollapseWelcome').is(':visible'));

    if ($('#divHomePageAlert').is(':visible') != false && $('#divHomePageAlert').is(':visible') == true) { // This may seem strange, but I think a lag in the DOM processing makes != false better than == true.


        //alert('ISVISIBLE');



        // Clear the span if it already had an invitation displayed.
        $('#invitationLink2').empty();

        var queryData = {
            //"bwTenantId": tenantId,
            "bwWorkflowAppId": workflowAppId,
            "bwParticipantId": participantId
        };
        $.ajax({
            url: webserviceurl + "/bwinvitationsunclaimed",
            type: "DELETE",
            contentType: 'application/json',
            data: JSON.stringify(queryData), //JSON.stringify(queryData),
            success: function (invitationData) {
                //var invitationHtml = '';
                //invitationHtml += '<a href="javascript:cmdViewInvitations();">';
                //invitationHtml += '<img src="/images/red-dot.png" width="11" height="11" alt="" style="cursor:pointer;vertical-align:top;" />';
                //invitationHtml += invitationData.length + ' unclaimed invitation(s)';
                //invitationHtml += '</a>';
                //invitationHtml += '<hr />';
                //$('#divUserDropdownPendingInvitationsLink').html(invitationHtml);

                //var operationUri = appweburl + "/bwtasksoutstanding/" + participantId;
                var operationUri = webserviceurl + "/bwtasksoutstanding";
                $.ajax({
                    url: operationUri,
                    type: "DELETE",
                    contentType: 'application/json',
                    data: JSON.stringify(queryData), //JSON.stringify(queryData),
                    success: function (taskData) {

                        //displayAlertDialog('bwtasksoutstanding: ' + JSON.stringify(taskData));
                        // Render the user dropdown pending tasks.
                        //var taskHtml = '';
                        //taskHtml += '<a href="javascript:cmdViewTasks();">';
                        //taskHtml += '<img src="/images/red-dot.png" width="11" height="11" alt="" style="cursor:pointer;vertical-align:top;" />';
                        //taskHtml += taskData.length + ' pending task(s)';
                        //taskHtml += '</a>';
                        //taskHtml += '<hr />';
                        //$('#divUserDropdownPendingTasksLink').html(taskHtml);
                        $.ajax({
                            url: webserviceurl + "/bwtenants",
                            type: "DELETE",
                            contentType: 'application/json',
                            data: JSON.stringify(queryData),
                            success: function (tenantData) {
                                // Render the user dropdown tenant membership link.
                                var tmHtml = '';

                                //tmHtml += 'Selected workflow: <span style="white-space:nowrap;">' + workflowAppTitle + '</span>'; // Todd this doesn't work because we need to regenerate this when shown!
                                //tmHtml += '<br />';

                                //tmHtml += '<a href="javascript:cmdViewTenants();">';
                                //tmHtml += 'You belong to ' + tenantData.length + ' budgeting network(s). <i>Dev note: This is incorrect. We need to add facility to store participant membership.</i>';
                                //tmHtml += '</a>';
                                //tmHtml += '<hr />';
                                $('#divUserDropdownTenantMembershipLink').html(tmHtml);
                                $.ajax({
                                    url: webserviceurl + "/bwparticipants",
                                    type: "DELETE",
                                    contentType: 'application/json',
                                    data: JSON.stringify(queryData),
                                    success: function (participantsData) {
                                        $.ajax({
                                            url: webserviceurl + "/bwbudgetrequestspending",
                                            type: "DELETE",
                                            contentType: 'application/json',
                                            data: JSON.stringify(queryData),
                                            success: function (brData) {

                                                // Change the page title to indicate the # of tasks. This will show up in the browser tab and is a cool way to show the user they have alerts.
                                                if (taskData.length > 0) {
                                                    document.title = 'My Budgets (' + taskData.length + ')';
                                                    // Change the css to red/orange.
                                                    swapStyleSheet("css/bw.core.colors.red.orange.css");
                                                } else {
                                                    document.title = 'My Budgets';
                                                    // Change the css to blue/blue.
                                                    swapStyleSheet("css/bw.core.colors.blue.blue.css");
                                                }


                                                //// Change the page title to indicate the # of tasks. This will show up in the browser tab and is a cool way to show the user they have alerts.
                                                //if (taskData.length > 0) document.title = 'My Budgets (' + taskData.length + ')';
                                                //else document.title = 'My Budgets';



                                                var html = '';
                                                if (taskData.length == 0 && brData.PendingBudgetRequests.length == 0 && brData.PendingPOBudgetRequests.length == 0) {

                                                    html += '<span class="spanH3_40">You have no pending tasks, and there are no pending budget requests.</span>'; //&nbsp;<input type="button" value="Refresh" onclick="javascript:renderAlerts();" style="cursor:pointer;" />';

                                                    // Render the user top bar alert. This is the red dot next to the users name.
                                                    //var utbHtml = '';
                                                    //utbHtml += '<img src="/images/red-dot.png" width="11" height="11" alt="" style="cursor:pointer;vertical-align:top;" />';
                                                    //$('#spanUserTopBarAlert').html(utbHtml);
                                                    // Render the left nav button alert. This is the red dot on the "My Stuff" button.
                                                    //var lnbHtml = '';
                                                    //lnbHtml += '<img src="/images/red-dot.png" width="11" height="11" alt="" style="cursor:pointer;vertical-align:top;" />';
                                                    //$('#spanMyStuffButtonAlert').html(lnbHtml);
                                                }
                                                //  Yellow Title Bar alert. This is the yellow "Alert!" in the top bar.
                                                // Todd: Put some code here to manage this.

                                                // Display the home page alerts.
                                                var deferredIndex = 1; // We only have 1 workflow to display, but if we want to display multiple, use this value.

                                                //html += '<table id="bwWorkflowFunctionalAreaSection' + deferredIndex.toString() + '" style="cursor:default;" title="">';
                                                html += '<table id="tblHomePageAlertSectionForWorkflow' + deferredIndex.toString() + '" style="cursor:default;" title="">';
                                                //html += '<table id="tblSummaryPageFunctionalAreaSectionForWorkflow' + deferredIndex.toString() + '" style="cursor:default;" title="">';


                                                html += '<tr id="functionalAreaRow_' + deferredIndex.toString() + '_Top_1" style="visibility:hidden;"><td colspan="7"></td></tr>'; // This is the invisible one at the top used for reordering.
                                                html += '<tr id="functionalAreaRow_' + deferredIndex.toString() + '_Top_2" style="visibility:hidden;"><td colspan="7"></td></tr>'; // This is the row underneath it for displaying the details.
                                                var pendingHtml = '';
                                                var notPendingHtml = '';
                                                // notifications
                                                //    [0] - home page notifications
                                                //       .length - # of notification types 
                                                //       [index] - notificationDetails
                                                //              [0] - Notification type ("task", "budget request", "invitation")
                                                //              [1] - Notification text (eg. "You have 2 Pending task(s).")
                                                //              [2] - individualNotifications 
                                                //                 .length - # of notifications
                                                //                 [index]
                                                //                        [0] - These vary depending on the notification type.
                                                //                        [1] - xxxx
                                                //                        [2] - xxxx
                                                //                        [3] - xxxx
                                                //                        [4] - xxxx
                                                //                        [5] - xxxx

                                                notifications = new Array(3);

                                                notifications[0] = []; //new Array(3); // Initialize the task section.
                                                notifications[0] = new Array(3);
                                                notifications[1] = []; //new Array(3); // Initialize the budget requests section.
                                                notifications[1] = new Array(3);
                                                notifications[2] = []; //new Array(3); // Initialize the invitations section.
                                                notifications[2] = new Array(3);

                                                // Now we create and load the tasks in notifications[0].
                                                notifications[0][0] = 'task';
                                                if (taskData.length == 1) {
                                                    notifications[0][1] = 'You have ' + taskData.length + ' pending task.';
                                                } else {
                                                    notifications[0][1] = 'You have ' + taskData.length + ' pending tasks.';
                                                }
                                                notifications[0][2] = [];
                                                if (taskData.length > 0) {
                                                    notifications[0][2] = new Array(taskData.length);
                                                    for (var i = 0; i < taskData.length; i++) {
                                                        notifications[0][2][i] = new Array(15);
                                                        notifications[0][2][i][0] = taskData[i].bwTaskTitle;
                                                        notifications[0][2][i][1] = taskData[i].bwStatus;
                                                        notifications[0][2][i][2] = taskData[i].bwPercentComplete;
                                                        notifications[0][2][i][3] = taskData[i].bwRelatedItemId;
                                                        notifications[0][2][i][4] = taskData[i].bwAssignedTo;
                                                        notifications[0][2][i][5] = taskData[i].bwAssignedToId;
                                                        notifications[0][2][i][6] = taskData[i].bwDueDate;
                                                        notifications[0][2][i][7] = taskData[i].ProjectTitle;
                                                        notifications[0][2][i][8] = taskData[i].BudgetAmount;
                                                        notifications[0][2][i][9] = taskData[i].FinancialAreaId;
                                                        notifications[0][2][i][10] = taskData[i].CreatedBy;
                                                        notifications[0][2][i][11] = taskData[i].Title;
                                                        notifications[0][2][i][12] = taskData[i].RequestedCapital;
                                                        notifications[0][2][i][13] = taskData[i].RequestedExpense;
                                                        notifications[0][2][i][14] = taskData[i].TaskType;
                                                    }
                                                }

                                                // Now we create and load the budget requests in notifications[1].
                                                var brLength = brData.PendingBudgetRequests.length + brData.PendingPOBudgetRequests.length;
                                                notifications[1][0] = 'budget request';
                                                if (brLength == 1) {
                                                    notifications[1][1] = 'There is ' + brLength + ' budget request going through the approval process.';
                                                } else {
                                                    notifications[1][1] = 'There are ' + brLength + ' budget requests going through the approval process.';
                                                }
                                                notifications[1][2] = [];
                                                if (brLength > 0) {
                                                    notifications[1][2] = new Array(brLength); // The array can hold both data sets.
                                                    // Load the PendingBudgetRequests first.
                                                    var indexOffset = 0;
                                                    for (var i = 0; i < brData.PendingBudgetRequests.length; i++) {
                                                        notifications[1][2][i] = new Array(13);
                                                        notifications[1][2][i][0] = brData.PendingBudgetRequests[i].bwBudgetRequestId;
                                                        notifications[1][2][i][1] = brData.PendingBudgetRequests[i].CreatedBy;
                                                        notifications[1][2][i][2] = brData.PendingBudgetRequests[i].Title;
                                                        notifications[1][2][i][3] = brData.PendingBudgetRequests[i].ProjectTitle;
                                                        notifications[1][2][i][4] = brData.PendingBudgetRequests[i].BudgetAmount;
                                                        notifications[1][2][i][5] = brData.PendingBudgetRequests[i].FunctionalAreaId;
                                                        notifications[1][2][i][6] = brData.PendingBudgetRequests[i].ARStatus;
                                                        notifications[1][2][i][7] = brData.PendingBudgetRequests[i].BudgetWorkflowStatus;
                                                        notifications[1][2][i][8] = brData.PendingBudgetRequests[i].Quote;
                                                        notifications[1][2][i][9] = brData.PendingBudgetRequests[i].CurrentOwner;
                                                        notifications[1][2][i][10] = brData.PendingBudgetRequests[i].ManagerId;
                                                        notifications[1][2][i][11] = brData.PendingBudgetRequests[i].RequestedCapital;
                                                        notifications[1][2][i][12] = brData.PendingBudgetRequests[i].RequestedExpense;
                                                        indexOffset += 1;
                                                    }
                                                    // Then load the PendingPOBudgetRequests.
                                                    for (var i = 0; i < brData.PendingPOBudgetRequests.length; i++) {
                                                        var index = i + indexOffset;
                                                        notifications[1][2][index] = new Array(13);
                                                        notifications[1][2][index][0] = brData.PendingPOBudgetRequests[i].bwBudgetRequestId;
                                                        notifications[1][2][index][1] = brData.PendingPOBudgetRequests[i].CreatedBy;
                                                        notifications[1][2][index][2] = brData.PendingPOBudgetRequests[i].Title;
                                                        notifications[1][2][index][3] = brData.PendingPOBudgetRequests[i].ProjectTitle;
                                                        notifications[1][2][index][4] = brData.PendingPOBudgetRequests[i].BudgetAmount;
                                                        notifications[1][2][index][5] = brData.PendingPOBudgetRequests[i].FunctionalAreaId;
                                                        notifications[1][2][index][6] = brData.PendingPOBudgetRequests[i].ARStatus;
                                                        notifications[1][2][index][7] = brData.PendingPOBudgetRequests[i].BudgetWorkflowStatus;
                                                        notifications[1][2][index][8] = brData.PendingPOBudgetRequests[i].Quote;
                                                        notifications[1][2][index][9] = brData.PendingPOBudgetRequests[i].CurrentOwner;
                                                        notifications[1][2][index][10] = brData.PendingPOBudgetRequests[i].ManagerId;
                                                        notifications[1][2][index][11] = brData.PendingPOBudgetRequests[i].RequestedCapital;
                                                        notifications[1][2][index][12] = brData.PendingPOBudgetRequests[i].RequestedExpense;
                                                    }
                                                }

                                                // Now we create and load the unclaimed invitations in notifications[2].
                                                notifications[2][0] = 'invitation';
                                                if (invitationData.length == 1) {
                                                    notifications[2][1] = 'There is ' + invitationData.length + ' unclaimed invitation.';
                                                } else {
                                                    notifications[2][1] = 'There are ' + invitationData.length + ' unclaimed invitations.';
                                                }
                                                notifications[2][2] = [];
                                                if (invitationData.length > 0) {
                                                    notifications[2][2] = new Array(invitationData.length);
                                                    for (var i = 0; i < invitationData.length; i++) {
                                                        notifications[2][2][i] = new Array(7);
                                                        notifications[2][2][i][0] = globalUrlPrefix + globalUrl + '?invitation=' + invitationData[i].bwInvitationId;
                                                        notifications[2][2][i][1] = invitationData[i].bwInvitationParticipantRole;
                                                        notifications[2][2][i][2] = invitationData[i].bwInvitationCreatedByFriendlyName;
                                                    }
                                                }

                                                var expandedAlertsIndex = -1;
                                                for (var i = 0; i < notifications.length; i++) {
                                                    if (notifications[i][2].length > 0) {
                                                        var isPendingRow = false;
                                                        var rowHtml = '';
                                                        rowHtml += '<tr id="functionalAreaRow_' + deferredIndex.toString() + '_' + i.toString() + '" class="bwFunctionalAreaRow">';
                                                        // Check for alerts.
                                                        var faNumberOfAlerts = 0;
                                                        faNumberOfAlerts = 1;
                                                        if (faNumberOfAlerts > 0) {
                                                            isPendingRow = true;
                                                            if (faNumberOfAlerts == 1) {
                                                                //rowHtml += '   <td style="width:15px;" title="There is 1 overdue task. Click here to view the details..."><em>PENDING</em></td>';
                                                                if (notifications[i][0] == 'task') {
                                                                    rowHtml += '<td><img src="/images/red-dot.png" width="33" height="33" alt="" style="cursor:pointer;vertical-align:top;" /></td>';
                                                                    expandedAlertsIndex = i; // This lets us know, below, if and where to expand the alerts!
                                                                } else {
                                                                    rowHtml += '<td></td>';
                                                                }
                                                                //
                                                            } else {
                                                                //rowHtml += '   <td style="width:15px;" title="There are ' + faNumberOfAlerts.toString() + ' overdue tasks. Click here to view the details..."><em>PENDING</em></td>';
                                                                if (notifications[i][0] == 'task') {
                                                                    rowHtml += '<td><img src="/images/red-dot.png" width="33" height="33" alt="" style="cursor:pointer;vertical-align:top;" /></td>';
                                                                } else {
                                                                    rowHtml += '<td></td>';
                                                                }
                                                                //
                                                            }
                                                        } else {
                                                            rowHtml += '   <td style="width:15px;"></td>';
                                                        }
                                                        rowHtml += '   <td style="text-align:left;" class="bwHPNDrillDownLinkCell" onclick="expandHomePageNotificationAndRenderAlerts(\'' + notifications[i][0] + '\', \'' + deferredIndex + '\', \'functionalAreaRow_' + deferredIndex.toString() + '_' + i.toString() + '\');"><span>' + notifications[i][1] + '</span></td>';
                                                        rowHtml += '</tr>';
                                                        if (isPendingRow == true) {
                                                            pendingHtml += rowHtml;
                                                        } else {
                                                            notPendingHtml += rowHtml;
                                                        }
                                                    }
                                                }
                                                html += pendingHtml + notPendingHtml; // This puts the pending functional areas at the top.
                                                html += '</table>';
                                                var unitTable1 = '';
                                                unitTable1 += '<div id="BWFunctionalAreaDiv' + deferredIndex.toString() + '" style="cursor:pointer;" >';
                                                unitTable1 += '<table id="BWFunctionalArea' + deferredIndex.toString() + '" style="vertical-align:top;width:100%;">';
                                                // THIS IS THE TOP BAR WHICH WE CAN ENABLE IF WE WANT TO HAVE MULTIPLE SECTIONS.
                                                //unitTable1 += '  <tr>';
                                                //unitTable1 += '    <td class="bwChartCalculatorWorkflowInstanceTitle" style="height:28px;padding:6px 20px 6px 20px;margin:0 0 0 0;border-width:0 0 0 0;" onclick="collapseOrExpandBwFunctionalAreaDiv(\'bwWorkflowFunctionalAreaSection' + deferredIndex.toString() + '\', \'' + deferredIndex.toString() + '\');" colspan="2" style="text-align:left;">';
                                                //unitTable1 += '      <span id="BWAppInstance' + deferredIndex.toString() + 'Title">' + title + '</span>';
                                                //unitTable1 += '    </td>';
                                                //unitTable1 += '  </tr>';
                                                unitTable1 += html;
                                                unitTable1 += '</table><br />';
                                                unitTable1 += '</div>';
                                                $('#divHomePageAlert').html(unitTable1);

                                                // This makes sure the Alerts section is always expanded (if there are alerts).
                                                if (expandedAlertsIndex != -1) {
                                                    var functionalAreaRowId = 'functionalAreaRow_' + deferredIndex.toString() + '_' + expandedAlertsIndex.toString();
                                                    expandHomePageNotificationAndRenderAlerts('task', deferredIndex, functionalAreaRowId); // 
                                                }




                                                //// We do this here because when we regain communication, we want to hide this.
                                                //$("#divAlertDialog").dialog('close');








                                                //$('#divHomePageAlert').empty();
                                                //var tmpHtml = getHomePageNotificationsHtml('1');
                                                //$('#divHomePageAlert').html(tmpHtml);
                                            },
                                            error: function (data, errorCode, errorMessage) {
                                                //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                                                displayAlertDialog('Error in ios8.js.renderAlerts():1:' + errorCode + ', ' + errorMessage + ' I believe this happens when wifi goes down. SERVICE UNAVAILABLE ');
                                            }
                                        });
                                    },
                                    error: function (data, errorCode, errorMessage) {
                                        //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                                        displayAlertDialog('Error in ios8.js.renderAlerts():2:' + errorCode + ', ' + errorMessage);
                                    }
                                });
                            },
                            error: function (data, errorCode, errorMessage) {
                                //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                                displayAlertDialog('Error in ios8.js.renderAlerts():3:' + errorCode + ', ' + errorMessage);
                            }
                        });
                    },
                    error: function (data, errorCode, errorMessage) {
                        //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                        displayAlertDialog('Error in ios8.js.renderAlerts():4:' + errorCode + ', ' + errorMessage + ', ' + JSON.stringify(data));
                    }
                });
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                //displayAlertDialog('Error in ios8.js.renderAlerts():5:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.renderAlerts():5:' + errorCode + ', ' + errorMessage + ': Most likely service unavailable issue.'); // Todd: self raising this error here. As of 4-20-17 this is the only place this happens.
            }
        });
    }
}



function expandHomePageNotificationAndRenderAlerts(notificationType, deferredIndex, functionalAreaRowId) {
    // notificationType = task, budget request, invitation
    try {
        //displayAlertDialog('type:' + notifications);
        ////displayAlertDialog('text:' + notifications);
        //displayAlertDialog('expandHomePageNotificationAndRenderAlerts()');
        //displayAlertDialog('notifications.length:' + notifications.length);

        //displayAlertDialog('length:' + notifications[0][2].length);

        //var appWebUrl = BWMData[0][deferredIndex][1];
        var clickedRowHtml = $('#' + functionalAreaRowId)[0].innerHTML; // This is the row that we want to move to the top and expand: functionalAreaRowId
        var topRow1Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_1';
        var topRow2Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_2';
        var div1 = document.getElementById(topRow1Id);
        var div2 = document.getElementById(topRow2Id);
        var div = document.getElementById(functionalAreaRowId);
        // First we have to show the previous row that was hidden, if there was one.
        if (div1.style.visibility == 'visible') {
            // It is currently visible, so we have to display the original row again. We're lazy, just doing them all.
            try {
                for (var i = 0; i < 1000; i++) {
                    var currentRowId = 'functionalAreaRow_' + deferredIndex.toString() + '_' + i.toString();
                    var currentRow = document.getElementById(currentRowId);
                    currentRow.style.visibility = 'visible';
                    $('#' + currentRowId).show();
                }
            } catch (e) {
                // This means we are done so continue on!
            }
        }
        // Now we put this in the top row, and show it.
        $('#' + topRow1Id)[0].innerHTML = clickedRowHtml;
        div1.style.visibility = 'visible';
        $('#' + topRow1Id).show();
        // We need to reset the background-color of the cell due to the hover over having left it colored.
        $('#' + topRow1Id).find('.bwFADrillDownLinkCell').css({
            'background-color': 'white', 'color': '#444', 'cursor': 'default'
        });

        // Now we hide the original row.
        div.style.visibility = 'hidden';
        $('#' + functionalAreaRowId).hide();




        // Now we show the details underneath.

        var functionalAreaId;

        var topHtml = '';
        var numberOfFunctionalAreas = 3;










        topHtml += '<tr>';
        topHtml += '    <td colspan="7">';
        topHtml += '        <table>';
        // Render the "Pending" section.
        //var numberOfBrItems = 2;
        //for (var pi = 0; pi < submittedBrItems.length; pi++) {

        // Go through the notification types and make sure they match the one specified by notificationType.
        var ntypeindex;

        for (var i = 0; i < notifications.length; i++) {
            if (notificationType == notifications[i][0]) {
                ntypeindex = i;
            }
        }

        if (notificationType == 'task') {
            for (var pi = 0; pi < notifications[ntypeindex][2].length; pi++) {
                var taskTitle = notifications[ntypeindex][2][pi][0];
                var appWebUrl = appweburl;
                var budgetRequestId = notifications[ntypeindex][2][pi][3];
                var arName = notifications[ntypeindex][2][pi][11];
                var brTitle = notifications[ntypeindex][2][pi][7];
                var title = notifications[ntypeindex][2][pi][11];
                var budgetAmount = notifications[ntypeindex][2][pi][8];
                var requestedCapital = notifications[ntypeindex][2][pi][12];
                var requestedExpense = notifications[ntypeindex][2][pi][13];
                var taskType = notifications[ntypeindex][2][pi][14];

                var currentAmount = 0;
                if (budgetAmount == 'null') {
                    currentAmount = Number(requestedCapital) + Number(requestedExpense);
                } else {
                    currentAmount = budgetAmount;
                }

                // Figure out how many days since the task was created.
                //var thisMustBeADifferentKindOfTask = false; // Todd: oooooooo ugly!
                var daysSinceTaskCreated = 0;
                try {
                    var cd = notifications[ntypeindex][2][pi][6]; //bwDueDate //wtlItems.d.results[r].bwCreated;
                    var year = cd.split('-')[0];
                    var month = cd.split('-')[1];
                    var day = cd.split('-')[2].split('T')[0];
                    var taskCreatedDate = new Date(Number(year), Number(month) - 1, Number(day) - 1); // +1 because we're using overdue date.
                    var todaysDate = new Date();
                    var utc1 = Date.UTC(taskCreatedDate.getFullYear(), taskCreatedDate.getMonth(), taskCreatedDate.getDate());
                    var utc2 = Date.UTC(todaysDate.getFullYear(), todaysDate.getMonth(), todaysDate.getDate());
                    var _MS_PER_DAY = 1000 * 60 * 60 * 24;
                    daysSinceTaskCreated = Math.floor((utc2 - utc1) / _MS_PER_DAY);
                } catch (e) {
                    // TODD: THIS NEEDS TO BE REEXAMINED, we are catching this error when the new recurring tasks cam einto play!
                    //thisMustBeADifferentKindOfTask = true;
                }

                topHtml += '   <tr>';
                topHtml += '       <td style="width:10px;"></td>';
                topHtml += '       <td style="width:10px;"></td>';

                // Find the functional area name.
                var functionalAreaId = notifications[ntypeindex][2][pi][9];
                var functionalAreaName = '';


                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] = workflowAppId) {
                        // We have the correct workflow!
                        for (var fai = 0; fai < BWMData[0][x][4].length; fai++) {
                            if (functionalAreaId == BWMData[0][x][4][fai][0]) {
                                functionalAreaName = BWMData[0][x][4][fai][1];
                            }
                        }
                    }
                }

                if (taskType == 'RECURRING_EXPENSE_NOTIFICATION_TASK') {
                    //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5"><div style="display:inline-block;"><a style="cursor:pointer;" onclick="displayRecurringExpenseOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');" target="_blank" title="Click to view the recurring expense...">' + daysSinceTaskCreated.toString() + ' days overdue: Recurring expense <em>(' + brTitle + ' - ' + functionalAreaName + ') is due to be submitted</em></a></div></td>';
                    topHtml += '            <td class="tdHomePageSubNotificationIos8" colspan="5"><div style="display:inline-block;"><a style="cursor:pointer;" onclick="displayRecurringExpenseOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');" target="_blank" title="Click to view the recurring expense...">' + daysSinceTaskCreated.toString() + ' days overdue: Recurring expense <em>(' + brTitle + ' - ' + functionalAreaName + ') is due to be submitted</em></a></div></td>';
                } else if (taskType == 'BUDGET_REQUEST_WORKFLOW_TASK') {
                    //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5"><div style="display:inline-block;"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + budgetRequestId + '\', \'' + arName + '\', \'' + brTitle + '\', \'' + title + '\');" target="_blank" title="Click to view the request ' + title + '.">' + daysSinceTaskCreated.toString() + ' days overdue: ' + brTitle + ' (<em>' + formatCurrency(currentAmount) + '</em>) - <em>' + functionalAreaName + '</em></a></div></td>';
                    topHtml += '            <td class="tdHomePageSubNotificationIos8" colspan="5"><div style="display:inline-block;"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + budgetRequestId + '\', \'' + arName + '\', \'' + encodeHtmlAttribute(brTitle) + '\', \'' + title + '\');" target="_blank" title="Click to view the request ' + title + '.">' + daysSinceTaskCreated.toString() + ' days overdue: ' + brTitle + ' (<em>' + formatCurrency(currentAmount) + '</em>) - <em>' + functionalAreaName + '</em></a></div></td>';
                } else {
                    //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5">UNKNOWN TASK TYPE</td>';
                    topHtml += '            <td class="tdHomePageSubNotificationIos8" colspan="5">UNKNOWN TASK TYPE</td>';
                }

                topHtml += '        </tr>';
            }
        } else if (notificationType == 'budget request') {
            for (var pi = 0; pi < notifications[ntypeindex][2].length; pi++) {


                var projectTitle = notifications[ntypeindex][2][pi][3];
                var budgetAmount = notifications[ntypeindex][2][pi][4];
                // Find the functional area name.
                var functionalAreaId = notifications[ntypeindex][2][pi][5];
                var functionalAreaName = '';
                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] = workflowAppId) {
                        // We have the correct workflow!
                        for (var fai = 0; fai < BWMData[0][x][4].length; fai++) {
                            if (functionalAreaId == BWMData[0][x][4][fai][0]) {
                                functionalAreaName = BWMData[0][x][4][fai][1];
                            }
                        }
                    }
                }


                //appWebUrl, budgetRequestId, arName, brTitle
                var appWebUrl = appweburl; //notifications[ntypeindex][2][pi][xxxx];
                var budgetRequestId = notifications[ntypeindex][2][pi][0];
                var arName = notifications[ntypeindex][2][pi][2];
                var brTitle = notifications[ntypeindex][2][pi][3];
                var title = notifications[ntypeindex][2][pi][2];
                var requestedCapital = notifications[ntypeindex][2][pi][11];
                var requestedExpense = notifications[ntypeindex][2][pi][12];

                var currentAmount = 0;
                if (budgetAmount == 'null') {
                    currentAmount = Number(requestedCapital) + Number(requestedExpense);
                } else {
                    currentAmount = budgetAmount;
                }


                //// Figure out how many days since the task was created.
                //var cd = notifications[ntypeindex][2][pi][6]; //bwDueDate //wtlItems.d.results[r].bwCreated;
                //var year = cd.split('-')[0];
                //var month = cd.split('-')[1];
                //var day = cd.split('-')[2].split('T')[0];
                //var taskCreatedDate = new Date(Number(year), Number(month) - 1, Number(day));
                //var todaysDate = new Date();
                //var utc1 = Date.UTC(taskCreatedDate.getFullYear(), taskCreatedDate.getMonth(), taskCreatedDate.getDate());
                //var utc2 = Date.UTC(todaysDate.getFullYear(), todaysDate.getMonth(), todaysDate.getDate());
                //var _MS_PER_DAY = 1000 * 60 * 60 * 24;
                //var daysSinceTaskCreated = Math.floor((utc2 - utc1) / _MS_PER_DAY);

                topHtml += '   <tr>';
                topHtml += '       <td style="width:10px;"></td>';
                topHtml += '       <td style="width:10px;"></td>';

                //numberOfOverdueTasksForUser++;
                //if (Number(daysSinceTaskCreated) > Number(oldestOverdueTaskForUser)) oldestOverdueTaskForUser = daysSinceTaskCreated;

                //if (daysSinceTaskCreated == 1) {
                //    topHtml += '<td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;">1 day overdue: '; // for task <em>' + taskTitle + '</em>&nbsp;&nbsp;&nbsp;';
                //} else {
                //    topHtml += '<td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;">' + daysSinceTaskCreated.toString() + ' days overdue: '; // for task <em>' + taskTitle + '</em>&nbsp;&nbsp;&nbsp;';
                //}

                //displayAlertDialog('xxx');

                //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + budgetRequestId + '\', \'' + arName + '\', \'' + brTitle + '\', \'' + title + '\');" target="_blank" title="Click to view the request ' + title + '.">' + projectTitle + ' (<em>' + formatCurrency(currentAmount) + '</em>) - <em>' + functionalAreaName + '</em></a></td>';


                // No pin.
                topHtml += '            <td class="tdHomePageSubNotificationIos8" colspan="5"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + budgetRequestId + '\', \'' + arName + '\', \'' + encodeHtmlAttribute(brTitle) + '\', \'' + title + '\');" target="_blank" title="Click to view the request ' + title + '.">' + projectTitle + ' (<em>' + formatCurrency(currentAmount) + '</em>) - <em>' + functionalAreaName + '</em></a></td>';
                // Pin.
                //topHtml += '            <td class="tdHomePageSubNotificationIos8" colspan="5"><img src="/images/pin2.jpeg" title="Pin this request so that you can keep an eye on it!" style="height:80px;width:80px;cursor:pointer;" onclick="javascript:displayAlertDialog(\'Pin this request so that you can keep an eye on it! This functionality is incomplete but is coming soon!\');" />&nbsp;&nbsp;<a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + budgetRequestId + '\', \'' + arName + '\', \'' + brTitle + '\', \'' + title + '\');" target="_blank" title="Click to view the request ' + title + '.">' + projectTitle + ' (<em>' + formatCurrency(currentAmount) + '</em>) - <em>' + functionalAreaName + '</em></a></td>';



                //if (faTitle == '' || brProjectTitle == '') {
                //    // If we get here this is not good. This means there is something wrong with the AR or perhaps it has to do with the status of the AR.
                //    topHtml += '       <a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][0] + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][1] + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][2] + '\');" target="_blank" title="Click to view the request..."><em>There is a problem with this AR. Click here to learn more</em></a>';
                //} else {
                //    topHtml += '       <a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][0] + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][1] + '\', \'' + BWMData[0][workflowIndex][4][selectedFaIndex][8][selectedBrIndex][2] + '\');" target="_blank" title="Click to view the request...">' + brProjectTitle + ' (<em>' + formatCurrency(brBudgetAmount) + '</em>) - <em>' + faTitle + '</em></a>'; // ' + brProjectTitle + ' <em>(' + formatCurrency(brBudgetAmount) + ')</em></a>';
                //}

                topHtml += '        </tr>';
            }
        } else {
            // This is the one we will replace here soon.
            for (var pi = 0; pi < notifications[ntypeindex][2].length; pi++) {

                topHtml += '        <tr>';
                topHtml += '            <td style="width:90px;"></td>';
                topHtml += '            <td>&nbsp;&nbsp;</td>';
                //topHtml += '            <td colspan="5" class="tdHomePageSubNotificationIos8"><div id="tdUnclaimedInvitationLinkSwipeEnabled' + pi + '"><a style="cursor:pointer;" onclick="displayArInDialog();" target="_blank" title="Send this link in an email to invite someone to participate in this workflow. You will be notified when they have confirmed their participation.">' + notifications[ntypeindex][2][pi][0] + '</a></div></td>';
                var invitationChar = notifications[ntypeindex][2][pi][0].indexOf('=') + 1;
                var invitationGuid = notifications[ntypeindex][2][pi][0].substring(invitationChar);
                topHtml += '            <td colspan="5" class="tdHomePageSubNotificationIos8"><div id="tdUnclaimedInvitationLinkSwipeEnabled' + pi + '"><a style="cursor:pointer;" onclick="cmdViewInvitation(\'' + invitationGuid + '\');" target="_blank" title="Send this link in an email to invite someone to participate in this workflow. You will be notified when they have confirmed their participation.">' + notifications[ntypeindex][2][pi][0] + '</a></div></td>';
                topHtml += '        </tr>';
            }
        }














        topHtml += '        </td>';
        topHtml += '    </tr>';
        topHtml += '</table>';

        // Closing tags.
        topHtml += '   </td>';
        topHtml += '</tr>';















        //topHtml += '<tr>';
        //topHtml += '    <td colspan="7">';
        //topHtml += '        <table>';
        //// Render the "Pending" section.
        //var numberOfBrItems = 2;
        ////for (var pi = 0; pi < submittedBrItems.length; pi++) {
        //for (var pi = 0; pi < numberOfBrItems; pi++) {
        //    topHtml += '        <tr>';
        //    topHtml += '            <td style="width:90px;"></td>';
        //    topHtml += '            <td>&nbsp;&nbsp;</td>';
        //    topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5"><a style="cursor:pointer;" onclick="displayArInDialog();" target="_blank" title="Click to view the request...">' + 'Pizza ($0.00 - Submitted undefined undefined)</a></td>';
        //    topHtml += '        </tr>';
        //}
        //topHtml += '        </td>';
        //topHtml += '    </tr>';
        //topHtml += '</table>';

        //// Closing tags.
        //topHtml += '   </td>';
        //topHtml += '</tr>';

        // This is where it is displayed!
        $('#' + topRow2Id)[0].innerHTML = topHtml;
        div2.style.visibility = 'visible';
        $('#' + topRow2Id).show();


        //for (var pi = 0; pi < notifications[ntypeindex][2].length; pi++) {
        //    var el = document.getElementById('tdUnclaimedInvitationLinkSwipeEnabled' + pi);
        //    swipedetect(el, function (swipedir) {
        //        // swipedir contains either "none", "left", "right", "top", or "down"
        //        if (swipedir == 'left')
        //            displayAlertDialog('You just swiped left!');
        //    });
        //}



    } catch (e) {
        displayAlertDialog('Error in android.js.expandHomePageNotificationAndRenderAlerts() 2:' + e.message + ' ' + e.stack + ' This is not necessarily a service unavailable error but we dont want to bother the user!!');
        // notificationType, deferredIndex, functionalAreaRowId
        //displayAlertDialog('Error in my.js.expandHomePageNotificationAndRenderAlerts() 2:' + notificationType + ' ' + deferredIndex + ' ' + functionalAreaRowId);
    }
}



function swipedetect(el, callback) {
    displayAlertDialog('swipedetect');
    var touchsurface = el,
    swipedir,
    startX,
    startY,
    distX,
    distY,
    threshold = 150, //required min distance traveled to be considered swipe
    restraint = 100, // maximum distance allowed at the same time in perpendicular direction
    allowedTime = 300, // maximum time allowed to travel that distance
    elapsedTime,
    startTime,
    handleswipe = callback || function (swipedir) {
    }

    touchsurface.addEventListener('touchstart', function (e) {
        var touchobj = e.changedTouches[0]
        swipedir = 'none'
        dist = 0
        startX = touchobj.pageX
        startY = touchobj.pageY
        startTime = new Date().getTime() // record time when finger first makes contact with surface
        e.preventDefault()
    }, false)

    touchsurface.addEventListener('touchmove', function (e) {
        e.preventDefault() // prevent scrolling when inside DIV
    }, false)

    touchsurface.addEventListener('touchend', function (e) {
        var touchobj = e.changedTouches[0]
        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
        elapsedTime = new Date().getTime() - startTime // get time elapsed
        if (elapsedTime <= allowedTime) { // first condition for awipe met
            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) { // 2nd condition for horizontal swipe met
                swipedir = (distX < 0) ? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
            }
            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) { // 2nd condition for vertical swipe met
                swipedir = (distY < 0) ? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
            }
        }
        handleswipe(swipedir)
        e.preventDefault()
    }, false)
}

//USAGE:
/*
var el = document.getElementById('someel')
swipedetect(el, function(swipedir){
    swipedir contains either "none", "left", "right", "top", or "down"
    if (swipedir =='left')
        displayAlertDialog('You just swiped left!')
})
*/

function renderTenantOwnerStuff() {
    //displayAlertDialog('renderTenantOwnerStuff()');
    // Render the user dropdown tenant administration link.
    //var tmHtml = '';
    //tmHtml += '<a href="javascript:cmdTenantAdministration();">';
    //tmHtml += 'Administration';
    //tmHtml += '</a>';
    //tmHtml += '<hr />';
    //$('#divUserDropdownTenantAdministrationLink').html(tmHtml);
    //  




}


function cmdAcceptInvitation(bwInvitationId, bwTenantId, bwWorkflowAppId, bwWorkflowAppTitle, bwInvitationParticipantRole) { //, bwInvitationCreatedById, bwInvitationCreatedByFriendlyName) {
    // We have been provided the invitation details. We need the tenant id, the workflow app id, the role, the created by Id (the person who created the invitation) and friendly name.
    // We have to update the participant details, then the invitation details.
    try {
        var data = {
            "participantId": participantId,
            "bwInvitationId": bwInvitationId,
            "bwTenantId": bwTenantId,
            "bwWorkflowAppId": bwWorkflowAppId,
            "bwWorkflowAppTitle": bwWorkflowAppTitle,
            "bwInvitationParticipantRole": bwInvitationParticipantRole,
            "bwParticipantLogonType": participantLogonType
        };
        $.ajax({
            url: webserviceurl + "/participants/acceptinvitation",
            type: "PUT",
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (data) {
                try {
                    //var location = window.location + ''; // Force it to be a string.
                    //displayAlertDialog('ios8.js.cmdAcceptInvitation() location: ' + location);
                    //var tmp = location.split('#')[1];
                    //var url = 'my.html?logontype=' + participantLogonType + '#' + tmp;
                    //displayAlertDialog('ios8.js.cmdAcceptInvitation() url:' + url);
                    ////window.location = url;

                    if (data.message == 'SUCCESS') {

                        //var url = appweburl + '/my.html?logontype=' + participantLogonType;
                        //window.location = url;
                        invitationAlreadyAccepted = true;
                        renderWelcomeScreen();
                    } else {

                        displayAlertDialog(data.message);

                    }
                } catch (e) {
                    displayAlertDialog('Error in ios8.js.cmdAcceptInvitation():1:' + e.message);
                }
            },
            error: function (data, errorCode, errorMessage) {
                //handleExceptionWithAlert('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.cmdAcceptInvitation():' + errorCode + ', ' + errorMessage + '::' + JSON.stringify(data));
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdAcceptInvitation():2:' + e.message);
    }
}

var tipToggle = false; // Global var to manage this.
var tipsInitialized = false;
function cmdDisplayToDoList() {
    if (tipToggle == false) tipToggle = true;
    else tipToggle = false;
    if (tipsInitialized == true) {
        // They exist in the DOM so we are Ok.
        $('#btnInviteNewParticipant1').qtip('toggle', tipToggle);
        $('#divWelcomePageLeftButtonsConfigurationButton').qtip('toggle', tipToggle);
        $('#divWelcomePageLeftButtonsNewRequestButton').qtip('toggle', tipToggle);
    } else {
        // They don't exist in the DOM so we need to add them.


        $('#btnInviteNewParticipant1').qtip({
            content: {
                text: 'Step 1: Email the invitation link to your participants.' //'<span style="font-size:50pt;width:100%;"><b>Step 1:</b> Email the invitation link to your participants.</span>'
            },
            position: {
                at: 'bottom center'
            },
            style: {
                classes: 'bwQtip',
                width: '900',
                height: '66'
            }
        });
        $('#divWelcomePageLeftButtonsConfigurationButton').qtip({
            content: {
                text: '<span style="font-size:50pt;width:100%;"><b>Step 2:</b> Go to the Configuration section to configure Financial Areas, specifying the participants.</span>'
            },
            position: {
                at: 'bottom center'
            },
            style: {
                classes: 'bwQtip',
                tip: {
                    corner: 'bottom center',
                    mimic: 'bottom left',
                    border: 1,
                    width: 900,
                    height: 66
                }
            }
        });
        $('#divWelcomePageLeftButtonsNewRequestButton').qtip({
            content: {
                text: '<span style="font-size:50px;width:100%;"><b>Step 3:</b> Create a new Budget Request. The choice of Financial Area determines who participates in the approval of this budget request!</span>'
            },
            position: {
                at: 'right bottom'
            },
            style: {
                classes: 'bwQtip',
                tip: {
                    corner: 'bottom center',
                    mimic: 'bottom left',
                    border: 1,
                    width: 900,
                    height: 66
                }
            }
        });
        tipsInitialized = true;
        $('#btnInviteNewParticipant1').qtip('toggle', tipToggle);
        $('#divWelcomePageLeftButtonsConfigurationButton').qtip('toggle', tipToggle);
        $('#divWelcomePageLeftButtonsNewRequestButton').qtip('toggle', tipToggle);
        tipToggle = true; // Todd: Did this fix the 2 click issue?
    }







    // Show the sticky tags.

    //$('#spanAlertLink').qtip('toggle', true);




    //try {
    //    $('#bwQuickLaunchMenuTd').css({ width: '0' }); // This gets rid of the jumping around.

    //    $('#liNewRequest').hide();
    //    $('#liMyStuff').hide();
    //    $('#liSummaryReport').hide();
    //    $('#liConfiguration').hide();
    //    $('#liHelp').hide();
    //    $('#liWelcome').show();

    //    $('#divWelcomeMessage').empty(); // Clear the welcome screen!

    //    var e1 = document.getElementById('divNewRequestMasterDiv');
    //    e1.style.borderRadius = '20px 0 0 20px';

    //    $('#divWelcomeMasterDivTitle').text('Alerts');

    //    $('#divMenuMasterDivWelcomeButton').css({ 'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer' });
    //    $('#divMenuMasterDivWelcomeButton').click(function () {
    //        //$('#divMenuMasterDivWelcomeButton').css({ 'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white' });
    //        //$('#divWelcomeMasterDivTitle').text('Home');
    //        renderWelcomeScreen();
    //    });
    //    // Web service call to get the user details.
    //    var operationUri = appweburl + "/bwparticipants/getuserdetailsbyparticipantid/" + participantId.toString();
    //    $.ajax({
    //        url: operationUri,
    //        method: "GET",
    //        headers: {
    //            "Accept": "application/json; odata=verbose"
    //        },
    //        success: function (userData) {
    //            //var userLogonType;
    //            //if (userData.d.results[0].bwParticipantMicrosoftUserId != null) {
    //            //    userLogonType = 'Microsoft';
    //            //} else if (userData.d.results[0].bwParticipantFacebookUserId != null) {
    //            //    userLogonType = 'Facebook';
    //            //} else if (userData.d.results[0].bwParticipantGoogleUserId != null) {
    //            //    userLogonType = 'Google';
    //            //} else if (userData.d.results[0].bwParticipantLinkedInUserId != null) {
    //            //    userLogonType = 'LinkedIn';
    //            //}
    //            // This is our User Options screen.
    //            var html = '';
    //            html += '<br />';
    //            html += '<span style="color:black;font-weight:bold;">Alerts [abbr disp link icon]&nbsp;[full disp link icon]</span>';
    //            html += '<hr />';
    //            // Outstanding tasks.
    //            html += '<div class="codeSnippetContainer" id="code-snippet-4" xmlns="">';
    //            html += '    <div class="codeSnippetContainerTabs">';
    //            html += '        <div class="codeSnippetContainerTabSingle" dir="ltr"><a>&nbsp;&nbsp;My outstanding tasks&nbsp;&nbsp;</a></div>';
    //            html += '    </div>';
    //            html += '    <div class="codeSnippetContainerCodeContainer">';
    //            html += '        <div class="codeSnippetToolBar">';
    //            html += '            <div class="codeSnippetToolBarText">';
    //            html += '                <a name="CodeSnippetCopyLink" title="Copy to clipboard." style="display: none;" href="javascript:displayAlertDialog(\'Copy support is not yet implemented.\');">Copy</a>';
    //            html += '            </div>';
    //            html += '        </div>';
    //            html += '        <div class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5207fb9c-60fd-402f-8729-5795651a5ad3" dir="ltr">';
    //            html += '            <div>';
    //            html += '                <span id="spanOutstandingTasks" style="font-size:x-small;"></span>';
    //            html += '            </div>';
    //            html += '        </div>';
    //            html += '    </div>';
    //            html += '</div>';
    //            // end Outstanding tasks.
    //            html += '<br />';
    //            html += '<table>';
    //            html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>Outstanding tasks:<i>(tasks that are assigned to me...)</i></td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>My pending budget requests:<i>(list my requests that are in process...)</i></td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>Unclaimed invitations:<i>(invitations I have created but have not been logged into yet...)</i></td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            html += '    <tr><td>Configuration issues:<i>(no financial areas, and things of this sort...)</i></td><td></td></tr>';
    //            html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //            html += '</table>';
    //            $('#divWelcomeMessage').html(html);

    //            //$('#txtUserOptionsFriendlyName').val(userData.d.results[0].bwParticipantFriendlyName);
    //            //$('#txtUserOptionsEmail').val(userData.d.results[0].bwParticipantEmail);
    //            //$('#txtUserOptionsRole').val(userData.d.results[0].bwParticipantRole);

    //            var data = {
    //                "bwTenantId": tenantId,
    //                "bwWorkflowAppId": workflowAppId,
    //                "bwParticipantId": participantId
    //            };
    //            //var operationUri = appweburl + "/bwtasksoutstanding/" + participantId;
    //            var operationUri = appweburl + "/bwtasksoutstanding";
    //            $.ajax({
    //                url: operationUri,
    //                type: "DELETE",
    //                contentType: 'application/json',
    //                data: data,
    //                success: function (data) {
    //                    //displayAlertDialog(JSON.stringify(data));
    //                    var html = '';
    //                    //html += data;
    //                    html += '<table class="myStuffTable">';
    //                    html += '  <tr>';
    //                    html += '    <td>task title</td>';
    //                    html += '    <td>related item title</td>';
    //                    html += '    <td>requested by</td>';
    //                    html += '    <td>requested date</td>';
    //                    html += '    <td>task due date</td>';
    //                    //html += '    <td>task outcome</td>';
    //                    //html += '    <td>percent complete</td>';
    //                    html += '    <td>hasbeenprocessedbytheworkflowengine</td>';
    //                    html += '    <td>assigned to</td>';
    //                    html += '    <td>assigned to id</td>';
    //                    html += '    <td>workflow app id</td>';
    //                    html += '    <td>related item id</td>';
    //                    //html += '    <td>approval level workflow token</td>';
    //                    html += '  </tr>';

    //                    //displayAlertDialog('data length:' + data.length);

    //                    for (var i = 0; i < data.length; i++) {
    //                        html += '  <tr>';
    //                        html += '    <td><a href="javascript:displayArOnTheHomePage(\'' + data[i].bwRelatedItemId + '\', \'' + participantId + '\');">' + data[i].bwTaskTitle + '</a></td>';
    //                        html += '    <td>' + data[i].BudgetRequestProjectTitle + '</td>';
    //                        html += '    <td>' + data[i].BudgetRequestCreatedBy + '</td>';
    //                        html += '    <td>' + data[i].bwCreated + '</td>';
    //                        html += '    <td>' + data[i].bwDueDate + '</td>';
    //                        html += '    <td>' + data[i].bwHasBeenProcessedByTheWorkflowEngine + '</td>';
    //                        html += '    <td>' + data[i].bwAssignedTo + '</td>';
    //                        html += '    <td>' + data[i].bwAssignedToId + '</td>';
    //                        html += '    <td>' + data[i].bwWorkflowAppId + '</td>';
    //                        html += '    <td>' + data[i].bwRelatedItemId + '</td>';

    //                        html += '  </tr>';
    //                        //html += 'bwTaskTitle:' + data[i].bwTaskTitle + ', bwTaskOutcome:' + data[i].bwTaskOutcome + ' bwPercentComplete:' +data[i].bwPercentComplete + ' bwHasBeenProcessedByTheWorkflowEngine:' +data[i].bwHasBeenProcessedByTheWorkflowEngine + ', bwAssignedTo:' +data[i].bwAssignedTo + '<br/>';
    //                        //html += '';
    //                    }
    //                    html += '<tr><td colspan="10">DONE</td></tr>';
    //                    html += '</table>';
    //                    $('#spanOutstandingTasks').append(html);
    //                    //$('#txtBwWorkflowTasks').append(html);
    //                },
    //                error: function (data, errorCode, errorMessage) {
    //                    //window.waitDialog.close();
    //                    //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
    //                    displayAlertDialog('Error in ios8.js.cmdDisplayToDoList():1:' + errorCode + ', ' + errorMessage + JSON.stringify(data));
    //                }
    //            });
    //        },
    //        error: function (data, errorCode, errorMessage) {
    //            displayAlertDialog('Error in ios8.js.cmdDisplayToDoList():2:', errorCode + ', ' + errorMessage);
    //        }
    //    });
    //} catch (e) {
    //    displayAlertDialog('Error in ios8.js.cmdDisplayToDoList():3:' + e.message);
    //}
}

function cmdDisplayLoggedInUserDetailsInDropDown(loggedInUserSpanTagId) {
    // This is the arrow next to the logged in user in the top menu bar.
    // The logged in user drop down.

    $('#spanLoggedInUserDropDownDialogTitle').html(participantFriendlyName);

    $("#bwLoggedInUserDropDown").dialog({
        modal: true,
        resizable: false,
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        width: "800px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#bwLoggedInUserDropDown").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
    });

    $("#bwLoggedInUserDropDown").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove(); // This gets rid of the title bar in the dialog.

    //generateConfigurationLeftSideMenu();




    //$("#bwLoggedInUserDropDown").dialog({
    //    autoOpen: true,
    //    show: {
    //        //effect: "blind",
    //        //duration: 1000
    //    },
    //    hide: {
    //        //effect: "explode",
    //        //duration: 1000
    //    },
    //    position: {
    //        my: "left top",
    //        at: "left bottom",
    //        of: document.getElementById(loggedInUserSpanTagId) // This hides the close button.
    //    },
    //    open: function (event, ui) {
    //        $(".ui-dialog-titlebar-close", ui.dialog | ui).hide();
    //        // Add the click event and set the click tracker variable.
    //        hideLoggedInUserDropDownFirstClickTracker = false;
    //        var elem = document.getElementById("divDocumentBody");
    //        elem.addEventListener("click", hideLoggedInUserDropDown);
    //    }
    //});
}


function hideLoggedInUserDropDown() {
    //displayAlertDialog('hideLoggedInUserDropDown. hideLoggedInUserDropDownFirstClickTracker=' + hideLoggedInUserDropDownFirstClickTracker);
    if (hideLoggedInUserDropDownFirstClickTracker == false) {
        hideLoggedInUserDropDownFirstClickTracker = true; // First time around we need to set this so subsequent clicks work ok!
    } else {
        $("#bwLoggedInUserDropDown").dialog("close");
        // Remove the click event.
        var elem = document.getElementById("divDocumentBody");
        elem.removeAttribute("click");
    }
}

function displayArOnTheHomePage(budgetRequestId, participantId, title) {
    // Display the AR on the home page. This is called from the ?displayArDialog and the My Stuff section.
    // Try to close this in case it is open.
    try {
        $('#ArDialog').dialog("close");
    } catch (e) {
    }
    try {

        //var title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML;

        $('#bwQuickLaunchMenuTd').css({
            width: '0'
        }); // This gets rid of the jumping around.

        $('#liNewRequest').hide();
        $('#liArchive').hide();
        $('#liSummaryReport').hide();
        $('#liConfiguration').hide();
        $('#liHelp').hide();
        $('#liWelcome').show();

        var e1 = document.getElementById('divNewRequestMasterDiv');
        e1.style.borderRadius = '120px 0 0 120px';

        //renderLeftButtons('divWelcomePageLeftButtons');

        //$('#divWelcomeMasterDivTitle').text('Authorization Request: ' + budgetRequestId);
        $('#divWelcomeMasterDivTitle').text('Authorization Request: ' + title);

        //displayAlertDialog('SET THE TITLE3');

        try {
            document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButtonIos8';
        } catch (e) {
            // do nothing
        }

        //displayAlertDialog('SET THE TITLE4');

        $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
            //renderWelcomeScreen();
            redirectForm();
        });

        var html = '<div id="myxml" align="left" style="FONT-SIZE: 10pt; FONT-FAMILY: Calibri;"></div>';
        $('#divWelcomeMessage').html(html);

        var action = "";
        filename = budgetRequestId;


        displayForm_DisplayArBasedOnWorkflowStatus2(budgetRequestId, action, participantId);
    } catch (e) {
        displayAlertDialog('Error in ios8.js.displayArOnTheHomePage(): ' + e.message)
    }
}

function displayRecurringExpenseOnTheHomePage(recurringExpenseId, participantId, title) {
    // Display the AR on the home page. This is called from the ?displayArDialog and the My Stuff section.
    // Try to close this in case it is open.
    //try {
    //    $('#ArDialog').dialog("close");
    //} catch (e) {
    //}
    try {

        //var title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML;

        $('#bwQuickLaunchMenuTd').css({
            width: '0'
        }); // This gets rid of the jumping around.

        $('#liNewRequest').hide();
        $('#liArchive').hide();
        $('#liSummaryReport').hide();
        $('#liConfiguration').hide();
        $('#liHelp').hide();
        $('#liWelcome').show();

        var e1 = document.getElementById('divNewRequestMasterDiv');
        e1.style.borderRadius = '120px 0 0 120px';



        //$('#divWelcomeMasterDivTitle').text('Authorization Request: ' + budgetRequestId);
        $('#divWelcomeMasterDivTitle').text('Recurring Expense: New Budget Request');



        document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButtonIos8';



        $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
            //renderWelcomeScreen();
            redirectForm();
        });

        //displayAlertDialog('SET THE TITLE5');

        var html = '<div id="myxml" align="left" style="FONT-SIZE: 10pt; FONT-FAMILY: Calibri;"></div>';
        $('#divWelcomeMessage').html(html);

        //displayAlertDialog('SET THE TITLE4');

        var action = "";
        //filename = budgetRequestId;

        document.getElementById('divWelcomePageLeftButtonsNewRequestButton').className = 'divLeftButtonSelected';

        displayForm_DisplayRecurringExpense(recurringExpenseId, action, participantId); // displayForm_DisplayArBasedOnWorkflowStatus(recurringExpenseId, action, participantId);
    } catch (e) {
        displayAlertDialog('Error in ios8.js.displayRecurringExpenseOnTheHomePage(): ' + e.message)
    }
}



//function cmdInviteNewParticipant() {
//    // This is called from the configuration section.
//    var created = getCreatedTimestamp();
//    var data = {
//        "bwTenantId": tenantId,
//        "bwWorkflowAppId": workflowAppId,
//        "bwWorkflowAppTitle": workflowAppTitle,
//        "bwInvitationCreatedById": participantId,
//        "bwInvitationCreatedByFriendlyName": participantFriendlyName,
//        "bwInvitationCreatedByEmail": participantEmail,
//        "bwInvitationCreatedTimestamp": created
//    };
//    // /participants/invite/:userinfo
//    $.ajax({
//        url: webserviceurl + "/participants/invite",
//        type: "PUT",
//        contentType: 'application/json',
//        data: JSON.stringify(data),
//        success: function (data) {
//            var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + data;
//            $('#invitationLink').text(invitationUrl);

//            cmdViewInvitation(data); // This displays the modal dialog.
//        },
//        error: function (data, errorCode, errorMessage) {
//            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
//            displayAlertDialog('Error in ios8.js.cmdInviteNewParticipant():' + errorCode + ', ' + errorMessage + '::' + JSON.stringify(data));
//        }
//    });
//}

//function cmdInviteNewParticipant2() {
//    // This is called from the home page.

//    var created = getCreatedTimestamp();
//    var data = {
//        "bwTenantId": tenantId,
//        "bwWorkflowAppId": workflowAppId,
//        "bwWorkflowAppTitle": workflowAppTitle,
//        "bwInvitationCreatedById": participantId,
//        "bwInvitationCreatedByFriendlyName": participantFriendlyName,
//        "bwInvitationCreatedByEmail": participantEmail,
//        "bwInvitationCreatedTimestamp": created
//    };
//    // /participants/invite/:userinfo
//    $.ajax({
//        url: webserviceurl + "/participants/invite",
//        type: "PUT",
//        contentType: 'application/json',
//        data: JSON.stringify(data),
//        success: function (data) {
//            var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + data;
//            $('#invitationLink2').text(invitationUrl);

//            cmdViewInvitation(data); // This displays the modal dialog.

//            //displayAlertDialog(data);
//        },
//        error: function (data, errorCode, errorMessage) {
//            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
//            displayAlertDialog('Error in ios8.js.cmdInviteNewParticipant2():' + errorCode + ', ' + errorMessage + '::' + JSON.stringify(data));
//        }
//    });
//}



function hookUpThePeoplePickers() {
    // Now we can hook up the Participant text box for autocomplete.
    //var tenantId = '1';
    // Now we can hook up the Participant text box for autocomplete.
    $("#txtApprover1FriendlyName").autocomplete({
        source: function (request, response) {
            //weburl = _spPageContextInfo.siteAbsoluteUrl;
            $.ajax({
                url: webserviceurl + "/tenant/" + tenantId + "/participants/" + request.term,
                dataType: "json",
                success: function (data) {
                    var searchArray = [];
                    for (var i = 0; i < data.participants.length; i++) {
                        searchArray[i] = data.participants[i].participant;
                    }
                    response(searchArray);
                }
            });
        },
        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
        select: function (event, ui) {
            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
        },
        open: function () {
            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
        },
        close: function () {
            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1

            var approverName = this.value.split('|')[0];
            var approverId = this.value.split('|')[1];
            var approverEmail = this.value.split('|')[2];

            if (approverName.indexOf('undefined') > -1) {
                document.getElementById('txtApprover1FriendlyName').value = '';
                document.getElementById('txtApprover1Id').value = '';
                document.getElementById('txtApprover1Email').value = '';
            } else {
                document.getElementById('txtApprover1FriendlyName').value = approverName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                document.getElementById('txtApprover1FriendlyName').setAttribute('title', approverEmail);
                document.getElementById('txtApprover1Id').value = approverId;
                document.getElementById('txtApprover1Email').value = approverEmail;
            }
        }
    });

    $("#txtApprover2FriendlyName").autocomplete({
        source: function (request, response) {
            //weburl = _spPageContextInfo.siteAbsoluteUrl;
            $.ajax({
                url: webserviceurl + "/tenant/" + tenantId + "/participants/" + request.term,
                dataType: "json",
                success: function (data) {
                    var searchArray = [];
                    for (var i = 0; i < data.participants.length; i++) {
                        searchArray[i] = data.participants[i].participant;
                    }
                    response(searchArray);
                }
            });
        },
        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
        select: function (event, ui) {
            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
        },
        open: function () {
            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
        },
        close: function () {
            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1];
            //if (searchValue.indexOf('undefined') > -1) document.getElementById('txtApprover2Name').value = '';
            //else document.getElementById('txtApprover2Name').value = searchValue; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.

            var approverName = this.value.split('|')[0];
            var approverId = this.value.split('|')[1];
            var approverEmail = this.value.split('|')[2];

            if (approverName.indexOf('undefined') > -1) {
                document.getElementById('txtApprover2FriendlyName').value = '';
                document.getElementById('txtApprover2Id').value = '';
                document.getElementById('txtApprover2Email').value = '';
            } else {
                document.getElementById('txtApprover2FriendlyName').value = approverName;
                document.getElementById('txtApprover2FriendlyName').setAttribute('title', approverEmail);
                document.getElementById('txtApprover2Id').value = approverId;
                document.getElementById('txtApprover2Email').value = approverEmail;
            }
        }
    });
}


function populateTheYearDropdown(isQuotes) {
    try {
        var functionalAreaYearsForBudgetRequests = BWMData[1][0];
        var functionalAreaYearsForQuotes = BWMData[1][1];
        var thisYear = new Date().getFullYear();
        var selectedYear = $('#ddlYear').val();
        $('#ddlYear').empty();
        if (selectedYear == null) {
            // Nothing is in the drop down, so we have to populate it and select a default value.
            if (isQuotes == false) {
                if (functionalAreaYearsForBudgetRequests.indexOf(thisYear) > -1) {
                    // thisYear is present.
                    for (var i = 0; i < functionalAreaYearsForBudgetRequests.length; i++) {
                        if (functionalAreaYearsForBudgetRequests[i] == thisYear) {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "' selected>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "'>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                } else {
                    // thisYear is NOT present, so just select the latest one. For instance, if 2014, 2015 and it is 2016, then 2015 should be selected.
                    var latestYear = null;
                    for (var x = 0; x < functionalAreaYearsForBudgetRequests.length; x++) {
                        // The functionalAreaYearsForBudgetRequests array is in order (eg. 2013, 2014, 2015), so we just go through the whole thing.
                        if (functionalAreaYearsForBudgetRequests[x] < thisYear) latestYear = functionalAreaYearsForBudgetRequests[x];
                    }
                    for (var i = 0; i < functionalAreaYearsForBudgetRequests.length; i++) {
                        if (functionalAreaYearsForBudgetRequests[i] == latestYear) {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "' selected>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "'>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                }
            } else if (isQuotes == true) {
                if (functionalAreaYearsForQuotes.indexOf(thisYear) > -1) {
                    // thisYear is present.
                    for (var i = 0; i < functionalAreaYearsForQuotes.length; i++) {
                        if (functionalAreaYearsForQuotes[i] == thisYear) {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "' selected>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "'>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                } else {
                    // thisYear is NOT present, so just select the latest one. For instance, if 2014, 2015 and it is 2016, then 2015 should be selected.
                    var latestYear = null;
                    for (var x = 0; x < functionalAreaYearsForQuotes.length; x++) {
                        // The functionalAreaYearsForQuotes array is in order (eg. 2013, 2014, 2015), so we just go through the whole thing.
                        if (functionalAreaYearsForQuotes[x] < thisYear) latestYear = functionalAreaYearsForQuotes[x];
                    }
                    for (var i = 0; i < functionalAreaYearsForQuotes.length; i++) {
                        if (functionalAreaYearsForQuotes[i] == latestYear) {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "' selected>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "'>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                }
            }
        } else {
            // A year had been selected. We need to populate the year drop down with the year that had already been selected.
            if (isQuotes == false) {
                if (functionalAreaYearsForBudgetRequests.indexOf(selectedYear) > -1) {
                    // selectedYear is present.
                    for (var i = 0; i < functionalAreaYearsForBudgetRequests.length; i++) {
                        if (functionalAreaYearsForBudgetRequests[i] == selectedYear) {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "' selected>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "'>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                } else {
                    // selectedYear is NOT present, so just select the latest one. For instance, if 2014, 2015 and it is 2016, then 2015 should be selected.
                    var latestYear = null;
                    for (var x = 0; x < functionalAreaYearsForBudgetRequests.length; x++) {
                        // The functionalAreaYearsForQuotes array is in order (eg. 2013, 2014, 2015), so we just go through the whole thing.
                        if (functionalAreaYearsForBudgetRequests[x] < thisYear) latestYear = functionalAreaYearsForBudgetRequests[x];
                    }
                    for (var i = 0; i < functionalAreaYearsForBudgetRequests.length; i++) {
                        if (functionalAreaYearsForBudgetRequests[i] == latestYear) {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "' selected>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForBudgetRequests[i].toString() + "'>" + functionalAreaYearsForBudgetRequests[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                }
            } else if (isQuotes == true) {
                if (functionalAreaYearsForQuotes.indexOf(selectedYear) > -1) {
                    // selectedYear is present.
                    for (var i = 0; i < functionalAreaYearsForQuotes.length; i++) {
                        if (functionalAreaYearsForQuotes[i] == selectedYear) {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "' selected>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "'>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                } else {
                    // selectedYear is NOT present, so just select the latest one. For instance, if 2014, 2015 and it is 2016, then 2015 should be selected.
                    var latestYear = null;
                    for (var x = 0; x < functionalAreaYearsForQuotes.length; x++) {
                        // The functionalAreaYearsForQuotes array is in order (eg. 2013, 2014, 2015), so we just go through the whole thing.
                        if (functionalAreaYearsForQuotes[x] < thisYear) latestYear = functionalAreaYearsForQuotes[x];
                    }
                    for (var i = 0; i < functionalAreaYearsForQuotes.length; i++) {
                        if (functionalAreaYearsForQuotes[i] == selectedYear) {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "' selected>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        } else {
                            $("<option value='" + functionalAreaYearsForQuotes[i].toString() + "'>" + functionalAreaYearsForQuotes[i].toString() + "</option>").appendTo($('#ddlYear'));
                        }
                    }
                }
            }
        }
    } catch (e) {
        displayAlertDialog('Error in Start.js.populateTheYearDropdown()', e.message);
    }
}

function cmdCreateNewBudgetRequest() {
    var url = appweburl2 + '/InitBudgetRequest.html';
    window.location = url;
}

function cmdListAllWorkflowTasks() {
    // Use ajax.
    $('#spanBwWorkflowTasks').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwtasks",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>task title</td>';
            html += '    <td>created</td>';
            html += '    <td>due date</td>';
            html += '    <td>task outcome</td>';
            html += '    <td>percent complete</td>';
            html += '    <td>hasbeenprocessedbytheworkflowengine</td>';
            html += '    <td>assigned to id</td>';
            html += '    <td>assigned to</td>';
            html += '    <td>assigned to email</td>';
            html += '    <td>workflow app id</td>';
            html += '    <td>related item id</td>';
            //html += '    <td>approval level workflow token</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';

                html += '    <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + data[i].bwRelatedItemId + '\', \'' + participantId + '\', \'' + 'x2x2x2' + '\');">' + data[i].bwTaskTitle + '</a></td>';

                //html += '    <td>' + data[i].bwTaskTitle + '</td>';
                html += '    <td>' + data[i].Created + '</td>';
                html += '    <td>' + data[i].bwDueDate + '</td>';
                html += '    <td>' + data[i].bwTaskOutcome + '</td>';
                html += '    <td>' + data[i].bwPercentComplete + '</td>';
                html += '    <td>' + data[i].bwHasBeenProcessedByTheWorkflowEngine + '</td>';
                html += '    <td>' + data[i].bwAssignedToId + '</td>';
                html += '    <td>' + data[i].bwAssignedToFriendlyName + '</td>';
                html += '    <td>' + data[i].bwAssignedToEmail + '</td>';
                html += '    <td>' + data[i].bwWorkflowAppId + '</td>';
                html += '    <td>' + data[i].bwRelatedItemId + '</td>';
                html += '  </tr>';
                //html += 'bwTaskTitle:' + data[i].bwTaskTitle + ', bwTaskOutcome:' + data[i].bwTaskOutcome + ' bwPercentComplete:' +data[i].bwPercentComplete + ' bwHasBeenProcessedByTheWorkflowEngine:' +data[i].bwHasBeenProcessedByTheWorkflowEngine + ', bwAssignedTo:' +data[i].bwAssignedTo + '<br/>';
                //html += '';
            }
            html += '<tr><td colspan="10">DONE</td></tr>';
            html += '</table>';
            $('#spanBwWorkflowTasks').append(html);
            //$('#txtBwWorkflowTasks').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllWorkflowTasks():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllParticipants() {
    // Use ajax.
    $('#spanBwParticipants').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwparticipants",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>friendly name of participant</td>';
            html += '    <td>role</td>';
            html += '    <td>email</td>';
            html += '    <td>participant id</td>';
            html += '    <td>tenant id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data[i].bwParticipantFriendlyName + '</td>';
                html += '    <td>' + data[i].bwParticipantRole + '</td>';
                html += '    <td>' + data[i].bwParticipantEmail + '</td>';
                html += '    <td>' + data[i].bwParticipantId + '</td>';
                html += '    <td>' + data[i].bwTenantId + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            $('#spanBwParticipants').append(html);




            //var html = '';
            //for (var i = 0; i < data.length; i++) {
            //    html += 'bwParticipantId:' + data[i].bwParticipantId + ', bwTenantId:' + data[i].bwParticipantTenantId + ' bwParticipantEmail:' + data[i].bwParticipantEmail + ' bwParticipantFriendlyName:' + data[i].bwParticipantFriendlyName + '<br/>';
            //    //html += '';
            //}
            //html += 'DONE';
            //$('#txtBwParticipants').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllParticipants():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllInvitations() {
    // Use ajax PUT.
    $('#spanBwInvitations').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwinvitationsunclaimed",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>role</td>';
            html += '    <td>created by</td>';
            html += '    <td>created</td>';
            html += '    <td>delivered to</td>';
            html += '    <td>delivered</td>';
            html += '    <td>accepted by</td>';
            html += '    <td>accepted</td>';
            html += '    <td>tenant id</td>';
            html += '    <td>workflow app id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data[i].bwInvitationParticipantRole + '</td>';
                html += '    <td>' + data[i].bwInvitationCreatedByFriendlyName + '</td>';
                html += '    <td>' + data[i].bwInvitationCreatedTimestamp + '</td>';
                html += '    <td>' + data[i].bwInvitationDeliveredToEmail + '</td>';
                html += '    <td>' + data[i].bwInvitationDeliveredTimestamp + '</td>';
                html += '    <td>' + data[i].bwInvitationAcceptedById + '</td>';
                html += '    <td>' + data[i].bwInvitationAcceptedTimestamp + '</td>';
                html += '    <td>' + data[i].bwTenantId + '</td>';
                html += '    <td>' + data[i].bwWorkflowAppId + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="5">DONE</td></tr>';
            html += '</table>';
            $('#spanBwInvitations').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllInvitations():' + errorCode + ', ' + errorMessage);
        }
    });
}


function cmdListAllTenants() {
    // Use ajax PUT.
    $('#spanBwTenants').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwtenants",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>tenant title</td>';
            html += '    <td>owner id</td>';
            html += '    <td>owner name</td>';
            html += '    <td>owner email</td>';
            html += '    <td>tenant id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data[i].bwTenantTitle + '</td>';

                html += '    <td>' + data[i].bwTenantOwnerId + '</td>';
                html += '    <td>' + data[i].bwTenantOwnerFriendlyName + '</td>';

                html += '    <td>' + data[i].bwTenantOwnerEmail + '</td>';
                html += '    <td>' + data[i].bwTenantId + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            $('#spanBwTenants').append(html);


            //var html = '';
            //for (var i = 0; i < data.length; i++) {
            //    html += 'Owner:' + data[i].bwTenantOwnerFriendlyName + ', FB User Id:' + data[i].bwTenantOwnerFacebookUserId + ', Tenant Id:' + data[i].bwTenantId + '<br/>';
            //    //html += '';
            //}
            //html += 'DONE';
            //$('#spanBwTenants').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllTenants():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllWorkflowApps() {
    // Use ajax PUT.
    $('#spanBwWorkflowApps').empty();
    //var data = {
    //    "bwTenantId": tenantId,
    //    "bwWorkflowAppId": workflowAppId
    //};
    $.ajax({
        url: webserviceurl + "/bwworkflowapps/" + tenantId,
        method: "GET",
        //contentType: 'application/json',
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        //data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>title</td>';
            html += '    <td>workflow app id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.d.results.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data.d.results[i].bwWorkflowAppTitle + '</td>';
                html += '    <td>' + data.d.results[i].bwWorkflowAppId + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            $('#spanBwWorkflowApps').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllWorkflowApps():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllFunctionalAreas() {
    // Use ajax PUT.
    $('#spanBwFunctionalAreas').empty();
    //var data = {
    //    "bwTenantId": tenantId,
    //    "bwWorkflowAppId": workflowAppId
    //};
    $.ajax({
        url: webserviceurl + "/getfunctionalareasbyappid/" + workflowAppId + "/" + "RETURNALL",
        method: "GET",
        //contentType: 'application/json',
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        //data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td></td>';
            html += '    <td>year</td>';
            html += '    <td>yearly budget</td>';
            html += '    <td>id</td>';
            html += '    <td>workflow app id</td>';
            html += '    <td>Approver1Id</td>';
            html += '    <td>Approver2Id</td>';
            html += '    <td>Approver3Id</td>';
            html += '    <td>Approver4Id</td>';
            html += '    <td>Approver5Id</td>';
            html += '    <td>Approver6Id</td>';
            html += '    <td>Approver7Id</td>';
            html += '    <td>Approver8Id</td>';
            html += '    <td>Approver9Id</td>';
            html += '    <td>Approver10Id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.d.results.length; i++) {
                html += '  <tr>';
                html += '    <td style="white-space:nowrap;">financial area: ' + data.d.results[i].bwFunctionalAreaTitle + '</td>';
                html += '    <td>' + data.d.results[i].bwFunctionalAreaYear + '</td>';
                html += '    <td>' + data.d.results[i].bwFunctionalAreaYearlyBudget + '</td>';
                html += '    <td>' + data.d.results[i].bwFunctionalAreaId + '</td>';
                html += '    <td>' + data.d.results[i].bwWorkflowAppId + '</td>';
                html += '    <td>' + data.d.results[i].Approver1Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver2Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver3Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver4Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver5Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver6Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver7Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver8Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver9Id + '</td>';
                html += '    <td>' + data.d.results[i].Approver10Id + '</td>';
                html += '  </tr>';
                html += '  <tr>';
                html += '    <td>budget thresholds:</td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td>' + data.d.results[i].Approval3BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval4BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval5BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval6BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval7BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval8BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval9BudgetThreshold + '</td>';
                html += '    <td>' + data.d.results[i].Approval10BudgetThreshold + '</td>';
                html += '  </tr>';
                html += '  <tr>';
                html += '    <td colspan="15"></td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            $('#spanBwFunctionalAreas').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllFunctionalAreas():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllDepartments() {
    // Use ajax PUT.
    $('#spanBwDepartments').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwdepartments",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>department title</td>';
            html += '    <td>user name</td>';
            html += '    <td>user id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data[i].bwDepartmentTitle + '</td>';
                html += '    <td>' + data[i].bwDepartmentUserName + '</td>';
                html += '    <td>' + data[i].bwDepartmentUserId + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            $('#spanBwDepartments').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListAllDepartments():' + errorCode + ', ' + errorMessage);
        }
    });
}


//function cmdListAllBudgetRequests(filter) {
//    if (!filter) filter = 'all';
//    globalArchiveFilter = filter;

//    $('#spanBwBudgetRequests').empty();
//    var data = {
//        "filter": filter,
//        "bwWorkflowAppId": workflowAppId
//    };
//    $.ajax({
//        url: webserviceurl + "/bwbudgetrequests",
//        type: "DELETE",
//        contentType: 'application/json',
//        data: JSON.stringify(data),
//        success: function (data) {
//            var html = '';
//            html += '<table class="myStuffTable">';
//            html += '  <tr>';
//            html += '    <td>Title</td>';
//            html += '    <td>Description</td>';
//            html += '    <td>Financial Area</td>';
//            html += '    <td>Budget Amount</td>';
//            html += '    <td>Status</td>';

//            //html += '    <td>ARStatus</td>';

//            //html += '    <td>xxxx</td>';
//            //html += '    <td>Current Owner</td>';
//            //html += '    <td>Days Overdue</td>';

//            //html += '    <td>manager id</td>';
//            //html += '    <td>manager</td>';
//            //html += '    <td>manager email</td>';

//            //html += '    <td>budget request id</td>';
//            //html += '    <td>workflow app id</td>';
//            //html += '    <td>functional area id</td>';
//            //html += '    <td>created by</td>';
//            //html += '    <td>created by id</td>';
//            //html += '    <td>created</td>';
//            //html += '    <td>modified by id</td>';
//            //html += '    <td>modified</td>';
//            //html += '    <td>current owner</td>';
//            //html += '    <td>approval level workflow token</td>';
//            html += '  </tr>';

//            html += '  <tr>';
//            html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character. Hit the return key or click somewhere else on the page in order to apply this filter."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character. Hit the return key or click somewhere else on the page in order to apply this filter."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            html += '    <td style="white-space:nowrap;"><select id="" class="archivePageFilterDropDown" title="Results filter. Select here to limit search results."><option>All</option><option>Miscellaneous</option><option>etcxxxx</option></select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: greater than #. Hit the return key or click somewhere else on the page in order to apply this filter." class="archivePageFilterBox" title="Results filter. Enter a number here to limit search results. Hit the return key or click somewhere else on the page in order to apply this filter."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';

//            html += '    <td style="white-space:nowrap;">';
//            html += '<select id="" class="archivePageFilterDropDown" onchange="selectArchivePageFilterDropDown_change();" title="Results filter. Select here to limit search results.">';
//            //html += '<option>All</option><option>Approved</option><option>etcxxxx</option>';
//            if (globalArchiveFilter == 'all') html += '<option value="all" selected>All</option>';
//            else html += '<option value="all">All</option>';
//            if (globalArchiveFilter == 'pendingapproval') html += '<option value="pendingapproval" selected>Pending Approval</option>';
//            else html += '<option value="pendingapproval">Pending Approval</option>';
//            if (globalArchiveFilter == 'approved') html += '<option value="approved" selected>Approved</option>';
//            else html += '<option value="approved">Approved</option>';
//            if (globalArchiveFilter == 'active') html += '<option value="active" selected>Active (PO# assigned)</option>';
//            else html += '<option value="active">Active (PO# assigned)</option>';
//            if (globalArchiveFilter == 'rejected') html += '<option value="rejected" selected>Rejected</option>';
//            else html += '<option value="rejected">Rejected</option>';
//            if (globalArchiveFilter == 'canceled') html += '<option value="canceled" selected>Canceled</option>';
//            else html += '<option value="canceled">Canceled</option>';

//            html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            //html += '   <td></td>';
//            //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Type * for wildcard" class="archivePageFilterBox" />&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Type * for wildcard" class="archivePageFilterBox" />&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
//            html += '  </tr>';

//            for (var i = 0; i < data.length; i++) {
//                html += '  <tr>';
//                //html += '    <td><a href="' + appweburl2 + '/ar.html?BudgetRequestTitle=' + data[i].bwBudgetRequestId + '" target="_blank">' + data[i].ProjectTitle + '</a></td>';
//                html += '    <td>' + data[i].Title + '</td>';
//                html += '      <td><a href="javascript:displayArOnTheHomePage(\'' + data[i].bwBudgetRequestId + '\', \'' + participantId + '\');">' + data[i].ProjectTitle + '</a></td>';

//                //displayAlertDialog('xxx');
//                //for (var x = 0; x < BWMData[0].length; x++) {
//                //    if (BWMData[0][x][0] == workflowAppId) {
//                //        for (var y = 0; y < BWMData[0][x][4].length; y++) {
//                //            if (BWMData[0][x][4][y][0] == data[i].FunctionalAreaId) {
//                //                // We have found the financial area, so we have the title! Yay!
//                //                var faTitle = BWMData[0][x][4][y][1];
//                //                html += '<td>';
//                //                html += faTitle;
//                //                //html += '<input id="txtFunctionalAreaId" type="text" style="" value="' + data[i].FunctionalAreaId + '" />';
//                //                html += '</td>';
//                //            }
//                //        }
//                //    }
//                //}

//                html += '    <td>' + data[i].FunctionalAreaId + '</td>';

//                html += '    <td style="text-align:right;">' + data[i].BudgetAmount + '</td>';
//                html += '    <td>' + data[i].BudgetWorkflowStatus + '</td>';

//                //html += '    <td>' + data[i].ARStatus + '</td>';


//                //html += '    <td>';
//                //html += '       <a href="javascript:displayForm_DisplayCloseOut(\'' + data[i].bwDocumentXml + '\');">Click this link to test view a close out</a>';
//                //html += '    </td>';



//                //html += '    <td>' + data[i].CurrentOwner + '</td>';
//                //html += '    <td>xxxx</td>';

//                //html += '    <td>' + data[i].ManagerId + '</td>';
//                //html += '    <td>' + data[i].ManagerFriendlyName + '</td>';
//                //html += '    <td>' + data[i].ManagerEmail + '</td>';

//                //html += '    <td>' + data[i].bwBudgetRequestId + '</td>';
//                //html += '    <td>' + data[i].bwWorkflowAppId + '</td>';
//                //html += '    <td>' + data[i].FunctionalAreaId + '</td>';
//                //html += '    <td>' + data[i].CreatedBy + '</td>';
//                //html += '    <td>' + data[i].CreatedById + '</td>';
//                //html += '    <td>' + data[i].Created + '</td>';
//                //html += '    <td>' + data[i].ModifiedById + '</td>';
//                //html += '    <td>' + data[i].Modified + '</td>';
//                //html += '    <td>' + data[i].CurrentOwner + '</td>';
//                //html += '    <td>' + data[i].bwApprovalLevelWorkflowToken + '</td>';
//                html += '  </tr>';
//            }
//            html += '<tr><td colspan="13">DONE</td></tr>';
//            html += '</table>';
//            $('#spanBwBudgetRequests').append(html);

//            //var html = '';
//            //for (var i = 0; i < data.length; i++) {
//            //    // ARStatus: String,
//            //    //BudgetWorkflowStatus: String,
//            //    html += 'ProjectTitle:' + data[i].ProjectTitle + ', ARStatus: ' + data[i].ARStatus + ' BudgetWorkflowStatus:' + data[i].BudgetWorkflowStatus + ' bwBudgetRequestId:' + data[i].bwBudgetRequestId + '<br/>';
//            //    //html += '';
//            //}
//            //html += 'DONE';
//            //$('#BwBudgetRequests').append(html);
//        },
//        error: function (data, errorCode, errorMessage) {
//            //window.waitDialog.close();
//            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
//            displayAlertDialog('Error in ios8.js.cmdListAllBudgetRequests():' + errorCode + ', ' + errorMessage);
//        }
//    });
//}

function cmdDisplayConfirmFileUploadDialog(displayAttachmentsTagName, _budgetRequestId) {
    try {

        // Clear the title and description from the last time this was displayed.
        document.getElementById('txtConfirmFileUploadDialogFilename').value = '';
        $('#txtConfirmFileUploadDialogFileDescription').empty();


        $("#divConfirmFileUploadDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: '',
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "xxxx": {
            //        text: 'Upload',
            //        id: 'btnUploadTheFileNow',
            //        //disabled: 'false',
            //        click: function () {
            //            //var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //            //if (proceed) {
            //            //    cmdDeleteBudgetRequest(requestId);
            //            //displayAlertDialog('This functionality is incomplete. Coming soon!');
            //            $(this).dialog("close");

            //            $("#divWorkingOnItDialog").dialog({
            //                modal: true,
            //                resizable: false,
            //                //closeText: "Cancel",
            //                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //                title: 'Working on it...',
            //                width: "360",
            //                dialogClass: "no-close", // No close button in the upper right corner.
            //                hide: false//, // This means when hiding just disappear with no effects.
            //                //buttons: {
            //                //    "Close": function () {
            //                //        $(this).dialog("close");
            //                //    }
            //                //}
            //            });
            //            $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            //            ProcessUpload(displayAttachmentsTagName, _budgetRequestId);

            //            //return true;
            //            //}
            //        }
            //    },
            //    "Cancel": function () {
            //        $(this).dialog("close");

            //        $('#inputFile').replaceWith($('#inputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
            //        //return false;
            //    }
            //},
            //open: function () {
            //var data = [];
            //data = {
            //    bwBudgetRequestId: requestId,
            //    bwWorkflowAppId: workflowAppId
            //};
            //var operationUri = webserviceurl + "/bwworkflow/itemizebudgetrequestdependencies";
            //$.ajax({
            //    url: operationUri,
            //    type: "POST", timeout: ajaxTimeout,
            //    data: data,
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (data) {
            //if (data.message != 'SUCCESS') {
            //    displayAlertDialog(JSON.stringify(data));
            //} else {
            //    var html = '';
            //    if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
            //        html += 'This Budget Request has no dependencies, and can be deleted immediately.';
            //    } else {
            //        html += 'When this Budget Request is deleted, the following will also be deleted:';
            //    }
            //    if (data.NumberOfIncompleteTasksForBudgetRequest > 0 || data.NumberOfCompletedTasksForBudgetRequest > 0) {
            //        html += '<ul>';
            //        if (data.NumberOfIncompleteTasksForBudgetRequest > 0) {
            //            html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForBudgetRequest + ' incomplete Task(s)</span></li>';
            //        }
            //        if (data.NumberOfCompletedTasksForBudgetRequest > 0) {
            //            html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForBudgetRequest + ' completed Task(s)</span></li>';
            //        }
            //        html += '</ul>';
            //    }
            //    if (data.NumberOfSupplementals > 0) {
            //        html += 'Also, ' + data.NumberOfSupplementals + ' Supplemental Request(s) will be deleted, along with the following:';
            //        html += '<ul>';
            //        if (data.NumberOfIncompleteTasksForSupplementals > 0) {
            //            html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForSupplementals + ' incomplete Task(s)</span></li>';
            //        }
            //        if (data.NumberOfCompletedTasksForSupplementals > 0) {
            //            html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForSupplementals + ' complete Task(s)</span></li>';
            //        }
            //        html += '</ul>';
            //    }
            //    document.getElementById('spanDeleteABudgetRequestDialogDependencyDetails').innerHTML = html;
            //}

            // Show or hide the replacement user selection box depening if there are any dependencies.
            //if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
            //    // There are no dependencies.
            //    // Change the button text.
            //    var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
            //    $.each(dialogButtons, function (buttonIndex, button) {
            //        if (button.id === 'btnDeleteABudgetRequest') {
            //            button.text = 'Delete ' + requestId;
            //            button.disabled = false;
            //        }
            //    })
            //    $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
            //} else {
            //    // There ARE dependencies.
            //    // Change the button text.
            //    var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
            //    $.each(dialogButtons, function (buttonIndex, button) {
            //        if (button.id === 'btnDeleteABudgetRequest') {
            //            button.text = 'Delete the Budget Request and all related items';
            //            button.disabled = false;
            //            button.style = 'color:red;';
            //        }
            //    })
            //    $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
            //}
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            //        displayAlertDialog('Error in ios8.js.cmdDisplayDeleteBudgetRequestDialog().itemizebudgetrequestdependencies: ' + errorMessage);
            //    }
            //});
            //}
        });

        // Hide the title bar.
        $("#divConfirmFileUploadDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        // Set the click event on the Upload button! This wires up our upload functionality.
        // displayAttachmentsTagName, _budgetRequestId
        // onclick="cmdUploadTheFileNow();"
        //$('#btnUploadTheFileNow').click = "cmdUploadTheFileNow('" + displayAttachmentsTagName + "', '" + _budgetRequestId + "');";


        // Hook up the Upload button click event code.
        $('#btnUploadTheFileNow').click(function (error) {
            //var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
            //if (proceed) {
            //    cmdDeleteBudgetRequest(requestId);
            //displayAlertDialog('This functionality is incomplete. Coming soon!');
            $('#divConfirmFileUploadDialog').dialog("close");

            $("#divWorkingOnItDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                title: 'Working on it...',
                width: "800",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false//, // This means when hiding just disappear with no effects.
                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
            });
            $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

            ProcessUpload(displayAttachmentsTagName, _budgetRequestId);

            //return true;
            //}
        });


        // Hook up the Cancel button code.
        $('#btnCancelUploadTheFileNow').click(function (error) {
            $('#divConfirmFileUploadDialog').dialog("close");

            console.log('In xcx23124232342-4 Calling clone.');
            alert('In xcx23124232342-4 Calling clone.');

            $('#inputFile').replaceWith($('#inputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
            //return false;
        });


        // Set the title.
        //document.getElementById('spanDeleteABudgetRequestDialogTitle').innerHTML = 'Confirm file uploadx';


        // Make sure the send message checkbox is not selected to begin with.
        //document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').removeAttribute('checked', '');
        // Event listener for the email checkbox.
        //$('#cbDeleteABudgetRequestDialogEmailMessage').click(function (error) {
        //    var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
        //    if (_checked == true) {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx and Send Email';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    } else {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    }
        //});
    } catch (e) {
        displayAlertDialog('Error in cmdDisplayConfirmFileUploadDialog(): ' + e.message);
    }
}

//function cmdUploadTheFileNow(displayAttachmentsTagName, _budgetRequestId) {

//    //var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
//    //if (proceed) {
//    //    cmdDeleteBudgetRequest(requestId);
//    //displayAlertDialog('This functionality is incomplete. Coming soon!');
//    $('#divConfirmFileUploadDialog').dialog("close");

//    $("#divWorkingOnItDialog").dialog({
//        modal: true,
//        resizable: false,
//        //closeText: "Cancel",
//        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
//        title: 'Working on it...',
//        width: "360",
//        dialogClass: "no-close", // No close button in the upper right corner.
//        hide: false//, // This means when hiding just disappear with no effects.
//        //buttons: {
//        //    "Close": function () {
//        //        $(this).dialog("close");
//        //    }
//        //}
//    });
//    $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

//    ProcessUpload(displayAttachmentsTagName, _budgetRequestId);

//    //return true;
//    //}
//}

//function cmdCancelUploadTheFileNow() {
//    $('#divConfirmFileUploadDialog').dialog("close");

//    $('#inputFile').replaceWith($('#inputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
//    //return false;
//}

function cmdDisplayDeleteBudgetRequestDialog(requestId, title) {
    try {
        $("#DeleteABudgetRequestDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: 'Delete ' + requestId,
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false, // This means when hiding just disappear with no effects.
            buttons: {
                "Delete Budget Request": {
                    text: 'Delete Budget Request, supplementals and tasks',
                    id: 'btnDeleteABudgetRequest',
                    //style: "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;",
                    disabled: 'true',
                    click: function () {
                        //var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
                        //if (proceed) {
                        cmdDeleteBudgetRequest(requestId);

                        // Refresh the screen.
                        populateStartPageItem('divArchive', 'Reports', '');

                        $(this).dialog("close");
                        //}
                    }
                },
                "Cancel": {
                    text: 'Cancel',
                    id: 'btnCancelDeleteABudgetRequest',
                    click: function () {
                        $(this).dialog("close");
                    }
                }
            },
            open: function (event, ui) {
                $('.ui-widget-overlay').bind('click', function () { $("#DeleteABudgetRequestDialog").dialog('close'); }); // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
                var data = [];
                data = {
                    bwBudgetRequestId: requestId,
                    bwWorkflowAppId: workflowAppId
                };
                var operationUri = webserviceurl + "/bwworkflow/itemizebudgetrequestdependencies";
                $.ajax({
                    url: operationUri,
                    type: "POST", timeout: ajaxTimeout,
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {
                        if (data.message != 'SUCCESS') {
                            displayAlertDialog(JSON.stringify(data));
                        } else {
                            var html = '';
                            if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
                                html += 'This Budget Request has no dependencies, and can be deleted immediately.';
                            } else {
                                html += 'When this Budget Request is deleted, the following will also be deleted:';
                            }
                            if (data.NumberOfIncompleteTasksForBudgetRequest > 0 || data.NumberOfCompletedTasksForBudgetRequest > 0) {
                                html += '<ul>';
                                if (data.NumberOfIncompleteTasksForBudgetRequest > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForBudgetRequest + ' incomplete Task(s)</span></li>';
                                }
                                if (data.NumberOfCompletedTasksForBudgetRequest > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForBudgetRequest + ' completed Task(s)</span></li>';
                                }
                                html += '</ul>';
                            }
                            if (data.NumberOfSupplementals > 0) {
                                html += 'Also, ' + data.NumberOfSupplementals + ' Supplemental Request(s) will be deleted, along with the following:';
                                html += '<ul>';
                                if (data.NumberOfIncompleteTasksForSupplementals > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForSupplementals + ' incomplete Task(s)</span></li>';
                                }
                                if (data.NumberOfCompletedTasksForSupplementals > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForSupplementals + ' complete Task(s)</span></li>';
                                }
                                html += '</ul>';
                            }
                            document.getElementById('spanDeleteABudgetRequestDialogDependencyDetails').innerHTML = html;
                        }

                        // Show or hide the replacement user selection box depening if there are any dependencies.
                        if (data.NumberOfIncompleteTasksForBudgetRequest == 0 && data.NumberOfCompletedTasksForBudgetRequest == 0 && data.NumberOfSupplementals == 0) {
                            // There are no dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteABudgetRequest') {
                                    button.text = 'Delete ' + requestId;
                                    button.disabled = false;
                                }
                            })
                            $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                        } else {
                            // There ARE dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteABudgetRequest') {
                                    button.text = 'Delete the Budget Request and all related items';
                                    button.disabled = false;
                                    button.style = "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;color:red;";
                                } else if (button.id === 'btnCancelDeleteABudgetRequest') {
                                    //button.text = 'tttt';
                                    //button.disabled = false;
                                    button.style = "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;color:black;";
                                }
                            })
                            $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
                        }
                    },
                    error: function (data, errorCode, errorMessage) {
                        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                        displayAlertDialog('Error in ios8.js.cmdDisplayDeleteBudgetRequestDialog().itemizebudgetrequestdependencies: ' + errorMessage);
                    }
                });
            }
        });

        // Hide the title bar.
        $("#DeleteABudgetRequestDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        // Set the title.
        document.getElementById('spanDeleteABudgetRequestDialogTitle').innerHTML = 'Delete ' + title + '.';


        // Make sure the send message checkbox is not selected to begin with.
        document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').removeAttribute('checked', '');
        // Event listener for the email checkbox.
        //$('#cbDeleteABudgetRequestDialogEmailMessage').click(function (error) {
        //    var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
        //    if (_checked == true) {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx and Send Email';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    } else {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    }
        //});
    } catch (e) {
        displayAlertDialog('Error in cmdDisplayDeleteBudgetRequestDialog(): ' + e.message);
    }
}



function cmdDisplayDeleteRecurringExpenseRequestDialog(bwRecurringExpenseId, title) {
    //displayAlertDialog('bwRecurringExpenseId: ' + bwRecurringExpenseId);
    try {
        $("#DeleteARecurringExpenseDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: 'Delete ' + bwRecurringExpenseId,
            width: "570px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false, // This means when hiding just disappear with no effects.
            buttons: {
                "Delete Recurring Expense": {
                    text: 'Delete Recurring Expense, supplementals and tasks',
                    id: 'btnDeleteARecurringExpense',
                    disabled: 'true',
                    click: function () {
                        var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
                        if (proceed) {
                            cmdDeleteRecurringExpense(bwRecurringExpenseId);
                            $(this).dialog("close");
                        }
                    }
                },
                "Cancel": function () {
                    $(this).dialog("close");
                }
            },
            open: function () {
                var data = [];
                data = {
                    bwRecurringExpenseId: bwRecurringExpenseId,
                    bwWorkflowAppId: workflowAppId
                };
                var operationUri = webserviceurl + "/bwworkflow/itemizerecurringexpensedependencies"; // THIS WEB SERVICE DOES NOT EXIST YET
                $.ajax({
                    url: operationUri,
                    type: "POST", timeout: ajaxTimeout,
                    data: data,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {
                        if (data.message != 'SUCCESS') {
                            displayAlertDialog(JSON.stringify(data));
                        } else {
                            var html = '';
                            if (data.NumberOfIncompleteTasksForRecurringExpense == 0 && data.NumberOfCompletedTasksForRecurringExpense == 0 && data.NumberOfSupplementals == 0) {
                                html += 'This Recurring Expense has no dependencies, and can be deleted immediately.';
                            } else {
                                html += 'When this Recurring Expense is deleted, the following will also be deleted:';
                            }
                            if (data.NumberOfIncompleteTasksForRecurringExpense > 0 || data.NumberOfCompletedTasksForRecurringExpense > 0) {
                                html += '<ul>';
                                if (data.NumberOfIncompleteTasksForRecurringExpense > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForRecurringExpense + ' incomplete Task(s)</span></li>';
                                }
                                if (data.NumberOfCompletedTasksForRecurringExpense > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForRecurringExpense + ' completed Task(s)</span></li>';
                                }
                                html += '</ul>';
                            }
                            if (data.NumberOfSupplementals > 0) {
                                html += 'Also, ' + data.NumberOfSupplementals + ' Supplemental Request(s) will be deleted, along with the following:';
                                html += '<ul>';
                                if (data.NumberOfIncompleteTasksForSupplementals > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasksForSupplementals + ' incomplete Task(s)</span></li>';
                                }
                                if (data.NumberOfCompletedTasksForSupplementals > 0) {
                                    html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfCompletedTasksForSupplementals + ' complete Task(s)</span></li>';
                                }
                                html += '</ul>';
                            }
                            document.getElementById('spanDeleteARecurringExpenseDialogDependencyDetails').innerHTML = html;
                        }

                        // Show or hide the replacement user selection box depening if there are any dependencies.
                        if (data.NumberOfIncompleteTasksForRecurringExpense == 0 && data.NumberOfCompletedTasksForRecurringExpense == 0 && data.NumberOfSupplementals == 0) {
                            // There are no dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteARecurringExpenseDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteARecurringExpense') {
                                    button.text = 'Delete ' + bwRecurringExpenseId;
                                    button.disabled = false;
                                }
                            })
                            $("#DeleteARecurringExpenseDialog").dialog('option', 'buttons', dialogButtons);
                        } else {
                            // There ARE dependencies.
                            // Change the button text.
                            var dialogButtons = $('#DeleteARecurringExpenseDialog').dialog('option', 'buttons');
                            $.each(dialogButtons, function (buttonIndex, button) {
                                if (button.id === 'btnDeleteARecurringExpense') {
                                    button.text = 'Delete the Recurring Expense and all related items';
                                    button.disabled = false;
                                    button.style = 'color:red;';
                                }
                            })
                            $("#DeleteARecurringExpenseDialog").dialog('option', 'buttons', dialogButtons);
                        }
                    },
                    error: function (data, errorCode, errorMessage) {
                        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                        displayAlertDialog('Error in ios8.js.cmdDisplayDeleteRecurringExpenseRequestDialog().itemizerecurringexpensedependencies: ' + errorMessage);
                    }
                });
            }
        });

        // Hide the title bar.
        $("#DeleteARecurringExpenseDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        // Set the title.
        document.getElementById('spanDeleteARecurringExpenseDialogTitle').innerHTML = 'Delete ' + title + '.';


        // Make sure the send message checkbox is not selected to begin with.
        document.getElementById('cbDeleteARecurringExpenseDialogEmailMessage').removeAttribute('checked', '');
        // Event listener for the email checkbox.
        //$('#cbDeleteABudgetRequestDialogEmailMessage').click(function (error) {
        //    var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
        //    if (_checked == true) {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx and Send Email';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    } else {
        //        var dialogButtons = $('#DeleteABudgetRequestDialog').dialog('option', 'buttons');
        //        $.each(dialogButtons, function (buttonIndex, button) {
        //            if (button.id === 'btnDeleteABudgetRequest') {
        //                button.text = 'xxxx';
        //            }
        //        })
        //        $("#DeleteABudgetRequestDialog").dialog('option', 'buttons', dialogButtons);
        //    }
        //});
    } catch (e) {
        displayAlertDialog('Error in cmdDisplayDeleteBudgetRequestDialog(): ' + e.message);
    }

}



function cmdDeleteBudgetRequest(bwBudgetRequestId) {

    $("#divWorkingOnItDialog").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Working on it...',
        width: "800",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });
    $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();


    var additionalEmailMessage;
    var _checked = document.getElementById('cbDeleteABudgetRequestDialogEmailMessage').checked;
    if (_checked == true) {
        additionalEmailMessage = document.getElementById('txtDeleteABudgetRequestDialogEmailMessage').textContent;;
    }

    var data = [];
    data = {
        bwBudgetRequestId: bwBudgetRequestId,
        bwWorkflowAppId: workflowAppId,
        BudgetRequestDeletedByFriendlyName: participantId,
        AdditionalEmailMessage: additionalEmailMessage
    };
    var operationUri = webserviceurl + "/bwworkflow/removeabudgetrequest";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            $('#divWorkingOnItDialog').dialog('close'); // Close the create your account dialog.
            displayAlertDialog(data);
            populateStartPageItem('divArchive', 'Reports', '');

        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdDeleteBudgetRequest(): ' + errorMessage);
        }
    });
}

function cmdListAllBudgetRequestsUsingClientDatasetApproach() {

    // Set the top bar title.
    $('#spanArchiveTopBarText').text('Archive: Budget Requests');

    var filter = 'all';
    $('#spanBwBudgetRequests').empty();
    var data = {
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwbudgetrequestsdataset",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var brData = data.d.results[0]; // Budget Requests.
            var sData = data.d.results[1]; // Supplementals.
            if (brData.length == 0 && sData.length == 0) {
                var html = '';
                html += '<br /><br />';
                html += '<span style="font-size:30pt;font-style:italic;">There have been no Budget Requests created in this workflow yet.</span>';
                $('#spanBwBudgetRequests').append(html);
            } else {
                // Assuming this comes in random order, we need to do a sort here and put into an array.
                // This is not going to be an efficient sort to start with, but who cares it's on the client side! :D
                budgetRequests = [];
                budgetRequests = new Array(brData.length);
                supplementals = [];
                supplementals = new Array(brData.length);
                statusesForTheStatusDropdown = [];
                statusesForTheStatusDropdown = new Array();
                // First we load the array.
                for (var i = 0; i < brData.length; i++) {
                    budgetRequests[i] = brData[i];
                }
                // Now we iterate through the supplementals, and store them with their budget request.
                for (var i = 0; i < budgetRequests.length; i++) {
                    // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                    var weHaveThisStatusAlready = false;
                    for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                        if (budgetRequests[i].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                    }
                    if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(budgetRequests[i].BudgetWorkflowStatus);
                    // Now lets get back to the nuilding of our arrays.
                    var brId = budgetRequests[i].bwBudgetRequestId;
                    supplementals[i] = [];
                    supplementals[i] = new Array();
                    for (var x = 0; x < sData.length; x++) {
                        if (brId == sData[x].RelatedBudgetRequestId) {
                            // We have found a supplemental for this budget request, so add it!
                            supplementals[i].push(sData[x]);
                            // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                            var weHaveThisStatusAlready = false;
                            for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                                if (sData[x].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                            }
                            if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(sData[x].BudgetWorkflowStatus);
                        }
                    }
                }
                // Now that we have all our data in the array properly, lets display it!
                var html = '';
                var year = new Date().getFullYear().toString();
                // <td class="bwComTitleCell">Year</td>
                //<td class="bwChartCalculatorLightCurrencyTableCell">
                //    <span id="spanFunctionalAreaYear"></span>
                //</td>
                html += '<br /><span style="font-size:30pt;">Year:&nbsp;<select id="" style="font-size:30pt;"><option>' + year + '</option></select></span>';

                html += '&nbsp;&nbsp;<input type="button" disabled value="View trashbin contents" class="BwButton350" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;display:none;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" class="BwButton350" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;display:none;" />';


                //html += '<br /><input type="checkbox" />&nbsp;Display supplementals';
                //html += '<br /><input type="checkbox" />&nbsp;View recurring expenses';
                //html += '<br /><input type="checkbox" />&nbsp;View closeouts';
                html += '<br /><br />';


                html += '<table class="myStuffTable">';
                html += '  <tr>';
                html += '    <td></td>';
                html += '    <td>Description</td>';
                html += '    <td style="white-space:nowrap;">Financial Area</td>';
                html += '    <td>Budget Amount</td>';
                html += '    <td>Status</td>';
                html += '    <td>ARStatus</td>';
                //html += '    <td></td>';
                html += '    <td>Current Owner</td>';

                html += '  </tr>';

                html += '  <tr>';

                html += '    <td></td>';

                //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '      <select id="ddlArchivePageFinancialAreaDropDownFilter" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] == workflowAppId) {
                        // Now put the empty option.
                        html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                        for (var y = 0; y < BWMData[0][x][4].length; y++) {
                            var faId = BWMData[0][x][4][y][0];
                            var faTitle = BWMData[0][x][4][y][1];
                            html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown">';
                            html += faTitle;
                            html += '</option>';
                        }

                    }
                }
                html += '      </select>';
                html += '    </td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageBudgetAmountFilter" class="archivePageFilterBox" title="Enter a number. Shows all equal to or greater than."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '<select id="selectArchivePageFilterDropDown" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                // Now put the empty option.
                html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                // statusesForTheStatusDropdown
                for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                    html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown">' + statusesForTheStatusDropdown[s] + '</option>';
                }

                html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" />';
                html += '    </td>';
                html += '    <td></td>';
                //html += '    <td></td>';
                html += '    <td></td>';



                html += '  </tr>';
                for (var i = 0; i < budgetRequests.length; i++) {
                    html += '  <tr>';


                    html += '    <td>';
                    html += '        <img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteBudgetRequestDialog(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + budgetRequests[i].Title + '\');" title="Delete" style="cursor:pointer;" />';
                    //if (closeoutsEnabled == true) {
                    //    html += '  <a href="javascript:displayForm_DisplayCloseOut(\'' + budgetRequests[i].bwBudgetRequestId + '\');" style="white-space:nowrap;">Closeout</a>';
                    //}
                    html += '    </td>';



                    html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + budgetRequests[i].Title + '\');">' + budgetRequests[i].ProjectTitle + '</a></td>';
                    for (var x = 0; x < BWMData[0].length; x++) {
                        if (BWMData[0][x][0] == workflowAppId) {
                            for (var y = 0; y < BWMData[0][x][4].length; y++) {
                                if (BWMData[0][x][4][y][0] == budgetRequests[i].FunctionalAreaId) {
                                    // We have found the financial area, so we have the title! Yay!
                                    var faTitle = BWMData[0][x][4][y][1];
                                    html += '<td>';
                                    html += faTitle;
                                    html += '</td>';
                                }
                            }
                        }
                    }
                    // Strikethrough the budget amount for a rejected AR.
                    if (budgetRequests[i].ARStatus == 'Rejected') {
                        html += '    <td style="text-align:right;"><strike>' + formatCurrency(budgetRequests[i].BudgetAmount) + '</strike></td>';
                    } else {
                        html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
                    }
                    html += '    <td>' + budgetRequests[i].BudgetWorkflowStatus + '</td>';
                    html += '    <td>' + budgetRequests[i].ARStatus + '</td>';
                    //html += '    <td>';
                    //tempCloseOutXml = budgetRequests[i].bwDocumentXml;
                    //html += '       <a href="javascript:displayForm_DisplayCloseOut();" style="white-space:nowrap;">Close Out</a>';
                    //html += '    </td>';
                    html += '    <td>' + budgetRequests[i].CurrentOwner + '</td>';










                    html += '  </tr>';
                    for (var x = 0; x < supplementals[i].length; x++) {
                        // Display the supplementals.
                        html += '  <tr style="font-style:italic;font-size:small;">';
                        html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + supplementals[i][x].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + supplementals[i][x].Title + '\');">' + supplementals[i][x].ProjectTitle + '</a></td>';
                        for (var x2 = 0; x2 < BWMData[0].length; x2++) {
                            if (BWMData[0][x2][0] == workflowAppId) {
                                for (var y = 0; y < BWMData[0][x2][4].length; y++) {
                                    if (BWMData[0][x2][4][y][0] == supplementals[i][x].FunctionalAreaId) {
                                        // We have found the financial area, so we have the title! Yay!
                                        var faTitle = BWMData[0][x2][4][y][1];
                                        html += '<td>';
                                        html += faTitle;
                                        html += '</td>';
                                    }
                                }
                            }
                        }
                        html += '    <td style="text-align:right;">' + supplementals[i][x].BudgetAmount + '</td>';
                        html += '    <td>' + supplementals[i][x].BudgetWorkflowStatus + '</td>';
                        html += '    <td></td>';
                        html += '    <td>' + supplementals[i][x].CurrentOwner + '</td>';
                        html += '  </tr>';
                    }
                }
                html += '<tr><td colspan="12"></td></tr>'; // DONE
                html += '</table>';
                $('#spanBwBudgetRequests').append(html);

                // Now it's time to hook up the events. Doing both  change and key up events.


                $('#txtArchivePageDescriptionFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });
                $('#txtArchivePageDescriptionFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });

                $('#txtArchivePageBudgetAmountFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });
                $('#txtArchivePageBudgetAmountFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });

                $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
                });

                $('#selectArchivePageFilterDropDown').change(function () {
                    renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
                });
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdListAllBudgetRequestsUsingClientDatasetApproach():' + errorCode + ', ' + errorMessage);
        }
    });
}


function cmdListAllQuoteRequestsUsingClientDatasetApproach() {

    // Set the top bar title.
    $('#spanArchiveTopBarText').text('Archive: Quote requests');

    var filter = 'all';
    $('#spanBwBudgetRequests').empty();
    var data = {
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwquoterequestsdataset", // "/bwbudgetrequestsdataset",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var brData = data.d.results[0]; // Budget Requests.
            var sData = data.d.results[1]; // Supplementals.
            if (brData.length == 0 && sData.length == 0) {
                var html = '';
                html += '<br /><br />';
                html += '<span style="font-size:30pt;font-style:italic;">There have been no Quote Requests created in this workflow yet.</span>';
                $('#spanBwBudgetRequests').append(html);
            } else {
                // Assuming this comes in random order, we need to do a sort here and put into an array.
                // This is not going to be an efficient sort to start with, but who cares it's on the client side! :D
                budgetRequests = [];
                budgetRequests = new Array(brData.length);
                supplementals = [];
                supplementals = new Array(brData.length);
                statusesForTheStatusDropdown = [];
                statusesForTheStatusDropdown = new Array();
                // First we load the array.
                for (var i = 0; i < brData.length; i++) {
                    budgetRequests[i] = brData[i];
                }
                // Now we iterate through the supplementals, and store them with their budget request.
                for (var i = 0; i < budgetRequests.length; i++) {
                    // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                    var weHaveThisStatusAlready = false;
                    for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                        if (budgetRequests[i].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                    }
                    if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(budgetRequests[i].BudgetWorkflowStatus);
                    // Now lets get back to the nuilding of our arrays.
                    var brId = budgetRequests[i].bwBudgetRequestId;
                    supplementals[i] = [];
                    supplementals[i] = new Array();
                    for (var x = 0; x < sData.length; x++) {
                        if (brId == sData[x].RelatedBudgetRequestId) {
                            // We have found a supplemental for this budget request, so add it!
                            supplementals[i].push(sData[x]);
                            // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                            var weHaveThisStatusAlready = false;
                            for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                                if (sData[x].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                            }
                            if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(sData[x].BudgetWorkflowStatus);
                        }
                    }
                }
                // Now that we have all our data in the array properly, lets display it!
                var html = '';
                var year = new Date().getFullYear().toString();
                // <td class="bwComTitleCell">Year</td>
                //<td class="bwChartCalculatorLightCurrencyTableCell">
                //    <span id="spanFunctionalAreaYear"></span>
                //</td>
                html += '<br /><span style="font-size:30pt;">Year:&nbsp;<select id="" style="font-size:30pt;"><option>' + year + '</option></select></span>';

                html += '&nbsp;&nbsp;<input type="button" disabled value="View trashbin contents" class="BwButton350" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;display:none;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" class="BwButton350" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;display:none;" />';


                //html += '<br /><input type="checkbox" />&nbsp;Display supplementals';
                //html += '<br /><input type="checkbox" />&nbsp;View recurring expenses';
                //html += '<br /><input type="checkbox" />&nbsp;View closeouts';
                html += '<br /><br />';


                html += '<table class="myStuffTable">';
                html += '  <tr>';
                html += '    <td></td>';
                html += '    <td>Description</td>';
                html += '    <td style="white-space:nowrap;">Financial Area</td>';
                html += '    <td>Quote Amount</td>';
                html += '    <td>Status</td>';
                html += '    <td>ARStatus</td>';
                //html += '    <td></td>';
                html += '    <td>Current Owner</td>';

                html += '  </tr>';

                html += '  <tr>';

                html += '    <td></td>';

                //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '      <select id="ddlArchivePageFinancialAreaDropDownFilter" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] == workflowAppId) {
                        // Now put the empty option.
                        html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                        for (var y = 0; y < BWMData[0][x][4].length; y++) {
                            var faId = BWMData[0][x][4][y][0];
                            var faTitle = BWMData[0][x][4][y][1];
                            html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown">';
                            html += faTitle;
                            html += '</option>';
                        }

                    }
                }
                html += '      </select>';
                html += '    </td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageBudgetAmountFilter" class="archivePageFilterBox" title="Enter a number. Shows all equal to or greater than."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '<select id="selectArchivePageFilterDropDown" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                // Now put the empty option.
                html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                // statusesForTheStatusDropdown
                for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                    html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown">' + statusesForTheStatusDropdown[s] + '</option>';
                }

                html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" />';
                html += '    </td>';
                html += '    <td></td>';
                //html += '    <td></td>';
                html += '    <td></td>';



                html += '  </tr>';
                for (var i = 0; i < budgetRequests.length; i++) {
                    html += '  <tr>';


                    html += '    <td>';
                    html += '        <img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteBudgetRequestDialog(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + budgetRequests[i].Title + '\');" title="Delete" style="cursor:pointer;" />';
                    //if (closeoutsEnabled == true) {
                    //    html += '  <a href="javascript:displayForm_DisplayCloseOut(\'' + budgetRequests[i].bwBudgetRequestId + '\');" style="white-space:nowrap;">Closeout</a>';
                    //}
                    html += '    </td>';



                    html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + budgetRequests[i].Title + '\');">' + budgetRequests[i].ProjectTitle + '</a></td>';
                    for (var x = 0; x < BWMData[0].length; x++) {
                        if (BWMData[0][x][0] == workflowAppId) {
                            for (var y = 0; y < BWMData[0][x][4].length; y++) {
                                if (BWMData[0][x][4][y][0] == budgetRequests[i].FunctionalAreaId) {
                                    // We have found the financial area, so we have the title! Yay!
                                    var faTitle = BWMData[0][x][4][y][1];
                                    html += '<td>';
                                    html += faTitle;
                                    html += '</td>';
                                }
                            }
                        }
                    }
                    // Strikethrough the budget amount for a rejected AR.
                    if (budgetRequests[i].ARStatus == 'Rejected') {
                        html += '    <td style="text-align:right;"><strike>' + formatCurrency(budgetRequests[i].BudgetAmount) + '</strike></td>';
                    } else {
                        html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
                    }
                    html += '    <td>' + budgetRequests[i].BudgetWorkflowStatus + '</td>';
                    html += '    <td>' + budgetRequests[i].ARStatus + '</td>';
                    //html += '    <td>';
                    //tempCloseOutXml = budgetRequests[i].bwDocumentXml;
                    //html += '       <a href="javascript:displayForm_DisplayCloseOut();" style="white-space:nowrap;">Close Out</a>';
                    //html += '    </td>';
                    html += '    <td>' + budgetRequests[i].CurrentOwner + '</td>';










                    html += '  </tr>';
                    for (var x = 0; x < supplementals[i].length; x++) {
                        // Display the supplementals.
                        html += '  <tr style="font-style:italic;font-size:small;">';
                        html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + supplementals[i][x].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + supplementals[i][x].Title + '\');">' + supplementals[i][x].ProjectTitle + '</a></td>';
                        for (var x2 = 0; x2 < BWMData[0].length; x2++) {
                            if (BWMData[0][x2][0] == workflowAppId) {
                                for (var y = 0; y < BWMData[0][x2][4].length; y++) {
                                    if (BWMData[0][x2][4][y][0] == supplementals[i][x].FunctionalAreaId) {
                                        // We have found the financial area, so we have the title! Yay!
                                        var faTitle = BWMData[0][x2][4][y][1];
                                        html += '<td>';
                                        html += faTitle;
                                        html += '</td>';
                                    }
                                }
                            }
                        }
                        html += '    <td style="text-align:right;">' + supplementals[i][x].BudgetAmount + '</td>';
                        html += '    <td>' + supplementals[i][x].BudgetWorkflowStatus + '</td>';
                        html += '    <td></td>';
                        html += '    <td>' + supplementals[i][x].CurrentOwner + '</td>';
                        html += '  </tr>';
                    }
                }
                html += '<tr><td colspan="12"></td></tr>'; // DONE
                html += '</table>';
                $('#spanBwBudgetRequests').append(html);

                // Now it's time to hook up the events. Doing both  change and key up events.


                $('#txtArchivePageDescriptionFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });
                $('#txtArchivePageDescriptionFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });

                $('#txtArchivePageBudgetAmountFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });
                $('#txtArchivePageBudgetAmountFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });

                $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
                });

                $('#selectArchivePageFilterDropDown').change(function () {
                    renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
                });
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdListAllQuoteRequestsUsingClientDatasetApproach():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllReimbursementRequestsUsingClientDatasetApproach() {

    // Set the top bar title.
    $('#spanArchiveTopBarText').text('Archive: Reimbursement requests');

    var filter = 'all';
    $('#spanBwBudgetRequests').empty();
    var data = {
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwreimbursementrequestsdataset", // "/bwbudgetrequestsdataset",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var brData = data.d.results[0]; // Budget Requests.
            var sData = data.d.results[1]; // Supplementals.
            if (brData.length == 0 && sData.length == 0) {
                var html = '';
                html += '<br /><br />';
                html += '<span style="font-size:30pt;font-style:italic;">There have been no Reimbursement Requests created in this workflow yet.</span>';
                $('#spanBwBudgetRequests').append(html);
            } else {
                // Assuming this comes in random order, we need to do a sort here and put into an array.
                // This is not going to be an efficient sort to start with, but who cares it's on the client side! :D
                budgetRequests = [];
                budgetRequests = new Array(brData.length);
                supplementals = [];
                supplementals = new Array(brData.length);
                statusesForTheStatusDropdown = [];
                statusesForTheStatusDropdown = new Array();
                // First we load the array.
                for (var i = 0; i < brData.length; i++) {
                    budgetRequests[i] = brData[i];
                }
                // Now we iterate through the supplementals, and store them with their budget request.
                for (var i = 0; i < budgetRequests.length; i++) {
                    // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                    var weHaveThisStatusAlready = false;
                    for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                        if (budgetRequests[i].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                    }
                    if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(budgetRequests[i].BudgetWorkflowStatus);
                    // Now lets get back to the nuilding of our arrays.
                    var brId = budgetRequests[i].bwBudgetRequestId;
                    supplementals[i] = [];
                    supplementals[i] = new Array();
                    for (var x = 0; x < sData.length; x++) {
                        if (brId == sData[x].RelatedBudgetRequestId) {
                            // We have found a supplemental for this budget request, so add it!
                            supplementals[i].push(sData[x]);
                            // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                            var weHaveThisStatusAlready = false;
                            for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                                if (sData[x].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                            }
                            if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(sData[x].BudgetWorkflowStatus);
                        }
                    }
                }
                // Now that we have all our data in the array properly, lets display it!
                var html = '';
                var year = new Date().getFullYear().toString();
                // <td class="bwComTitleCell">Year</td>
                //<td class="bwChartCalculatorLightCurrencyTableCell">
                //    <span id="spanFunctionalAreaYear"></span>
                //</td>
                html += '<br /><span style="font-size:30pt;">Year:&nbsp;<select id="" style="font-size:30pt;"><option>' + year + '</option></select></span>';

                html += '&nbsp;&nbsp;<input type="button" disabled value="View trashbin contents" class="BwButton350" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;display:none;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" class="BwButton350" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;display:none;" />';


                //html += '<br /><input type="checkbox" />&nbsp;Display supplementals';
                //html += '<br /><input type="checkbox" />&nbsp;View recurring expenses';
                //html += '<br /><input type="checkbox" />&nbsp;View closeouts';
                html += '<br /><br />';


                html += '<table class="myStuffTable">';
                html += '  <tr>';
                html += '    <td></td>';
                html += '    <td>Description</td>';
                html += '    <td style="white-space:nowrap;">Financial Area</td>';
                html += '    <td>Reimbursement Amount</td>';
                html += '    <td>Status</td>';
                html += '    <td>ARStatus</td>';
                //html += '    <td></td>';
                html += '    <td>Current Owner</td>';

                html += '  </tr>';

                html += '  <tr>';

                html += '    <td></td>';

                //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '      <select id="ddlArchivePageFinancialAreaDropDownFilter" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] == workflowAppId) {
                        // Now put the empty option.
                        html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                        for (var y = 0; y < BWMData[0][x][4].length; y++) {
                            var faId = BWMData[0][x][4][y][0];
                            var faTitle = BWMData[0][x][4][y][1];
                            html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown">';
                            html += faTitle;
                            html += '</option>';
                        }

                    }
                }
                html += '      </select>';
                html += '    </td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageBudgetAmountFilter" class="archivePageFilterBox" title="Enter a number. Shows all equal to or greater than."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '<select id="selectArchivePageFilterDropDown" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                // Now put the empty option.
                html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                // statusesForTheStatusDropdown
                for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                    html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown">' + statusesForTheStatusDropdown[s] + '</option>';
                }

                html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" />';
                html += '    </td>';
                html += '    <td></td>';
                //html += '    <td></td>';
                html += '    <td></td>';



                html += '  </tr>';
                for (var i = 0; i < budgetRequests.length; i++) {
                    html += '  <tr>';


                    html += '    <td>';
                    html += '        <img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteBudgetRequestDialog(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + budgetRequests[i].Title + '\');" title="Delete" style="cursor:pointer;" />';
                    //if (closeoutsEnabled == true) {
                    //    html += '  <a href="javascript:displayForm_DisplayCloseOut(\'' + budgetRequests[i].bwBudgetRequestId + '\');" style="white-space:nowrap;">Closeout</a>';
                    //}
                    html += '    </td>';



                    html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + budgetRequests[i].Title + '\');">' + budgetRequests[i].ProjectTitle + '</a></td>';
                    for (var x = 0; x < BWMData[0].length; x++) {
                        if (BWMData[0][x][0] == workflowAppId) {
                            for (var y = 0; y < BWMData[0][x][4].length; y++) {
                                if (BWMData[0][x][4][y][0] == budgetRequests[i].FunctionalAreaId) {
                                    // We have found the financial area, so we have the title! Yay!
                                    var faTitle = BWMData[0][x][4][y][1];
                                    html += '<td>';
                                    html += faTitle;
                                    html += '</td>';
                                }
                            }
                        }
                    }
                    // Strikethrough the budget amount for a rejected AR.
                    if (budgetRequests[i].ARStatus == 'Rejected') {
                        html += '    <td style="text-align:right;"><strike>' + formatCurrency(budgetRequests[i].BudgetAmount) + '</strike></td>';
                    } else {
                        html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
                    }
                    html += '    <td>' + budgetRequests[i].BudgetWorkflowStatus + '</td>';
                    html += '    <td>' + budgetRequests[i].ARStatus + '</td>';
                    //html += '    <td>';
                    //tempCloseOutXml = budgetRequests[i].bwDocumentXml;
                    //html += '       <a href="javascript:displayForm_DisplayCloseOut();" style="white-space:nowrap;">Close Out</a>';
                    //html += '    </td>';
                    html += '    <td>' + budgetRequests[i].CurrentOwner + '</td>';










                    html += '  </tr>';
                    for (var x = 0; x < supplementals[i].length; x++) {
                        // Display the supplementals.
                        html += '  <tr style="font-style:italic;font-size:small;">';
                        html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + supplementals[i][x].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + supplementals[i][x].Title + '\');">' + supplementals[i][x].ProjectTitle + '</a></td>';
                        for (var x2 = 0; x2 < BWMData[0].length; x2++) {
                            if (BWMData[0][x2][0] == workflowAppId) {
                                for (var y = 0; y < BWMData[0][x2][4].length; y++) {
                                    if (BWMData[0][x2][4][y][0] == supplementals[i][x].FunctionalAreaId) {
                                        // We have found the financial area, so we have the title! Yay!
                                        var faTitle = BWMData[0][x2][4][y][1];
                                        html += '<td>';
                                        html += faTitle;
                                        html += '</td>';
                                    }
                                }
                            }
                        }
                        html += '    <td style="text-align:right;">' + supplementals[i][x].BudgetAmount + '</td>';
                        html += '    <td>' + supplementals[i][x].BudgetWorkflowStatus + '</td>';
                        html += '    <td></td>';
                        html += '    <td>' + supplementals[i][x].CurrentOwner + '</td>';
                        html += '  </tr>';
                    }
                }
                html += '<tr><td colspan="12"></td></tr>'; // DONE
                html += '</table>';
                $('#spanBwBudgetRequests').append(html);

                // Now it's time to hook up the events. Doing both  change and key up events.


                $('#txtArchivePageDescriptionFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });
                $('#txtArchivePageDescriptionFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });

                $('#txtArchivePageBudgetAmountFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });
                $('#txtArchivePageBudgetAmountFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });

                $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
                });

                $('#selectArchivePageFilterDropDown').change(function () {
                    renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
                });
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdListAllReimbursementRequestsUsingClientDatasetApproach():' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdListAllRecurringExpensesUsingClientDatasetApproach() {

    // Set the top bar title.
    $('#spanArchiveTopBarText').text('Archive: Recurring expenses');

    var filter = 'all';
    $('#spanBwBudgetRequests').empty();
    var data = {
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwrecurringexpensesdataset",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var brData = data.d.results[0]; // Recurring Expenses.
            var sData = data.d.results[1]; // Supplementals.
            if (brData.length == 0 && sData.length == 0) {
                var html = '';
                html += '<br /><br />';
                html += '<span style="font-size:30pt;font-style:italic;">There have been no recurring expenses created in this workflow yet.</span>';
                $('#spanBwBudgetRequests').append(html);
            } else {
                // Assuming this comes in random order, we need to do a sort here and put into an array.
                // This is not going to be an efficient sort to start with, but who cares it's on the client side! :D
                budgetRequests = [];
                budgetRequests = new Array(brData.length);
                supplementals = [];
                supplementals = new Array(brData.length);
                statusesForTheStatusDropdown = [];
                statusesForTheStatusDropdown = new Array();
                // First we load the array.
                for (var i = 0; i < brData.length; i++) {
                    budgetRequests[i] = brData[i];
                }
                // Now we iterate through the supplementals, and store them with their budget request.
                for (var i = 0; i < budgetRequests.length; i++) {
                    //// Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                    //var weHaveThisStatusAlready = false;
                    //for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                    //    if (budgetRequests[i].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                    //}
                    //if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(budgetRequests[i].BudgetWorkflowStatus);
                    // Now lets get back to the nuilding of our arrays.
                    var brId = budgetRequests[i].bwRecurringExpenseId;
                    supplementals[i] = [];
                    supplementals[i] = new Array();
                    for (var x = 0; x < sData.length; x++) {
                        if (brId == sData[x].RelatedRecurringExpenseId) {
                            // We have found a supplemental for this budget request, so add it!
                            supplementals[i].push(sData[x]);
                            // Build out our intelligent Status drop down. It only includes Statuses that are actually present!! Yeah!
                            var weHaveThisStatusAlready = false;
                            for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                                if (sData[x].BudgetWorkflowStatus == statusesForTheStatusDropdown[s]) weHaveThisStatusAlready = true;
                            }
                            if (weHaveThisStatusAlready != true) statusesForTheStatusDropdown.push(sData[x].BudgetWorkflowStatus);
                        }
                    }
                }
                // Now that we have all our data in the array properly, lets display it!
                var html = '';
                var year = new Date().getFullYear().toString();
                html += '<br /><span style="font-size:30pt;">Year:&nbsp;<select id="" style="font-size:30pt;"><option>' + year + '</option></select></span>';

                html += '&nbsp;&nbsp;<input type="button" disabled value="View trashbin contents" class="BwButton350" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" class="BwButton350" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;" /><br /><br />';

                //html += '<br /><input type="checkbox" />&nbsp;Display supplementals';
                //html += '<br /><input type="checkbox" />&nbsp;View recurring expenses';
                //html += '<br /><input type="checkbox" />&nbsp;View closeouts';
                //html += '<br /><br />';


                html += '<table class="myStuffTable">';
                html += '  <tr>';
                html += '    <td>Description</td>';
                html += '    <td style="white-space:nowrap;">Financial Area</td>';
                html += '    <td>Budget Amount</td>';
                //html += '    <td>Status</td>';
                //html += '    <td>ARStatus</td>';
                //html += '    <td>Current Owner</td>';
                html += '    <td>Reminder Date</td>';
                html += '    <td></td>';
                html += '  </tr>';

                html += '  <tr>';
                //html += '    <td style="white-space:nowrap;"><input type="text" id="" value="Filter: * for wildcard" class="archivePageFilterBox" title="Results filter. Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                html += '    <td style="white-space:nowrap;">';
                html += '      <select id="ddlArchivePageFinancialAreaDropDownFilter" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                for (var x = 0; x < BWMData[0].length; x++) {
                    if (BWMData[0][x][0] == workflowAppId) {
                        // Now put the empty option.
                        html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                        for (var y = 0; y < BWMData[0][x][4].length; y++) {
                            var faId = BWMData[0][x][4][y][0];
                            var faTitle = BWMData[0][x][4][y][1];
                            html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown">';
                            html += faTitle;
                            html += '</option>';
                        }

                    }
                }
                html += '      </select>';
                html += '    </td>';
                html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageBudgetAmountFilter" class="archivePageFilterBox" title="Enter a number. Shows all equal to or greater than."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
                //html += '    <td style="white-space:nowrap;">';
                //html += '<select id="selectArchivePageFilterDropDown" class="archivePageFilterDropDown" title="Select here to limit the search results.">';
                //// Now put the empty option.
                //html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
                //// statusesForTheStatusDropdown
                ////for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
                ////    html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown">' + statusesForTheStatusDropdown[s] + '</option>';
                ////}

                //html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" />';
                //html += '    </td>';
                //html += '    <td></td>';
                ////html += '    <td></td>';
                html += '    <td></td>';
                html += '    <td></td>';
                html += '  </tr>';
                for (var i = 0; i < budgetRequests.length; i++) {
                    html += '  <tr>';
                    html += '      <td><a href="javascript:displayRecurringExpenseOnTheHomePage(\'' + budgetRequests[i].bwRecurringExpenseId + '\', \'' + participantId + '\', \'' + budgetRequests[i].Title + '\');">' + budgetRequests[i].ProjectTitle + '</a></td>';
                    for (var x = 0; x < BWMData[0].length; x++) {
                        if (BWMData[0][x][0] == workflowAppId) {
                            for (var y = 0; y < BWMData[0][x][4].length; y++) {
                                if (BWMData[0][x][4][y][0] == budgetRequests[i].FunctionalAreaId) {
                                    // We have found the financial area, so we have the title! Yay!
                                    var faTitle = BWMData[0][x][4][y][1];
                                    html += '<td>';
                                    html += faTitle;
                                    html += '</td>';
                                }
                            }
                        }
                    }
                    // Strikethrough the budget amount for a rejected AR.
                    if (budgetRequests[i].ARStatus == 'Rejected') {
                        html += '    <td style="text-align:right;"><strike>' + formatCurrency(budgetRequests[i].BudgetAmount) + '</strike></td>';
                    } else {
                        html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
                    }
                    //html += '    <td>' + budgetRequests[i].BudgetWorkflowStatus + '</td>';
                    //html += '    <td>' + budgetRequests[i].ARStatus + '</td>';
                    ////html += '    <td>';
                    ////tempCloseOutXml = budgetRequests[i].bwDocumentXml;
                    ////html += '       <a href="javascript:displayForm_DisplayCloseOut();" style="white-space:nowrap;">Close Out</a>';
                    ////html += '    </td>';
                    //html += '    <td>' + budgetRequests[i].CurrentOwner + '</td>';
                    html += '    <td>' + formatDateFromBW(budgetRequests[i].ReminderDate) + '</td>';
                    html += '<td>';
                    html += '  <img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteRecurringExpenseRequestDialog(\'' + budgetRequests[i].bwRecurringExpenseId + '\', \'' + budgetRequests[i].Title + '\');" title="Delete" style="cursor:pointer;" />';
                    //if (closeoutsEnabled == true) {
                    //    html += '  <a href="javascript:displayForm_DisplayCloseOut(\'' + budgetRequests[i].bwBudgetRequestId + '\');" style="white-space:nowrap;">Closeout</a>';
                    //}
                    html += '</td>';

                    html += '  </tr>';
                    for (var x = 0; x < supplementals[i].length; x++) {
                        // Display the supplementals.
                        html += '  <tr style="font-style:italic;font-size:small;">';
                        html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + supplementals[i][x].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + supplementals[i][x].Title + '\');">' + supplementals[i][x].ProjectTitle + '</a></td>';
                        for (var x2 = 0; x2 < BWMData[0].length; x2++) {
                            if (BWMData[0][x2][0] == workflowAppId) {
                                for (var y = 0; y < BWMData[0][x2][4].length; y++) {
                                    if (BWMData[0][x2][4][y][0] == supplementals[i][x].FunctionalAreaId) {
                                        // We have found the financial area, so we have the title! Yay!
                                        var faTitle = BWMData[0][x2][4][y][1];
                                        html += '<td>';
                                        html += faTitle;
                                        html += '</td>';
                                    }
                                }
                            }
                        }
                        html += '    <td style="text-align:right;">' + supplementals[i][x].BudgetAmount + '</td>';
                        //html += '    <td>' + supplementals[i][x].BudgetWorkflowStatus + '</td>';
                        //html += '    <td></td>';
                        //html += '    <td>' + supplementals[i][x].CurrentOwner + '</td>';
                        html += '  </tr>';
                    }
                }
                html += '<tr><td colspan="12"></td></tr>'; // DONE
                html += '</table>';
                $('#spanBwBudgetRequests').append(html);

                // Now it's time to hook up the events. Doing both  change and key up events.


                $('#txtArchivePageDescriptionFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });
                $('#txtArchivePageDescriptionFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                });

                $('#txtArchivePageBudgetAmountFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });
                $('#txtArchivePageBudgetAmountFilter').keyup(function () {
                    renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                });

                $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
                    renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
                });

                $('#selectArchivePageFilterDropDown').change(function () {
                    renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
                });
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdListAllRecurringExpensesUsingClientDatasetApproach():' + errorCode + ', ' + errorMessage);
        }
    });
}





function cmdListAllParticipantsUsingClientDatasetApproach() {
    try {

        // Set the top bar title.
        $('#spanArchiveTopBarText').text('Archive: Participants');

        var filter = 'all';
        $('#spanBwBudgetRequests').empty();
        var data = {
            "bwWorkflowId": workflowAppId
        };
        $.ajax({
            url: webserviceurl + "/workflow/participants",
            type: "DELETE",
            contentType: 'application/json',
            data: JSON.stringify(data),
            success: function (data) {
                try {
                    var html = '';
                    html += '<table class="myStuffTable">';
                    html += '  <tr>';
                    html += '    <td>Name</td>';
                    html += '    <td>Email</td>';
                    html += '    <td>Role</td>';
                    html += '    <td></td>';
                    html += '    <td></td>';
                    //html += '    <td>participant id</td>';
                    //html += '    <td>tenant id</td>';
                    html += '  </tr>';
                    for (var i = 0; i < data.length; i++) {
                        html += '  <tr>';
                        html += '    <td>' + data[i].bwParticipantFriendlyName + '</td>';
                        html += '    <td>' + data[i].bwParticipantEmail + '</td>';
                        html += '    <td>' + data[i].bwParticipantRole + '</td>';
                        if ((data[i].bwParticipantId == participantId) || (data[i].bwParticipantRole == 'owner')) {
                            html += '    <td></td>';
                            html += '    <td></td>';
                        } else {
                            //html += '    <td><button class="BwSmallButton" onclick="cmdDisplayChangeUserRoleDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');">change role</button></td>';
                            //html += '    <td><button class="BwSmallButton" onclick="cmdDisplayReassignUserTasksDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');">reassign tasks</button></td>';
                            //html += '    <td><img src="images/trash-can.png" onclick="cmdDisplayDeleteUserDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');" title="Delete" style="cursor:pointer;" /></td>';

                            html += '    <td></td>';
                            html += '    <td></td>';
                            //html += '    <td></td>';

                        }
                        //html += '    <td>' + data[i].bwParticipantId + '</td>';
                        //html += '    <td>' + data[i].bwTenantId + '</td>';
                        html += '  </tr>';
                    }
                    //html += '<tr><td colspan="4">DONE</td></tr>';
                    html += '</table>';
                    //
                    //html += '                </span>';
                    //html += '            </div>';
                    //html += '        </div>';
                    //html += '    </div>';
                    //html += '</div>';
                    //


                    //html += '<tr><td colspan="12"></td></tr>'; // DONE
                    html += '</table>';

                    html += '<br />';
                    //html += '<i>This view is currently being enhanced and will be available in the near future.</i>';

                    $('#spanBwBudgetRequests').append(html);

                    // Now it's time to hook up the events. Doing both  change and key up events.


                    $('#txtArchivePageDescriptionFilter').change(function () {
                        renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                    });
                    $('#txtArchivePageDescriptionFilter').keyup(function () {
                        renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
                    });

                    $('#txtArchivePageBudgetAmountFilter').change(function () {
                        renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                    });
                    $('#txtArchivePageBudgetAmountFilter').keyup(function () {
                        renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
                    });

                    $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
                        renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
                    });

                    $('#selectArchivePageFilterDropDown').change(function () {
                        renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
                    });


                } catch (e) {
                    displayAlertDialog('Error in my.js.cmdListAllParticipantsUsingClientDatasetApproach():3:' + e.message + ', ' + e.stack);
                }


            },
            error: function (data, errorCode, errorMessage) {
                //window.waitDialog.close();
                //handleExceptionWithAlert('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in my.js.cmdListAllParticipantsUsingClientDatasetApproach():2:' + errorCode + ', ' + errorMessage);
            }
        });

    } catch (e) {
        displayAlertDialog('Error in my.js.cmdListAllParticipantsUsingClientDatasetApproach():1:' + e.message + ', ' + e.stack);
    }
}








function renderArchivePageApplyingDescriptionFilter(filterObjectName) {
    //displayAlertDialog('xxxx');
    var descriptionfilter = document.getElementById('txtArchivePageDescriptionFilter').value.toLowerCase();
    var budgetamountfilter = document.getElementById('txtArchivePageBudgetAmountFilter').value.toLowerCase();
    var financialareafilter = document.getElementById('ddlArchivePageFinancialAreaDropDownFilter').value;
    var statusfilter = document.getElementById('selectArchivePageFilterDropDown').value;

    //displayAlertDialog('1: ' + financialareafilter + ' 2: ' + statusfilter);
    // Now that we have all our data in the array properly, lets display it!
    var year = new Date().getFullYear().toString();
    var html = '';
    html += '<br />Year:&nbsp;<select id=""><option>' + year + '</option></select>';
    html += '<br /><br />';
    html += '<table class="myStuffTable">';
    html += '  <tr>';
    html += '    <td>Description</td>';
    html += '    <td style="white-space:nowrap;">Financial Area</td>';
    html += '    <td>Budget Amount</td>';
    html += '    <td>Status</td>';
    html += '    <td>ARStatus</td>';
    //html += '    <td></td>';
    html += '    <td>Current Owner</td>';
    html += '    <td></td>';
    html += '  </tr>';
    html += '  <tr>';
    html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageDescriptionFilter" class="archivePageFilterBox" title="Type here to limit the search results, using * as a wildcard character."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
    html += '    <td style="white-space:nowrap;">';
    html += '      <select id="ddlArchivePageFinancialAreaDropDownFilter" class="archivePageFilterDropDown" title="Select here to limit search results.">';
    for (var x = 0; x < BWMData[0].length; x++) {
        if (BWMData[0][x][0] == workflowAppId) {
            // Now put the empty option.
            html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
            for (var y = 0; y < BWMData[0][x][4].length; y++) {
                var faId = BWMData[0][x][4][y][0];
                var faTitle = BWMData[0][x][4][y][1];
                // Check if the faId exists in budgetrequests. If not do not display it.
                var areWeDisplayingThisFa = false;
                for (var i = 0; i < budgetRequests.length; i++) {
                    //var budgetAmount = budgetRequests[i].BudgetAmount
                    if ((descriptionfilter == '' && budgetamountfilter == '') || (budgetamountfilter == '' && budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1) || (descriptionfilter == '' && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter)) || (budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1 && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter))) { // Applying the filter.
                        if (faId == budgetRequests[i].FunctionalAreaId) {
                            areWeDisplayingThisFa = true;
                        }
                    }
                }
                if (areWeDisplayingThisFa == true) {
                    if (financialareafilter == faId) {
                        html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown" selected >';
                    } else {
                        html += '<option value="' + faId + '" class="archivePageFilterOptionDropDown">';
                    }
                    html += faTitle;
                    html += '</option>';
                }
            }
        }
    }
    html += '      </select>';
    html += '    </td>';
    html += '    <td style="white-space:nowrap;"><input type="text" id="txtArchivePageBudgetAmountFilter" class="archivePageFilterBox" title="Enter a number. Shows all equal to or greater than."/>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" /></td>';
    html += '    <td style="white-space:nowrap;">';
    html += '<select id="selectArchivePageFilterDropDown" class="archivePageFilterDropDown" title="Select here to limit search results.">';
    // Now put the empty option.
    html += '<option value="" class="archivePageFilterOptionDropDown">Show all...</option>';
    for (var s = 0; s < statusesForTheStatusDropdown.length; s++) {
        if (statusfilter == statusesForTheStatusDropdown[s]) {
            html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown" selected >' + statusesForTheStatusDropdown[s] + '</option>';
        } else {
            html += '<option value="' + statusesForTheStatusDropdown[s] + '" class="archivePageFilterOptionDropDown">' + statusesForTheStatusDropdown[s] + '</option>';
        }
    }
    html += '</select>&nbsp;<img src="images/icon-down.png" title="Sort order" style="cursor:pointer;" />';
    html += '    </td>';
    html += '    <td></td>';
    //html += '    <td></td>';
    html += '    <td></td>';
    html += '    <td></td>';
    html += '  </tr>';

    //displayAlertDialog('filter: ' + filter);
    for (var i = 0; i < budgetRequests.length; i++) {
        // The following conditions determine if the AR is displayed. The question is "Show this item if..."
        if ((descriptionfilter == '' && financialareafilter == '' && budgetamountfilter == '' && statusfilter == '') ||
            (descriptionfilter == '' && financialareafilter == '' && budgetamountfilter == '' && statusfilter == budgetRequests[i].BudgetWorkflowStatus) ||

            (budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1 && financialareafilter == '' && budgetamountfilter == '' && statusfilter == '') ||
            (budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1 && financialareafilter == budgetRequests[i].FunctionalAreaId && budgetamountfilter == '' && statusfilter == '') ||
            (budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1 && financialareafilter == budgetRequests[i].FunctionalAreaId && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == '') ||
            (budgetRequests[i].ProjectTitle.toLowerCase().indexOf(descriptionfilter) > -1 && financialareafilter == budgetRequests[i].FunctionalAreaId && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == budgetRequests[i].BudgetWorkflowStatus) ||

            (descriptionfilter == '' && financialareafilter == budgetRequests[i].FunctionalAreaId && budgetamountfilter == '' && statusfilter == '') ||
            (descriptionfilter == '' && financialareafilter == budgetRequests[i].FunctionalAreaId && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == '') ||
            (descriptionfilter == '' && financialareafilter == budgetRequests[i].FunctionalAreaId && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == budgetRequests[i].BudgetWorkflowStatus) ||

            (descriptionfilter == '' && financialareafilter == '' && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == '') ||

            (descriptionfilter == '' && financialareafilter == '' && Number(budgetRequests[i].BudgetAmount) >= Number(budgetamountfilter) && statusfilter == budgetRequests[i].BudgetWorkflowStatus)) { // Applying the filter.
            html += '  <tr>';
            html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + budgetRequests[i].Title + '\');">' + budgetRequests[i].ProjectTitle + '</a></td>';
            for (var x = 0; x < BWMData[0].length; x++) {
                if (BWMData[0][x][0] == workflowAppId) {
                    for (var y = 0; y < BWMData[0][x][4].length; y++) {
                        if (BWMData[0][x][4][y][0] == budgetRequests[i].FunctionalAreaId) {
                            // We have found the financial area, so we have the title! Yay!
                            var faTitle = BWMData[0][x][4][y][1];
                            html += '<td>';
                            html += faTitle;
                            //html += '<input id="txtFunctionalAreaId" type="text" style="" value="' + data[i].FunctionalAreaId + '" />';
                            html += '</td>';
                        }
                    }
                }
            }
            //html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
            // Strikethrough the budget amount for a rejected AR.
            if (budgetRequests[i].ARStatus == 'Rejected') {
                html += '    <td style="text-align:right;"><strike>' + formatCurrency(budgetRequests[i].BudgetAmount) + '</strike></td>';
            } else {
                html += '    <td style="text-align:right;">' + formatCurrency(budgetRequests[i].BudgetAmount) + '</td>';
            }
            html += '    <td>' + budgetRequests[i].BudgetWorkflowStatus + '</td>';
            html += '    <td>' + budgetRequests[i].ARStatus + '</td>';
            //html += '    <td>';
            ////tempCloseOutXml = budgetRequests[i].bwDocumentXml;
            //html += '       <a href="javascript:displayForm_DisplayCloseOut();" style="white-space:nowrap;">Close Out</a>';
            //html += '    </td>';
            html += '    <td>' + budgetRequests[i].CurrentOwner + '</td>';
            html += '<td><img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteBudgetRequestDialog(\'' + budgetRequests[i].bwBudgetRequestId + '\', \'' + budgetRequests[i].Title + '\');" title="Delete" style="cursor:pointer;" /></td>';
            html += '  </tr>';
        }
    }
    html += '<tr><td colspan="12"></td></tr>'; // DONE
    html += '</table>';
    $('#spanBwBudgetRequests').empty();
    $('#spanBwBudgetRequests').append(html);

    // This puts the value of the filter back in the redrawn table, and puts the cursor at the end of the text when the focus is called.
    document.getElementById('txtArchivePageDescriptionFilter').value = descriptionfilter;
    document.getElementById('txtArchivePageBudgetAmountFilter').value = budgetamountfilter;
    if (filterObjectName == 'txtArchivePageDescriptionFilter') {
        $('#' + filterObjectName).focus(function () {
            var that = this;
            setTimeout(function () { that.selectionStart = that.selectionEnd = 10000; }, 0);
        });
        $('#' + filterObjectName).focus();
    }
    if (filterObjectName == 'txtArchivePageBudgetAmountFilter') {
        $('#' + filterObjectName).focus(function () {
            var that = this;
            setTimeout(function () { that.selectionStart = that.selectionEnd = 10000; }, 0);
        });
        $('#' + filterObjectName).focus();
    }


    $('#txtArchivePageDescriptionFilter').change(function () {
        renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
    });
    $('#txtArchivePageDescriptionFilter').keyup(function () {
        renderArchivePageApplyingDescriptionFilter('txtArchivePageDescriptionFilter');
    });

    $('#txtArchivePageBudgetAmountFilter').change(function () {
        renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
    });
    $('#txtArchivePageBudgetAmountFilter').keyup(function () {
        renderArchivePageApplyingDescriptionFilter('txtArchivePageBudgetAmountFilter');
    });

    $('#ddlArchivePageFinancialAreaDropDownFilter').change(function () {
        //displayAlertDialog('select changed');
        renderArchivePageApplyingDescriptionFilter('ddlArchivePageFinancialAreaDropDownFilter');
    });

    $('#selectArchivePageFilterDropDown').change(function () {
        renderArchivePageApplyingDescriptionFilter('selectArchivePageFilterDropDown');
    });

}

function cmdListPendingBudgetRequests() {
    // Use ajax PUT.
    $('#spanBwPendingBudgetRequests').empty();
    var data = {
        "bwTenantId": tenantId,
        "bwWorkflowAppId": workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwbudgetrequestspending",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            var html = '';
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>project title</td>';
            html += '    <td>requested capital</td>';
            html += '    <td>budget amount</td>';
            html += '    <td>ar status</td>';
            html += '    <td>budget workflow status</td>';
            html += '    <td>budget request id</td>';
            html += '    <td>workflow app id</td>';
            html += '    <td>functional area id</td>';
            html += '    <td>created by</td>';
            html += '    <td>created by id</td>';
            html += '    <td>created</td>';
            html += '    <td>modified by id</td>';
            html += '    <td>modified</td>';
            html += '    <td>current owner</td>';
            html += '    <td>approval level workflow token</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                //html += '    <td><a href="' + appweburl2 + '/ar.html?BudgetRequestTitle=' + data[i].bwBudgetRequestId + '" target="_blank">' + data[i].ProjectTitle + '</a></td>';
                html += '      <td><a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + data[i].bwBudgetRequestId + '\', \'' + participantId + '\', \'' + data[i].Title + '\');">' + data[i].ProjectTitle + '</a></td>';
                html += '    <td>' + data[i].RequestedCapital + '</td>';
                html += '    <td>' + data[i].BudgetAmount + '</td>';
                html += '    <td>' + data[i].ARStatus + '</td>';
                html += '    <td>' + data[i].BudgetWorkflowStatus + '</td>';
                html += '    <td>' + data[i].bwBudgetRequestId + '</td>';
                html += '    <td>' + data[i].bwWorkflowAppId + '</td>';
                html += '    <td>' + data[i].FunctionalAreaId + '</td>';
                html += '    <td>' + data[i].CreatedBy + '</td>';
                html += '    <td>' + data[i].CreatedById + '</td>';
                html += '    <td>' + data[i].Created + '</td>';
                html += '    <td>' + data[i].ModifiedById + '</td>';
                html += '    <td>' + data[i].Modified + '</td>';
                html += '    <td>' + data[i].CurrentOwner + '</td>';
                html += '    <td>' + data[i].bwApprovalLevelWorkflowToken + '</td>';
                html += '  </tr>';
            }
            html += '<tr><td colspan="13">DONE</td></tr>';
            html += '</table>';
            $('#spanBwPendingBudgetRequests').append(html);

            //var html = '';
            //for (var i = 0; i < data.length; i++) {
            //    // ARStatus: String,
            //    //BudgetWorkflowStatus: String,
            //    html += 'ProjectTitle:' + data[i].ProjectTitle + ', ARStatus: ' + data[i].ARStatus + ' BudgetWorkflowStatus:' + data[i].BudgetWorkflowStatus + ' bwBudgetRequestId:' + data[i].bwBudgetRequestId + '<br/>';
            //    //html += '';
            //}
            //html += 'DONE';
            //$('#BwBudgetRequests').append(html);
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdListPendingBudgetRequests():' + errorCode + ', ' + errorMessage);
        }
    });
}

function addInLicenseCheck() {
    // APP License check!! 
    try {
        var productId = 'ea5f27c4-6885-43fb-8935-2cdaf759d549'; // 'Budget Workflow Manager' GUID
        var context = SP.ClientContext.get_current();
        var appLicenses = SP.Utilities.Utility.getAppLicenseInformation(context, productId);
        context.executeQueryAsync(function (sender, args) {
            if (appLicenses.get_count() > 0) {
                //just get the first license; you could also traverse all licenses if required but usually the top one is enough because it the most 'relevant' 
                var licenseXML = appLicenses.get_item(0).get_rawXMLLicenseToken();
                var licenseEncoded = encodeURIComponent(licenseXML);

                var oStoreUrl = "https://verificationservice.officeapps.live.com/ova/verificationagent.svc/rest/verify?token=";
                var request = new SP.WebRequestInfo();
                request.set_url(oStoreUrl + licenseEncoded);
                request.set_method("GET");
                var response = SP.WebProxy.invoke(context, request);
                context.executeQueryAsync(function (data) {
                    var verifiedLicense = response.get_body();
                    if (verifiedLicense == null) {
                        //No license found or the license was malformed
                        //The UI string retrieved above will already contain the appropiate info
                        //In real app code you could take additional steps (e.g. provide reduced functionality)
                        displayFreeTrialExpiredDialog();
                    } else {
                        //There is a well-formed license; must look at properties to determine validity
                        //if (verifiedLicense.IsValid) {
                        if ($(verifiedLicense).find('IsValid').text() == 'true') {
                            //Valid production license
                            //displayAlertDialog('Valid PRODUCTION license.');
                        }
                            //else if ($(verifiedLicense).find('IsTest').text() == 'true') {
                            //    //For test licenses, the IsTest property returns true and the IsValid property returns false.
                            //    //Test mode with valid test token
                            //    displayAlertDialog('Valid TEST license.'); 
                            //}
                        else {
                            //Production mode with invalid license
                            //Warn the user about missing/invalid license
                            displayFreeTrialExpiredDialog();
                        }
                    }
                },
                function () {
                    //displayAlertDialog('Error validating license.');
                    displayFreeTrialExpiredDialog();
                });
            }
            else {
                //displayAlertDialog("No license present");
                displayFreeTrialExpiredDialog();
            }
        },
        function () {
            //displayAlertDialog('Error retrieving license.');
            displayFreeTrialExpiredDialog();
        });
    } catch (e) {
        displayAlertDialog('Error in Start.js.addInLicenseCheck()', e.message);
    }
}

function handleExceptionWithAlert(source, message) {
    //// The lastErrorSource is kept track of because we don't want the alert box showing up many times!! Once is enough!
    //if (lastErrorSource != source) {
    //    lastErrorSource = source;
    //    //if (message.indexOf('-1002') > -1) {
    //    //    // This means we need to refresh the page and alert the user their session has timed out.
    //    //    displayAlertDialog('Error -1002, "Not found". Click Ok to refresh the page.');
    //    //} else {
    //        displayAlertDialog(source + ': ' + message);
    //        WriteToErrorLog(source, message);
    //    //}
    //} else {
    //    hostweburl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    //    appweburl = decodeURIComponent(getQueryStringParameter("SPAppWebUrl"));
    //    var url = 'Start.aspx?SPHostUrl=' + hostweburl + '&SPAppWebUrl=' + appweburl;
    //    location.href = url;
    //}
    displayAlertDialog(source + ': ' + message);
}

function refreshThePage() {
    try {
        populateStartPageItem('divSummaryReport', 'Reports', '');
    } catch (e) {
        displayAlertDialog('Error in Start.js.refreshThePage()', e.message);
    }
}


function cmdYearSelectedChanged() {
    try {
        displayAlertDialog('In cmdYearSelectedChanged(). Code needed here.');
        //if (!$('#financialOrParticipantSummary').is(':checked')) {
        //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
        //        renderFinancialSummary(false);
        //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
        //        renderFinancialSummary(true);
        //    }
        //} else {
        //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
        //        renderParticipantSummary(false);
        //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
        //        renderParticipantSummary(true);
        //    }
        //}
    } catch (e) {
        displayAlertDialog('Error in Start.js.cmdYearSelectedChanged()', e.message);
    }
}

function displayFreeTrialExpiredDialog() {
    try {
        var dialogWidth = 450;
        var dialogHeight = 250;
        try {
            //displayAlertDialog('navigator.userAgent:' + navigator.userAgent);
            if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
                dialogWidth = 950;
                dialogHeight = 675;
            } else if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
                dialogWidth = 950;
                dialogHeight = 850;
            } else if (navigator.userAgent.toLowerCase().indexOf("nokia") > -1) {
                dialogWidth = 950;
                dialogHeight = 950;
            } else if (navigator.userAgent.toLowerCase().indexOf("mobile safari") > -1) {
                dialogWidth = 950;
                dialogHeight = 950;
            } else if (navigator.userAgent.toLowerCase().indexOf("playbook") > -1) {
                dialogWidth = 950;
                dialogHeight = 700;
            } else if (navigator.userAgent.toLowerCase().indexOf("silk") > -1) {
                dialogWidth = 950;
                dialogHeight = 600;
            } else {
                // IE on windows laptop. Google Nexus 4. Safari on MacBook Air.
                dialogWidth = 450;
                dialogHeight = 300;
            }
        } catch (e) {
            // Not sure if we need to catch this error or not.
        }

        // This is our licensing dialog.
        $("#trialVersionHasExpired").dialog({
            modal: true,
            resizable: false,
            width: dialogWidth,
            height: dialogHeight,
            hide: false//, // This means when hiding just disappear with no effects.
            //position: { my: "center bottom", at: "center", of: window }
            //open: function (event, ui) {
            //    $(this).parent().css('position', 'fixed');
            //}
        });

        $('#ui-id-1').parent().hide();
        $('#ui-id-1').parent().parent().css('background', 'white'); // The background of the whole dialog.

        // Now we customize the display depending on the device.
        var html = '';
        try {
            //displayAlertDialog('navigator.userAgent:' + navigator.userAgent);
            if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else if (navigator.userAgent.toLowerCase().indexOf("nokia") > -1) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else if (navigator.userAgent.toLowerCase().indexOf("mobile safari") > -1) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else if (navigator.userAgent.toLowerCase().indexOf("playbook") > -1) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else if (navigator.userAgent.toLowerCase().indexOf("silk") > -1) {
                html += '<table style="font-size:36px;">';
                html += '   <tr>';
                html += '       <td>';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
            } else {
                // IE on windows laptop. Google Nexus 4. Safari on MacBook Air.
                //html += 'IE on windows laptop. Google Nexus 4. Safari on MacBook Air.';
                html += '<table>';
                html += '   <tr>';
                html += '       <td style="font-size:large;">';
                html += '           <br /><a href="http://budgetworkflow.com/purchase-budget-workflow-manager" target="_blank">This free trial has expired. <br /><br />Click here to find out how to purchase!</a>';
                html += '           <br /><br />OR<br /><br />';
                html += '           <a href="http://budgetworkflow.com/budget-workflow-manager-suggestions" target="_blank">Click here to send us suggestions for improvements. If they make it into the next version, we\'ll give you a copy for FREE!</a>';
                html += '       </td>';
                html += '   </tr>';
                html += '</table>';
                //html += 'IE on windows laptop. Google Nexus 4. Safari on MacBook Air.';
            }
        } catch (e) {
            // Not sure if we need to catch this error or not.
        }

        $('#trialVersionHasExpired').append(html);

        var addEvent = function (object, type, callback) {
            if (object == null || typeof (object) == 'undefined') return;
            if (object.addEventListener) {
                object.addEventListener(type, callback, false);
            } else if (object.attachEvent) {
                object.attachEvent("on" + type, callback);
            } else {
                object["on" + type] = callback;
            }
        };

        addEvent(window, "resize", function (event) {
            var viewport = {
                width: $(window).width(),
                height: $(window).height()
            };

            var viewportWidth = viewport.width;
            var viewportHeight = viewport.height;

            var x = (viewportWidth / 2) - (dialogWidth / 2);
            var y = (viewportHeight / 2) - (dialogHeight / 2);

            $('#trialVersionHasExpired').dialog().position().left = x;
        });
    } catch (e) {
        displayAlertDialog('Error in Start.js.displayFreeTrialExpiredDialog()', e.message);
    }
}

function setCustomSizesDependingOnTheDevice() {
    try {
        //displayAlertDialog('navigator.userAgent:' + navigator.userAgent);
        if (navigator.userAgent.match(/iPhone/i)) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 4
            //}, 400);
            //$('#divSummaryReportMasterDiv').animate({ 'zoom': 4 }, 400); 
            //$('#divMenuMasterDiv').animate({ 'zoom': 4 }, 400); 
            //$('#tblSummaryReportPreferences').animate({ 'zoom': 4 }, 400); 
        } else if (navigator.userAgent.match(/iPad/i)) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 2
            //}, 400);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 1
            //}, 400);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 1
            //}, 400);
        } else if (navigator.userAgent.toLowerCase().indexOf("android") > -1) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divSummaryReportMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 5
            //}, 800);
        } else if (navigator.userAgent.toLowerCase().indexOf("nokia") > -1) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divSummaryReportMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 5
            //}, 800);
        } else if (navigator.userAgent.toLowerCase().indexOf("mobile safari") > -1) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divSummaryReportMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 5
            //}, 800);
        } else if (navigator.userAgent.toLowerCase().indexOf("playbook") > -1) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divSummaryReportMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 5
            //}, 800);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 5
            //}, 800);
        } else if (navigator.userAgent.toLowerCase().indexOf("silk") > -1) {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 3
            //}, 800);
            //$('#divSummaryReportMasterDiv').animate({
            //    'zoom': 3
            //}, 800);
            //$('#divMenuMasterDiv').animate({
            //    'zoom': 3
            //}, 800);
            //$('#tblSummaryReportPreferences').animate({
            //    'zoom': 3
            //}, 800);
            //} else if(typeof window.orientation !== 'undefined'){
            //    $('#bwQuickLaunchMenu').animate({ 'zoom': 6 }, 800);
            //displayAlertDialog('some other mobile browser');
        } else {
            //$('#bwQuickLaunchMenu').animate({
            //    'zoom': 2
            //}, 400); // IE on windows laptop. Google Nexus 4. Safari on MacBook Air. 
        }
    } catch (e) {
        // Not sure if we need to catch this error or not.
        displayAlertDialog('Error in Start.js.setCustomSizesDependingOnTheDevice()', e.message);
    }
}

function loadWorkflowAppConfigurationDetails9() {
    // Load BWMData so that we don't have to keep reaching out for it.
    //displayAlertDialog('loadWorkflowAppConfigurationDetails9(). Reloading BWMData!');
    try {
        //var operationUri = webserviceurl + "/bwworkflowapps/" + tenantId;
        var operationUri = webserviceurl + "/bwworkflowappsthattheparticipantbelongsto/" + participantId;
        $.ajax({
            url: operationUri,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data.d.results.length > 0) {
                    GetWorkflowAppConfigurationData = [];
                    GetWorkflowAppConfigurationData.length = data.d.results.length; // Initialize the callback array.
                    BWMData[0] = new Array(data.d.results.length); // Initialize the array which contains the details for each of the workflows.
                    BWMData[1] = new Array(2); // Initialize the array which contains the Functional Area Years. These are used to populate the year drop down.
                    BWMData[1][0] = []; // Budget Requests.
                    BWMData[1][1] = []; // Quotes.
                    var workflowDataRetrievalCount = 0;
                    for (var i = 0; i < data.d.results.length; i++) {
                        var wfDetails = new Array(5); // TODD: ORIGINALLY THIS WAS 5 UNTIL WE REMOVED THE PARTICIPANTS SECTION.
                        wfDetails[0] = data.d.results[i].bwWorkflowAppId;
                        wfDetails[1] = null; // removed during conversion 9-25-16 data.d.results[i].bwWorkflowAppWebUrl;
                        wfDetails[2] = data.d.results[i].bwWorkflowAppTitle;
                        wfDetails[3] = ''; // This is where we will store Total Yearly Budget.
                        wfDetails[4] = new Array(); // This is where we will store Functional Area data.
                        BWMData[0][i] = wfDetails;
                        GetWorkflowAppConfigurationData[i] = $.Deferred();
                        GetWorkflowAppConfigurationData[i]
                            .done(function () {
                                workflowDataRetrievalCount += 1; // Increment the count!
                                // Now check if all the data has come back yet. If so, create the pie chart.
                                if (workflowDataRetrievalCount == data.d.results.length) {
                                    // Now we get rid of dupicates and order the years in the list.
                                    var functionalAreaYearsForBudgetRequests2;
                                    functionalAreaYearsForBudgetRequests2 = eliminateDuplicates(BWMData[1][0]);
                                    functionalAreaYearsForBudgetRequests2.sort(function (a, b) {
                                        return parseFloat(a.price) - parseFloat(b.price)
                                    });
                                    BWMData[1][0] = functionalAreaYearsForBudgetRequests2;
                                    //
                                    var functionalAreaYearsForQuotes2 = eliminateDuplicates(BWMData[1][1]);
                                    functionalAreaYearsForQuotes2.sort(function (a, b) {
                                        return parseFloat(a.price) - parseFloat(b.price)
                                    });
                                    BWMData[1][1] = functionalAreaYearsForQuotes2;

                                    GetWorkflowAppConfigurationData9.resolve(); // Callback.
                                    // Now that we have the data, render the stuff!!!
                                    //populateTheYearDropdown(false);
                                    //if (!$('#financialOrParticipantSummary').is(':checked')) {
                                    //    // "Financial Summary" has been selected.
                                    //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                                    //        renderFinancialSummary(false);
                                    //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                                    //        renderFinancialSummary(true);
                                    //    }
                                    //} else if ($('#financialOrParticipantSummary').is(':checked')) {
                                    //    // "Participant Summary" has been selected.
                                    //    if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                                    //        renderParticipantSummary(false);
                                    //    } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                                    //        renderParticipantSummary(true);
                                    //    }
                                    //}
                                }
                            })
                            .fail(function () {
                                displayAlertDialog('Error in ios8.js.loadWorkflowAppConfigurationDetails9(): ' + 'GetWorkflowAppConfigurationData[' + i.toString() + '].fail()');
                            });
                        loadSingleWorkflowConfigurationDetails9(data.d.results[i].AppWebURL, i, data.d.results[i].Id, data.d.results[i].Title);
                    }
                } else {
                    //displayAlertDialog('There are no connected workflows.');
                    thereAreNoConnectedWorkflowsSoDisplayTheConfigurationScreenAppropriately();
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.loadWorkflowAppConfigurationDetails9(): ' + '1:' + JSON.stringify(data) + '::' + errorCode + ', ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.loadWorkflowAppConfigurationDetails9(): ' + '2:' + e.message);
    }
}



function loadSingleWorkflowConfigurationDetails9(appWebUrl, deferredIndex, appWebListItemId, appWebListItemTitle) {
    try {
        var endpointUrl = webserviceurl + "/getfunctionalareasbyappid/" + workflowAppId + "/" + "RETURNALL";
        $.ajax({
            url: endpointUrl,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (faData) {
                for (var i = 0; i < faData.d.results.length; i++) {
                    var yearItem = [Number(faData.d.results[i].bwFunctionalAreaYear)];
                    if (faData.d.results[i].bwFunctionalAreaQuote == true) {
                        BWMData[1][1].push(yearItem);
                    } else {
                        BWMData[1][0].push(yearItem);
                    }
                    // Load the Functional Areas details.
                    BWMData[0][deferredIndex][4].length = faData.d.results.length; // Initialize the Functional Area data.
                    for (var i = 0; i < faData.d.results.length; i++) {
                        var _overdueTasks = new Array(); // We populate this below.
                        var approver1item = [faData.d.results[i].Approver1Id, faData.d.results[i].Approver1FriendlyName, faData.d.results[i].Approver1Email];
                        var approver2item = [faData.d.results[i].Approver2Id, faData.d.results[i].Approver2FriendlyName, faData.d.results[i].Approver2Email];
                        var approver3item = [faData.d.results[i].Approver3Id, faData.d.results[i].Approver3FriendlyName, faData.d.results[i].Approver3Email, faData.d.results[i].Approval3BudgetThreshold];
                        var approver4item = [faData.d.results[i].Approver4Id, faData.d.results[i].Approver4FriendlyName, faData.d.results[i].Approver4Email, faData.d.results[i].Approval4BudgetThreshold];
                        var approver5item = [faData.d.results[i].Approver5Id, faData.d.results[i].Approver5FriendlyName, faData.d.results[i].Approver5Email, faData.d.results[i].Approval5BudgetThreshold];
                        var approver6item = [faData.d.results[i].Approver6Id, faData.d.results[i].Approver6FriendlyName, faData.d.results[i].Approver6Email, faData.d.results[i].Approval6BudgetThreshold];
                        var approver7item = [faData.d.results[i].Approver7Id, faData.d.results[i].Approver7FriendlyName, faData.d.results[i].Approver7Email, faData.d.results[i].Approval7BudgetThreshold];
                        var approver8item = [faData.d.results[i].Approver8Id, faData.d.results[i].Approver8FriendlyName, faData.d.results[i].Approver8Email, faData.d.results[i].Approval8BudgetThreshold];
                        var approver9item = [faData.d.results[i].Approver9Id, faData.d.results[i].Approver9FriendlyName, faData.d.results[i].Approver9Email, faData.d.results[i].Approval9BudgetThreshold];
                        var approver10item = [faData.d.results[i].Approver10Id, faData.d.results[i].Approver10FriendlyName, faData.d.results[i].Approver10Email, faData.d.results[i].Approval10BudgetThreshold];
                        var _additionalApprovers = [approver3item, approver4item, approver5item, approver6item, approver7item, approver8item, approver9item, approver10item];
                        var faItem = [faData.d.results[i].bwFunctionalAreaId, faData.d.results[i].bwFunctionalAreaTitle, faData.d.results[i].bwFunctionalAreaQuote, Number(faData.d.results[i].bwFunctionalAreaYear), Number(faData.d.results[i].bwFunctionalAreaYearlyBudget), approver1item, approver2item, _additionalApprovers, 0, 0, 0, _overdueTasks, null, faData.d.results[i].IsHidden];
                        BWMData[0][deferredIndex][4][i] = faItem;
                    }
                }
                GetWorkflowAppConfigurationData[deferredIndex].resolve(); // Callback.
            },
            error: function (data, errorCode, errorMessage) {
                if (errorCode == '-1002') {
                    // The connected Budget Workflow cannot be found. This most likely means it has been removed from the site so we will have to remove it from the appwebs list.
                    //var url = appweburl + "/_api/web/lists/getbytitle('BudgetWorkflowAppWebs')/items(" + appWebListItemId + ")";
                    //var executor = new SP.RequestExecutor(appweburl);
                    //executor.executeAsync({
                    //    url: url,
                    //    method: "POST",
                    //    headers: {
                    //        "Accept": "application/json; odata=verbose",
                    //        "X-RequestDigest": $("#__REQUESTDIGEST").val(),
                    //        "X-HTTP-Method": "DELETE",
                    //        "IF-MATCH": "*"
                    //    },
                    //    success: function (data) {
                    //        GetWorkflowAppConfigurationData[deferredIndex].resolve(); // Callback.
                    //        displayAlertDialog('The ' + appWebListItemTitle + ' workflow could not be contacted. It must have been removed.');
                    //    },
                    //    error: function (data, errorCode, errorMessage) {
                    //        GetWorkflowAppConfigurationData[deferredIndex].resolve(); // Callback.
                    displayAlertDialog('Error in ios8.js.loadSingleWorkflowConfigurationDetails9()', '1:' + errorCode + ', ' + errorMessage);
                    //    }
                    //});
                } else {
                    GetWorkflowAppConfigurationData[deferredIndex].resolve(); // Callback.
                    displayAlertDialog('Error in ios8.js.loadSingleWorkflowConfigurationDetails9()', '2:' + errorCode + ', ' + errorMessage);
                }
            }
        });
    } catch (e) {
        GetWorkflowAppConfigurationData[deferredIndex].resolve(); // Callback.
        displayAlertDialog('Error in ios8.js.loadSingleWorkflowConfigurationDetails9()', '3:' + e.message);
    }
}



function thereAreNoConnectedWorkflowsSoDisplayTheConfigurationScreenAppropriately() {
    try {
        populateStartPageItem('divConfiguration', '', '');
    } catch (e) {
        displayAlertDialog('Error in Start.js.thereAreNoConnectedWorkflowsSoDisplayTheConfigurationScreenAppropriately()', e.message);
    }
}


function collapseOrExpandBwFunctionalAreaDiv(functionalAreaDivId, deferredIndex) {
    // This collapses or expands this div section.
    try {
        var div = document.getElementById(functionalAreaDivId);
        var visible = div.style.visibility;
        if (visible == '') {
            div.style.visibility = 'hidden';
            $('#' + functionalAreaDivId).hide();
        } else if (visible == 'visible') {
            div.style.visibility = 'hidden';
            $('#' + functionalAreaDivId).hide();
        } else if (visible == 'hidden') {
            // Since we are expanding, we're going to hide the Top-_1 and Top_2 rows so it appears as it should on the first viewing.
            var topRow1Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_1';
            var topRow2Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_2';
            var topRow1 = document.getElementById(topRow1Id);
            var topRow2 = document.getElementById(topRow2Id);
            try {
                topRow1.style.visibility = 'hidden';
                topRow1.style.display = 'none';
                //$('#' + topRow1Id).hide();
                topRow2.style.visibility = 'hidden';
                topRow2.style.display = 'none';
            } catch (e) {
                //
            }
            // Now show the whole functional area section.
            div.style.visibility = 'visible';
            $('#' + functionalAreaDivId).show();
            // It is currently visible, so we have to display the original row again. We're lazy, just doing them all.
            try {
                for (var i = 0; i < 1000; i++) {
                    var currentRowId = 'functionalAreaRow_' + deferredIndex.toString() + '_' + i.toString();
                    var currentRow = document.getElementById(currentRowId);
                    currentRow.style.visibility = 'visible';
                    $('#' + currentRowId).show();
                }
            } catch (e) {
                // This means we are done so continue on!
            }
        } else {
            div.style.visibility = 'hidden';
            $('#' + functionalAreaDivId).hide();
        }
    } catch (e) {
        //displayAlertDialog('Error in Start.js.collapseOrExpandBwFunctionalAreaDiv()', e.message); // Hiding this for the moment because the burn rate report link seems to be causing some iterference with this! If yo uenable this again, then go and click on the burn rate report link and you will see the issue.
    }
}

function expandFunctionalAreaAndRenderAlerts(functionalArea, deferredIndex, functionalAreaRowId) {
    // This is with the new approach, using the top TR tag.
    try {
        var appWebUrl = BWMData[0][deferredIndex][1];

        //displayAlertDialog('expandFunctionalAreaAndRenderAlerts');

        var clickedRowHtml = $('#' + functionalAreaRowId)[0].innerHTML; // This is the row that we want to move to the top and expand: functionalAreaRowId
        var topRow1Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_1';
        var topRow2Id = 'functionalAreaRow_' + deferredIndex.toString() + '_Top_2';
        var div1 = document.getElementById(topRow1Id);
        var div2 = document.getElementById(topRow2Id);
        var div = document.getElementById(functionalAreaRowId);
        // First we have to show the previous row that was hidden, if there was one.
        if (div1.style.visibility == 'visible') {
            // It is currently visible, so we have to display the original row again. We're lazy, just doing them all.
            try {
                for (var i = 0; i < 1000; i++) {
                    var currentRowId = 'functionalAreaRow_' + deferredIndex.toString() + '_' + i.toString();
                    var currentRow = document.getElementById(currentRowId);
                    currentRow.style.visibility = 'visible';
                    $('#' + currentRowId).show();
                }
            } catch (e) {
                // This means we are done so continue on!
            }
        }
        // Now we put this in the top row, and show it.
        $('#' + topRow1Id)[0].innerHTML = clickedRowHtml;
        div1.style.visibility = 'visible';
        $('#' + topRow1Id).show();
        // We need to reset the background-color of the cell due to the hover over having left it colored.
        $('#' + topRow1Id).find('.bwFADrillDownLinkCell').css({
            'background-color': 'white', 'color': '#444', 'cursor': 'default'
        });

        // Now we hide the original row.
        div.style.visibility = 'hidden';
        $('#' + functionalAreaRowId).hide();

        // Now we show the details underneath.
        // This function brings the functionalArea to the top of the display,
        // with drill down information.
        var functionalAreaId;
        // We have the correct app web, now we have to find the Functional Area.
        for (var i = 0; i < BWMData[0][deferredIndex][4].length; i++) {
            if (BWMData[0][deferredIndex][4][i][1] == functionalArea) {
                // We have located the correct Functional Area! Now we can get the Functional Area Id.
                functionalAreaId = BWMData[0][deferredIndex][4][i][0];
            }
        }
        //var endpointUrl = appweburl + "/_api/SP.AppContextSite(@target)/web/lists/getbytitle('BudgetRequests')/GetItems?@target='" + appWebUrl + "'";
        //var endpointUrl = appweburl + "/_api/web/lists/getbytitle('BudgetRequests')/GetItems"; //?@target='" + appWebUrl + "'";
        var endpointUrl = webserviceurl + "/bwbudgetrequests/getbyfunctionalareaid/" + functionalAreaId;

        //var executor = new SP.RequestExecutor(appweburl);
        //executor.executeAsync({
        //    url: endpointUrl,
        //    method: "POST",
        //    body: JSON.stringify({ "query": { "__metadata": { "type": "SP.CamlQuery" }, "ViewXml": "<View><Query><Where><Eq><FieldRef Name='FunctionalAreaId'/><Value Type='Text'>" + functionalAreaId + "</Value></Eq></Where></Query><ViewFields><FieldRef Name='FunctionalAreaId'/><FieldRef Name='Quote'/><FieldRef Name='Title'/><FieldRef Name='ARStatus'/><FieldRef Name='BudgetWorkflowStatus'/><FieldRef Name='BudgetRequestLink1'/><FieldRef Name='ProjectTitle'/><FieldRef Name='BudgetAmount'/><FieldRef Name='CurrentOwner'/><FieldRef Name='Created'/></ViewFields></View>" } }),
        //    headers: {
        //        "Accept": "application/json; odata=verbose",
        //        "Content-Type": "application/json; odata=verbose",
        //        "X-RequestDigest": $("#__REQUESTDIGEST").val()
        //    },
        //    success: function (data) {
        $.ajax({
            url: endpointUrl,
            method: "GET",
            //body: body,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (brItems) {

                //displayAlertDialog(JSON.stringify(brItems));

                //var brItems = JSON.parse(data.body);
                var approvedBrItems = [];
                var submittedBrItems = [];
                for (var i = 0; i < brItems.d.results.length; i++) {
                    var brItem = [];
                    brItem.push(appWebUrl); // we don't need this but we can remove it later.
                    brItem.push(brItems.d.results[i].ProjectTitle);
                    brItem.push(brItems.d.results[i].BudgetAmount);
                    brItem.push(brItems.d.results[i].bwBudgetRequestId);
                    brItem.push(brItems.d.results[i].CurrentOwner);
                    brItem.push(brItems.d.results[i].Title);
                    brItem.push(brItems.d.results[i].Created);
                    if ((brItems.d.results[i].ARStatus == 'Submitted') || ((brItems.d.results[i].ARStatus == 'Approved') && ((brItems.d.results[i].BudgetWorkflowStatus == 'Procurement: Issue PO#' || brItems.d.results[i].BudgetWorkflowStatus == 'Issue PO#: Additional Info Needed')))) {
                        submittedBrItems.push(brItem);
                    }
                    //brItem.push(brItems.d.results[i].Created);
                }
                var topHtml = '';
                for (var i = 0; i < BWMData[0][deferredIndex][4].length; i++) {
                    if (BWMData[0][deferredIndex][4][i][1] == functionalArea) {
                        // The Functional Area in a right-rounded blue bar.
                        topHtml += '<tr>';
                        topHtml += '    <td colspan="7">';
                        topHtml += '        <table>';
                        // Render the "Pending" section.
                        for (var pi = 0; pi < submittedBrItems.length; pi++) {
                            topHtml += '        <tr>';
                            topHtml += '            <td style="width:90px;"></td>';
                            topHtml += '            <td>&nbsp;&nbsp;</td>';

                            //displayAlertDialog('xxx2');

                            //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5">Submitted xxxx ' + formatDateFromSharePoint(submittedBrItems[pi][6]) + ' days ago: <a style="cursor:pointer;" onclick="displayArInDialog(\'' + submittedBrItems[pi][0] + '\', \'' + submittedBrItems[pi][3] + '\', \'' + submittedBrItems[pi][5] + '\', \'' + submittedBrItems[pi][1] + '\');" target="_blank" title="Click to view the request...">' + submittedBrItems[pi][1] + ' (<em>' + formatCurrency(submittedBrItems[pi][2]) + '</em>) - <em>ID:' + submittedBrItems[pi][4] + '  Todd xxxx</em></a></td>'; //</a>&nbsp;&nbsp;&nbsp;<em>xxxx days overdue (Todd xxxx1)</em></td>';
                            //topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" colspan="5"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + submittedBrItems[pi][0] + '\', \'' + submittedBrItems[pi][3] + '\', \'' + submittedBrItems[pi][5] + '\', \'' + submittedBrItems[pi][1] + '\');" target="_blank" title="Click to view the request...">' + submittedBrItems[pi][1] + ' (<em>' + formatCurrency(submittedBrItems[pi][2]) + ' - Submitted ' + formatDateFromSharePoint(submittedBrItems[pi][6]) + '</em>)</a></td>';
                            topHtml += '            <td style="background-color:#d8d8d8;padding:10px 10px 10px 10px;" class="tdHomePageSubNotificationIos8" colspan="5"><a style="cursor:pointer;" onclick="displayArInDialog(\'' + appWebUrl + '\', \'' + submittedBrItems[pi][3] + '\', \'' + submittedBrItems[pi][5] + '\', \'' + encodeHtmlAttribute(submittedBrItems[pi][1]) + '\', \'' + submittedBrItems[pi][5] + '\');" target="_blank" title="Click to view the request...">' + submittedBrItems[pi][1] + ' (<em>' + formatCurrency(submittedBrItems[pi][2]) + ' - Submitted ' + formatDateFromBW(submittedBrItems[pi][6]) + '</em>)</a></td>';

                            topHtml += '        </tr>';
                        }
                        topHtml += '        </td>';
                        topHtml += '    </tr>';
                        topHtml += '</table>';

                        // Closing tags.
                        topHtml += '   </td>';
                        topHtml += '</tr>';
                    } else {

                    }
                }


                //displayAlertDialog('expandFunctionalAreaAndRenderAlerts(): topRow2Id: ' + topRow2Id);

                // This is where it is displayed!
                $('#' + topRow2Id)[0].innerHTML = topHtml;
                div2.style.visibility = 'visible';
                $('#' + topRow2Id).show();
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.expandFunctionalAreaAndRenderAlerts()', '1:' + errorCode + ', ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.expandFunctionalAreaAndRenderAlerts()', '2:' + e.message);
    }
}



function getUserDetails(participantId, appWebUrl, deferredIndex) {
    // This is deferred!
    try {
        var endpointUrl = webserviceurl + "/bwparticipants/getuserdetailsbyparticipantid/" + participantId;
        $.ajax({
            url: endpointUrl,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (userItems) {
                var userIdAndProperties = new Array(3);
                if (userItems.d.results.length > 0) {
                    userIdAndProperties[0] = userItems.d.results[0].bwParticipantId; // Web user id, eg: 9.
                    userIdAndProperties[1] = userItems.d.results[0].bwParticipantFriendlyName; // User's friendly name.
                    userIdAndProperties[2] = userItems.d.results[0].bwParticipantEmail; // User's email address.
                }
                GetUserDetails[deferredIndex].resolve(userIdAndProperties);
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.getUserDetails():1: ' + errorCode + ', ' + errorMessage + ' Most likely service unavailable issue.');
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.getUserDetails():2: ' + e.message + ' ' + e.stack);
    }
}

var arDialogDisplayRetryAttempt = 0;
var arDialogDisplayRetryAttemptTimerObject;

function arDialogFailedSoCallItAgain(appWebUrl, budgetRequestId, arName, brTitle, title) {

    clearInterval(arDialogDisplayRetryAttemptTimerObject);
    arDialogDisplayRetryAttemptTimerObject = null;

    if (document.getElementById('spanArDialogContents').innerHTML == '') {
        $("#ArDialog").dialog('close');

        arDialogDisplayRetryAttempt += 1;
        WriteToErrorLog('arDialogFailedSoCallItAgain()', 'spanArDialogContents is empty, so calling displayArInDialog() again. arDialogDisplayRetryAttempt: ' + arDialogDisplayRetryAttempt);
        displayArInDialog(appWebUrl, budgetRequestId, arName, brTitle, title);
    }

}

function displayArInDialog(appWebUrl, budgetRequestId, arName, brTitle, title) {
    // This is the place where we display the audit trail for a request ("Details").

    // Sometimes this doesn't come back and populate "spanArDialogContents". 
    // So we create a timer here, which checks to see if it has any contents. If not, it tries again.
    //arDialogDisplayRetryAttempt = 0;
    arDialogDisplayRetryAttemptTimerObject = setInterval('arDialogFailedSoCallItAgain()', 6000);








    if (!budgetRequestId && !brTitle) {
        // This means we are coming from a .xsl, so we have to find the values.
        budgetRequestId = $('span[xd\\:binding = "my:BudgetRequestId"]')[0].innerHTML; // my:BudgetRequestId
        appWebUrl = globalUrlPrefix + globalUrlForWebServices;
        brTitle = $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML; // my:Project_Name
        title = $('span[xd\\:binding = "my:Title"]')[0].innerHTML; // eg: BR-160001

        // This shows the AR in a jquery dialog window.
        try {
            $('#spanArDialogContents').empty(); // We have to empty the contents of the dialog before it is displayed.
            $("#ArDialog").dialog({
                modal: true,
                resizable: false,
                //closeText: "Cancel",
                closeOnEscape: false, // Hit the ESC key to hide! Yeah!
                //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                //title: brTitle + " (" + title + ")",
                width: "800px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
                open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
            });
            $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            $('#spanArDialogTitle').html(brTitle + " (" + title + ")");
            var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (wtItems) {
                    if (wtItems.d.results.length == 0) {
                        // Todd: There were no results, so put some message on the screen to indicate that.?
                    } else {
                        // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                        var userIds = [];
                        userIds.push(wtItems.d.results[0].bwAuthorId);
                        for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                            userIds.push(wtItems.d.results[ui].bwAssignedToId);
                        }
                        var UserFriendlyNames = [];
                        var dataRetrievalCount = 0;
                        for (var uids = 0; uids < userIds.length; uids++) {
                            // Ok now we have to make a deferred call to get back the Friendly Names.
                            GetUserDetails[uids] = $.Deferred();
                            GetUserDetails[uids]
                                .done(function (data) {
                                    dataRetrievalCount += 1; // Increment the count!
                                    // Add the results to the array.
                                    UserFriendlyNames.push(data);
                                    // Check if all of the data has come back yet.
                                    if (dataRetrievalCount == userIds.length) {
                                        // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                        var html = '';
                                        html += '<table>';
                                        html += '   <tr>';
                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                        var authorName = '';
                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                            if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                        }
                                        html += '           <strike><span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Budget Request submitted by ' + authorName + '</span></strike>';
                                        html += '       </td>';
                                        html += '   </tr>';
                                        html += '</table>';
                                        for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                            // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                            html += '<table>';
                                            html += '   <tr>';
                                            //html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                            if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                html += '       <strike>';
                                                html += '<span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '</span>';
                                                html += '       </strike>';
                                                html += '       </td>';
                                            } else {
                                                var assignedToName = '';
                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                }
                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Created) + '">';
                                                html += '<span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName + '</span>';
                                                html += '       </td>';
                                            }
                                            //html += '       </td>';
                                            html += '   </tr>';
                                            html += '</table>';
                                        }
                                        html += '<table>';
                                        html += '   <tr>';
                                        html += '       <td>&nbsp;</td>';
                                        html += '   </tr>';
                                        html += '   <tr>';
                                        html += '       <td>';
                                        html += '           <a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">View the Budget Request</a>';
                                        html += '       </td>';
                                        html += '   </tr>';
                                        html += '</table>';
                                        $('#spanArDialogContents').html(html);
                                        $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                    }
                                })
                                .fail(function (data) {
                                    displayAlertDialog('Error in ios8.js.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                });
                            getUserDetails(userIds[uids], appWebUrl, uids);
                        }
                    }
                },
                error: function (error) {
                    displayAlertDialog('Error in ios8.js.displayArInDialog():1', '1:' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            displayAlertDialog('Error in ios8.js.displayArInDialog():2', '2:' + e.message);
        }
    } else if (!appWebUrl && !budgetRequestId && !arName && !title) {
        //displayAlertDialog('This means we are coming from the burn rate report.');
        // This means we are coming from the burn rate report.
        // First we have to get the budgetRequestId from the Title (eg: BR-00001).
        var operationUri = webserviceurl + "/getbudgetrequestidfromtitle/" + brTitle;
        $.ajax({
            url: operationUri,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {

                //displayAlertDialog(data);

                budgetRequestId = data[0].bwBudgetRequestId;
                appWebUrl = globalUrlPrefix + globalUrlForWebServices;
                brTitle = data[0].ProjectTitle; // my:Project_Name
                title = data[0].Title; // eg: BR-160001



                // This shows the AR in a jquery dialog window.
                try {
                    $('#spanArDialogContents').empty(); // We have to empty the contents of the dialog before it is displayed.
                    $("#ArDialog").dialog({
                        modal: true,
                        resizable: false,
                        closeText: "Cancel",
                        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                        //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                        //title: brTitle + " (" + title + ")",
                        width: "800px",
                        dialogClass: "no-close", // No close button in the upper right corner.
                        hide: false,
                        open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.

                        //, // This means when hiding just disappear with no effects.
                        //buttons: {
                        //    "Close": function () {
                        //        $(this).dialog("close");
                        //    }
                        //}
                    });
                    $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
                    $('#spanArDialogTitle').html(brTitle + " (" + title + ")");
                    var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
                    $.ajax({
                        url: operationUri,
                        method: "GET",
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (wtItems) {
                            if (wtItems.d.results.length == 0) {




                                // Todd: There were no results, so put some message on the screen to indicate that.?
                                var html = '';
                                html += 'There were no items returned.';
                                $('#spanArDialogContents').html(html);




                            } else {
                                // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                                var userIds = [];
                                userIds.push(wtItems.d.results[0].bwAuthorId);
                                for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                                    userIds.push(wtItems.d.results[ui].bwAssignedToId);
                                }
                                var UserFriendlyNames = [];
                                var dataRetrievalCount = 0;
                                for (var uids = 0; uids < userIds.length; uids++) {
                                    // Ok now we have to make a deferred call to get back the Friendly Names.
                                    GetUserDetails[uids] = $.Deferred();
                                    GetUserDetails[uids]
                                        .done(function (data) {
                                            dataRetrievalCount += 1; // Increment the count!
                                            // Add the results to the array.
                                            UserFriendlyNames.push(data);
                                            // Check if all of the data has come back yet.
                                            if (dataRetrievalCount == userIds.length) {
                                                // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                                var html = '';
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                                var authorName = '';
                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                                }
                                                html += '           <strike><span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Budget Request submitted by ' + authorName + '</span></strike>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';
                                                for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                                    // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                                    html += '<table>';
                                                    html += '   <tr>';
                                                    html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                                    if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                        html += '       <strike>';
                                                        html += '<span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '</span>';
                                                        html += '       </strike>';
                                                    } else {
                                                        var assignedToName = '';
                                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                            if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                        }
                                                        html += formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName;
                                                    }
                                                    html += '       </td>';
                                                    html += '   </tr>';
                                                    html += '</table>';
                                                }
                                                html += '<table>';
                                                html += '   <tr>';
                                                html += '       <td>&nbsp;</td>';
                                                html += '   </tr>';
                                                html += '   <tr>';
                                                html += '       <td>';
                                                html += '           <a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">View the Budget Request</a>';
                                                html += '       </td>';
                                                html += '   </tr>';
                                                html += '</table>';
                                                $('#spanArDialogContents').html(html);
                                                $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                            }
                                        })
                                        .fail(function (data) {
                                            displayAlertDialog('Error in ios8.js.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                        });
                                    getUserDetails(userIds[uids], appWebUrl, uids);
                                }
                            }
                        },
                        error: function (error) {
                            displayAlertDialog('Error in ios8.js.displayArInDialog():3', '3:' + errorCode + ', ' + errorMessage);
                        }
                    });
                } catch (e) {
                    displayAlertDialog('Error in ios8.js.displayArInDialog():4', '4:' + e.message);
                }
            },
            error: function (error) {
                displayAlertDialog('Error in ios8.js.displayArInDialog():5', '5:' + errorCode + ', ' + errorMessage);
            }
        });
    } else {
        // Display the thing. We have enough info already!
        // This shows the AR in a jquery dialog window.
        try {
            $('#spanArDialogContents').empty(); // We have to empty the contents of the dialog before it is displayed.
            $("#ArDialog").dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                //title: brTitle + " (" + title + ")",
                width: "800px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false,//, // This means when hiding just disappear with no effects.
                open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#ArDialog").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.

                //buttons: {
                //    "Close": function () {
                //        $(this).dialog("close");
                //    }
                //}
            });
            $("#ArDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
            $('#spanArDialogTitle').html(brTitle + " (" + title + ")");
            var operationUri = webserviceurl + "/bwworkflowtasks/getbybudgetrequestid/" + budgetRequestId;
            $.ajax({
                url: operationUri,
                method: "GET",
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (wtItems) {
                    if (wtItems.d.results.length == 0) {
                        // Todd: There were no results, so put some message on the screen to indicate that.?

                        var html = '';
                        html += 'There were no items returned.';
                        $('#spanArDialogContents').html(html);


                    } else {
                        // First we have to create an array of user Id's so we can pass it the method in order to get back the friendly names.
                        var userIds = [];
                        userIds.push(wtItems.d.results[0].bwAuthorId);
                        for (var ui = 0; ui < wtItems.d.results.length; ui++) {
                            userIds.push(wtItems.d.results[ui].bwAssignedToId);
                        }
                        var UserFriendlyNames = [];
                        var dataRetrievalCount = 0;
                        for (var uids = 0; uids < userIds.length; uids++) {
                            // Ok now we have to make a deferred call to get back the Friendly Names.
                            GetUserDetails[uids] = $.Deferred();
                            GetUserDetails[uids]
                                .done(function (data) {
                                    dataRetrievalCount += 1; // Increment the count!
                                    // Add the results to the array.
                                    UserFriendlyNames.push(data);
                                    // Check if all of the data has come back yet.
                                    if (dataRetrievalCount == userIds.length) {
                                        // Now that we have all the friendly names we need for the user Ids, we can proceed.
                                        var html = '';
                                        html += '<table>';
                                        html += '   <tr>';
                                        html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[0].Created) + '">';
                                        var authorName = '';
                                        for (var c = 0; c < UserFriendlyNames.length; c++) {
                                            if (UserFriendlyNames[c][0] == wtItems.d.results[0].bwAuthorId) authorName = UserFriendlyNames[c][1];
                                        }
                                        html += '           <strike><span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[0].Created) + ' - Budget Request submitted by ' + authorName + '</span></strike>';
                                        html += '       </td>';
                                        html += '   </tr>';
                                        html += '</table>';
                                        for (var ri = 0; ri < wtItems.d.results.length; ri++) {
                                            // Iterate through all of the tasks and build the list for this Budget Request ListItem.
                                            html += '<table>';
                                            html += '   <tr>';
                                            html += '       <td title="' + formatDateAndTimeFromBW(wtItems.d.results[ri].Modified) + '">';
                                            if ((wtItems.d.results[ri].bwPercentComplete == 100) && (wtItems.d.results[ri].bwStatus == 'Completed')) {
                                                html += '       <strike>';
                                                html += '<span style="cursor:help;">' + formatDateFromBW(wtItems.d.results[ri].Modified) + ' - ' + wtItems.d.results[ri].bwTaskOutcome + '</span>';
                                                html += '       </strike>';
                                            } else {
                                                var assignedToName = '';
                                                for (var c = 0; c < UserFriendlyNames.length; c++) {
                                                    if (UserFriendlyNames[c][0] == wtItems.d.results[ri].bwAssignedToId) assignedToName = UserFriendlyNames[c][1];
                                                }
                                                html += formatDateFromBW(wtItems.d.results[ri].Created) + ' - ' + wtItems.d.results[ri].bwTaskTitle + ' assigned to ' + assignedToName;
                                            }
                                            html += '       </td>';
                                            html += '   </tr>';
                                            html += '</table>';
                                        }
                                        html += '<table>';
                                        html += '   <tr>';
                                        html += '       <td>&nbsp;</td>';
                                        html += '   </tr>';
                                        html += '   <tr>';
                                        html += '       <td>';
                                        html += '           <a class="aDisplayArLink" href="javascript:displayArOnTheHomePage(\'' + budgetRequestId + '\', \'' + participantId + '\', \'' + title + '\');">View the Budget Request</a>';
                                        html += '       </td>';
                                        html += '   </tr>';
                                        html += '</table>';
                                        $('#spanArDialogContents').html(html);
                                        $('#ui-id-1').css('border-radius', '20px 0 0 20px');
                                    }
                                })
                                .fail(function (data) {
                                    displayAlertDialog('Error in ios8.js.displayArInDialog().GetUserDetails.fail()', 'GetUserDetails.fail()');
                                });
                            getUserDetails(userIds[uids], appWebUrl, uids);
                        }
                    }
                },
                error: function (error) {
                    displayAlertDialog('Error in ios8.js.displayArInDialog():6', '6:' + errorCode + ', ' + errorMessage);
                }
            });
        } catch (e) {
            displayAlertDialog('Error in ios8.js.displayArInDialog():7', '7:' + e.message);
        }
    }
}

function setIOSAppToYes() {

    iOSApp = 'YES';
}

function userHasStartedRecordingAnAudioMemo() {
    // First we need to change the link so that they can stop the recording.
    var html = '';
    html += '<a href="https://budgetnet.ca?memo=stoprecordingaudio" target="_blank" style="font-size:40pt;">Click here to stop recording a memo.</a>';
    document.getElementById('spanRecordAMemoLink').innerHTML = html;

}

//function userHasStoppedRecordingAnAudioMemo() {

//    // Hide the divRecordAVoiceMemoDialog dialog.
//    $('#divRecordAVoiceMemoDialog').dialog('close');
//    // Display the upload dialog.
//    $("#divConfirmFileUploadDialog").dialog({
//        modal: true,
//        resizable: false,
//        //closeText: "Cancel",
//        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
//        title: 'Sign Up',
//        width: "760",
//        dialogClass: "no-close", // No close button in the upper right corner.
//        hide: false//, // This means when hiding just disappear with no effects.
//        //buttons: {
//        //    "Close": function () {
//        //        $(this).dialog("close");
//        //    }
//        //}
//    });

//    $("#divConfirmFileUploadDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

//}

function displayRecordAVoiceMemoDialog() {
    // This launches the "record a memo" functionality in the iOS app.
    try {

        // display the divRecordAVoiceMemoDialog
        $("#divRecordAVoiceMemoDialog").dialog({
            modal: true,
            resizable: false,
            //closeText: "Cancel",
            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            title: 'Sign Up',
            width: "760",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
        });

        $("#divRecordAVoiceMemoDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        // Display the file path.
        //document.getElementById('txtConfirmFileUploadDialogFilename').value = voiceMemoFilePath;


    } catch (e) {
        displayAlertDialog('Error in startRecordingMemo: ' + e.message)
    }
}

//function stopRecordingMemo() {
//    // This launches the "record a memo" functionality in the iOS app.

//    var myUri = window.location.href;
//    if (myUri.indexOf('?') > -1) {
//        myUri += '&memo=stoprecordingaudio';
//    } else {
//        myUri += '?memo=stoprecordingaudio';
//    }

//    window.location = myUri; // This triggers the iPhone "recordTapepd()" function! Yeah!

//}

function uploadAudioMemo(path) {

    //cmdDisplayConfirmFileUploadDialog(path, _budgetRequestId);
    //cmdDisplayConfirmFileUploadDialog(path, budgetRequestId);

    //displayAlertDialog('uploadAudioMemo: ' + path);

    // Hide the divRecordAVoiceMemoDialog dialog.
    $('#divRecordAVoiceMemoDialog').dialog('close');
    // Display the upload dialog.
    $("#divConfirmFileUploadDialog").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Sign Up',
        width: "760",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });

    $("#divConfirmFileUploadDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

    document.getElementById('txtConfirmFileUploadDialogFilename').value = path;



    // Hook up the Upload button click event code.
    $('#btnUploadTheFileNow').click(function (error) {
        //var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        //if (proceed) {
        //    cmdDeleteBudgetRequest(requestId);
        //displayAlertDialog('This functionality is incomplete. Coming soon!');
        $('#divConfirmFileUploadDialog').dialog("close");

        $("#divWorkingOnItDialog").dialog({
            modal: true,
            resizable: false,
            //closeText: "Cancel",
            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            title: 'Working on it...',
            width: "800",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
        });
        $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        var _budgetRequestId = 'xxxx';
        ProcessUploadForIOS(path, _budgetRequestId);

        //return true;
        //}
    });


    // Hook up the Cancel button code.
    $('#btnCancelUploadTheFileNow').click(function (error) {
        $('#divConfirmFileUploadDialog').dialog("close");

        console.log('In xcx23124232342-3 Calling clone.');
        alert('In xcx23124232342-3 Calling clone.');

        $('#inputFile').replaceWith($('#inputFile').clone()); // Clear the file upload box. May not work in all browsers doing it this way.
        //return false;
    });






}

function displayAttachmentInDialog(fileUrl, filename, description, bwBudgetRequestId) {

    try {

        $('#divAttachmentsDialog1Contents').empty(); // We have to empty the contents of the dialog before it is displayed.
        $("#AttachmentsDialog1").dialog({
            modal: true,
            resizable: false,
            //closeText: "Cancel",
            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
            //title: brTitle + " (" + title + ")",
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false,//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
            open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#AttachmentsDialog1").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
        });
        $("#AttachmentsDialog1").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();




        // We need to add these files extensions below!
        // .MP3 (audio), .MP4 (audio), .M4A (audio), .M4V (video), .M4R ("tones"), 




        var html = '';
        // We need to present these by using file extension. This displays all images. .jpg, .png, .xx << Todd: need work here.
        if (fileUrl.toUpperCase().indexOf('.PNG') != -1 || fileUrl.toUpperCase().indexOf('.JPG') != -1 || fileUrl.toUpperCase().indexOf('.JPEG') != -1 || fileUrl.toUpperCase().indexOf('.BMP') != -1 || fileUrl.toUpperCase().indexOf('.GIF') != -1 || fileUrl.toUpperCase().indexOf('.TIFF') != -1 || fileUrl.toUpperCase().indexOf('.SVG') != -1) {
            // Images.
            $('#spanAttachmentsDialog1Title').html('Select the thumbnail to view the actual image...');
            html += '<img src="' + fileUrl + '" style="width:700px;display:block;margin-left:auto;margin-right:auto;cursor:pointer;" onclick="displayFullSizedAttachmentInDialog(\'' + fileUrl + '\');" />';
        } else if (fileUrl.toUpperCase().indexOf('.PDF') != -1 || fileUrl.toUpperCase().indexOf('.RTF') != -1 || fileUrl.toUpperCase().indexOf('.DOC') != -1 || fileUrl.toUpperCase().indexOf('.DOCX') != -1 || fileUrl.toUpperCase().indexOf('.XSL') != -1 || fileUrl.toUpperCase().indexOf('.XSLX') != -1 || fileUrl.toUpperCase().indexOf('.TXT') != -1 || fileUrl.toUpperCase().indexOf('.ODT') != -1 || fileUrl.toUpperCase().indexOf('.ODS') != -1 || fileUrl.toUpperCase().indexOf('.ODP') != -1) {
            // Documents.
            $('#spanAttachmentsDialog1Title').html('Select the link below to view the document...');
            html += '<a href="' + fileUrl + '" target="_blank">Click here to view the document</a>';
        } else if (fileUrl.toUpperCase().indexOf('.MP3') != -1 || fileUrl.toUpperCase().indexOf('.MP4') != -1 || fileUrl.toUpperCase().indexOf('.M4A') != -1 || fileUrl.toUpperCase().indexOf('.M4R') != -1) {
            // Audio.
            $('#spanAttachmentsDialog1Title').html('Select the link below to listen...');
            if (iOSApp == 'YES') {
                html += '<a href="' + fileUrl + '">Click here to listen</a>';
            } else {
                html += '<audio src="' + fileUrl + '" controls="controls" style="width:80%;">Click here to listen</audio>';
            }
        } else if (fileUrl.toUpperCase().indexOf('.M4V') != -1 || fileUrl.toUpperCase().indexOf('.AVI') != -1 || fileUrl.toUpperCase().indexOf('.MOV') != -1) {
            // Video.
            $('#spanAttachmentsDialog1Title').html('Select the link below to view...');
            if (iOSApp == 'YES') {
                html += '<a href="' + fileUrl + '">Click here to view</a>';
            } else {
                html += '<audio src="' + fileUrl + '" controls="controls">Click here to view</audio>';
            }
        } else {
            $('#spanAttachmentsDialog1Title').html('This attachment has an unknown file extension...');
            html += '<a href="' + fileUrl + '" target="_blank">Click here to try to open this file</a>';
            //html += '<span style="font-size:40pt;">Unknown file extension</span>';
        }
        $('#divAttachmentsDialog1Contents').html(html);



        // Create the "Save" button.
        html = '';
        html += '<div id="btnAttachmentsDialog1SaveMetadata" class="divDialogButton" onclick="cmdSaveAttachmentMetadata(\'' + bwBudgetRequestId + '\', \'' + filename + '\');">Save</div>';
        $('#spanAttachmentsDialog1SaveMetadataButton').html(html);

        // Create the "Delete" button.
        html = '';
        html += '<div id="btnAttachmentsDialog1DeleteAttachment" class="divDialogButton" onclick="cmdDeleteAttachment(\'' + bwBudgetRequestId + '\', \'' + filename + '\');">Delete</div>';
        $('#spanAttachmentsDialog1DeleteAttachmentButton').html(html);

        //// Bind the "Save" button.
        //$('#btnAttachmentsDialog1SaveMetadata').click(function (error) {
        //    cmdSaveAttachmentMetadata(bwBudgetRequestId, filename);
        //});

        //// Bind the "Delete" button.
        //$('#btnAttachmentsDialog1DeleteAttachment').click(function (error) {
        //    cmdDeleteAttachment(bwBudgetRequestId, filename);
        //});









        // Populate the dialog with the filename and description.
        if (filename != 'undefined') {
            var extensionIndex = filename.lastIndexOf('.');
            var filenamePrefix = filename.substring(0, extensionIndex);
            var fileExtension = '.' + filename.substring(extensionIndex + 1, filename.length);
            document.getElementById('txtAttachmentsDialog1Filename').value = filenamePrefix;
            document.getElementById('spanAttachmentsDialog1FileExtension').innerHTML = fileExtension;
        } else {
            document.getElementById('txtAttachmentsDialog1Filename').value = '';
        }

        if (filename != 'description') document.getElementById('txtAttachmentsDialog1FileDescription').value = description;
        else document.getElementById('txtAttachmentsDialog1FileDescription').value = '';

    } catch (e) {
        displayAlertDialog('Error in ios8.js.displayAttachmentInDialog():2:' + e.message + fileUrl);
    }
}

function displayFullSizedAttachmentInDialog(fileUrl) {

    try {
        $("#AttachmentsDialog1").dialog('close'); // Close the other dialog.

        $('#divAttachmentsDialog2Contents').empty(); // We have to empty the contents of the dialog before it is displayed.
        $("#AttachmentsDialog2").dialog({
            modal: true,
            resizable: false,
            //closeText: "Cancel",
            closeOnEscape: false, // Hit the ESC key to hide! Yeah!
            //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
            //title: brTitle + " (" + title + ")",
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false,//, // This means when hiding just disappear with no effects.
            //buttons: {
            //    "Close": function () {
            //        $(this).dialog("close");
            //    }
            //}
            open: function (event, ui) { $('.ui-widget-overlay').bind('click', function () { $("#AttachmentsDialog2").dialog('close'); }); } // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.
        });
        $("#AttachmentsDialog2").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();

        var html = '';
        // We need to present these by using file extension. This displays all images. .jpg, .png, .xx << Todd: need work here.
        if (fileUrl.toUpperCase().indexOf('.PNG') != -1 || fileUrl.toUpperCase().indexOf('.JPG') != -1 || fileUrl.toUpperCase().indexOf('.JPEG') != -1) {
            html += '<img src="' + fileUrl + '" style="display:block;margin-left:auto;margin-right:auto;" />';
        } else {
            html += '<span style="font-size:40pt;">Unknown file extension</span>';
        }
        $('#divAttachmentsDialog2Contents').html(html);

        //document.getElementById('txtAttachmentsDialog2Filename').value = 'xxxx';
        //document.getElementById('txtAttachmentsDialog2FileDescription').value = 'xxxx xxxx';

    } catch (e) {
        displayAlertDialog('Error in ios8.js.displayFullSizedAttachmentInDialog()', '2:' + e.message + fileUrl);
    }
}

function cmdDeleteAttachment(bwBudgetRequestId, filename) {

    //displayAlertDialog('Getting ready to delete workflowAppId: ' + workflowAppId + ' bwBudgetRequestId: ' + bwBudgetRequestId + ' filename: ' + filename);

    var fileserviceurl = globalUrlPrefix + globalUrlForWebServices + '/_files';
    var data = [];
    data = {
        bwBudgetRequestId: bwBudgetRequestId,
        Filename: filename
    };
    var operationUri = fileserviceurl + "/removeattachment";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {

            if (JSON.stringify(data).toUpperCase().indexOf('THE FILE WAS DELETED') > -1) {
                $('#AttachmentsDialog1').dialog('close');
                populateAttachments(workflowAppId, bwBudgetRequestId, 'attachmentsInXslForm', true);
            } else {
                displayAlertDialog('There was an error deleting the file: ' + JSON.stringify(data));
            }

        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdDeleteAttachment().removeattachment: ' + errorMessage);
        }
    });
}

function cmdSaveAttachmentMetadata(bwBudgetRequestId, originalFilename) {

    try {
        var newFilename = document.getElementById('txtAttachmentsDialog1Filename').value + document.getElementById('spanAttachmentsDialog1FileExtension').innerHTML;
        var description = document.getElementById('txtAttachmentsDialog1FileDescription').value.replace(/["']/g, '');

        //displayAlertDialog('Saving attachment metadata, bwBudgetRequestId: ' + bwBudgetRequestId + ' filename: ' + filename + ' newFilename: ' + newFilename + ' description: ' + description);

        //displayAlertDialog('workflowAppId: ' + workflowAppId);


        var fileserviceurl = globalUrlPrefix + globalUrlForWebServices + '/_files';
        var data = [];
        data = {
            bwWorkflowAppId: workflowAppId,
            bwBudgetRequestId: bwBudgetRequestId,
            OriginalFilename: originalFilename,
            NewFilename: newFilename,
            Description: description
        };
        var operationUri = fileserviceurl + "/saveattachmentmetadata";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {

                if (JSON.stringify(data).toUpperCase().indexOf('THE FILE WAS SAVED') > -1) {
                    $('#AttachmentsDialog1').dialog('close');

                    // I named the attachment section differently depending on if it is a new request or not. This may not have been necessary, but for now this addresses the issue.
                    if (document.getElementById('attachmentsInXslForm')) {
                        populateAttachments(workflowAppId, bwBudgetRequestId, 'attachmentsInXslForm', true);
                    } else {
                        populateAttachments(workflowAppId, bwBudgetRequestId, 'newrequestattachments', true);
                    }


                } else {
                    displayAlertDialog('Error calling saveattachmentmetadata(). Failed to update metadata: ' + JSON.stringify(data));
                }

            },
            error: function (data, errorCode, errorMessage) {

                $('#AttachmentsDialog1').dialog('close');

                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.cmdSaveAttachmentMetadata().saveattachmentmetadata: ' + data + ', ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdSaveAttachmentMetadata(): ' + e.message + ', ' + e.stack);
    }
}

function displayRecurringExpenseInDialog() {

    //displayAlertDialog('xxxx');

    // Temp till we get good values!!
    var recurringExpenseId = $('span[xd\\:binding = "my:RecurringExpenseId"]')[0].innerHTML;

    //displayAlertDialog('recurringExpenseId: ' + recurringExpenseId);
    // Call the web service "getRecurringExpenseDetails". It will provide:
    // - The recurring expense details
    // - All of the budget request details which have the "RelatedRecurringExpenseId" field populated with the bwRecurringExpenseId.

    var data = [];
    data = {
        bwRecurringExpenseId: recurringExpenseId
    };
    var operationUri = webserviceurl + "/bwrecurringexpense/getrelatedbudgetrequests";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            //displayAlertDialog(JSON.stringify(data.RecurringExpense.CreatedBy));

            var brTitle = data.RecurringExpense[0].ProjectTitle; // eg. Donut
            var title = data.RecurringExpense[0].Title; // eg. RE-160001
            $('#spanRecurringExpenseDialogBudgetRequestsList').empty(); // We have to empty the contents of the dialog before it is displayed.
            $("#RecurringExpenseDialog").dialog({
                modal: true,
                resizable: false,
                closeText: "Cancel",
                closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                //title: brTitle + ' (' + arName.replace('.xml', '') + ")",
                title: brTitle + " (" + title + ")",
                width: "650px",
                dialogClass: "no-close", // No close button in the upper right corner.
                hide: false, // This means when hiding just disappear with no effects.
                buttons: {
                    "Update the Reminder Date": function () {
                        // Todd: Validate the reminder date here. It has to happen in the future!
                        $(this).dialog("close");
                    },
                    "Close": function () {
                        $(this).dialog("close");
                    }
                }
            });

            if (data.BudgetRequests.length == 0) {
                var html = '';

                html += '<span>';
                html += 'No budget requests have been submitted for this recurring expense yet.';
                html += '</span>';

                $(html).appendTo($('#spanRecurringExpenseDialogBudgetRequestsList')); // Add to the Budget Requests list.

            } else {
                // Now we have to list all of the budget request details which have the "RelatedRecurringExpenseId" field populated with the bwRecurringExpenseId.
                var html = '';

                html += '<span style="cursor:help;" title="Created by ' + data.RecurringExpense[0].CreatedByEmail + ' on ' + formatDateAndTimeFromBW(data.RecurringExpense[0].Created) + '.">This recurring expense was created by ' + data.RecurringExpense[0].CreatedBy + ' <span style="white-space:nowrap;">on ' + formatDateFromBW(data.RecurringExpense[0].Created) + '.</span></span><br /><br />';

                html += '<span>Since then, the following new budget requests have been created:</span><br />';
                for (var i = 0; i < data.BudgetRequests.length; i++) {
                    var projectTitle = data.BudgetRequests[i].ProjectTitle;
                    var title = data.BudgetRequests[i].Title; // x
                    //var arStatus = data.BudgetRequests[i].ARStatus;
                    var budgetWorkflowStatus = data.BudgetRequests[i].BudgetWorkflowStatus; // x
                    var modified = data.BudgetRequests[i].Modified; // x
                    var modifiedByFriendlyName = data.BudgetRequests[i].ModifiedByFriendlyName; // x

                    html += '<span>';
                    html += modified + ' - ' + projectTitle + ' (' + budgetWorkflowStatus + ' ' + modifiedByFriendlyName + ')';
                    html += '</span>';
                    html += '<br />';

                    // This is a sample so we don't lose our concept!!
                    //html += 'Since then, the following new budget requests have been created:<br />';
                    //html += '        <span title="Marked 'Active' by todd_hiltz@hotmail.comx on Augustx, 2016x at 7am.';
                    //html += ' '; // linefeed!!
                    //html += 'Click now to view the AR.';
                    //html += '              ">';
                    //html += '            <a href="" style="cursor:pointer;">October 9, 2016 - xxxx (approved/active/in progress {ARStatus})</a><br />';
                    //html += '        </span>';
                    //html += '        <span style="cursor:help;" title="Marked 'Active' by todd_hiltz@hotmail.comx on Augustx, 2016x at 7am.';
                    //html += ' '; // linefeed!!
                    //html += 'Click now to view the AR.';
                    //html += '              ">';
                    //html += '            <a href="" style="cursor:pointer;">November 9, 2016 - xxxx (approved/active/in progress {ARStatus})</a><br />';
                    //html += '        </span>';
                }

                $(html).appendTo($('#spanRecurringExpenseDialogBudgetRequestsList')); // Add to the Budget Requests list.
            }
        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.displayRecurringExpenseInDialog(): ' + errorMessage);
        }
    });
}

function checkForAlerts() {
    try {
        var data = {
            "bwTenantId": tenantId,
            "bwWorkflowAppId": workflowAppId,
            "bwParticipantId": participantId
        };
        var operationUri = webserviceurl + "/bwtasksoutstanding";
        $.ajax({
            url: operationUri,
            type: "DELETE",
            contentType: 'application/json',
            data: data,
            success: function (data) {
                if (data.length > 0) {
                    $('#spanAlertLink').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    $('#spanAlertLinkNewRequest').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    $('#spanAlertLinkMyStuff').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    $('#spanAlertLinkSummary').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    $('#spanAlertLinkConfiguration').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    $('#spanAlertLinkHelp').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                } else {
                    $('#spanAlertLink').html('&nbsp;');
                    $('#spanAlertLinkNewRequest').html('&nbsp;');
                    $('#spanAlertLinkMyStuff').html('&nbsp;');
                    $('#spanAlertLinkSummary').html('&nbsp;');
                    $('#spanAlertLinkConfiguration').html('&nbsp;');
                    $('#spanAlertLinkHelp').html('&nbsp;');
                }
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                //displayAlertDialog('Error in ios8.js.checkForAlerts():participantId:' + participantId + ', ' + errorCode + ', ' + errorMessage);
                // Todd put error message backin here
                $('#spanAlertLink').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
                $('#spanAlertLinkNewRequest').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
                $('#spanAlertLinkMyStuff').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
                $('#spanAlertLinkSummary').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
                $('#spanAlertLinkConfiguration').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
                $('#spanAlertLinkHelp').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
            }
        });
    } catch (e) {
        $('#spanAlertLink').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
        $('#spanAlertLinkNewRequest').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
        $('#spanAlertLinkMyStuff').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
        $('#spanAlertLinkSummary').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
        $('#spanAlertLinkConfiguration').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
        $('#spanAlertLinkHelp').html('error!&nbsp;&nbsp;&nbsp;&nbsp;');
    }
}

function cmdDisplayArchivePageTrashbinContents() {
    // This has been prepared for!
    // The BwBudgetRequest and BwWorkflowTask tables have a field named 'TrashBin' which accomodates this. 
    // Currently when a budget request is deleted, these items are marked as TrashBin = 'false'.
    displayAlertDialog('This functionality is incomplete. Coming soon! cmdDisplayArchivePageTrashbinContents()');
}

// 
function cmdDisplayArchivePageExtendedInformation() {
    // This will show the GUID Id of the AR so that we can audit any issues with the end user.
    displayAlertDialog('This functionality is incomplete. Coming soon! cmdDisplayArchivePageExtendedInformation()');
}

function cmdDisplayArchivePageRecurringExpenses() {
    // This will show the GUID Id of the AR so that we can audit any issues with the end user.
    //displayAlertDialog('This functionality is incomplete. Coming soon! cmdDisplayArchivePageRecurringExpenses()');


    //var html = '';
    //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">Your currently selected budgeting network: <span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span></span>';

    //html += '<br /><br /><input type="button" value="View trashbin contents" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" value="View extended information" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" value="View recurring expenses" onclick="cmdDisplayArchivePageRecurringExpenses();" style="cursor:pointer;" /><br /><br />';

    //$('#spanArchivePageTopTitle').html(html);

    //GetWorkflowAppConfigurationData9 = $.Deferred();
    //GetWorkflowAppConfigurationData9
    //    .done(function () {
    //        //displayAlertDialog('DONE');
    //        selectArchivePageFilterDropDown_change();
    //        renderLeftButtons('divArchivePageLeftButtons');
    //    })
    //    .fail(function () {
    //        displayAlertDialog('Error in ios8.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
    //    });
    //loadWorkflowAppConfigurationDetails9();



    cmdListAllRecurringExpensesUsingClientDatasetApproach();






}

//function monkeyPatchAutocomplete() {

//    // don't really need this, but in case I did, I could store it and chain
//    var oldFn = $.ui.autocomplete.prototype._renderItem;

//    $.ui.autocomplete.prototype._renderItem = function (ul, item) {
//        var re = new RegExp("^" + this.term);
//        var t = item.label.replace(re, "<span style='font-weight:bold;color:Blue;'>" +
//                this.term +
//                "</span>");
//        return $("<li></li>")
//            .data("item.autocomplete", item)
//            .append("<a>" + t + "</a>")
//            .appendTo(ul);
//    };
//}

function monkeyPatchAutocomplete() {






    $.ui.autocomplete.prototype._renderItem = function (ul, item) {

        var label = item.label;
        var friendlyName = label.split('|')[0];
        var email = label.split('|')[2];
        item.label = friendlyName + ' (' + email + ')'; // + '<span style="visibility:hidden;">|</span>';

        //displayAlertDialog(JSON.stringify(item));



        //// Escape any regex syntax inside this.term
        var cleanTerm = this.term.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');

        //// Build pipe separated string of terms to highlight
        var keywords = $.trim(cleanTerm).replace('  ', ' ').split(' ').join('|');

        //// Get the new label text to use with matched terms wrapped
        //// in a span tag with a class to do the highlighting
        var re = new RegExp("(" + keywords + ")", "gi");
        var output = item.label.replace(re,
           '<span class="ui-menu-item-highlight">$1</span>');

        return $("<li>")
           .append($("<a>").html(output))
           .appendTo(ul);
    };
};


function populateStartPageItem(divSection, _type, _reference) {
    try {

        // Always make sure the logged in user details drop down is closed.
        //var isOpen = $("#bwLoggedInUserDropDown").dialog("isOpen");
        //if (isOpen) $("#bwLoggedInUserDropDown").dialog("destroy");
        //$("#bwLoggedInUserDropDown").dialog("destroy");

        //checkForAlerts();
        try {
            $('#divIos8LeftMenu').dialog('close'); // Close the left menu.
        } catch (e) {
            //
        }

        try {
            $('#divIos8SecondLeftMenu').dialog('close'); // Close the sub-left menu.
        } catch (e) {
            //
        }

        if (divSection == 'divWelcome') {
            renderWelcomeScreen(); // This may be removed at some point to leave the screen as-is instead of going all the way back to the home screen, which may be neat...time will tell.
            renderAlerts(); // This reloads the alerts that are displayed on the home/welcome page.

            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.

            $('#liWelcome').show();
            $('#liNewRequest').hide();
            $('#liArchive').hide();
            $('#liSummaryReport').hide();
            $('#liConfiguration').hide();
            $('#liHelp').hide();

            $('#divWelcomeMasterDiv').show();
            var e1 = document.getElementById('divWelcomeMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';

            renderLeftButtons('divWelcomePageLeftButtons');

        } else if (divSection == 'divNewRequest') {

            //displayAlertDialog('bwLastSelectedNewRequestType: ' + bwLastSelectedNewRequestType);
            if (bwLastSelectedNewRequestType == 'recurringexpense') {
                $('#trNewRequestRecurringExpenseSection').show(); // Not sure if this is the best place to make sure this section is hidden, but it works for now.
                //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            } else {
                $('#trNewRequestRecurringExpenseSection').hide();
            }

            // When a user comes here to create a new request, it is important that we create the BudgetRequestId. This is because if they add attachments, we
            // need to have this already so we can identify which budget request the file attachments belong to.
            var _budgetRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            document.getElementById('BudgetRequestId').innerHTML = _budgetRequestId;

            // This may be a recurring expense, so we will do the same thing just in case.
            var _recurringExpenseId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
            document.getElementById('RecurringExpenseId').innerHTML = _recurringExpenseId;

            //displayAlertDialog('Set RecurringExpenseId to: ' + _recurringExpenseId);

            // Clear the fields!
            document.getElementById('strProjectTitle').value = '';
            document.getElementById('strBriefDescriptionOfProject').value = '';
            document.getElementById('dblRequestedCapital').value = '';
            document.getElementById('txtProjectManagerName').value = '';
            document.getElementById('ddlFunctionalArea').innerHTML = '';
            document.getElementById('newrequestattachments').innerHTML = '';


            //$('#bwStartPageAccordion').show();
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            //$('#bwQuickLaunchMenu').hide();
            $('#liWelcome').hide();
            $('#liArchive').hide();
            $('#liSummaryReport').hide();
            $('#liConfiguration').hide();
            $('#liHelp').hide();
            $('#liNewRequest').show();

            var e1 = document.getElementById('divNewRequestMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';

            // Create the drop down at the top of the page, and select the last used option!
            // First we load our array.
            var requestTypes = [];
            requestTypes = new Array();
            // Budget Request
            var request = ['budgetrequest', 'Budget Request', 'selected'];
            requestTypes.push(request);
            // Quote Request
            if (quotingEnabled == true) {
                var request = ['quoterequest', 'Quote Request', ''];
                requestTypes.push(request);
            }
            // Reimbursement Request
            if (reimbursementRequestsEnabled == true) {
                var request = ['expenserequest', 'Reimbursement Request', ''];
                requestTypes.push(request);
            }
            // Recurring Expense
            if (recurringExpensesEnabled == true) {
                var request = ['recurringexpense', 'Recurring Expense', ''];
                requestTypes.push(request);
            }
            // Now formulate the GUI!
            var html = '';
            if (requestTypes.length == 1) {
                // If there is only one, don't display as a drop down, just as plain text.
                html += '<span style="font-size: 300%;">New <strong>' + requestTypes[0][1] + '</strong></span>';
                document.getElementById('spanRequestForm_Title').innerHTML = html;
            } else {
                // There is more than 1, so we have to display as a drop down.
                html += '<span style="font-size: 300%;">New <strong>';
                //html += '<select class="selectHomePageWorkflowAppDropDown" id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\' onchange="xxxx();">';
                html += '<select id="selectNewRequestFormRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\'>';
                for (var i = 0; i < requestTypes.length; i++) {
                    if (requestTypes[i][0] == bwLastSelectedNewRequestType) {
                        // Selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                    } else {
                        // Not selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                    }
                }
                html += '</select>';
                html += '</span>';
                document.getElementById('spanRequestForm_Title').innerHTML = html;


                // Now hook up the change event for the drop down!!
                $('#selectNewRequestFormRequestTypeDropDown').change(function () {
                    var selectedValue = $('#selectNewRequestFormRequestTypeDropDown option:selected').val();
                    bwLastSelectedNewRequestType = selectedValue;
                    // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.
                    var data = [];
                    data = {
                        bwParticipantId: participantId,
                        bwWorkflowAppId: workflowAppId,
                        bwLastSelectedNewRequestType: bwLastSelectedNewRequestType
                    };
                    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectednewrequestscreenrequesttype";
                    $.ajax({
                        url: operationUri,
                        type: "POST", timeout: ajaxTimeout,
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            if (data != 'SUCCESS') {
                                displayAlertDialog(data);
                            } else {
                                if (selectedValue == 'recurringexpense') {
                                    // Recurring Expense was selected!!!
                                    //$('#trNewRequestQuoteSection').hide();
                                    $('#trNewRequestRecurringExpenseSection').show();

                                    //var html = '';
                                    //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" disabled /><span style="font-size:10pt;color:lightgray;">Submit the first budget request immediately.</span><br />';
                                    //html += '<span style="font-size:8pt;">This does not create the budget request, it only schedules the reminder for when the budget request should be submitted.</span><br />';

                                    //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
                                    //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
                                    ////html += 'Justification details:<br />';
                                    ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
                                    ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
                                    //html += '<span style="font-size:8pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
                                    //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
                                    //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
                                } else {
                                    $('#trNewRequestRecurringExpenseSection').hide();
                                }
                            }
                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error in ios8.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                        }
                    });
                });
            }

            populateFunctionalAreas();

            // Populate the year drop-down

            // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.
            //if (_type == 'supplemental') {
            //    // This is a supplemental request for budget request _reference, which is a guid.
            //    var html = '';
            //    html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
            //    document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //    var html = '';
            //    html += '';
            //    html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200" title="Click here to Submit the supplemental request.">Submit</button>';
            //    html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200">Cancel</button>';
            //    html += '&nbsp;';
            //    document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;


            //} else {
            //var html = '';
            //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;New <strong>Budget Request</strong><br /><span></span></span><br />';
            //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
            //var html = '';
            //html += '';
            //var isSupplemental = 'false';
            //var relatedBudgetRequestId = '';
            //html += '<button id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow(\'' + isSupplemental + '\', \'' + relatedBudgetRequestId + '\');" class="BwButton200" title="Click here to Submit the request.">Submit</button>';
            //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200">Cancel</button>';
            //html += '&nbsp;';
            //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;
            //}


            // Set the manager title.
            $('#spanRequestForm_ManagerTitle').html(newBudgetRequestManagerTitle);
            // Set if the details are required.
            if (requireRequestDetails == true) {
                document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            } else {
                document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
            }
            // Set if the dates are required.
            if (requireStartEndDates == true) {
                document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Start date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
                document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">End date (estimated):&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
            } else {
                document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Start date (estimated):</span>';
                document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">End date (estimated):</span>';
            }
            // Set if the attachments are allowed.
            if (enableNewRequestAttachments == true) {
                $('#trNewRequestAttachmentsSection').show();
                //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            } else {
                $('#trNewRequestAttachmentsSection').hide();
                //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            }

            // Set if the attachments are allowed.
            if (enableNewRequestBarcodeAttachments == true) {
                $('#trNewRequestBarcodeAttachmentsSection').show();
                //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
            } else {
                $('#trNewRequestBarcodeAttachmentsSection').hide();
                //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            }

            // Set if the recurring expenses is enabled.
            //if (recurringExpensesEnabled == true) {
            //$('#trNewRequestRecurringExpenseSection').show();
            //document.getElementById('cbNewRequestRecurringExpenseEnabled').checked = false; // Default to not selected.
            // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //$('#cbNewRequestRecurringExpenseEnabled').click(function () {
            //    //displayAlertDialog('enable this section'); // color: #adadad;
            //    if (this.checked == true) {
            //        $('#trNewRequestQuoteSection').hide();

            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //        var html = '';
            //        html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //        html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //        html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //        html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        $('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //    } else {
            //        $('#trNewRequestQuoteSection').show();
            //        //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //        //var html = '';
            //        //html += 'Reminder date:<br />';
            //        //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //        //html += 'Justification details:<br />';
            //        //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //        //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //        //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //        //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //        document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = '';
            //    }




            //});
            //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            //} else {
            //    $('#trNewRequestRecurringExpenseSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}

            // Set if the quoting is enabled.
            //if (quotingEnabled == true) {
            //    $('#trNewRequestQuoteSection').show();
            //    document.getElementById('cbNewRequestQuoteEnabled').checked = false; // Default to not selected.
            //    // Hook up the checkbox event. cbNewRequestRecurringExpenseEnabled.click
            //    $('#cbNewRequestQuoteEnabled').click(function () {
            //        //displayAlertDialog('enable this section'); // color: #adadad;
            //        if (this.checked == true) {
            //            $('#trNewRequestRecurringExpenseSection').hide();

            //            var html = '';
            //            html += 'New <strong>Quote Request</strong>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            ////document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = 'black';
            //            //var html = '';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" /><span style="font-size:10pt;">Submit the first budget request immediately.</span><br />';

            //            //html += '<span style="font-size:10pt;">Reminder date:</span><br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            ////html += 'Justification details:<br />';
            //            ////html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            ////html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.<br />';
            //            //html += '<span style="font-size:10pt;">You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request. Also, if anyone changes the date you will be notified.</span><br />';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            //$('#dtRecurringExpenseReminderDate').datepicker(); // Hook up the date picker.
            //        } else {
            //            $('#trNewRequestRecurringExpenseSection').show();

            //            // 







            //            var html = '';
            //            html += 'New <strong>Budget Request</strong>';
            //            html += '</span>';
            //            document.getElementById('spanNewRequestFormTitle').innerHTML = html;

            //            //document.getElementById('spanNewRequestRecurringExpenseSectionTitle').style.color = '#adadad';
            //            //var html = '';
            //            //html += 'Reminder date:<br />';
            //            //html += '<input type="text" id="dtRecurringExpenseReminderDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><br />';
            //            //html += 'Justification details:<br />';
            //            //html += '<textarea id="strRecurringExpenseDetails" rows="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea><br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseSubmitImmediately" type="checkbox" />Submit the first budget request immediately.<br />';
            //            //html += 'You and the Manager will receive notifications prior to the reminder date so that you can initiate the next new request.<br />';
            //            //html += '<input id="cbNewRequestRecurringExpenseNotifyMeOnDateChanged" type="checkbox" />Notify me if anyone changes the date.';
            //            //document.getElementById('spanNewRequestRecurringExpenseSecondSection').innerHTML = html;
            //            document.getElementById('spanNewRequestQuoteSecondSection').innerHTML = '';
            //        }




            //    });
            //    //html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
            //    //html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';

            //} else {
            //    $('#trNewRequestQuoteSection').hide();
            //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
            //}


            renderLeftButtons('divNewRequestPageLeftButtons');



            // Now we can hook up the Participant text box for autocomplete.
            $("#txtProjectManagerName").autocomplete({
                source: function (request, response) {
                    //weburl = _spPageContextInfo.siteAbsoluteUrl;
                    $.ajax({
                        url: webserviceurl + "/workflow/" + workflowAppId + "/participants/" + request.term,
                        dataType: "json",
                        success: function (data) {
                            var searchArray = [];
                            for (var i = 0; i < data.participants.length; i++) {
                                searchArray[i] = data.participants[i].participant;
                            }
                            response(searchArray);
                        }
                    });
                },
                minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
                select: function (event, ui) {
                    //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
                    //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
                },
                open: function () {
                    //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                    //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
                },
                close: function () {
                    //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                    var projectManagerName = this.value.split('|')[0];
                    var projectManagerId = this.value.split('|')[1];
                    var projectManagerEmail = this.value.split('|')[2];

                    if (projectManagerName.indexOf('undefined') > -1) {
                        document.getElementById('txtProjectManagerName').value = '';
                        document.getElementById('txtProjectManagerId').value = '';
                        document.getElementById('txtProjectManagerEmail').value = '';
                    } else {
                        document.getElementById('txtProjectManagerName').value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                        document.getElementById('txtProjectManagerId').value = projectManagerId;
                        document.getElementById('txtProjectManagerEmail').value = projectManagerEmail;
                    }
                }
            });

            monkeyPatchAutocomplete(); // This customizes the drop down when searching for users in the user text boxes.



        } else if (divSection == 'divArchive') {

            //var e1 = document.getElementById('divConfigurationMasterDiv');
            //e1.style.borderRadius = '20px 0 0 20px';
            //var e1 = document.getElementById('divFunctionalAreas');
            //e1.style.borderRadius = '20px 0 0 20px';

            //displayAlertDialog('bwLastSelectedArchiveScreenRequestType: ' + bwLastSelectedArchiveScreenRequestType);



            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            $('#liWelcome').hide();
            $('#liNewRequest').hide();
            $('#liSummaryReport').hide();
            $('#liConfiguration').hide();
            $('#liHelp').hide();
            $('#liArchive').show();
            var e1 = document.getElementById('divArchiveMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';



            // This is the request type drop down. Create the drop down at the top of the page, and select the last used option!
            // First we load our array.
            var requestTypes = [];
            requestTypes = new Array();
            // Budget Request
            var request = ['budgetrequests', 'Budget Requests', 'selected'];
            requestTypes.push(request);
            // Quote Request
            if (quotingEnabled == true) {
                var request = ['quoterequests', 'Quote Requests', ''];
                requestTypes.push(request);
            }
            // Reimbursement Request
            if (reimbursementRequestsEnabled == true) {
                var request = ['expenserequests', 'Reimbursement Requests', ''];
                requestTypes.push(request);
            }
            // Recurring Expense
            if (recurringExpensesEnabled == true) {
                var request = ['recurringexpenses', 'Recurring Expenses', ''];
                requestTypes.push(request);
            }
            // Participants
            //var request = ['participants', 'Participants', ''];
            //requestTypes.push(request);
            // Now formulate the GUI!
            var html = '';
            if (requestTypes.length == 1) {
                // If there is only one, don't display as a drop down, just as plain text.
                html += '<span style="font-size: 200%;">View <strong>' + requestTypes[0][1] + '</strong></span>';
                document.getElementById('spanArchiveScreenRequestTypeDropDownSection').innerHTML = html;
            } else {
                // There is more than 1, so we have to display as a drop down.
                //html += '<span style="font-size: 200%;">View <strong>';
                html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size:30pt;">';
                html += 'View ';
                html += '<select id="selectArchiveScreenRequestTypeDropDown" style=\'border-color: whitesmoke; color: rgb(38, 38, 38); font-family: "Segoe UI Light","Segoe UI","Segoe",Tahoma,Helvetica,Arial,sans-serif; font-size: 1.25em; font-weight: bold; cursor: pointer;\'>';
                for (var i = 0; i < requestTypes.length; i++) {
                    if (requestTypes[i][0] == bwLastSelectedArchiveScreenRequestType) {
                        // Selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + ' selected >' + requestTypes[i][1] + '</option>';
                    } else {
                        // Not selected
                        html += '<option value="' + requestTypes[i][0] + '" ' + requestTypes[i][2] + '>' + requestTypes[i][1] + '</option>';
                    }
                }
                html += '</select>';
                html += '&nbsp;for&nbsp;<span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span>';
                html += '</span>';

                ////html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">Your currently selected budgeting network: <span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span></span>';




                document.getElementById('spanArchiveScreenRequestTypeDropDownSection').innerHTML = html;
                // Now hook up the change event for the drop down!!
                $('#selectArchiveScreenRequestTypeDropDown').change(function () {
                    var selectedValue = $('#selectArchiveScreenRequestTypeDropDown option:selected').val();
                    bwLastSelectedArchiveScreenRequestType = selectedValue;
                    // Save the selected value back to the database so that it remembers how the participant left things, so it is the same when they come back.
                    var data = [];
                    data = {
                        bwParticipantId: participantId,
                        bwWorkflowAppId: workflowAppId,
                        bwLastSelectedArchiveScreenRequestType: bwLastSelectedArchiveScreenRequestType
                    };
                    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectedarchivescreenrequesttype";
                    $.ajax({
                        url: operationUri,
                        type: "POST", timeout: ajaxTimeout,
                        data: data,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            if (data != 'SUCCESS') {
                                displayAlertDialog(data);
                            } else {
                                //displayAlertDialog('selectedValue: ' + selectedValue);
                                if (selectedValue == 'budgetrequests') {
                                    cmdListAllBudgetRequestsUsingClientDatasetApproach();
                                } else if (selectedValue == 'quoterequests') {
                                    cmdListAllQuoteRequestsUsingClientDatasetApproach();
                                } else if (selectedValue == 'expenserequests') {
                                    cmdListAllReimbursementRequestsUsingClientDatasetApproach();
                                } else if (selectedValue == 'recurringexpenses') {
                                    cmdDisplayArchivePageRecurringExpenses();
                                } else if (selectedValue == 'participants') {
                                    //displayAlertDialog('The functionality to display Participant details is incomplete. Coming soon!');
                                    //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                                    cmdListAllParticipantsUsingClientDatasetApproach();
                                }
                            }
                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error in ios8.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
                        }
                    });
                });
            }


            // These 2 lines are required to display the Archive section the first time around. The change event (above) will do it subsequently when the drop down is changed.
            var selectedValue = $('#selectArchiveScreenRequestTypeDropDown option:selected').val();
            bwLastSelectedArchiveScreenRequestType = selectedValue;

            // This section will be changed. Not happy with it yet!
            //var html = '';
            //html += '<span style="font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 1.77em;">Your currently selected budgeting network: <span style="font-weight:bold;white-space:nowrap;">' + workflowAppTitle + '</span></span>';
            //html += '<br /><br />';
            //if (recurringExpensesEnabled == true) {
            //    html += '<input type="button" value="View budget requests" onclick="cmdListAllBudgetRequestsUsingClientDatasetApproach();" style="cursor:pointer;" />&nbsp;&nbsp<input type="button" value="View recurring expenses" onclick="cmdDisplayArchivePageRecurringExpenses();" style="cursor:pointer;" />&nbsp;&nbsp';
            //}
            //html += '<input type="button" disabled value="View trashbin contents" onclick="cmdDisplayArchivePageTrashbinContents();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" disabled value="View extended information" onclick="cmdDisplayArchivePageExtendedInformation();" style="cursor:pointer;" /><br /><br />';
            //$('#spanArchivePageTopTitle').html(html);
            //


            GetWorkflowAppConfigurationData9 = $.Deferred();
            GetWorkflowAppConfigurationData9
                .done(function () {
                    //displayAlertDialog('DONE');
                    //selectArchivePageFilterDropDown_change();
                    //var selectedValue = $('#selectArchivePageFilterDropDown option:selected').val();
                    if (!bwLastSelectedArchiveScreenRequestType) bwLastSelectedArchiveScreenRequestType = 'budgetrequests';
                    if (bwLastSelectedArchiveScreenRequestType == 'budgetrequests') {
                        cmdListAllBudgetRequestsUsingClientDatasetApproach();
                    } else if (bwLastSelectedArchiveScreenRequestType == 'quoterequests') {
                        //displayAlertDialog('The functionality to display Quote Requests is incomplete. Coming soon!');
                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                        cmdListAllQuoteRequestsUsingClientDatasetApproach();
                    } else if (bwLastSelectedArchiveScreenRequestType == 'expenserequests') {
                        //displayAlertDialog('The functionality to display Reimbursement Requests is incomplete. Coming soon!');
                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                        cmdListAllReimbursementRequestsUsingClientDatasetApproach();
                    } else if (bwLastSelectedArchiveScreenRequestType == 'recurringexpenses') {
                        cmdDisplayArchivePageRecurringExpenses();
                    } else if (selectedValue == 'participants') {
                        //displayAlertDialog('The functionality to display Participant details is incomplete. Coming soon!');
                        //populateStartPageItem('divArchive'); // Resets back to Budget Requests or now until we get this hooked up!
                        cmdListAllParticipantsUsingClientDatasetApproach();
                    }

                    renderLeftButtons('divArchivePageLeftButtons');
                })
                .fail(function () {
                    displayAlertDialog('Error in android.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
                });
            loadWorkflowAppConfigurationDetails9();




        }



            //else if (divSection == 'divMyStuff') {
            ////$('#bwStartPageAccordion').show();
            //$('#bwQuickLaunchMenuTd').css({ width: '0' }); // This gets rid of the jumping around.
            ////$('#bwQuickLaunchMenu').hide();
            //$('#liWelcome').hide();
            //$('#liNewRequest').hide();
            //$('#liSummaryReport').hide();
            //$('#liConfiguration').hide();
            //$('#liHelp').hide();
            //$('#liMyStuff').show();

            //var e1 = document.getElementById('divMyStuffMasterDiv');
            //e1.style.borderRadius = '20px 0 0 20px';

            //cmdListPendingBudgetRequests();
            //cmdListAllWorkflowTasks();
            //cmdListAllBudgetRequests();
            //cmdListAllParticipants();
            //cmdListAllInvitations();
            //cmdListAllTenants();
            //cmdListAllWorkflowApps();
            //cmdListAllFunctionalAreas();
            //cmdListAllDepartments();

            //displayConnectedWorkflows();
            //} else if (divSection == 'divSummaryReport') {
        else if (divSection == 'divSummaryReport') {
            //$('#bwStartPageAccordion').show();
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            //$('#bwQuickLaunchMenu').hide();
            $('#liWelcome').hide();
            $('#liNewRequest').hide();
            $('#liHelp').hide();
            $('#liArchive').hide();
            $('#liConfiguration').hide();
            $('#liSummaryReport').show();
            var e1 = document.getElementById('divSummaryReportMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';


            if (quotingEnabled == true) {
                // First we have to add the checkbox to the DOM.
                $('#divBudgetRequestsOrQuotes').html('<label for="budgetRequestsOrQuotes"></label><input type="checkbox" name="budgetRequestsOrQuotes" id="budgetRequestsOrQuotes" />');
                // Then we attach the switchbutton.
                var brOrQuotesOptions = {
                    show_labels: true,         // Should we show the on and off labels?
                    labels_placement: "both",  // Position of the labels: "both", "left" or "right"
                    on_label: "<span style='font-size:30pt;'>Quotes</span>",            // Text to be displayed when checked
                    off_label: "<span style='font-size:30pt;'>Budget<br />Requests</span>",          // Text to be displayed when unchecked
                    width: 200,                 // Width of the button in pixels //50
                    height: 88,                // Height of the button in pixels //22
                    button_width: 96,         // Width of the sliding part in pixels //24
                    clear_after: null         // Override the element after which the clearing div should be inserted 
                };
                $("input#budgetRequestsOrQuotes").switchButton(brOrQuotesOptions);
                // Then we hook up the event.
                $('#budgetRequestsOrQuotes').change(function () {

                    // displayAlertDialog('checking financialOrParticipantSummary2');


                    if ($('#budgetRequestsOrQuotes').is(':checked')) {

                        if (!$('#financialOrParticipantSummary').is(':checked')) {
                            renderFinancialSummary9(true);
                        } else if ($('#financialOrParticipantSummary').is(':checked')) {
                            renderParticipantSummary(true);
                        } else {
                            displayAlertDialog('financialOrParticipantSummary is in an invalid state.');
                        }
                    } else if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                        if (!$('#financialOrParticipantSummary').is(':checked')) {
                            renderFinancialSummary9(false);
                        } else if ($('#financialOrParticipantSummary').is(':checked')) {
                            renderParticipantSummary(false);
                        } else {
                            displayAlertDialog('financialOrParticipantSummary is in an invalid state.');
                        }
                    } else {
                        displayAlertDialog('budgetRequestsOrQuotes is in an invalid state.');
                    }
                });
            } else {
                $('#divBudgetRequestsOrQuotes').empty();
            }

            //loadWorkflowAppConfigurationDetailsForBwm(); // Todd: Just commented this 6-29-16 3-20am ast.
            //loadWorkflowAppConfigurationDetails9();

            GetWorkflowAppConfigurationData9 = $.Deferred();
            GetWorkflowAppConfigurationData9
                .done(function () {
                    //displayAlertDialog('DONE');
                    renderLeftButtons('divSummaryPageLeftButtons');

                    // Set the year drop down. HARDCODED!!!
                    // IF MORE THAN 1 YEAR: <select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>
                    var html = '';
                    html += new Date().getFullYear().toString();
                    document.getElementById('spanSummaryReportYear').innerHTML = html;

                    //displayAlertDialog('checking financialOrParticipantSummary3');
                    //document.getElementById('financialOrParticipantSummary')[0].removeAttribute('checked'); //('#financialOrParticipantSummary').attr('checked', '');

                    if (!$('#financialOrParticipantSummary').is(':checked')) {
                        // "Financial Summary" has been selected.
                        //displayAlertDialog('financialSummary3');
                        if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                            //displayAlertDialog('renderFinancialSummary9(false);');
                            renderFinancialSummary9(false);
                        } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                            displayAlertDialog('renderFinancialSummary9(true);');
                            renderFinancialSummary9(true);
                        }
                    } else if ($('#financialOrParticipantSummary').is(':checked')) {
                        // "Participant Summary" has been selected.
                        //displayAlertDialog('participantSummary3');
                        if (!$('#budgetRequestsOrQuotes').is(':checked')) {
                            renderParticipantSummary(false);
                        } else if ($('#budgetRequestsOrQuotes').is(':checked')) {
                            renderParticipantSummary(true);
                        }
                    }
                })
                .fail(function () {
                    displayAlertDialog('Error in android.js.populateStartPageItem(divSummaryReport)', 'GetWorkflowAppConfigurationData9.fail()');
                });
            loadWorkflowAppConfigurationDetails9();





        } else if (divSection == 'divHelp') {
            //$('#bwStartPageAccordion').show();
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            //$('#bwQuickLaunchMenu').hide();
            $('#liWelcome').hide();
            $('#liNewRequest').hide();
            $('#liArchive').hide();
            $('#liSummaryReport').hide();
            $('#liConfiguration').hide();
            $('#liHelp').show();
            var e1 = document.getElementById('divHelpMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';
            //displayConnectedWorkflows();

            renderLeftButtons('divHelpPageLeftButtons');
        } else if (divSection == 'divConfiguration') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            $('#liWelcome').hide();
            $('#liNewRequest').hide();
            $('#liArchive').hide();
            $('#liSummaryReport').hide();
            $('#liHelp').hide();
            $('#liConfiguration').show();
            var e1 = document.getElementById('divConfigurationMasterDiv');
            e1.style.borderRadius = '120px 0 0 120px';
            var e1 = document.getElementById('divFunctionalAreas');
            e1.style.borderRadius = '120px 0 0 120px';

            generateConfigurationLeftSideMenu();

            renderLeftButtons('divConfigurationPageLeftButtons');

            //cmdSecondTopBarExpandCollapse('spanSecondTopBarExpandCollapse'); // This displays the menu from the + (plus) sign.






        } else if (divSection == 'divAddAFunctionalArea') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            $('#spanFunctionalAreasTopBarTextContentsIos8').text('Add a financial area:'); // Change the title of the section.
            $('#btnFunctionalAreaDelete').hide();
            $('#divFunctionalAreaSection').html($('#divFunctionalAreaTemplate').html()); // Display the functional area form.
            //$('span[xd\\:binding = "my:FunctionalAreaTitle"]')[0].focus(); // Focus on the title field.
            //generateFunctionalAreasApproverDataEntryFields();

            $('#txtFunctionalAreaId').empty; // This will make sure it is a PUT operation, which means we create a new functional area rTHER THAN UPDATING AN EXISTING ONE.

            // Set the active button with out dotted line outline etc.
            //$('#divMenuMasterDivAddAFunctionalArea').css({
            //    'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
            //});
            document.getElementById('divMenuMasterDivAddAFunctionalArea').className = 'divLeftButtonSelectedIos8';

            $('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header right-rounder bar in case it was hidden.

            hookUpThePeoplePickers(); // This hooks up the Approver #1 and #2 people pickers.
            var e1 = document.getElementById('divFunctionalAreas');
            e1.style.borderRadius = '120px 0 0 120px';
        } else if (divSection == 'divFunctionalAreas') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.

            //var e1 = document.getElementById('divFunctionalAreas');
            //e1.style.borderRadius = '20px 0 0 20px';
            //loadWorkflowAppConfigurationDetails9();

            //generateFunctionalAreasListButtons();


            GetWorkflowAppConfigurationData9 = $.Deferred();
            GetWorkflowAppConfigurationData9
                .done(function () {
                    //displayAlertDialog('DONE');
                    generateFunctionalAreasListButtons();
                })
                .fail(function () {
                    displayAlertDialog('Error in android.js.populateStartPageItem(divFunctionalAreas)', 'GetWorkflowAppConfigurationData9.fail()');
                });
            loadWorkflowAppConfigurationDetails9();

            // GetWorkflowAppConfigurationData9.resolve(); // Callback.


        } else if (divSection == 'divParticipants') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            //$('#divFunctionalAreasMasterDiv').text('Participants'); // Change the title of the section.
            //$('#btnFunctionalAreaDelete').hide();
            //$('#divFunctionalAreaSection').html(''); //$('#divFunctionalAreaTemplate').html()); // Display the functional area form.

            //renderConfigureParticipantsScreen();
            //var e1 = document.getElementById('divParticipants');
            //e1.style.borderRadius = '20px 0 0 20px';

            generateParticipantsListButtons();


        }
            //else if (divSection == 'divDepartments') {
            //    $('#bwQuickLaunchMenuTd').css({
            //        width: '0'
            //    }); // This gets rid of the jumping around.
            //    var data = {
            //    };
            //    $.ajax({
            //        url: appweburl + "/bwdepartments",
            //        type: "DELETE",
            //        contentType: 'application/json',
            //        data: JSON.stringify(data),
            //        success: function (data) {
            //            $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //            if (data.length > 0) {
            //                //    var html = '';
            //                //    html += '<input ';
            //                //    html += '';
            //                //    $('#spanDepartmentTitle').append()

            //                //} else {
            //                //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //                $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
            //                $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
            //            }
            //        },
            //        error: function (data, errorCode, errorMessage) {
            //            displayAlertDialog('Error in ios8.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
            //        }
            //    });
            //    var e1 = document.getElementById('divFunctionalAreas');
            //    e1.style.borderRadius = '20px 0 0 20px';
            //    generateDepartmentsListButtons();
            //} //else if (divSection == 'divWorkflows') {
            //$('#bwQuickLaunchMenuTd').css({ width: '0' }); // This gets rid of the jumping around.
            //var data = {
            //};
            //$.ajax({
            //    url: appweburl + "/bwdepartments",
            //    type: "DELETE",
            //    contentType: 'application/json',
            //    data: JSON.stringify(data),
            //    success: function (data) {
            //        $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //        if (data.length > 0) {
            //            //    var html = '';
            //            //    html += '<input ';
            //            //    html += '';
            //            //    $('#spanDepartmentTitle').append()

            //            //} else {
            //            //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //            $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
            //            $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        displayAlertDialog('Error in ios8.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
            //    }
            //});
            //var e1 = document.getElementById('divFunctionalAreas');
            //e1.style.borderRadius = '20px 0 0 20px';
            //generateWorkflowsPage();
        else if (divSection == 'divBehavior') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.
            //var data = {
            //};
            //$.ajax({
            //    url: appweburl + "/bwdepartments",
            //    type: "DELETE",
            //    contentType: 'application/json',
            //    data: JSON.stringify(data),
            //    success: function (data) {
            //        $('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //        if (data.length > 0) {
            //            //    var html = '';
            //            //    html += '<input ';
            //            //    html += '';
            //            //    $('#spanDepartmentTitle').append()

            //            //} else {
            //            //$('#spanDepartmentTitle').text('Procurement'); //data[0].bwDepartmentTitle);
            //            $('#txtBwDepartmentUserName').val(data[0].bwDepartmentUserName);
            //            $('#txtBwDepartmentUserId').val(data[0].bwDepartmentUserId);
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        displayAlertDialog('Error in ios8.js.populateStartPageItem(divDepartments):' + errorCode + ', ' + errorMessage);
            //    }
            //});
            //var e1 = document.getElementById('divFunctionalAreas');
            //e1.style.borderRadius = '20px 0 0 20px';
            generateBehaviorPage();
        } else if (divSection == 'divWorkflowSettings') {
            $('#bwQuickLaunchMenuTd').css({
                width: '0'
            }); // This gets rid of the jumping around.

            generateWorkflowSettingsPage();
        }


        // TODD: THIS WORKS A BIT WEIRD< MAYBE SHOULD GO ELSE WHERE!!! it is also in renderWelcomeScreen(). 9-4-16
        // This zooms the screen when the user first navigates to the website! More about this in the Budget Workflow Manager codebase.
        //if (navigator.userAgent.match(/iPhone/i)) {
        //    $('#bwMyPage').animate({ 'zoom': 3 }, 400);
        //}

    } catch (e) {
        displayAlertDialog('Error in android.js.populateStartPageItem(' + divSection + ')' + e.message + ', ' + e.stack);
    }
}

// TODD: INCLUDE THIS IN THE LEGALESE - MIT LICENSES!!!
/*
 *    Copyright (c) 2010 Tobias Schneider
 *    This script is freely distributable under the terms of the MIT license.
 */

function renderBarcodeDetails() {
    var UPC_SET = {
        "3211": '0',
        "2221": '1',
        "2122": '2',
        "1411": '3',
        "1132": '4',
        "1231": '5',
        "1114": '6',
        "1312": '7',
        "1213": '8',
        "3112": '9'
    };

    var getBarcodeFromImage = function (imgOrId) {

        //displayAlertDialog('getBarcodeFromImage');

        var doc = document,
            img = "object" == typeof imgOrId ? imgOrId : doc.getElementById(imgOrId),
            canvas = doc.createElement("canvas"),
            width = img.width,
            height = img.height,
            ctx = canvas.getContext("2d"),
            spoints = [1, 9, 2, 8, 3, 7, 4, 6, 5],
            numLines = spoints.length,
            slineStep = height / (numLines + 1),
            round = Math.round;
        canvas.width = width;
        canvas.height = height;
        ctx.drawImage(img, 0, 0);
        while (numLines--) {
            console.log(spoints[numLines]);
            var pxLine = ctx.getImageData(0, slineStep * spoints[numLines], width, 2).data,
                sum = [],
                min = 0,
                max = 0;
            for (var row = 0; row < 2; row++) {
                for (var col = 0; col < width; col++) {
                    var i = ((row * width) + col) * 4,
                        g = ((pxLine[i] * 3) + (pxLine[i + 1] * 4) + (pxLine[i + 2] * 2)) / 9,
                        s = sum[col];
                    pxLine[i] = pxLine[i + 1] = pxLine[i + 2] = g;
                    sum[col] = g + (undefined == s ? 0 : s);
                }
            }
            for (var i = 0; i < width; i++) {
                var s = sum[i] = sum[i] / 2;
                if (s < min) { min = s; }
                if (s > max) { max = s; }
            }
            var pivot = min + ((max - min) / 2),
                bmp = [];
            for (var col = 0; col < width; col++) {
                var matches = 0;
                for (var row = 0; row < 2; row++) {
                    if (pxLine[((row * width) + col) * 4] > pivot) { matches++; }
                }
                bmp.push(matches > 1);
            }
            var curr = bmp[0],
                count = 1,
                lines = [];
            for (var col = 0; col < width; col++) {
                if (bmp[col] == curr) { count++; }
                else {
                    lines.push(count);
                    count = 1;
                    curr = bmp[col];
                }
            }
            var code = '',
                bar = ~~((lines[1] + lines[2] + lines[3]) / 3),
                u = UPC_SET;
            for (var i = 1, l = lines.length; i < l; i++) {
                if (code.length < 6) { var group = lines.slice(i * 4, (i * 4) + 4); }
                else { var group = lines.slice((i * 4) + 5, (i * 4) + 9); }
                var digits = [
                    round(group[0] / bar),
                    round(group[1] / bar),
                    round(group[2] / bar),
                    round(group[3] / bar)
                ];
                code += u[digits.join('')] || u[digits.reverse().join('')] || 'X';
                if (12 == code.length) { return code; break; }
            }
            if (-1 == code.indexOf('X')) { return code || false; }
        }
        return false;
    }

    var result = getBarcodeFromImage('barcodeImage1');
    //displayAlertDialog('result: ' + result);
    return result;
};



function renderNewSupplementalBudgetRequestForm(budgetRequestId, functionalAreaId, pmAccountId, brTitle) {
    // Generate and store the GUID on the page. This is necessary so that the attachments section works ok (among other things).
    var supplementalRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });

    // We must clear any old form data so that there is no confusion (duplicate elements specifically BudgetRequestId). Todd: This is a best practice, implement throughout.
    document.getElementById('myxml').innerHTML = '';

    var html = '';
    html += '<table style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 654px" class="xdFormLayout">';
    html += '  <colgroup>';
    html += '    <col style="WIDTH: 654px" />';
    html += '  </colgroup>';
    html += '  <tbody>';
    html += '    <tr class="xdTableContentRow">';
    html += '      <td style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-RIGHT: #d8d8d8 1pt solid; VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt solid; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: #d8d8d8 1pt solid; PADDING-RIGHT: 0px" class="xdTableContentCell">';
    html += '        <div />';
    html += '        <!--<img src="../Lists/LogoImage/CompanyLogo.png" style="HEIGHT: 96px; WIDTH: 96px" />-->';
    html += '        <table>';
    html += '        <!--<tr><td>&nbsp;</td></tr>-->';
    html += '          <tr><td>&nbsp;</td></tr>';
    html += '          <tr>';
    html += '            <td width="5px"></td>';
    html += '            <td><!--<img src="../Lists/LogoImage/CompanyLogo.png" style="HEIGHT: 96px; WIDTH: 96px" />--></td>';
    html += '            <td><span id="spanNewRequestFormTitle"><br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong></span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;font-size:150%;">for ' + brTitle + '<br /><br /></span></span></td>';
    html += '          </tr>';
    html += '        </table>';
    html += '        <div align="right">';
    html += '        <span class="xdlabel">';
    html += '          <em />';
    html += '        </span>';
    html += '        </div>';
    html += '        <div align="right">';
    html += '          <span class="xdlabel">';
    html += '            <em>';
    //html += '            <font style="FONT-SIZE: 11pt">';
    html += '            <span class="spanH3">';
    html += '            <!--<a xd:disableEditing="yes" href="http://sp2010/budget/_layouts/help.aspx?Lcid=1033&amp;amp;Key=HelpHome&amp;amp;ShowNav=true">';
    html += '              <img setWidth="24" setHeight="22" src="30837E49.png" alt="SharePoint-Help-Question-Mark.png" style="BORDER-TOP: #000080 1.5pt; HEIGHT: 22px; BORDER-RIGHT: #000080 1.5pt; BORDER-BOTTOM: #000080 1.5pt; BORDER-LEFT: #000080 1.5pt; WIDTH: 24px" class="ms-rtePosition-4" />';
    html += '            </a>-->';
    html += '            Complete the form then click the "Submit" button.';
    //html += '            </font>';
    html += '            </span>';
    html += '            </em>';
    html += '          </span>';
    html += '        </div>';
    html += '        <div align="right">';
    html += '          <span class="xdlabel" id="spanNewBudgetRequestPageButtons">';
    html += '            <!-- <input tabindex="0" xd:xctname="Button" xd:ctrlid="CTRL81" value="Submit" type="button" style="margin: 1px" class="langFont" title="Click here to Submit the request, or click the Help icon in the top right corner of this screen..." /> -->';
    html += '            <!--<input type="button" name="startWorkflowButton" value="Submit" onclick="cmdCreateBudgetRequestAndStartWorkflow();" title="Click here to Submit the request." style="MARGIN: 1px; WIDTH: 200px;font-size: 20pt;cursor:pointer;" />-->';
    //html += '            <button name="startWorkflowButton" id="startWorkflowButton" onclick="cmdCreateBudgetRequestAndStartWorkflow();" class="BwButton200" title="Click here to Submit the request.">Submit</button>';

    html += '            <button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + budgetRequestId + '\', \'' + supplementalRequestId + '\', \'' + functionalAreaId + '\', \'' + pmAccountId + '\');" class="BwButton200" title="Click here to Submit the supplemental request.">Submit</button>';
    html += '            &nbsp;';
    html += '            <!--<input type="button" value="Cancel" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" style="MARGIN: 1px; WIDTH: 200px;font-size: 20pt;cursor:pointer;" />-->';
    html += '            <button onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200">Cancel</button>';
    html += '            &nbsp;';
    html += '          </span>';
    html += '        </div>';
    html += '        <div align="right">';
    html += '          &nbsp;';
    html += '        </div>';
    html += '        <div align="center">';
    html += '          <span class="xdlabel" />';
    html += '          <span style="BORDER-TOP: #dcdcdc 1pt; BORDER-RIGHT: #dcdcdc 1pt; WHITE-SPACE: nowrap; BORDER-BOTTOM: #dcdcdc 1pt; COLOR: #ff0000; TEXT-ALIGN: right; BORDER-LEFT: #dcdcdc 1pt; WIDTH: 100%" tabindex="-1" xd:binding="my:GlobalError" xd:xctname="PlainText" xd:ctrlid="CTRL115" xd:disableediting="yes" hidefocus="1" class="xdTextBox" title="" />';
    html += '        </div>';
    html += '        <div align="center">';
    html += '          <span class="xdlabel" />';
    html += '        </div>';
    html += '    <div align="center">';
    html += '        <table class="xdFormLayout" style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 652px">';
    html += '            <!-- original was  WIDTH: 652px had changed to 98% for some reason...-->';
    html += '            <colgroup>';
    html += '                <col style="WIDTH: 98%" /> <!-- was style="WIDTH: 652px"-->';
    html += '            </colgroup>';
    html += '            <tbody>';
    html += '                <tr style="MIN-HEIGHT: 4px" class="xdTableContentRow">';
    html += '                    <td valign="top" style="BORDER-TOP: #d8d8d8 1pt solid; BORDER-BOTTOM: #d8d8d8 1pt" class="xdTableContentCell">';
    html += '                        <div>';
    html += '                            <table class="xdFormLayout xdTableStyleTwoCol" style="BORDER-TOP-STYLE: none; WORD-WRAP: break-word; BORDER-LEFT-STYLE: none; BORDER-COLLAPSE: collapse; TABLE-LAYOUT: fixed; BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; WIDTH: 649px">';
    html += '                                <colgroup>';
    html += '                                    <col style="WIDTH: 169px" />';
    html += '                                    <col style="WIDTH: 480px" />';
    html += '                                </colgroup>';
    html += '                                <tbody valign="top">';
    html += '                                    <tr class="xdTableOffsetRow">';
    html += '                                        <td class="xdTableOffsetCellLabel" style="text-align:left; BORDER-TOP: #d8d8d8 1pt; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px">';
    html += '                                            <font color="#000000">';
    html += '                                                <span class="xdlabel" />';
    html += '                                                <span class="xdlabel">Description:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
    html += '                                            </font>';
    html += '                                        </td>';
    html += '                                        <td style="BORDER-TOP: #d8d8d8 1pt; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    html += '                                            <div>';
    html += '                                                <input type="text" id="strProjectTitle" style="WIDTH: 70%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" /> <!-- was 2.77em -->';
    html += '                                                <!--<textarea id="strProjectTitle" rows="1" style="WIDTH: 97%; HEIGHT: 18px;"></textarea>-->';
    html += '                                           </div>';
    html += '                                       </td>';
    html += '                                    </tr>';
    //html += '                                    <!--<tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <span class="xdlabel">';
    //html += '                                                <font color="#000000">Category:</font>';
    //html += '                                            </span>';
    //html += '                                        </td>';
    //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <div>';
    //html += '                                                <select id="ddlCategory" name="ddlCategory" tabindex="0" size="1" style="WIDTH: 100%" class="xdComboBox xdBehavior_Select" />';
    //html += '                                            </div>';
    //html += '                                        </td>';
    //html += '                                    </tr>-->';
    html += '                                    <tr class="xdTableOffsetRow">';
    html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    html += '                                            <span id="spanNewRequestDetailsLabel"><span class="xdlabel">Justification details:</span></span>';
    html += '                                        </td>';
    html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    html += '                                            <div>';
    html += '                                                <textarea id="strBriefDescriptionOfProject" rows="3" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;"></textarea>';
    html += '                                                <!--<span style="WORD-WRAP: break-word; HEIGHT: 60px; WHITE-SPACE: normal; TEXT-ALIGN: left; OVERFLOW-X: auto; OVERFLOW-Y: auto; WIDTH: 451px" tabindex="0" xd:datafmt="" xd:binding="my:Brief_Description_of_Project" xd:xctname="PlainText" xd:ctrlid="CTRL83" contenteditable="true" hidefocus="1" class="xdTextBox xdBehavior_Formatting" title="" />-->';
    html += '                                            </div>';
    html += '                                        </td>';
    html += '                                    </tr>';
    html += '                                    <tr class="xdTableOffsetRow">';
    html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    html += '                                            <span class="xdlabel">';
    html += '                                                <span class="xdlabel">';
    html += '                                                    <font color="#000000">Requested Amount:</font>&nbsp;<span style="color:red;font-size:medium;">*</span>';
    html += '                                                </span>';
    html += '                                            </span>';
    html += '                                        </td>';
    html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    html += '                                            <div>';
    html += '                                                <input type="text" id="dblRequestedCapital" onblur="formatRequestedCapital_InitBudgetRequest();" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: right;" />';
    html += '                                            </div>';
    html += '                                        </td>';
    html += '                                    </tr>';
    //html += '                                    <!--<tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <span class="xdlabel">Requested Expense:</span>';
    //html += '                                        </td>';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <div>';
    //html += '                                                <input type="text" id="dblRequestedExpense" onblur="formatRequestedExpense_InitBudgetRequest();" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 40pt;TEXT-ALIGN: right;" />';
    //html += '                                            </div>';
    //html += '                                        </td>';
    //html += '                                    </tr>-->';





    //html += '                                    <tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <span id="spanRequestForm_ManagerTitle" class="xdlabel"></span><span class="xdlabel">:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
    //html += '                                        </td>';
    //html += '                                        <td style="white-space:nowrap;text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px;" class="xdTableOffsetCellComponent">';
    //html += '                                            <!--<div id="peoplePicker"></div>-->';
    //html += '                                            <input id="txtProjectManagerName" title="Type the first name. This is the person who does the initial approval." style="WIDTH: 85%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;" /><input id="txtProjectManagerId" style="display:none;" /><input id="txtProjectManagerEmail" style="display:none;" />';
    //html += '                                            <!--👥-->';
    //html += '                                            <img src="images/addressbook-icon35x35.png" style="width:35px;height:35px;vertical-align:text-bottom;cursor:pointer;" onclick="cmdDisplayPeoplePickerDialog(\'txtProjectManagerName\', \'txtProjectManagerId\', \'txtProjectManagerEmail\');" />';
    //html += '                                            <!--<span style="font-size:x-small;vertical-align:bottom;padding-left:10px;color:gray;"></span>-->';
    //html += '                                        </td>';
    //html += '                                    </tr>';
    //html += '                                    <tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <span class="xdlabel">';
    //html += '                                                <span class="xdlabel">Year:</span>';
    //html += '                                            </span>';
    //html += '                                        </td>';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <div>';
    //html += '                                                <select id="ddlYear" onchange="cmdDdlYearSelectionChanged();" tabindex="0" xd:postbackmodel="always" xd:boundprop="value" xd:binding="my:Year" xd:xctname="dropdown" xd:ctrlid="CTRL104" size="1" class="xdComboBox xdBehavior_Select" style="WIDTH: 50%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: right;"></select>';
    //html += '                                            </div>';
    //html += '                                        </td>';
    //html += '                                    </tr>';
    //html += '                                    <tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <div>';
    //html += '                                                <span class="xdlabel">';
    //html += '                                                    <span class="xdlabel">Financial Area:</span>';
    //html += '                                                </span>';
    //html += '                                            </div>';
    //html += '                                        </td>';
    //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <div>';
    //html += '                                                <select id="ddlFunctionalArea" name="ddlFunctionalArea" tabindex="0" value="" size="1" style="WIDTH: 97%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;" class="xdComboBox xdBehavior_Select" title="" />';
    //html += '                                            </div>';
    //html += '                                        </td>';
    //html += '                                    </tr>';
    //html += '                                    <tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                            <span id="spanNewRequestStartDateLabel" style="white-space:nowrap;"><span class="xdlabel" style="white-space:nowrap;">Estimated Start Date:</span></span>';
    //html += '                                        </td>';
    //html += '                                        <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <!--<SharePoint:DateTimeControl id="dtiEstimatedStartDate" DatePickerFrameUrl="../_layouts/15/iframe.aspx" LocaleId="1033" DateOnly="true" runat="server" />-->';
    //html += '                                           <input type="text" id="dtEstimatedStartDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;">';
    //html += '                                        </td>';
    //html += '                                    </tr>';
    //html += '                                    <tr class="xdTableOffsetRow">';
    //html += '                                        <td style="text-align:left; VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 22px; BORDER-LEFT: #d8d8d8 1pt; PADDING-RIGHT: 5px" class="xdTableOffsetCellLabel">';
    //html += '                                                <span id="spanNewRequestEndDateLabel" style="white-space:nowrap;"><span class="xdlabel" style="white-space:nowrap;">Estimated End Date:</span></span>';
    //html += '                                        </td>';
    //html += '                                       <td style="VERTICAL-ALIGN: top; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
    //html += '                                            <!--<SharePoint:DateTimeControl id="dtiEstimatedEndDate" DatePickerFrameUrl="../_layouts/15/iframe.aspx" LocaleId="1033" DateOnly="true" runat="server" />-->';
    //html += '                                            <input type="text" id="dtEstimatedEndDate" style="WIDTH: 60%;font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif;color: #262626;font-size: 20pt;TEXT-ALIGN: left;">';
    //html += '                                        </td>';
    //html += '                                    </tr>';

    if (enableNewRequestAttachments == true) {
        html += '                                    <tr id="trNewRequestAttachmentsSection" class="xdTableOffsetRow">';
        html += '                                        <td class="xdTableOffsetCellLabel" valign="top" style="text-align:left; BORDER-BOTTOM: #d8d8d8 1pt; BORDER-LEFT: #d8d8d8 1pt; BACKGROUND-COLOR: #ffffff">';
        html += '                                            <span class="xdlabel">Attachments:</span>';
        html += '                                        </td>';
        html += '                                        <td style="VERTICAL-ALIGN: top; BORDER-BOTTOM: #d8d8d8 1pt; PADDING-BOTTOM: 4px; PADDING-TOP: 4px; PADDING-LEFT: 5px; PADDING-RIGHT: 22px" class="xdTableOffsetCellComponent">';
        html += '                                            <div>';
        html += '                                                <div xd:widgetindex="0" tabindex="-1" xd:xctname="RepeatingSection" xd:ctrlid="CTRL90" align="left" style="MARGIN-BOTTOM: 0px; WIDTH: 100%" class="xdRepeatingSection xdRepeating" title="">';
        html += '                                                    <div>';
        html += '                                                        <!--<span tabindex="0" tabstop="true" xd:boundprop="xd:inline" xd:binding="my:CapexAttachment" xd:xctname="FileAttachment" xd:ctrlid="CTRL91" style="HEIGHT: 30px; WIDTH: 161px" hidefocus="1" class="xdFileAttachment" />-->';
        html += '                                                        <input id="inputFile" type="file" onchange="uploadAttachment(\'attachments\');" style="width: 75%;" />';
        html += '                                                    </div>';
        html += '                                                </div>';
        html += '                                                <p id="newrequestattachments"></p>';
        html += '                                            </div>';
        html += '                                        </td>';
        html += '                                    </tr>';
    }

    html += '<span id="BudgetRequestId" style="display: none; visibility: hidden;" xd:binding="my:BudgetRequestId"></span>'; // This is where we store the guid which is generated prior to this form being displayed. 

    html += '<tr>';
    html += '  <td>';
    html += '&nbsp;';
    html += '';
    html += '';
    html += '';
    html += '';
    html += '  </td>';
    html += '</tr>';


    html += '                                </tbody>';
    html += '                            </table>';
    html += '                        </div>';
    html += '                    </td>';
    html += '                </tr>';
    html += '            </tbody>';
    html += '        </table>';
    html += '   </div>';
    html += '</td>';
    html += '</tr>';
    html += '</tbody>';
    html += '</table>';


    document.getElementById('budgetrequestform').innerHTML = html;

    // Generate and store the GUID on the page. This is necessary so that the attachments section works ok (among other things).
    //var supplementalRequestId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    //    return v.toString(16);
    //});
    document.getElementById('BudgetRequestId').innerHTML = supplementalRequestId;

    displayAlertDialog('ios8.js.renderNewSupplementalBudgetRequestForm. supplementalRequestId: ' + supplementalRequestId);

    //populateFunctionalAreas();

    // Populate the year drop-down

    // ALTER THE NEW REQUEST FORM ACCORDING TO THE CONFIGURATION SETTINGS.

    // This is a supplemental request for budget request _reference, which is a guid.
    //var html = '';
    //html += '<br /><span style="font-size:200%;">&nbsp;&nbsp;&nbsp;Supplemental <strong>Budget Request</strong><br /><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-style:italic;">for ' + _reference + ' (xxxx)</span></span></span>';
    //document.getElementById('spanNewRequestFormTitle').innerHTML = html;
    //var html = '';
    //html += '';
    //html += '<button id="startWorkflowButton" onclick="cmdCreateSupplementalBudgetRequestAndStartWorkflow(\'' + _reference + '\');" class="BwButton200" title="Click here to Submit the supplemental request.">Submit</button>';
    //html += '&nbsp;<button onclick="populateStartPageItem(\'divWelcome\', \'\', \'\');" class="BwButton200">Cancel</button>';
    //html += '&nbsp;';
    //document.getElementById('spanNewBudgetRequestPageButtons').innerHTML = html;


    // Set the manager title.
    //$('#spanRequestForm_ManagerTitle').html(newBudgetRequestManagerTitle);
    // Set if the details are required.
    if (requireRequestDetails == true) {
        document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
    } else {
        document.getElementById('spanNewRequestDetailsLabel').innerHTML = '<span class="xdlabel">Justification details:</span>';
    }
    //// Set if the dates are required.
    //if (requireStartEndDates == true) {
    //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Estimated Start Date:&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
    //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel" style="white-space:nowrap;">Estimated End Date:&nbsp;</span><span style="color:red;font-size:medium;">*</span>';
    //} else {
    //    document.getElementById('spanNewRequestStartDateLabel').innerHTML = '<span class="xdlabel">Estimated Start Date:</span>';
    //    document.getElementById('spanNewRequestEndDateLabel').innerHTML = '<span class="xdlabel">Estimated End Date:</span>';
    //}
    //// Set if the attachments are allowed.
    //if (enableNewRequestAttachments == true) {
    //    $('#trNewRequestAttachmentsSection').show();
    //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>&nbsp;<span style="color:red;font-size:medium;">*</span>';
    //} else {
    //    $('#trNewRequestAttachmentsSection').hide();
    //    //document.getElementById('trNewRequestAttachmentsSection').innerHTML = '<span class="xdlabel">Attachments:</span>';
    //}
    // Now we can hook up the Participant text box for autocomplete.
    //$("#txtProjectManagerName").autocomplete({
    //    source: function (request, response) {
    //        //weburl = _spPageContextInfo.siteAbsoluteUrl;
    //        $.ajax({
    //            url: appweburl + "/workflow/" + workflowAppId + "/participants/" + request.term,
    //            dataType: "json",
    //            success: function (data) {
    //                var searchArray = [];
    //                for (var i = 0; i < data.participants.length; i++) {
    //                    searchArray[i] = data.participants[i].participant;
    //                }
    //                response(searchArray);
    //            }
    //        });
    //    },
    //    minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
    //    select: function (event, ui) {
    //        //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
    //        //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
    //    },
    //    open: function () {
    //        //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
    //        //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
    //    },
    //    close: function () {
    //        //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
    //        var projectManagerName = this.value.split('|')[0];
    //        var projectManagerId = this.value.split('|')[1];

    //        if (projectManagerName.indexOf('undefined') > -1) {
    //            document.getElementById('txtProjectManagerName').value = '';
    //            document.getElementById('txtProjectManagerId').value = '';
    //        } else {
    //            document.getElementById('txtProjectManagerName').value = projectManagerName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
    //            document.getElementById('txtProjectManagerId').value = projectManagerId;
    //        }
    //    }
    //});


}

function enableFinancialAreasButton() {

}

function enableDepartmentsButton() {

}

function enableParticipantsButton() {

}

function disableFinancialAreasButton() {
    document.getElementById('divBehaviorButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divFunctionalAreasButton').className = 'divInnerLeftButtonSelectedIos8';
    //document.getElementById('divDepartmentsButton').className = 'divInnerLeftButton';
    document.getElementById('divParticipantsButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divWorkflowSettingsButton').className = 'divInnerLeftButtonIos8';


    //$('#divFunctionalAreasButton').css({
    //    'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //});
    //$('#divDepartmentsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divParticipantsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divBehaviorButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});

    //$('#divWorkflowSettingsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
}

//function disableDepartmentsButton() {
//    document.getElementById('divBehaviorButton').className = 'divInnerLeftButton';
//    document.getElementById('divFunctionalAreasButton').className = 'divInnerLeftButton';
//    //document.getElementById('divDepartmentsButton').className = 'divInnerLeftButtonSelected';
//    document.getElementById('divParticipantsButton').className = 'divInnerLeftButton';
//    document.getElementById('divWorkflowSettingsButton').className = 'divInnerLeftButton';

//    //$('#divDepartmentsButton').css({
//    //    'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
//    //});
//    //$('#divParticipantsButton').css({
//    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
//    //});
//    //$('#divFunctionalAreasButton').css({
//    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
//    //});
//    //$('#divBehaviorButton').css({
//    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
//    //});
//    //$('#divWorkflowSettingsButton').css({
//    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
//    //});
//}

function disableParticipantsButton() {
    document.getElementById('divBehaviorButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divFunctionalAreasButton').className = 'divInnerLeftButtonIos8';
    //document.getElementById('divDepartmentsButton').className = 'divInnerLeftButton';
    document.getElementById('divParticipantsButton').className = 'divInnerLeftButtonSelectedIos8';
    document.getElementById('divWorkflowSettingsButton').className = 'divInnerLeftButtonIos8';


    //$('#divParticipantsButton').css({
    //    'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //});
    //$('#divDepartmentsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divFunctionalAreasButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divBehaviorButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divWorkflowSettingsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
}

//function disableWorkflowsButton() {
//    $('#divWorkflowsButton').css({ 'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white' });
//    $('#divFunctionalAreasButton').css({ 'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5' });
//    $('#divDepartmentsButton').css({ 'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5' });
//    $('#divParticipantsButton').css({ 'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5' });
//    $('#divBehaviorButton').css({ 'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5' });
//}

function disableBehaviorButton() {
    document.getElementById('divBehaviorButton').className = 'divInnerLeftButtonSelectedIos8';
    document.getElementById('divFunctionalAreasButton').className = 'divInnerLeftButtonIos8';
    //document.getElementById('divDepartmentsButton').className = 'divInnerLeftButton';
    document.getElementById('divParticipantsButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divWorkflowSettingsButton').className = 'divInnerLeftButtonIos8';


    //$('#divBehaviorButton').css({
    //    'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //});
    //$('#divFunctionalAreasButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divDepartmentsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divParticipantsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divWorkflowSettingsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
}

function disableWorkflowSettingsButton() {
    document.getElementById('divBehaviorButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divFunctionalAreasButton').className = 'divInnerLeftButtonIos8';
    //document.getElementById('divDepartmentsButton').className = 'divInnerLeftButton';
    document.getElementById('divParticipantsButton').className = 'divInnerLeftButtonIos8';
    document.getElementById('divWorkflowSettingsButton').className = 'divInnerLeftButtonSelectedIos8';


    //$('#divWorkflowSettingsButton').css({
    //    'cursor': 'default', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //});
    //$('#divFunctionalAreasButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divDepartmentsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divParticipantsButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //});
    //$('#divBehaviorButton').css({
    //    'cursor': 'pointer', 'border-width': '0px', 'margin': '0px 0px 0px 20px', 'padding': '12px 0px 0px 20px', 'outline': 'none', 'border-radius': '0px', 'width': '82%', 'height': '28px', 'color': 'white', 'background-color': '#6682b5'
    //}); 
}

function cmdAddAnApprover() {
    // This is invoked by a user when adding a new functional area.
    // Step 1: First we are going to load an array with the currently displayed values.
    var approvers = [];
    approvers = new Array();
    for (var i = 3; i < 11; i++) {
        var friendlyNameField = $('#txtApprover' + i + 'FriendlyName');
        if (friendlyNameField.val()) {
            // If this field exists, so will the other ones.
            var userId = $('#txtApprover' + i + 'Id').val();
            var userEmail = $('#txtApprover' + i + 'Email').val();
            var userFriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
            var tmpVal = $('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML;
            var userBudgetThreshold = parseFloat(tmpVal.replace(/[^0-9-.]/g, ''));
            var userInfo = [];
            userInfo = new Array(4);
            userInfo[0] = userId;
            userInfo[1] = userEmail;
            userInfo[2] = userFriendlyName;
            userInfo[3] = userBudgetThreshold;
            approvers.push(userInfo);
        }
    }
    // Step 2: Now we add the empty one at the end.
    var userInfo = [];
    userInfo = new Array(4);
    userInfo[0] = '';
    userInfo[1] = '';
    userInfo[2] = '';
    userInfo[3] = '';
    approvers.push(userInfo);
    // Step 3: Then we will render the screen using the array!
    var html = '';
    html += '<table>';
    if (approvers.length > 0) {
        html += '<tr>';
        html += '  <td></td>';
        //html += '      <span style="color:cornflowerblue;font-size:x-small;">Approver</span>';
        html += '  <td></td>';
        html += '  <td style="text-align:center;">';
        html += '    <span style="color:cornflowerblue;font-size:18pt;">Budget Threshold</span>';
        html += '  </td>';
        html += '  <td></td>';
        html += '</tr>';
    }
    for (var x = 0; x < approvers.length; x++) {
        //if (approvers[x][0]) { // If there is no entry, stop rendering the Approvers for this financial area.
        html += '<tr>';
        html += '  <td class="bwComTitleCell">Approver #' + (x + 2).toString() + '</td>';
        html += '  <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
        var approverNumber = x + 3;
        html += '    <input id="txtApprover' + approverNumber + 'FriendlyName" title="' + approvers[x][1] + '" value="' + approvers[x][2] + '" class="PeopleFriendlyNameSelector" onfocus="this.blur();" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
        html += '    <img src="images/addressbook-icon35x35.png" style="width:80px;height:80px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
        html += '    <input id="txtApprover' + approverNumber + 'Id" style="display:none;" value="' + approvers[x][0] + '" />';
        html += '    <input id="txtApprover' + approverNumber + 'Email" style="display:none;" value="' + approvers[x][1] + '" />';
        html += '  </td>';
        html += '  <td class="bwChartCalculatorLightCurrencyTableCell">';
        html += '    <span xd:binding="my:Approval' + approverNumber + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0">' + formatCurrency(approvers[x][3]) + '</span>';
        html += '  </td>';

        html += '<td><img src="images/trash-can.png"  class="trashcan" onclick="cmdDeleteApproverFromFinancialArea(\'' + approverNumber + '\');" title="Delete" style="cursor:pointer;" /></td>';

        html += '</tr>';
        //}
    }
    html += '</table>';

    document.getElementById('divFunctionalAreasApproverDataEntryFields').innerHTML = html;





    //// First we check if there is anything in our temporary array.
    //var approverNumber = newFunctionalAreaAdditionalApprovers.length + 3;
    //var newApprover = {
    //    'ApproverNumber': approverNumber.toString(), 'ApproverName': null, 'BudgetThreshold': null
    //};
    //newFunctionalAreaAdditionalApprovers.push(newApprover);
    //var html = '';
    //html += '<table>';







    //html += '  <tr>';
    //html += '    <td class="bwComTitleCell">Approver #' + (approverNumber + 1) + '</td>';
    //html += '    <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
    //html += '      <input id="txtApprover' + (approverNumber + 2) + 'FriendlyName" title="" />';
    //html += '      <img src="images/addressbook-icon18x18.png" style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + (approverNumber + 2) + 'FriendlyName\', \'txtApprover' + (approverNumber + 2) + 'Id\', \'txtApprover' + (approverNumber + 2) + 'Email\');" />';
    //html += '      <input id="txtApprover' + (approverNumber + 2) + 'Id" style="display:none;" />';
    //html += '      <input id="txtApprover' + (approverNumber + 2) + 'Email" style="display:none;" />';
    //html += '    </td>';
    //html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
    //html += '      <span xd:binding="my:Approval' + (approverNumber + 2) + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0"></span>';
    ////html += '      <input id="txtApprover' + approverNumber + 'BudgetThreshold" style="text-align:right;" size="10" />';
    //html += '    </td>';
    //html += '  </tr>';
    //html += '</table>';
    ////$('#divCreateFunctionalAreaAdditionalApproversSection').append(html);
    //$('#divFunctionalAreasApproverDataEntryFields').append(html);


    // If this is the 10th approver, turn off the "+ Add an approver" link.
    if (approvers.length == 10) {
        var html = '';
        html += '<i>You have reached the limit of 10 Approvers.</i>';
        document.getElementById('spanAddAnApproverLink').innerHTML = html;
    }



    // Hook up the people picker.
    $('#txtApprover' + approverNumber + 'Name').autocomplete({
        source: function (request, response) {
            $.ajax({
                url: webserviceurl + "/tenant/" + tenantId + "/participants/" + request.term,
                dataType: "json",
                success: function (data) {
                    var searchArray = [];
                    for (var i = 0; i < data.participants.length; i++) {
                        searchArray[i] = data.participants[i].participant;
                    }
                    response(searchArray);
                }
            });
        },
        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
        select: function (event, ui) {
            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
        },
        open: function () {
            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
        },
        close: function () {
            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1];
            //if (searchValue.indexOf('undefined') > -1) document.getElementById('txtApprover' + approverNumber + 'Name').value = '';
            //else document.getElementById('txtApprover' + approverNumber + 'Name').value = searchValue; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.

            var approverName = this.value.split('|')[0];
            var approverId = this.value.split('|')[1];
            var approverEmail = this.value.split('|')[2];

            if (approverName.indexOf('undefined') > -1) {
                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').value = '';
                document.getElementById('txtApprover' + approverNumber + 'Id').value = '';
                document.getElementById('txtApprover' + approverNumber + 'Email').value = '';
            } else {
                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').value = approverName;
                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').setAttribute('title', approverEmail);
                document.getElementById('txtApprover' + approverNumber + 'Id').value = approverId;
                document.getElementById('txtApprover' + approverNumber + 'Email').value = approverEmail;
            }
        }
    });
    // Make sure the 'Add an approver' link is disabled once we have 10 approvers.
    if (newFunctionalAreaAdditionalApprovers.length > 7) {
        $('#aLinkCreateFunctionalAreaAddAnApprover').hide();
    }
}

//function cmdAddAnApprover() {
//    // This is invoked by a user when adding a new functional area.
//    // First we check if there is anything in our temporary array.
//    var approverNumber = newFunctionalAreaAdditionalApprovers.length + 3;
//    var newApprover = {
//        'ApproverNumber': approverNumber.toString(), 'ApproverName': null, 'BudgetThreshold': null
//    };
//    newFunctionalAreaAdditionalApprovers.push(newApprover);
//    var html = '';
//    html += '<table>';
//    //html += '  <tr>';
//    //html += '    <td colspan="2" class="bwComTitleCell">Approver #' + (approverNumber - 1) + '</td>';
//    //html += '  </tr>';
//    html += '  <tr>';
//    //html += '    <td class="bwComTitleCell">Name</td>';
//    html += '    <td class="bwComTitleCell">Approver #' + (approverNumber - 1) + '</td>';
//    html += '    <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
//    html += '      <input id="txtApprover' + approverNumber + 'FriendlyName" title="" />';
//    //html += '       👥';
//    html += '      <img src="images/addressbook-icon18x18.png" style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
//    html += '      <input id="txtApprover' + approverNumber + 'Id" style="display:none;" />';
//    html += '      <input id="txtApprover' + approverNumber + 'Email" style="display:none;" />';
//    html += '    </td>';
//    html += '  </tr>';
//    html += '  <tr>';
//    html += '    <td class="bwComTitleCell">Budget threshold&nbsp;&nbsp;</td>';
//    html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
//    //html += '      <span xd:binding="my:Approval' + approverNumber + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0"></span>';
//    html += '      <input id="txtApprover' + approverNumber + 'BudgetThreshold" style="text-align:right;" size="10" />';
//    html += '    </td>';
//    html += '  </tr>';
//    html += '</table>';
//    $('#divCreateFunctionalAreaAdditionalApproversSection').append(html);
//    // Hook up the people picker.
//    $('#txtApprover' + approverNumber + 'Name').autocomplete({
//        source: function (request, response) {
//            //weburl = _spPageContextInfo.siteAbsoluteUrl;
//            $.ajax({
//                url: webserviceurl + "/tenant/" + tenantId + "/participants/" + request.term,
//                dataType: "json",
//                success: function (data) {
//                    var searchArray = [];
//                    for (var i = 0; i < data.participants.length; i++) {
//                        searchArray[i] = data.participants[i].participant;
//                    }
//                    response(searchArray);
//                }
//            });
//        },
//        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
//        select: function (event, ui) {
//            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
//            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
//        },
//        open: function () {
//            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
//            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
//        },
//        close: function () {
//            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
//            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1];
//            //if (searchValue.indexOf('undefined') > -1) document.getElementById('txtApprover' + approverNumber + 'Name').value = '';
//            //else document.getElementById('txtApprover' + approverNumber + 'Name').value = searchValue; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.

//            var approverName = this.value.split('|')[0];
//            var approverId = this.value.split('|')[1];
//            var approverEmail = this.value.split('|')[2];

//            if (approverName.indexOf('undefined') > -1) {
//                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').value = '';
//                document.getElementById('txtApprover' + approverNumber + 'Id').value = '';
//                document.getElementById('txtApprover' + approverNumber + 'Email').value = '';
//            } else {
//                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').value = approverName;
//                document.getElementById('txtApprover' + approverNumber + 'FriendlyName').setAttribute('title', approverEmail);
//                document.getElementById('txtApprover' + approverNumber + 'Id').value = approverId;
//                document.getElementById('txtApprover' + approverNumber + 'Email').value = approverEmail;
//            }
//        }
//    });
//    // Make sure the 'Add an approver' link is disabled once we have 10 approvers.
//    if (newFunctionalAreaAdditionalApprovers.length > 7) {
//        $('#aLinkCreateFunctionalAreaAddAnApprover').hide();
//    }
//}

function cmdImmediatelyDeleteFunctionalArea(_functionalAreaId) {
    var data = [];
    data = {
        bwFunctionalAreaId: _functionalAreaId
    };
    var operationUri = webserviceurl + "/bwfunctionalareas/deletefunctionalarea";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdImmediatelyDeleteFunctionalArea(): ' + errorMessage);
        }
    });
}

function cmdImmediatelyHideFunctionalArea(_functionalAreaId) {
    var data = [];
    data = {
        bwFunctionalAreaId: _functionalAreaId,
        IsHidden: 'true', // This is the value which hides the Financial Area.
        ModifiedByFriendlyName: participantFriendlyName,
        ModifiedById: participantId,
        ModifiedByEmail: participantEmail
    };
    var operationUri = webserviceurl + "/bwfunctionalareas/hideorshowfunctionalarea";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdImmediatelyHideFunctionalArea(): ' + errorMessage);
        }
    });
}

function cmdDeleteFunctionalArea() {
    try {
        var _functionalAreaId = $('span[xd\\:binding = "my:FunctionalAreaId"]')[0].innerHTML;
        //displayAlertDialog('faid:' + _functionalAreaId);
        var data = [];
        data = {
            bwFunctionalAreaId: _functionalAreaId
        };
        var operationUri = webserviceurl + "/bwworkflow/removeafinancialarea";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                //if (data.NumberOfBudgetRequests == 0) {
                //    // There are no dependencies, so delete it.
                //    var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to delete this Financial Area...');
                //    if (proceed) {
                //        cmdImmediatelyDeleteFunctionalArea(_functionalAreaId);
                //        populateStartPageItem('divFunctionalAreas', 'Reports', '');
                //    }
                //} else {
                //    // There are Budget Requests, so all we can do is hide it.
                //    var proceed = confirm('There are ' + data.NumberOfBudgetRequests + ' Budget Request(s) that use this Financial Area.\n\nTherefore you can\'t delete it, but you can prevent it from showing up on New Budget Requests.\n\n\nClick the OK button to HIDE this Financial Area...');
                //    if (proceed) {
                //        cmdImmediatelyHideFunctionalArea(_functionalAreaId);
                //        populateStartPageItem('divFunctionalAreas', 'Reports', '');
                //    }
                //}

                $("#DeleteAFinancialAreaDialog").dialog({
                    modal: true,
                    resizable: false,
                    closeText: "Cancel",
                    closeOnEscape: true, // Hit the ESC key to hide! Yeah!
                    title: 'Delete Financial Area',
                    width: "800px",
                    dialogClass: "no-close", // No close button in the upper right corner.
                    hide: false, // This means when hiding just disappear with no effects.
                    buttons: {
                        "Delete": {
                            text: 'Delete',
                            id: 'btnDeleteAFinancialArea',
                            disabled: 'true',
                            style: 'font-size:30pt;',
                            click: function () {
                                cmdImmediatelyDeleteFunctionalArea(_functionalAreaId);
                                populateStartPageItem('divFunctionalAreas', 'Reports', '');
                                $(this).dialog("close");
                            }
                        },
                        "Hide": {
                            text: 'Hide',
                            id: 'btnHideAFinancialArea',
                            disabled: 'true',
                            style: 'font-size:30pt;',
                            click: function () {
                                cmdImmediatelyHideFunctionalArea(_functionalAreaId);
                                populateStartPageItem('divFunctionalAreas', 'Reports', '');
                                $(this).dialog("close");
                            }
                        },
                        "Cancel": {
                            text: 'Cancel',
                            style: 'font-size:30pt;',
                            click: function () {
                                $(this).dialog("close");
                            }
                        }
                    },
                    open: function (event, ui) {
                        $('.ui-widget-overlay').bind('click', function () { $("#DeleteAFinancialAreaDialog").dialog('close'); });

                    }
                });

                // Hide the title bar.
                $("#DeleteAFinancialAreaDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
                // Set the title.
                //document.getElementById('spanDeleteAFinancialAreaDialogTitle').innerHTML = 'Delete ' + financialAreaName; // + ' from this workflow.';



                var html = '';
                if (data.NumberOfBudgetRequests == 0) {
                    // There are no dependencies, so delete it.
                    html += 'This action cannot be undone.<br /><br />Click the Delete button to delete this Financial Area...';
                    var dialogButtons = $('#DeleteAFinancialAreaDialog').dialog('option', 'buttons');
                    $.each(dialogButtons, function (buttonIndex, button) {
                        if (button.id === 'btnDeleteAFinancialArea') {
                            button.text = 'Delete Financial Area';
                            button.style = 'color:red;font-size:30pt;';
                            button.disabled = false;
                        }
                    })
                    $("#DeleteAFinancialAreaDialog").dialog('option', 'buttons', dialogButtons);
                    //if (proceed) {
                    //    cmdImmediatelyDeleteFunctionalArea(_functionalAreaId);
                    //    populateStartPageItem('divFunctionalAreas', 'Reports', '');
                    //}
                } else {
                    // There are Budget Requests, so all we can do is hide it.
                    html += 'There are ' + data.NumberOfBudgetRequests + ' Budget Request(s) that use this Financial Area.<br /><br />Therefore you can\'t delete it, but you can prevent it from showing up on New Budget Requests.'; //\n\n\nClick the Hide button to HIDE this Financial Area...';
                    var dialogButtons = $('#DeleteAFinancialAreaDialog').dialog('option', 'buttons');
                    $.each(dialogButtons, function (buttonIndex, button) {
                        if (button.id === 'btnHideAFinancialArea') {
                            button.text = 'Hide Financial Area';
                            button.style = 'color:red;font-size:30pt;';
                            button.disabled = false;
                        }
                    })
                    $("#DeleteAFinancialAreaDialog").dialog('option', 'buttons', dialogButtons);
                    //if (proceed) {
                    //    cmdImmediatelyHideFunctionalArea(_functionalAreaId);
                    //    populateStartPageItem('divFunctionalAreas', 'Reports', '');
                    //}
                }

                document.getElementById('spanDeleteAFinancialAreaDialogDependencyDetails').innerHTML = html;




















                //resultText += 'There are ' + brResult.length + ' Budget Requests that use this Financial Area.\n\n';
                //resultText += 'You cannot delete this Financial Area, but you can choose to hide it so that it is not used in the future.\n\n';
                //response.send(resultText);
            },
            error: function (data, errorCode, errorMessage) {
                //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
                displayAlertDialog('Error in ios8.js.cmdDeleteFunctionalArea(): ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in cmdDeleteFunctionalArea(): ' + e.message);
    }
}

function cmdSaveFunctionalArea() {
    var ajaxSaveOperationType;
    //var successMessage;
    var errorMessage;
    var _functionalAreaId = '';
    //try {
    _functionalAreaId = $('#txtFunctionalAreaId').val();
    //displayAlertDialog('_functionalAreaId: ' + _functionalAreaId);
    //_functionalAreaId = $('span[xd\\:binding = "my:FunctionalAreaId"]')[0].innerHTML;

    // Convert this to an input box throughout.
    // It will be next to the title field, input box id=txtFunctionalAreaTitle


    if (_functionalAreaId != '') {
        ajaxSaveOperationType = 'POST';
        //successMessage = 'The functional area has been updated.';
        errorMessage = 'Error updating the functional area.';
    } else {
        ajaxSaveOperationType = 'PUT'; // The field doesn't exists so we are making a new one.
        //successMessage = 'The functional area has been created.';
        errorMessage = 'Error creating the functional area.';
    }


    //displayAlertDialog('ajaxSaveOperationType:' + ajaxSaveOperationType);


    //ajaxSaveOperationType = 'POST'; // POST is for updating.
    //successMessage = 'The functional area has been updated.';
    //errorMessage = 'Error updating the functional area.';
    //} catch (e) {
    //    ajaxSaveOperationType = 'PUT'; // The field doesn't exists so we are making a new one.
    //    //successMessage = 'The functional area has been created.';
    //    errorMessage = 'Error creating the functional area.';
    //}
    try {
        var title = $('#txtFunctionalAreaTitle').val();

        var isQuote = 'false';
        if (document.getElementById('cbFunctionalAreaQuote').checked) { // Yields a bool, true or false.
            isQuote = 'true';
        }

        var year = new Date().getFullYear().toString(); // $('#txtFunctionalAreaYear').val(); todd:hardcoded.
        var yearlyBudget = $('#txtFunctionalAreaYearlyBudget').val().replace(/[^0-9-.]/g, '');

        //
        //
        // THE 2 VARIABLES BELOW NEED TO GET THE USER ID #. IT NEEDS TO BE STORED SOMEWHERE ON THE PAGE SO WE CAN GET AT IT!!!!!!!
        //
        //
        var approver1Id = $('#txtApprover1Id').val();
        var approver1FriendlyName = $('#txtApprover1FriendlyName').val();
        var approver1Email = $('#txtApprover1Email').val();
        var approver2Id = $('#txtApprover2Id').val();
        var approver2FriendlyName = $('#txtApprover2FriendlyName').val();
        var approver2Email = $('#txtApprover2Email').val();
        var approver3Id;
        var approver3FriendlyName;
        var approver3Email;
        var approver4Id;
        var approver4FriendlyName;
        var approver4Email;
        var approver5Id;
        var approver5FriendlyName;
        var approver5Email;
        var approver6Id;
        var approver6FriendlyName;
        var approver6Email;
        var approver7Id;
        var approver7FriendlyName;
        var approver7Email;
        var approver8Id;
        var approver8FriendlyName;
        var approver8Email;
        var approver9Id;
        var approver9FriendlyName;
        var approver9Email;
        var approver10Id;
        var approver10FriendlyName;
        var approver10Email;
        var approval3BudgetThreshold;
        var approval4BudgetThreshold;
        var approval5BudgetThreshold;
        var approval6BudgetThreshold;
        var approval7BudgetThreshold;
        var approval8BudgetThreshold;
        var approval9BudgetThreshold;
        var approval10BudgetThreshold;
        // Now populate the values for what has been entered.
        try {
            for (var i = 3; i < 11; i++) {
                //var idFieldName = 'approver' + i + 'Id';
                //var budgetThresholdFieldName = 'approval' + i + 'BudgetThreshold';
                //var friendlyNameFieldName = 'approver' + i + 'FriendlyName';
                //var emailFieldName = 'approver' + i + 'Email';
                if (i == 3) {
                    if (document.getElementById('txtApprover3Id') != null) {
                        approver3Id = $('#txtApprover' + i + 'Id').val();
                        approver3FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver3Email = $('#txtApprover' + i + 'Email').val();
                        //approval3BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval3BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval3BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                } else if (i == 4) {
                    if (document.getElementById('txtApprover4Id') != null) {
                        approver4Id = $('#txtApprover' + i + 'Id').val();
                        approver4FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver4Email = $('#txtApprover' + i + 'Email').val();
                        //approval4BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval4BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval4BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 5) {
                    if (document.getElementById('txtApprover5Id') != null) {
                        approver5Id = $('#txtApprover' + i + 'Id').val();
                        approver5FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver5Email = $('#txtApprover' + i + 'Email').val();
                        //approval5BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval5BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval5BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 6) {
                    if (document.getElementById('txtApprover6Id') != null) {
                        approver6Id = $('#txtApprover' + i + 'Id').val();
                        approver6FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver6Email = $('#txtApprover' + i + 'Email').val();
                        //approval6BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval6BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval6BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 7) {
                    if (document.getElementById('txtApprover7Id') != null) {
                        approver7Id = $('#txtApprover' + i + 'Id').val();
                        approver7FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver7Email = $('#txtApprover' + i + 'Email').val();
                        //approval7BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval7BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval7BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 8) {
                    if (document.getElementById('txtApprover8Id') != null) {
                        approver8Id = $('#txtApprover' + i + 'Id').val();
                        approver8FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver8Email = $('#txtApprover' + i + 'Email').val();
                        //approval8BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval8BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval8BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 9) {
                    if (document.getElementById('txtApprover9Id') != null) {
                        approver9Id = $('#txtApprover' + i + 'Id').val();
                        approver9FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver9Email = $('#txtApprover' + i + 'Email').val();
                        //approval9BudgetThreshold = $('#txtApprover' + i + 'BudgetThreshold').val();
                        //approval9BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval9BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
                else if (i == 10) {
                    if (document.getElementById('txtApprover10Id') != null) {
                        approver10Id = $('#txtApprover' + i + 'Id').val();
                        approver10FriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                        approver10Email = $('#txtApprover' + i + 'Email').val();
                        //approval10BudgetThreshold = parseFloat($('#txtApprover' + i + 'BudgetThreshold').val().replace(/[^0-9-.]/g, ''));
                        approval10BudgetThreshold = parseFloat($('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML.replace(/[^0-9-.]/g, ''));
                    }
                }
            }
        } catch (e) {
            // Todd: We may need to do something here, not sure.
            displayAlertDialog('Error in ios8.js.cmdSaveFunctionalArea():1:', e.message);
        }
        // Now that we have all the values that were entered, save them!
        var _functionalArea = [];
        _functionalArea = {
            bwFunctionalAreaId: _functionalAreaId,
            bwTenantId: tenantId,
            bwWorkflowAppId: workflowAppId,
            bwFunctionalAreaTitle: title,
            bwFunctionalAreaQuote: isQuote,
            bwFunctionalAreaYear: year,
            bwFunctionalAreaYearlyBudget: yearlyBudget,
            Approver1Id: approver1Id,
            Approver1FriendlyName: approver1FriendlyName,
            Approver1Email: approver1Email,
            Approver2Id: approver2Id,
            Approver2FriendlyName: approver2FriendlyName,
            Approver2Email: approver2Email,
            Approver3Id: approver3Id,
            Approver3FriendlyName: approver3FriendlyName,
            Approver3Email: approver3Email,
            Approver4Id: approver4Id,
            Approver4FriendlyName: approver4FriendlyName,
            Approver4Email: approver4Email,
            Approver5Id: approver5Id,
            Approver5FriendlyName: approver5FriendlyName,
            Approver5Email: approver5Email,
            Approver6Id: approver6Id,
            Approver6FriendlyName: approver6FriendlyName,
            Approver6Email: approver6Email,
            Approver7Id: approver7Id,
            Approver7FriendlyName: approver7FriendlyName,
            Approver7Email: approver7Email,
            Approver8Id: approver8Id,
            Approver8FriendlyName: approver8FriendlyName,
            Approver8Email: approver8Email,
            Approver9Id: approver9Id,
            Approver9FriendlyName: approver9FriendlyName,
            Approver9Email: approver9Email,
            Approver10Id: approver10Id,
            Approver10FriendlyName: approver10FriendlyName,
            Approver10Email: approver10Email,
            Approval3BudgetThreshold: approval3BudgetThreshold,
            Approval4BudgetThreshold: approval4BudgetThreshold,
            Approval5BudgetThreshold: approval5BudgetThreshold,
            Approval6BudgetThreshold: approval6BudgetThreshold,
            Approval7BudgetThreshold: approval7BudgetThreshold,
            Approval8BudgetThreshold: approval8BudgetThreshold,
            Approval9BudgetThreshold: approval9BudgetThreshold,
            Approval10BudgetThreshold: approval10BudgetThreshold
        };
        var operationUri = webserviceurl + "/bwfunctionalareas";
        $.ajax({
            url: operationUri,
            //type: "POST", timeout: ajaxTimeout,
            type: ajaxSaveOperationType,
            data: _functionalArea,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                displayAlertDialog(data);
                // NOW WE NEED TO UPDATE THE FA IN BWMData.
                for (var i = 0; i < BWMData[0].length; i++) {
                    if (BWMData[0][i][0] == workflowAppId) {
                        for (var x = 0; x < BWMData[0][i][4].length; x++) {
                            if (BWMData[0][i][4][x][0] == _functionalAreaId) {
                                // This is the FInancial Area we have been looking for.
                                var approver1item = [approver1Id, approver1FriendlyName, approver1Email];
                                var approver2item = [approver2Id, approver2FriendlyName, approver2Email];
                                var approver3item = [approver3Id, approver3FriendlyName, approver3Email, approval3BudgetThreshold];
                                var approver4item = [approver4Id, approver4FriendlyName, approver4Email, approval4BudgetThreshold];
                                var approver5item = [approver5Id, approver5FriendlyName, approver5Email, approval5BudgetThreshold];
                                var approver6item = [approver6Id, approver6FriendlyName, approver6Email, approval6BudgetThreshold];
                                var approver7item = [approver7Id, approver7FriendlyName, approver7Email, approval7BudgetThreshold];
                                var approver8item = [approver8Id, approver8FriendlyName, approver8Email, approval8BudgetThreshold];
                                var approver9item = [approver9Id, approver9FriendlyName, approver9Email, approval9BudgetThreshold];
                                var approver10item = [approver10Id, approver10FriendlyName, approver10Email, approval10BudgetThreshold];
                                var _additionalApprovers = [approver3item, approver4item, approver5item, approver6item, approver7item, approver8item, approver9item, approver10item];
                                //
                                BWMData[0][i][4][x][1] = title;
                                BWMData[0][i][4][x][2] = quote;
                                BWMData[0][i][4][x][4] = yearlyBudget;
                                BWMData[0][i][4][x][5] = approver1item;
                                BWMData[0][i][4][x][6] = approver2item;
                                BWMData[0][i][4][x][7] = _additionalApprovers;

                                //var faItem = [faData.d.results[i].bwFunctionalAreaId, faData.d.results[i].bwFunctionalAreaTitle, faData.d.results[i].bwFunctionalAreaQuote, Number(faData.d.results[i].bwFunctionalAreaYear), Number(faData.d.results[i].bwFunctionalAreaYearlyBudget), approver1item, approver2item, _additionalApprovers, 0, 0, 0, _overdueTasks];
                                //BWMData[0][deferredIndex][4][i] = faItem;
                            }
                        }
                    }
                }
                // AT THIS POINT WE NEED TO RE-RENDER THE FINANCIAL AREAS SECTION.
                populateStartPageItem('divFunctionalAreas', 'Reports', '');
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.cmdSaveFunctionalArea():2:' + errorMessage + ' ' + JSON.stringify(data));
                //WriteToErrorLog('Error in InitBudgetRequest.js.cmdCreateBudgetRequest()', 'Error creating the budget request in budgetrequests library: ' + errorCode + ', ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdSaveFunctionalArea():3:', e.message);
    }
}

function cmdSaveAccountingDepartmentUser() {
    try {
        // The department title is 'Procurement'.
        //var user = $('#txtAccountingDepartmentUser').val();
        var bwDepartmentUserName = $('#txtBwDepartmentUserName').val();
        var bwDepartmentUserId = $('#txtBwDepartmentUserId').val();
        var bwDepartmentUserEmail = $('#txtBwDepartmentUserEmail').val();
        // Now that we have all the values that were entered, save them!
        var _department = [];
        _department = {
            bwTenantId: tenantId,
            bwWorkflowAppId: workflowAppId,
            bwDepartmentTitle: 'Procurement',
            bwDepartmentUserName: bwDepartmentUserName,
            bwDepartmentUserId: bwDepartmentUserId,
            bwDepartmentUserEmail: bwDepartmentUserEmail
        };
        var operationUri = webserviceurl + "/bwdepartments";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _department,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                displayAlertDialog(data);
                // Now we have to change the Save button to Remove.
                var html = '';
                html += '<input id="btnSaveRemoveAccountingDepartmentUser" type="button" value="Remove" onclick="cmdRemoveAccountingDepartmentUser();" class="BwButton200" />';
                document.getElementById('spanSaveAccountingDepartmentUserButton').innerHTML = html;
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.cmdSaveAccountingDepartmentUser():1:' + errorMessage + ' ' + JSON.stringify(data));
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdSaveAccountingDepartmentUser():2:', e.message);
    }
}

function cmdRemoveAccountingDepartmentUser() {
    try {
        // The department title is 'Procurement'.
        var _department = [];
        _department = {
            bwWorkflowAppId: workflowAppId,
            bwDepartmentTitle: 'Procurement'
        };
        var operationUri = webserviceurl + "/bwdepartments/removedepartmentuser";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _department,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                displayAlertDialog(data);
                // Clear the textbox.
                document.getElementById('txtBwDepartmentUserName').value = '';
                // Create the button.
                var html = '';
                html += '<input id="btnSaveRemoveAccountingDepartmentUser" type="button" value="Save" onclick="cmdSaveAccountingDepartmentUser();" disabled class="BwButton200" />';
                document.getElementById('spanSaveAccountingDepartmentUserButton').innerHTML = html;

                //window.location = 'my.html';
                //populateStartPageItem('divWelcome', 'Reports', '');
                //renderWelcomeScreen();
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.cmdRemoveAccountingDepartmentUser():1:' + errorMessage + ' ' + JSON.stringify(data));
            }
        });
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdRemoveAccountingDepartmentUser():2:', e.message);
    }
}

function cmdCancel() {
    // This is the cancel button.
    //window.location = 'my.html';
    //populateStartPageItem('divWelcome', 'Reports', '');
    renderWelcomeScreen();
}

function renderConfigureParticipantsScreen() {
    // This is the Participants section in the configuration section.
    var year = new Date().getFullYear().toString(); // todd hardcoded.

    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';





    $('#divFunctionalAreasListButtons').html(html);
}


function generateFunctionalAreasListButtons() {
    disableFinancialAreasButton();
    // Set the main menu title bar.
    var html = '';

    //html += '<table style="border-width: 0px; margin: 0px; padding: 0px; width: 100%;"><tbody><tr style="border-width: 0px; margin: 0px; padding: 0px;"><td style="border-width: 0px; margin: 0px; padding: 0px;">';
    //html += 'Financial Areas...';
    //html += '</td></tr></tbody></table>';

    // New html.
    html += '<table style="width:100%;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<tr style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<div class="">';
    html += '<span id="spanSecondTopBarExpandCollapse" class="spanTopBarExpandCollapseIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">+</span><span id="xxxx" class="divTopBarTextContentsIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">Financial Areas...</span>';
    html += '</div>';
    html += '</td>';
    html += '<td style="text-align:right;white-space:nowrap;font-size:small;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;"><!--Year:&nbsp;<select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>--></td>';
    html += '</tr>';
    html += '</table>';




    $('#divFunctionalAreasMasterDiv').html(html);
    //// Change the title of the section to the top financial area.
    //$('#divFunctionalAreasMasterSubMenuDiv').text('Add a financial areaxx:');
    //$('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header right-rounder bar in case it was hidden.
    //


    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '    <tr>';
    html += '        <td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '            <table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '                <tr>';
    //html += '                    <td style="width:170px;vertical-align:top;padding:0 0 0 0;margin:0 0 0 0;border-width:0 1px 0 0;">';
    //html += '                        <div id="divFunctionalAreasListButtons"></div>';
    //html += '                    </td>';
    html += '                    <td style="border-right:1px solid grey;width:15px;padding:0 0 0 0;margin:0 0 0 0;border-width:0 1px 0 0;">&nbsp;</td>';
    html += '                    <td style="width:15px;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;"></td>';
    html += '                    <td>';
    html += '                        <table>';
    html += '                            <tr>';
    html += '                                <td>';
    html += '                                    <div id="divFunctionalAreaSection"></div>';
    html += '                                </td>';
    html += '                            </tr>';
    html += '                        </table>';
    html += '                    </td>';
    html += '                </tr>';
    html += '            </table>';
    html += '        </td>';
    html += '    </tr>';
    html += '</table>';
    $('#divFunctionalAreasSubSubMenus').html(html);


    // Display the functional area form.
    $('#divFunctionalAreaSection').html($('#divFunctionalAreaTemplate').html());
    $('#divFunctionalAreaSection').show();



    var year = new Date().getFullYear().toString(); // todd hardcoded.

    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';

    // BEGIN: DO A WEB SERVICE CALL TO GET THE FUNCTIONAL AREAS AND THEN ITERATE THROUGH THEM ALL HERE
    var hasTopButtonBeenDisplayed = false;
    var topButtonFinancialAreaId;

    for (var x = 0; x < BWMData[0].length; x++) {
        if (BWMData[0][x][0] = workflowAppId) {
            for (var i = 0; i < BWMData[0][x][4].length; i++) {
                if (BWMData[0][x][4][i][3] == year) {
                    if (hasTopButtonBeenDisplayed == false) {
                        // Change the title of the section to the top financial area.
                        $('#spanFunctionalAreasTopBarTextContentsIos8').text(BWMData[0][x][4][i][1].toString()); //'Add a financial areaxx:');
                        $('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header right-rounder bar in case it was hidden.
                        html += '    <tr>';
                        html += '        <td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
                        //html += '            <div id="divFunctionalAreaMasterDiv' + BWMData[0][0][4][i][0].toString() + '" style="outline: rgb(59, 103, 142) dashed 1px;color: rgb(220, 220, 220);height:28px;width:92%;white-space:nowrap;border-radius:0 0 0 0;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color: rgb(255, 255, 255);" class="evaluationChecklistAccordionLink">' + BWMData[0][0][4][i][1].toString() + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                        html += '            <div id="divFunctionalAreaMasterDiv' + BWMData[0][x][4][i][0].toString() + '" class="divLeftButtonSelected">' + BWMData[0][x][4][i][1].toString() + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                        html += '        </td>';
                        html += '    </tr>';
                        html += '    <tr><td></td></tr>';
                        hasTopButtonBeenDisplayed = true;
                        topButtonFinancialAreaId = BWMData[0][x][4][i][0].toString();
                    } else {
                        html += '    <tr>';
                        html += '        <td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
                        html += '            <div id="divFunctionalAreaMasterDiv' + BWMData[0][x][4][i][0].toString() + '" class="divLeftButton" onclick="renderFunctionalAreaDetails(\'' + BWMData[0][x][4][i][0].toString() + '\');">' + BWMData[0][x][4][i][1].toString() + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                        html += '        </td>';
                        html += '    </tr>';
                        html += '    <tr><td></td></tr>';
                    }
                }
            }
        }
    }

    html += '    <tr>';
    html += '        <td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '            <div id="divMenuMasterDivAddAFunctionalArea" class="divLeftButtonIos8" onclick="renderFunctionalAreaDetails(\'AddAFinancialArea\');"><!--<img src="/images/plus.png" alt="" />-->+ Add a financial area&nbsp;&nbsp;&nbsp;&nbsp;</div>';
    html += '        </td>';
    html += '    </tr>';
    html += '    <tr><td></td></tr>';

    html += '</table>';

    ////
    $('#divFunctionalAreasListButtons').html(html);

    if (!topButtonFinancialAreaId) topButtonFinancialAreaId = 'AddAFinancialArea'; // We do this in case there are no Financial Areas tat have bee created yet. This happens when Dec 31 turns to Jan 1.
    renderFunctionalAreaDetails(topButtonFinancialAreaId);

    ////$('#divFunctionalAreasSubSubMenus').html(html);





    ////$('#divFunctionalAreasSubSubMenus').empty();


    ////$('#divFunctionalAreasMasterDiv').empty(); // Clear the div and rebuild it with out new 'Departments' title.
    ////$('#divFunctionalAreasMasterSubMenuDiv').hide(); //This is the top bar which we want to hide in this case.









    ////populateStartPageItem('divAddAFunctionalArea', 'Reports', '');
    //$('#divFunctionalAreasMasterSubMenuDiv').text('Creating a new Financial Area:'); // Change the title of the section.
    //$('#btnFunctionalAreaDelete').hide();
    //$('#divFunctionalAreaSection').html($('#divFunctionalAreaTemplate').html()); // Display the functional area form.
    //$('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header right-rounder bar in case it was hidden.

    hookUpThePeoplePickers(); // This hooks up the Approver #1 and #2 people pickers.



    //$('#divMenuMasterDivAddAFunctionalArea').css({
    //    'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //});

}

//function generateDepartmentsListButtons() {
//    $('#divFunctionalAreasMasterDiv').empty(); // Clear the div and rebuild it with out new 'Departments' title.
//    $('#divFunctionalAreasMasterSubMenuDiv').hide(); //This si the top bar which we want to hide in this case.

//    var html = '';
//    html += '<table style="border-width: 0px; margin: 0px; padding: 0px; width: 100%;"><tbody><tr style="border-width: 0px; margin: 0px; padding: 0px;"><td style="border-width: 0px; margin: 0px; padding: 0px;">';
//    html += 'Departments';
//    html += '</td></tr></tbody></table>';
//    $('#divFunctionalAreasMasterDiv').html(html);
//    //
//    disableDepartmentsButton();
//    //
//    //$('#divFunctionalAreasButton').css({'background-color':'#6682b5'});
//    //
//    //$('#divParticipants').css({ 'height': '28px', 'width': '82%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 20px', 'border-width': '0 0 0 0', 'background-color': '#6682b5' });
//    //
//    $('#divFunctionalAreasSubSubMenus').empty();
//    var html = '';
//    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
//    html += '  <tr>';
//    html += '    <td>';
//    html += '        <span style="font-size:small;font-style:italic;">Specifying a user here enables the PO# issuing process. When a Budget Request has been completely approved, this user will issue a Purchase Order Number from your accounting system, and the Budget Request will be marked as Active.</span>';
//    html += '    </td></tr>';
//    html += '</table>';
//    html += '       <table><tr><td></td><td>&nbsp;</td></tr>';
//    html += '  <tr>';
//    html += '    <td style="text-align:left;" class="bwSliderTitleCell">';
//    html += '       <span id="spanDepartmentTitle" ></span>:&nbsp;';
//    html += '    </td>';
//    html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
//    html += '       <input id="txtBwDepartmentUserName" title="" />';
//    html += '       <input id="txtBwDepartmentUserId" style="display:none;" />';
//    html += '       <input id="txtBwDepartmentUserEmail" style="display:none;" />';              
//    html += '       &nbsp;<img src="images/addressbook-icon18x18.png" onclick="cmdDisplayPeoplePickerDialog(\'txtBwDepartmentUserName\', \'txtBwDepartmentUserId\', \'txtBwDepartmentUserEmail\');" style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" />';
//    html += '       &nbsp;&nbsp;<input type="button" value="Remove" id="btnSaveAccountingDepartmentUser" onclick="cmdSaveAccountingDepartmentUser();" />';
//    html += '    </td>';
//    html += '  </tr>';
//    html += '</table>';
//    $('#divFunctionalAreasSubSubMenus').html(html);

//    // Hook up the people picker
//    $("#txtBwDepartmentUserName").autocomplete({
//        source: function (request, response) {
//            //weburl = _spPageContextInfo.siteAbsoluteUrl;
//            $.ajax({
//                url: appweburl + "/tenant/" + tenantId + "/participants/" + request.term,
//                dataType: "json",
//                success: function (data) {
//                    var searchArray = [];
//                    for (var i = 0; i < data.participants.length; i++) {
//                        searchArray[i] = data.participants[i].participant;
//                    }
//                    response(searchArray);
//                }
//            });
//        },
//        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
//        select: function (event, ui) {
//            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
//            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
//        },
//        open: function () {
//            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
//            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
//        },
//        close: function () {
//            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
//            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1];
//            //if (searchValue.indexOf('undefined') > -1) document.getElementById('txtAccountingDepartmentUser').value = '';
//            //else document.getElementById('txtAccountingDepartmentUser').value = searchValue; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.


//            var userName = this.value.split('|')[0];
//            var userId = this.value.split('|')[1];

//            if (userName.indexOf('undefined') > -1) {
//                //document.getElementById('txtAccountingDepartmentUser').value = '';
//                document.getElementById('txtBwDepartmentUserName').value = '';
//                document.getElementById('txtBwDepartmentUserId').value = '';
//            } else {
//                document.getElementById('txtBwDepartmentUserName').value = userName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
//                document.getElementById('txtBwDepartmentUserId').value = userId;
//            }
//        }
//    });


//}

function generateConfigurationLeftSideMenu() {
    $('#divConfigurationLeftSideMenu').empty();
    var data = {
        "bwParticipantId": participantId
    };
    $.ajax({
        url: webserviceurl + "/bwworkflowapps/listallforparticipant",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            try {

                var html = '';
                //html += '<hr />';
                //html += 'Selected workflow:<br />';
                //html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
                //html += '  <tr>';
                //html += '    <td>';
                //html += 'Selected workflow: ';
                //// Display the workflow apps as selectable buttons.
                //var topHtml = '';
                //var bottomHtml = '';
                //for (var i = 0; i < data.ParticipantOwnedWorkflowApps.length; i++) {
                //    if (workflowAppId == data.ParticipantOwnedWorkflowApps[i][2]) {
                //        // This one is selected.
                //        //topHtml += '    <tr>';
                //        //topHtml += '        <td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
                //        ////topHtml += '            <div id="divConfigurationLeftSideMenuButton' + i + '" style="cursor:default;border-radius:20px 0 0 20px;height:28px;width:92%;white-space:nowrap;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color:#066B8B;" onclick="selectCurrentWorkflowApp(\'' + data.ParticipantOwnedWorkflowApps[i][3] + '\');" class="evaluationChecklistAccordionLink">' + data.ParticipantOwnedWorkflowApps[i][3] + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //        //topHtml += '            <div id="divConfigurationLeftSideMenuButton' + i + '" class="divLeftButton" style="border-radius:20px 0 0 20px;background-color:#066B8B;" onclick="selectCurrentWorkflowApp(\'' + data.ParticipantOwnedWorkflowApps[i][3] + '\');">' + data.ParticipantOwnedWorkflowApps[i][3] + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //        //topHtml += '        </td>';
                //        //topHtml += '    </tr>';
                //        //topHtml += '    <tr><td></td></tr>';
                //        topHtml += data.ParticipantOwnedWorkflowApps[i][3] + '<br />';
                //    } else {
                //        //bottomHtml += '    <tr>';
                //        //bottomHtml += '        <td style="padding:0 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;">';
                //        ////bottomHtml += '            <div id="divConfigurationLeftSideMenuButton' + i + '" style="font-size:small;height:28px;width:92%;white-space:nowrap;border-radius:0 0 0 0;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color:#6682b5;" onclick="cmdChooseSelectedWorkflow(\'' + data.ParticipantOwnedWorkflowApps[i][2] + '\', \'' + data.ParticipantOwnedWorkflowApps[i][3] + '\');" class="evaluationChecklistAccordionLink">' + data.ParticipantOwnedWorkflowApps[i][3] + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //        //bottomHtml += '            <div id="divConfigurationLeftSideMenuButton' + i + '" class="divLeftButton" style="font-size:small;" onclick="cmdChooseSelectedWorkflow(\'' + data.ParticipantOwnedWorkflowApps[i][2] + '\', \'' + data.ParticipantOwnedWorkflowApps[i][3] + '\');">' + data.ParticipantOwnedWorkflowApps[i][3] + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //        //bottomHtml += '        </td>';
                //        //bottomHtml += '    </tr>';
                //        //bottomHtml += '    <tr><td></td></tr>';
                //        bottomHtml += '            <div id="divConfigurationLeftSideMenuButton' + i + '" class="divLeftButton" style="font-size:22pt;" onclick="cmdChooseSelectedWorkflow(\'' + data.ParticipantOwnedWorkflowApps[i][2] + '\', \'' + data.ParticipantOwnedWorkflowApps[i][3] + '\');">' + data.ParticipantOwnedWorkflowApps[i][3] + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //    }
                //}
                //html += topHtml + bottomHtml;
                ////
                ////html += '    <tr>';
                ////html += '        <td style="padding:0 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;">';
                //////html += '            <div id="divConfigurationLeftSideMenuButton" style="font-size:small;height:28px;width:92%;white-space:nowrap;border-radius:0 0 0 0;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color:#6682b5;" onclick="cmdAddAWorkflowApp();" class="evaluationChecklistAccordionLink">New Workflow...&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                ////html += '            <div id="divConfigurationLeftSideMenuButton" class="divLeftButton" style="font-size:small;" onclick="cmdAddAWorkflowApp();">New Workflow...&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                ////html += '        </td>';
                ////html += '    </tr>';
                ////html += '    <tr><td></td></tr>';
                //////
                ////html += '    </td>';
                ////html += '  </tr>';
                ////html += '</table>';

                //// Todd: Put this back!!!
                ////html += '            <div id="divConfigurationLeftSideMenuButton" class="divLeftButton" style="font-size:22pt;" onclick="cmdAddAWorkflowApp();">New Workflow...&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                //html += '            <div id="divConfigurationLeftSideMenuButton"></div>';
                //$('#divConfigurationLeftSideMenu').html(html);

                populateStartPageItem('divBehavior', '', '');
            } catch (e) {
                displayAlertDialog('Error in ios8.js.generateConfigurationLeftSideMenu()', e.message);
            }
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.generateConfigurationLeftSideMenu():' + errorCode + ', ' + errorMessage);
        }
    });
}

function selectHomePageWorkflowAppDropDown_change() {
    var selectedValue = $('#selectHomePageWorkflowAppDropDown option:selected').val();
    var selectedWorkflowAppId = selectedValue.split('|')[0];
    var selectedWorkflowAppRole = selectedValue.split('|')[1];
    var selectedWorkflowAppTitle = $('#selectHomePageWorkflowAppDropDown option:selected').text();
    if (workflowAppId != selectedWorkflowAppId) {
        // Update the database with the new selected Workflow App, then regenerate the interface.
        var data = [];
        data = {
            bwParticipantId: participantId,
            selectedWorkflowAppId: selectedWorkflowAppId
        };
        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectedworkflowapp";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data.message != 'SUCCESS') {
                    displayAlertDialog(data.message);
                } else {
                    workflowAppId = selectedWorkflowAppId;
                    workflowAppTitle = selectedWorkflowAppTitle;
                    newBudgetRequestManagerTitle = data.d.results[0].bwNewBudgetRequestManagerTitle;
                    if (data.d.results[0].bwRequireStartEndDates == 'true') requireStartEndDates = true;
                    else requireStartEndDates = false;
                    if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                    else requireRequestDetails = false;
                    if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                    else requireRequestDetails = false;
                    if (data.d.results[0].bwEnableNewRequestAttachments == 'true') enableNewRequestAttachments = true;
                    else enableNewRequestAttachments = false;
                    if (data.d.results[0].bwEnableNewRequestBarcodeAttachments == 'true') enableNewRequestBarcodeAttachments = true;
                    else enableNewRequestBarcodeAttachments = false;

                    if (data.d.results[0].bwQuotingEnabled == 'true') quotingEnabled = true;
                    else quotingEnabled = false;

                    if (data.d.results[0].bwExpenseRequestsEnabled == 'true') reimbursementRequestsEnabled = true;
                    else reimbursementRequestsEnabled = false;

                    if (data.d.results[0].bwCloseoutsEnabled == 'true') closeoutsEnabled = true;
                    else closeoutsEnabled = false;

                    if (data.d.results[0].bwRecurringExpensesEnabled == 'true') recurringExpensesEnabled = true;
                    else recurringExpensesEnabled = false;

                    if (data.d.results[0].bwSupplementalsEnabled == 'true') supplementalsEnabled = true;
                    else supplementalsEnabled = false;

                    if (data.d.results[0].bwStrictAuditingEnabled == 'true') strictAuditingEnabled = true;
                    else strictAuditingEnabled = false;

                    //quotingEnabled = data.d.results[0].bwQuotingEnabled;

                    //requireStartEndDates = data.d.results[0].bwRequireStartEndDates;
                    //requireRequestDetails = data.d.results[0].bwRequireRequestDetails;
                    //enableNewRequestAttachments = data.d.results[0].bwEnableNewRequestAttachments;
                    //quotingEnabled = data.d.results[0].bwQuotingEnabled; 


                    //renderHomePagePersonalizedSection();


                    // TODD: I DONT THINK THIS IS REGENERATING THE FA SECTION PRPERLY.
                    generateConfigurationLeftSideMenu();
                    //populateStartPageItem('divConfiguration', 'Reports', '');
                    populateStartPageItem('divBehavior', 'Reports', '');
                    // Set the selected value for the drop down on the home page, selectHomePageWorkflowAppDropDown.
                    $('#selectHomePageWorkflowAppDropDown option[value="' + selectedWorkflowAppId + '"]').attr('selected', 'selected');

                    renderHomePagePersonalizedSection();
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.selectHomePageWorkflowAppDropDown_change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    }
}

//function selectArchivePageFilterDropDown_change() {
//    var selectedValue = $('#selectArchivePageFilterDropDown option:selected').val();
//    //cmdListAllBudgetRequests(selectedValue);
//    cmdListAllBudgetRequestsUsingClientDatasetApproach();

//}

function cmdChooseSelectedWorkflow(selectedWorkflowAppId, selectedWorkflowAppTitle) {
    if (workflowAppId != selectedWorkflowAppId) {
        // Update the database with the new selected Workflow App, then regenerate the interface.
        var data = [];
        data = {
            bwParticipantId: participantId,
            selectedWorkflowAppId: selectedWorkflowAppId
        };
        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectedworkflowapp";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: data,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data.message != 'SUCCESS') {
                    displayAlertDialog(data.message);
                } else {
                    workflowAppId = selectedWorkflowAppId;
                    workflowAppTitle = selectedWorkflowAppTitle;
                    newBudgetRequestManagerTitle = data.d.results[0].bwNewBudgetRequestManagerTitle;
                    if (data.d.results[0].bwRequireStartEndDates == 'true') requireStartEndDates = true;
                    else requireStartEndDates = false;
                    if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                    else requireRequestDetails = false;
                    if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                    else requireRequestDetails = false;
                    if (data.d.results[0].bwEnableNewRequestAttachments == 'true') enableNewRequestAttachments = true;
                    else enableNewRequestAttachments = false;
                    if (data.d.results[0].bwEnableNewRequestBarcodeAttachments == 'true') enableNewRequestBarcodeAttachments = true;
                    else enableNewRequestBarcodeAttachments = false;
                    //quotingEnabled = data.d.results[0].bwQuotingEnabled;

                    if (data.d.results[0].bwQuotingEnabled == 'true') quotingEnabled = true;
                    else quotingEnabled = false;

                    if (data.d.results[0].bwExpenseRequestsEnabled == 'true') reimbursementRequestsEnabled = true;
                    else reimbursementRequestsEnabled = false;

                    if (data.d.results[0].bwCloseoutsEnabled == 'true') closeoutsEnabled = true;
                    else closeoutsEnabled = false;

                    if (data.d.results[0].bwRecurringExpensesEnabled == 'true') recurringExpensesEnabled = true;
                    else recurringExpensesEnabled = false;

                    if (data.d.results[0].bwSupplementalsEnabled == 'true') supplementalsEnabled = true;
                    else supplementalsEnabled = false;

                    if (data.d.results[0].bwStrictAuditingEnabled == 'true') strictAuditingEnabled = true;
                    else strictAuditingEnabled = false;

                    generateConfigurationLeftSideMenu();
                    //populateStartPageItem('divConfiguration', 'Reports', '');
                    populateStartPageItem('divBehavior', 'Reports', '');
                    // Set the selected value for the drop down on the home page, selectHomePageWorkflowAppDropDown.
                    $('#selectHomePageWorkflowAppDropDown option[value="' + selectedWorkflowAppId + '"]').attr('selected', 'selected');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.cmdChooseSelectedWorkflow(): ' + errorCode + ' ' + errorMessage);
            }
        });
    }
}

//function generateArchivePage() {

//    //disableArchiveButton(); // disableBehaviorButton();

//    $('#liWelcome').hide();
//    $('#liSummaryReport').hide();
//    $('#liConfiguration').hide();
//    $('#liHelp').hide();
//    $('#liNewRequest').hide();
//    $('#liArchive').show();

//    var e1 = document.getElementById('divNewRequestMasterDiv');
//    e1.style.borderRadius = '20px 0 0 20px';

//}

function generateBehaviorPage() {
    // This is where we set defaults for configurations that haven't been done yet.
    //if (emailNotificationLevel == '') emailNotificationLevel == 'alldiscourse';

    //if (emailNotificationFrequency == '') emailNotificationFrequency = 'immediately'; //immediately, aggregatedaily, aggregatetwicedaily
    //if (emailNotificationTypes == '') emailNotificationTypes = 'allnotifications'; //allnotifications, onlymytasknotifications


    if (newBudgetRequestManagerTitle == '') newBudgetRequestManagerTitle = 'Manager';



    $('#divFunctionalAreasMasterDiv').empty(); // Clear the div and rebuild it with out new 'Departments' title.
    $('#divFunctionalAreasMasterSubMenuDiv').hide(); //This si the top bar which we want to hide in this case.

    var html = '';

    // Original html
    //html += '<table style="border-width: 0px; margin: 0px; padding: 0px; width: 100%;"><tbody><tr style="border-width: 0px; margin: 0px; padding: 0px;"><td style="border-width: 0px; margin: 0px; padding: 0px;">';
    //html += 'yBehavior';
    //html += '</td></tr></tbody></table>';



    // New html.
    html += '<table style="width:100%;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<tr style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<div class="">';
    html += '<span id="spanSecondTopBarExpandCollapse" class="spanTopBarExpandCollapseIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">+</span><span id="xxxx" class="divTopBarTextContentsIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">Behavior</span>';
    html += '</div>';
    html += '</td>';
    html += '<td style="text-align:right;white-space:nowrap;font-size:small;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;"><!--Year:&nbsp;<select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>--></td>';
    html += '</tr>';
    html += '</table>';


    $('#divFunctionalAreasMasterDiv').html(html);
    //
    //disableDepartmentsButton();
    disableBehaviorButton();
    //
    //$('#divFunctionalAreasButton').css({'background-color':'#6682b5'});
    //
    //$('#divWorkflows').css({ 'height': '28px', 'width': '82%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 20px', 'border-width': '0 0 0 0', 'background-color': '#6682b5' });
    //
    $('#divFunctionalAreasSubSubMenus').empty();

    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';

    // Header text section.
    html += '  <tr>';
    html += '    <td>';
    html += '       <span style="font-size:25pt;font-style:italic;">These are your personal settings, which apply to all of your workflows.</span>';
    html += '   </td></tr></table>';
    html += '       <table>';
    html += '<tr><td>&nbsp;</td></tr>';

    // "Send me email" immediately section.
    html += '<tr style="display:none;"><td style="text-align:left;" class="bwSliderTitleCell">Send me email:</td><td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationImmediately" name="rbgMyEmailNotificationFrequency" onclick="cmdRbgMyEmailNotificationFrequency_click(\'immediately\');" />&nbsp;<span id="spanRbEmailImmediately" style="color:gray;font-size:22pt;">&nbsp;&nbsp;Immediately</span></td></tr>';

    // "Send me email" aggregate twice daily section.
    html += '<tr style="display:none;"><td></td><td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationAggregated" name="rbgMyEmailNotificationFrequency" onclick="cmdRbgMyEmailNotificationFrequency_click(\'aggregatetwicedaily\');" />&nbsp;';
    html += '<span id="spanRbAggregateEmailTwiceDaily" style="color:gray;font-size:22pt;">&nbsp;&nbsp;Aggregate into an email sent twice daily at<br />';
    html += '<span style="float:right;">';
    html += '<select id="selectAggregateEmailTwiceDailyFirstTime" onchange="cmdRbgMyEmailNotificationFrequency_click(\'aggregatetwicedaily\');" disabled class="spanH2">';
    html += '<option value="1">1AM</option>';
    html += '<option value="2">2AM</option>';
    html += '<option value="3">3AM</option>';
    html += '<option value="4">4AM</option>';
    html += '<option value="5">5AM</option>';
    html += '<option value="6">6AM</option>';
    html += '<option value="7">7AM</option>';
    html += '<option value="8">8AM</option>';
    html += '<option value="9" selected>9AM</option>';
    html += '<option value="10">10AM</option>';
    html += '<option value="11">11AM</option>';
    html += '<option value="12">12PM</option>';
    html += '<option value="13">1PM</option>';
    html += '<option value="14">2PM</option>';
    html += '<option value="15">3PM</option>';
    html += '<option value="16">4PM</option>';
    html += '<option value="17">5PM</option>';
    html += '<option value="18">6PM</option>';
    html += '<option value="19">7PM</option>';
    html += '<option value="20">8PM</option>';
    html += '<option value="21">9PM</option>';
    html += '<option value="22">10PM</option>';
    html += '<option value="23">11PM</option>';
    html += '<option value="24">12AM</option>';
    html += '</select>';
    html += ' and ';
    html += '<select id="selectAggregateEmailTwiceDailySecondTime" onchange="cmdRbgMyEmailNotificationFrequency_click(\'aggregatetwicedaily\');" disabled class="spanH2">';
    html += '<option value="1">1AM</option>';
    html += '<option value="2">2AM</option>';
    html += '<option value="3">3AM</option>';
    html += '<option value="4">4AM</option>';
    html += '<option value="5">5AM</option>';
    html += '<option value="6">6AM</option>';
    html += '<option value="7">7AM</option>';
    html += '<option value="8">8AM</option>';
    html += '<option value="9">9AM</option>';
    html += '<option value="10">10AM</option>';
    html += '<option value="11">11AM</option>';
    html += '<option value="12">12PM</option>';
    html += '<option value="13">1PM</option>';
    html += '<option value="14">2PM</option>';
    html += '<option value="15">3PM</option>';
    html += '<option value="16" selected>4PM</option>';
    html += '<option value="17">5PM</option>';
    html += '<option value="18">6PM</option>';
    html += '<option value="19">7PM</option>';
    html += '<option value="20">8PM</option>';
    html += '<option value="21">9PM</option>';
    html += '<option value="22">10PM</option>';
    html += '<option value="23">11PM</option>';
    html += '<option value="24">12AM</option>';
    html += '</select>';
    html += '  ';
    html += '<select id="selectAggregateEmailTwiceDailyTimezoneDisplayName" onchange="cmdRbgMyEmailNotificationFrequency_click(\'aggregatetwicedaily\');" disabled class="spanH2">';
    html += '<option value="AST">AST</option>';
    html += '<option value="EST">EST</option>';
    html += '<option value="CST">CST</option>';
    html += '<option value="MST">MST</option>';
    html += '<option value="PST">PST</option>';
    html += '</select>';
    html += '</span>';
    html += '</span>';
    html += '</td></tr>';
    html += '   <tr><td colspan="2">&nbsp;</td></tr>';

    // "Send me this kind of email" section.
    //html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">Send me this kind of email:</td><td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeAllNotifications" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'allnotifications\');" /><table><tr><td style="pading-left:100px;"><span id="spanEmailNotificationTypeAllNotifications" style="color:gray;font-size:22pt;">All notifications</span></td></tr></table></td></tr>';
    //html += '<tr><td></td><td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeOnlyTasks" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'onlymytasknotifications\');" />&nbsp;<span id="spanEmailNotificationTypeOnlyTasks" style="color:gray;font-size:22pt;">&nbsp;&nbsp;Only my task notifications</span></td></tr>';
    //html += '<tr><td></td><td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeNoNotifications" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'nonotifications\');" />&nbsp;<span id="spanEmailNotificationTypeNoNotifications" style="color:gray;font-size:22pt;">&nbsp;&nbsp;No email notifications</span></td></tr>';

    html += '<tr>';
    html += '  <td style="text-align:left;" class="bwSliderTitleCell">Send me this kind of email:</td>';
    html += '  <td>';
    html += '    <table style="width:100%;"><tr>';
    html += '      <td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeAllNotifications" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'allnotifications\');" /></td>';
    html += '      <td class="bwTdRadiobuttonTextLightCurrencyTableCell"><span id="spanEmailNotificationTypeAllNotifications" style="color:gray;font-size:22pt;">All notifications</span></td>';
    html += '    </tr></table>';
    html += '  </td>';
    html += '</tr>';
    html += '<tr>';
    html += '  <td></td>';
    html += '  <td>';
    html += '    <table style="width:100%;"><tr>';
    html += '      <td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeOnlyTasks" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'onlymytasknotifications\');" /></td>';
    html += '      <td class="bwTdRadiobuttonTextLightCurrencyTableCell"><span id="spanEmailNotificationTypeOnlyTasks" style="color:gray;font-size:22pt;">Only my task notifications</span></td>';
    html += '    </tr></table>';
    html += '  </td>';
    html += '</tr>';
    html += '<tr>';
    html += '  <td></td>';
    html += '  <td>';
    html += '    <table style="width:100%;"><tr>';
    html += '      <td class="bwTdRadiobuttonLightCurrencyTableCell"><input type="radio" id="rbMyEmailNotificationTypeNoNotifications" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'nonotifications\');" /></td>';
    html += '      <td class="bwTdRadiobuttonTextLightCurrencyTableCell"><span id="spanEmailNotificationTypeNoNotifications" style="color:gray;font-size:22pt;">No email notifications</span></td>';
    html += '    </tr></table>';
    html += '  </td>';
    html += '</tr>';


    // "Display tips at the top of the page" section.
    //html += '<tr><td>&nbsp;</td></tr>';
    //html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">';
    //html += 'Display tips at the top of the page:&nbsp;</td>';
    //html += '<td class="bwChartCalculatorLightCurrencyTableCell"><label for="configurationBehaviorTipsSlider"></label><input type="checkbox" name="configurationBehaviorTipsSlider" id="configurationBehaviorTipsSlider" /></td></tr>';
    //html += '<tr><td>&nbsp;</td></tr>';

    // "Display invitation section on the home page" section.
    html += '   <tr><td style="text-align:left;" class="bwSliderTitleCell">';
    html += '           Display invitation section on the home page:</td>';
    html += '       <td class="bwChartCalculatorLightCurrencyTableCell"><label for="configurationBehaviorDisplayInvitationsOnHomePageSlider"></label><input type="checkbox" name="configurationBehaviorDisplayInvitationsOnHomePageSlider" id="configurationBehaviorDisplayInvitationsOnHomePageSlider" /></td></tr>';
    html += '   <tr><td>&nbsp;</td></tr>';

    html += '       </table>';
    $('#divFunctionalAreasSubSubMenus').html(html);

    // Now we set all the display elements into their correct states!
    //emailAggregatorTwiceDailyFirstTime
    //emailAggregatorTwiceDailySecondTime
    //emailAggregatorTwiceDailyTimezoneDisplayName

    // Check if this has a value. This will be undefined the first time around until something gets saved back to the database.
    if (emailAggregatorTwiceDailyFirstTime) {
        //displayAlertDialog('emailAggregatorTwiceDailyFirstTime: ' + emailAggregatorTwiceDailyFirstTime);
        document.getElementById('selectAggregateEmailTwiceDailyFirstTime').value = emailAggregatorTwiceDailyFirstTime;
        document.getElementById('selectAggregateEmailTwiceDailySecondTime').value = emailAggregatorTwiceDailySecondTime;
        document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').value = emailAggregatorTwiceDailyTimezoneDisplayName;
    }


    if (emailNotificationFrequency == 'immediately') {
        document.getElementById('rbMyEmailNotificationImmediately').setAttribute('checked', 'checked');
        document.getElementById('spanRbEmailImmediately').style.color = 'black'; //$('spanRbEmailImmediately').css({ 'color': 'black' });
        document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = true;
        document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = true;
        document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = true;
    } else if (emailNotificationFrequency == 'aggregatetwicedaily') {
        document.getElementById('rbMyEmailNotificationAggregated').setAttribute('checked', 'checked');
        document.getElementById('spanRbAggregateEmailTwiceDaily').style.color = 'black'; //$('spanRbAggregateEmailTwiceDaily').css({ 'color': 'black' });
        document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = false;
        document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = false;
        document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = false;
    }

    if (emailNotificationTypes == 'allnotifications') {
        document.getElementById('rbMyEmailNotificationTypeAllNotifications').setAttribute('checked', 'checked');
        document.getElementById('spanEmailNotificationTypeAllNotifications').style.color = 'black';
    } else if (emailNotificationTypes == 'onlymytasknotifications') {
        document.getElementById('rbMyEmailNotificationTypeOnlyTasks').setAttribute('checked', 'checked');
        document.getElementById('spanEmailNotificationTypeOnlyTasks').style.color = 'black';
    } else if (emailNotificationTypes == 'nonotifications') {
        document.getElementById('rbMyEmailNotificationTypeNoNotifications').setAttribute('checked', 'checked');
        document.getElementById('spanEmailNotificationTypeNoNotifications').style.color = 'black';
    }



    //if (emailNotificationTypes == 'allnotifications') html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">Send me this kind of email:</td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'allnotifications\');" checked />&nbsp;All notifications</td></tr>';
    //else html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">Send me this kind of email:</td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'allnotifications\');" />&nbsp;All notifications</td></tr>';
    //if (emailNotificationTypes == 'onlymytasknotifications') html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'onlymytasknotifications\');" checked />&nbsp;Only my task notifications</td></tr>';
    //else html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotificationTypes" onclick="cmdRbgMyEmailNotificationTypes_click(\'onlymytasknotifications\');" />&nbsp;Only my task notifications</td></tr>';






    //if (emailNotificationLevel == 'alldiscourse') html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">Email Notifications:</td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" checked="checked" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'alldiscourse\');" />&nbsp;Receive email notifications as soon as the state of a request has been changed.</td</tr>';
    //else html += '<tr><td style="text-align:left;" class="bwSliderTitleCell">Email Notifications:</td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'alldiscourse\');" />&nbsp;Receive email notifications as soon as the state of a request has been changed.</td></tr>';

    //if (emailNotificationLevel == 'alldiscoursesenddaily') html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" checked="checked" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'alldiscoursesenddaily\');" />&nbsp;Only send me one email a day with all of my notifications.</td></tr>';
    //else html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'alldiscoursesenddaily\');" />&nbsp;Only send me one email a day with all of my notifications.</td></tr>';

    ////html += '<br /><br />';
    //if (emailNotificationLevel == 'onlyuponcompletion') html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" checked="checked" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'onlyuponcompletion\');" />&nbsp;Only upon completion, and when action is required.</td></tr>';
    //else html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="radio" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'onlyuponcompletion\');" />&nbsp;Only upon completion, and when action is required.</td></tr>';



    //if (emailNotificationLevel == 'xxxx') html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="checkbox" checked="checked" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'xxxx\');" />&nbsp;Ignore task re-assignment notifications.</td></tr>';
    //else html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="checkbox" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'xxxx\');" />&nbsp;Ignore task re-assignment notificationsx.</td></tr>';

    //if (emailNotificationLevel == 'xxxx') html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="checkbox" checked="checked" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'xxxx\');" />&nbsp;Notify me about anything that happens no matter how inconsequential.</td></tr>';
    //else html += '<tr><td></td><td class="bwChartCalculatorLightCurrencyTableCell"><input type="checkbox" name="rbgMyEmailNotifications" onclick="cmdRbgMyEmailNotifications_click(\'xxxx\');" />&nbsp;Notify me about anything that happens no matter how inconsequential.</td></tr>';







    var configurationBehaviorTipsOptions = {
        checked: tipsDisplayOn,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>ON</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>OFF</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorTipsSlider").switchButton(configurationBehaviorTipsOptions);

    var configurationBehaviorDisplayInvitationsOnHomePageOptions = {
        checked: displayInvitationsOnHomePageDisplayOn,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>ON</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>OFF</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorDisplayInvitationsOnHomePageSlider").switchButton(configurationBehaviorDisplayInvitationsOnHomePageOptions);



    // Hook up the events.
    $('#configurationBehaviorTipsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (tipsDisplayOn == true) tipsDisplayOn = false;
        else tipsDisplayOn = true;
        var _userDetails = [];
        _userDetails = {
            bwParticipantId: participantId,
            bwTipsDisplayOn: tipsDisplayOn.toString()
        };
        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationbehaviorTipsDisplay";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _userDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Participant configurations to the display.
                    if (tipsDisplayOn == true) {
                        $('#spanAlertLink').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkNewRequest').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkMyStuff').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkSummary').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkConfiguration').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkHelp').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    } else {
                        $('#spanAlertLink').html('&nbsp;');
                        $('#spanAlertLinkNewRequest').html('&nbsp;');
                        $('#spanAlertLinkMyStuff').html('&nbsp;');
                        $('#spanAlertLinkSummary').html('&nbsp;');
                        $('#spanAlertLinkConfiguration').html('&nbsp;');
                        $('#spanAlertLinkHelp').html('&nbsp;');
                    }
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorTipsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    // Hook up the events.
    $('#configurationBehaviorDisplayInvitationsOnHomePageSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (displayInvitationsOnHomePageDisplayOn == true) displayInvitationsOnHomePageDisplayOn = false;
        else displayInvitationsOnHomePageDisplayOn = true;

        var _userDetails = [];
        _userDetails = {
            bwParticipantId: participantId,
            bwInvitationsOnHomePageDisplayOn: displayInvitationsOnHomePageDisplayOn.toString()
        };
        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationbehaviordisplayinvitationsonhomepage";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _userDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    if (displayInvitationsOnHomePageDisplayOn == true) {
                        $('#divInvitationSectionOnHomePage').show();
                    } else {
                        $('#divInvitationSectionOnHomePage').hide();
                    }
                    // Apply Participant configurations to the display.
                    //if (tipsDisplayOn == true) {
                    //    $('#spanAlertLink').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //    $('#spanAlertLinkNewRequest').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //    $('#spanAlertLinkMyStuff').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //    $('#spanAlertLinkSummary').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //    $('#spanAlertLinkConfiguration').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //    $('#spanAlertLinkHelp').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    //} else {
                    //    $('#spanAlertLink').html('&nbsp;');
                    //    $('#spanAlertLinkNewRequest').html('&nbsp;');
                    //    $('#spanAlertLinkMyStuff').html('&nbsp;');
                    //    $('#spanAlertLinkSummary').html('&nbsp;');
                    //    $('#spanAlertLinkConfiguration').html('&nbsp;');
                    //    $('#spanAlertLinkHelp').html('&nbsp;');
                    //}
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorDisplayInvitationsOnHomePageSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });










}

function kupValidateLicenseFormat() {
    // Check that the format of the license key matches this: "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".
    // 8 - 4 - 4 - 4 - 12 = total length of 36.
    document.getElementById('btnAddNewLicense').disabled = true; // Disable the Add button until it all looks right!
    var licenseKey = document.getElementById('txtLicense').value;

    if (licenseKey.length == 36) {
        if (licenseKey.split('-')[0].length == 8) {
            if (licenseKey.split('-')[1].length == 4) {
                if (licenseKey.split('-')[2].length == 4) {
                    if (licenseKey.split('-')[3].length == 4) {
                        if (licenseKey.split('-')[4].length == 12) {
                            // The key has the orrect structure. Now checking for 4 and y.
                            if (licenseKey.split('-')[2].indexOf('4') == 0) {
                                //displayAlertDialog('valid looking key');
                                // This looks like a valid key! Now we just need to check that they haven't already added it.
                                if (globalLicenses.length == 0) {
                                    //Enable the Add button.
                                    document.getElementById('btnAddNewLicense').disabled = false;
                                } else {
                                    var existsAlready = false;
                                    for (var i = 0; i < globalLicenses.length; i++) {
                                        if (globalLicenses[i][2] == licenseKey) {
                                            existsAlready = true;
                                        }
                                    }
                                    if (existsAlready == true) {
                                        displayAlertDialog('You have already assigned this license. It can\'t be assigned twice.');
                                        document.getElementById('txtLicense').value = '';
                                    } else {
                                        //Enable the Add button.
                                        document.getElementById('btnAddNewLicense').disabled = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function getLicenseExpiryFriendlyDate(licenseClaimedTimestamp) {
    var year = Number(licenseClaimedTimestamp.split('-')[0]) + 1; // The license is good for a year from when it is claimed!
    var month = licenseClaimedTimestamp.split('-')[1];
    var day1 = licenseClaimedTimestamp.split('-')[2];
    var day = day1.split('T')[0];
    var monthName = monthNames[month - 1];
    var result = monthName + ' ' + day + ', ' + year;
    //displayAlertDialog('result:' + result);
    return result;
}

function cmdViewLicenses() {
    displayAlertDialog('This functionality is incomplete. Coming soon, this is where you will be able to view your license details and purchase invoice.');
}

function cmdAddNewLicense() {
    var bwWorkflowAppLicenseId = document.getElementById('txtLicense').value;
    var licenseDetails = [];
    licenseDetails = {
        LicenseClaimedById: participantId,
        LicenseClaimedByFriendlyName: participantFriendlyName,
        LicenseClaimedByEmail: participantEmail,
        bwWorkflowAppId: workflowAppId,
        bwWorkflowAppLicenseId: bwWorkflowAppLicenseId
    };
    var operationUri = webserviceurl + "/bwworkflowapplicenses/add";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: licenseDetails,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            //displayAlertDialog('data:' + JSON.stringify(data));
            if (data.message == 'SUCCESS') {
                // The license has been assigned.
                // Add to globalLicenses.
                gWorkflowLicenseStatus = data.LicensePackageCategory; // 'gold'; // This is a global variable, and determines functionality throughout!!!!
                var tmpLicense = new Array(5);
                tmpLicense[0] = data.LicensePackageCategory;  //'gold';
                tmpLicense[1] = data.LicensePackageCategory;  //'Gold';
                tmpLicense[2] = data.bwWorkflowAppLicenseId; //licenseKey;
                tmpLicense[3] = data.LicenseClaimedTimestamp;  //'2016-6-16T4:44:32'; // This is just temporary to provide a date.
                tmpLicense[4] = getLicenseExpiryFriendlyDate(data.LicenseClaimedTimestamp); //'August 1, 2016';

                //displayAlertDialog('Developer debug point cmdAddNewLicense().1');
                globalLicenses.push(tmpLicense);
                //displayAlertDialog('Developer debug point cmdAddNewLicense().2');
                var html = '';
                for (var i = 0; i < globalLicenses.length; i++) {
                    html += '<br /><span style="cursor:pointer;" title="Click here to view your licenses..." onclick="cmdViewLicenses();"><span style="font-size:x-small;color:gray;">' + globalLicenses[i][2] + '</span>&nbsp;&nbsp;'; // The license key (guid).
                    html += '<span style="font-size:small;font-style:italic;">This ' + globalLicenses[i][1] + ' license is good until ' + globalLicenses[i][4] + '.</span></span>';
                }
                html += '';
                html += '';
                html += '';
                //displayAlertDialog('Developer debug point cmdAddNewLicense().3');
                document.getElementById('spanLicenseStatus').innerHTML = html;
                //displayAlertDialog('Developer debug point cmdAddNewLicense().4');
                document.getElementById('txtLicense').value = ''; // Clear the text box.
                //displayAlertDialog('Developer debug point cmdAddNewLicense().5');
                // Redraw the interface!
                populateStartPageItem('divWorkflowSettings', 'Reports', '');

            } else {
                // The license cannot be assigned. It may be assigned already, or some other issue.
                displayAlertDialog(data.message);
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdAddNewLicense.bwworkflowapplicenses/add(): ' + errorCode + ' ' + errorMessage);
        }
    });
}

function displayForm_DisplayCloseOut(brId) {
    // Try to close this in case it is open.
    //displayAlertDialog('displayForm_DisplayCloseOut(' + brId + ')');
    try {
        $('#ArDialog').dialog("close");
    } catch (e) {
    }

    $('#bwQuickLaunchMenuTd').css({
        width: '0'
    }); // This gets rid of the jumping around.

    $('#liNewRequest').hide();
    $('#liArchive').hide();
    $('#liSummaryReport').hide();
    $('#liConfiguration').hide();
    $('#liHelp').hide();
    $('#liWelcome').show();

    var e1 = document.getElementById('divNewRequestMasterDiv');
    e1.style.borderRadius = '120px 0 0 120px';

    $('#divWelcomeMasterDivTitle').text('Closeout: ' + brId); // + budgetRequestId);

    $('#divWelcomePageLeftButtonsWelcomeButton').css({
        'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer'
    });
    //$('#divMenuMasterDivWelcomeButton').click(function () {
    //    //$('#divMenuMasterDivWelcomeButton').css({ 'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white' });
    //    //$('#divWelcomeMasterDivTitle').text('Home');
    //    renderWelcomeScreen();
    //});
    //document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButton';
    //$('#divWelcomePageLeftButtonsWelcomeButton').css({ 'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white' });
    $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
        renderWelcomeScreen();
    });




    var html = '<div id="myxml" align="left" style="FONT-SIZE: 10pt; FONT-FAMILY: Calibri;"></div>';
    $('#divWelcomeMessage').html(html);

    var action = "";
    //filename = budgetRequestId;
    //displayForm_DisplayArBasedOnWorkflowStatus(budgetRequestId, action, participantId);

    var operationUri = webserviceurl + "/bwbudgetrequests/" + brId;

    $.ajax({
        url: operationUri,
        method: "GET",
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            //displayAlertDialog(JSON.stringify(data.d.results[0]));
            var xml = data.d.results[0][0].CloseoutXml;



            var xslFile = "";
            xslFile = "/" + viewsFolderName + "/CloseOutEditForm.xsl";
            var file = appweburl2 + xslFile;

            //displayAlertDialog('file: ' + file);
            //displayAlertDialog('xml: ' + xml);

            var xsl = null;
            try //Internet Explorer
            {
                xsl = new ActiveXObject("Microsoft.XMLDOM");
                xsl.async = false;
                xsl.load(file);
            }
            catch (e) {
                try //Firefox, Mozilla, Opera, etc.
                {
                    xsl = document.implementation.createDocument("", "", null);
                    xsl.async = false;
                    xsl.load(file);
                }
                catch (e) {
                    try //Google Chrome
                    {
                        var xmlhttp = new window.XMLHttpRequest();
                        xmlhttp.open("GET", file, false);
                        xmlhttp.send(null);
                        xsl = xmlhttp.responseXML.documentElement;
                    }
                    catch (e) {
                        displayAlertDialog('Failure attempting to parse XSLT in the browser.');
                        WriteToErrorLog('Error in ios8.js.displayForm_DisplayArBasedOnWorkflowStatus()', 'Resubmit: Failure attempting to parse XSLT in the browser: ' + e.name + ', ' + e.message + ', ' + e.stack);
                        redirectForm();
                    }
                }
            }
            var s = TransformToHtmlText(xml, xsl);

            //displayAlertDialog('xxx');
            //$('#myxml').append(s);



            $('#divWelcomeMessage').empty();
            $('#divWelcomeMessage').append(s);

            // Hook up the date pickers.
            $('#dtCloseoutDate').datepicker();
            $('#dtPlacedIntoServiceDate').datepicker();

            // Populate the dates.
            var closedOutDate = $('span[xd\\:binding = "my:coDate"]')[0].innerHTML; // Get this from the hidden field.
            document.getElementById('dtCloseoutDate').value = closedOutDate; // Put it into this field. We do it this way because the date picker is hooked up to this.
            var placedIntoServiceDate = $('span[xd\\:binding = "my:coPlacedIntoServiceDate"]')[0].innerHTML; // Get this from the hidden field.
            document.getElementById('dtPlacedIntoServiceDate').value = placedIntoServiceDate; // Put it into this field. We do it this way because the date picker is hooked up to this.


            //var xml = data.d.results[0][0].CloseoutXml;




            // format the amount.
            formatCurrency2('my:coEstimatedAmountClosed');









        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.displayForm_DisplayCloseOut: ' + errorMessage);
        }
    });
}

function renderLicensesOnSettingsPage() {
    var html = '';
    if (globalLicenses.length == 0) {
        html += '<br /><span style="font-size:small;font-style:italic;">This workflow has no licenses assigned. It is currently the basic (free) version.</span>';
    } else {
        for (var i = 0; i < globalLicenses.length; i++) {
            html += '<br /><span style="cursor:pointer;" title="Click here to view your licenses..." onclick="cmdViewLicenses();"><span style="font-size:x-small;color:gray;">' + globalLicenses[i][2] + '</span>&nbsp;&nbsp;';
            html += '<span style="font-size:small;font-style:italic;">This ' + globalLicenses[i][1] + ' license is good until ' + globalLicenses[i][4] + '.</span></span>';
        }
    }
    document.getElementById('spanLicenseStatus').innerHTML = html;
}

function generateWorkflowSettingsPage() {
    // This is where we set defaults for configurations that haven't been done yet.
    //if (emailNotificationLevel == '') emailNotificationLevel == 'alldiscourse';

    //if (emailNotificationFrequency == '') emailNotificationFrequency = 'immediately'; //immediately, aggregatedaily, aggregatetwicedaily
    //if (emailNotificationTypes == '') emailNotificationTypes = 'allnotifications'; //allnotifications, onlymytasknotifications



    if (newBudgetRequestManagerTitle == '') newBudgetRequestManagerTitle = 'Manager';



    $('#divFunctionalAreasMasterDiv').empty(); // Clear the div and rebuild it with out new 'Departments' title.
    $('#divFunctionalAreasMasterSubMenuDiv').hide(); //This si the top bar which we want to hide in this case.

    var html = '';

    //html += '<table style="border-width: 0px; margin: 0px; padding: 0px; width: 100%;"><tbody><tr style="border-width: 0px; margin: 0px; padding: 0px;"><td style="border-width: 0px; margin: 0px; padding: 0px;">';
    //html += 'Settings';
    //html += '</td></tr></tbody></table>';


    // New html.
    html += '<table style="width:100%;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<tr style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<div class="">';
    html += '<span id="spanSecondTopBarExpandCollapse" class="spanTopBarExpandCollapseIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">+</span><span id="xxxx" class="divTopBarTextContentsIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">Settings</span>';
    html += '</div>';
    html += '</td>';
    html += '<td style="text-align:right;white-space:nowrap;font-size:small;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;"><!--Year:&nbsp;<select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>--></td>';
    html += '</tr>';
    html += '</table>';



    $('#divFunctionalAreasMasterDiv').html(html);
    //
    //disableDepartmentsButton();
    disableWorkflowSettingsButton();
    //
    //$('#divFunctionalAreasButton').css({'background-color':'#6682b5'});
    //
    //$('#divWorkflows').css({ 'height': '28px', 'width': '82%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 20px', 'border-width': '0 0 0 0', 'background-color': '#6682b5' });
    //
    $('#divFunctionalAreasSubSubMenus').empty();
    //var data = {
    //    "bwParticipantId": participantId
    //};
    //$.ajax({
    //    url: appweburl + "/bwworkflowapps/listallforparticipant",
    //    type: "DELETE",
    //    contentType: 'application/json',
    //    data: JSON.stringify(data),
    //    success: function (data) {
    //        var html = '';
    //        html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    //        html += '  <tr>';
    //        html += '    <td>';
    //        html += '        <span style="font-size:small;font-style:italic;">The following section is incomplete, but will be completed soon!</span>';
    //        html += '            <br /><br />';
    //        //html += '        <span id="spanDepartmentTitle" ></span>:&nbsp;<input id="txtBwDepartmentUserName" /><input id="txtBwDepartmentUserId" />&nbsp;&nbsp;<input type="button" value="Save" id="btnSaveAccountingDepartmentUser" onclick="cmdSaveAccountingDepartmentUser();" />';

    //        html += 'Click here to create a new workflow. (maximum of 10)<br />';
    //        html += 'Title:&nbsp;<input type="text" id="txtWorkflowAppTitle" />&nbsp;<input type="button" value="Create the Workflow" onclick="cmdAddAWorkflowApp();" />';
    //        html += '<br /><br /><br /><br />';

    //        html += 'You are the owner of the following workflows:';
    //        for (var i = 0; i < data.length; i++) {
    //            if (data[i][0] == 'true') {
    //                html += '<br />';
    //                if (data[i][3] == '') html += 'notitle';
    //                else html += data[i][3];
    //            }
    //        }

    //        html += '<br /><br /><br />';


    //        html += 'You are a participant in these workflows:';
    //        for (var i = 0; i < data.length; i++) {
    //            if (data[i][0] != 'true') {
    //                html += '<br />';
    //                if (data[i][3] == '') html += 'notitle';
    //                else html += data[i][3];
    //            }
    //        }

    //        html += '<br /><br />';
    //        html += '<i>workflow name</i>';
    //        html += '&nbsp;&nbsp;&nbsp;&nbsp;';
    //        html += '<i>workflow owner</i>';
    //        html += '';
    //        html += '';
    //        html += '    </td>';
    //        html += '  </tr>';
    //        html += '</table>';
    //        $('#divFunctionalAreasSubSubMenus').html(html);
    //    },
    //    error: function (data, errorCode, errorMessage) {
    //        //window.waitDialog.close();
    //        //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
    //        displayAlertDialog('Error in ios8.js.cmdListAllParticipants():' + errorCode + ', ' + errorMessage);
    //    }
    //});

    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '  <tr>';
    html += '    <td>';


    // Currency selection.


    html += '<br /><br />';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '  <tr>';
    html += '    <td>';
    html += '        <span style="font-size:22pt;;font-style:italic;">The title of the workflow is displayed throughout, and also appears in email communications.</span>';
    html += '    </td></tr>';
    html += '</table>';
    html += '<table>';
    html += '  <tr>';
    html += '    <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Workflow title:&nbsp;';
    html += '    </td>';
    html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <input id="txtWorkflowAppTitle" type="text" value="" style="width:700px;" class="spanH2" />';
    html += '       &nbsp;&nbsp;<input type="button" value="Save" onclick="cmdSaveWorkflowTitle();" class="BwButton200" />';
    html += '    </td>';
    html += '  </tr>';
    html += '</table>';

    //html += '<br /><br />';
    //html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    //html += '  <tr>';
    //html += '    <td>';
    //html += '        <span style="font-size:22pt;font-style:italic;">The title of the budget requests is displayed throughout, and also appears in email communications.</span>';
    //html += '    </td></tr>';
    //html += '</table>';
    //html += '<table>';
    //html += '  <tr>';
    //html += '    <td style="text-align:left;" class="bwSliderTitleCell">';
    //html += '       Budget request title format:&nbsp;';
    //html += '    </td>';
    //html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';


    // Here are some ideas for the Title!
    // [BR/SR]YY#####
    // [BR/SR]#####YY
    // [AR/SR]YY#####
    // [AR/SR]#####YY
    //html += '       <select id="selectBudgetRequestTitleFormat" class="spanH2">';
    //html += '           <option value="[BR/SR/QR/RE]YY#####" selected>[BR/SR/QR/RE]YY#####</option>';
    //html += '           <option value="[BR/SR/QR/RE]#####YY">[BR/SR/QR/RE]#####YY</option>';
    //html += '           <option value="[AR/SR/QR/RE]YY#####">[AR/SR/QR/RE]YY#####</option>';
    //html += '           <option value="[AR/SR/QR/RE]#####YY">[AR/SR/QR/RE]#####YY</option>';
    //html += '       </select>';

    ////html += '       &nbsp;&nbsp;<input type="button" value="Save" onclick="cmdSaveBudgetRequestTitlePrefix();" />';
    //html += '    </td>';
    //html += '  </tr>';
    //html += '</table>';

    html += '<br /><br />';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '  <tr>';
    html += '    <td>';
    html += '        <span style="font-size:22pt;font-style:italic;">Specifying a user here enables the PO# issuing process. When a Budget Request has been completely approved, this user will issue a Purchase Order Number from your accounting system, and the Budget Request will be marked as Active.</span>';
    html += '    </td></tr>';
    html += '</table>';
    html += '<table>';
    html += '  <tr>';
    html += '    <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       <span id="spanDepartmentTitle"></span>:&nbsp;';
    html += '    </td>';
    html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <input id="txtBwDepartmentUserName" title="" class="PeopleFriendlyNameSelector" onfocus="this.blur();" onclick="cmdDisplayPeoplePickerDialog(\'txtBwDepartmentUserName\', \'txtBwDepartmentUserId\', \'txtBwDepartmentUserEmail\', \'btnSaveRemoveAccountingDepartmentUser\');" />';
    html += '       <input id="txtBwDepartmentUserId" style="display:none;" />';
    html += '       <input id="txtBwDepartmentUserEmail" style="display:none;" />';
    html += '       &nbsp;<img src="images/addressbook-icon35x35.png" onclick="cmdDisplayPeoplePickerDialog(\'txtBwDepartmentUserName\', \'txtBwDepartmentUserId\', \'txtBwDepartmentUserEmail\', \'btnSaveRemoveAccountingDepartmentUser\');" style="width:80px;height:80px;cursor:pointer;vertical-align:text-bottom;" />';
    //html += '       &nbsp;&nbsp;<input type="button" value="Save" id="btnSaveAccountingDepartmentUser" onclick="cmdSaveAccountingDepartmentUser();" />';
    html += '       &nbsp;&nbsp;<span id="spanSaveAccountingDepartmentUserButton"></span>';
    html += '    </td>';
    html += '  </tr>';
    html += '</table>';











    html += '<br /><br />';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '  <tr>';
    html += '    <td>';
    html += '        <span style="font-size:22pt;font-style:italic;">The title of the person responsible for completing the details of a New Request. This is displayed on the Budget Request forms. The default is "Manager".</span>';
    html += '    </td></tr>';
    html += '</table>';
    html += '<table>';
    html += '  <tr>';
    html += '    <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Manager title:&nbsp;';
    html += '    </td>';
    html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <input id="NewBudgetRequestManagerTitle" type="text" value="' + newBudgetRequestManagerTitle + '" style="width:700px;" class="spanH2" />';
    html += '       &nbsp;&nbsp;<input type="button" value="Save" onclick="cmdSaveNewRequestManagerTitle();" class="BwButton200" />';
    html += '    </td>';
    html += '  </tr>';
    html += '</table>';



    html += '<br /><br />';

    html += '<table>';
    html += '<tr>';
    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Require start/end dates on new requests:';
    html += '   </td>';
    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <label for="configurationBehaviorRequireStartEndDatesSlider"></label><input type="checkbox" name="configurationBehaviorRequireStartEndDatesSlider" id="configurationBehaviorRequireStartEndDatesSlider" />';
    html += '   </td>';
    html += '</tr>';
    html += '<tr><td>&nbsp;</td><td></td></tr>';

    html += '<tr>';
    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Require that a new request has some details:';
    html += '   </td>';
    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <label for="configurationBehaviorRequireDetailsSlider"></label><input type="checkbox" name="configurationBehaviorRequireDetailsSlider" id="configurationBehaviorRequireDetailsSlider" />';
    html += '   </td>';
    html += '</tr>';
    html += '<tr><td>&nbsp;</td><td></td></tr>';

    html += '<tr>';
    html += '    <td colspan="2">';
    html += '<span style="font-size:small;font-style:italic;"></span>';
    html += '    </td>';
    html += '</tr>';
    html += '<tr>';
    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Enable attachments on new requests:';
    html += '   </td>';
    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <label for="configurationBehaviorEnableNewRequestAttachmentsSlider"></label><input type="checkbox" name="configurationBehaviorEnableNewRequestAttachmentsSlider" id="configurationBehaviorEnableNewRequestAttachmentsSlider" />';
    html += '   </td>';
    html += '</tr>';
    html += '<tr><td>&nbsp;</td><td></td></tr>';

    //html += '<tr>';
    //html += '    <td colspan="2">';
    //html += '<span style="font-size:small;font-style:italic;"></span>';
    //html += '    </td>';
    //html += '</tr>';
    //html += '<tr>';
    //html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    //html += '       Enable barcodes:';
    //html += '   </td>';
    //html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    //html += '       <label for="configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider"></label><input type="checkbox" name="configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider" id="configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider" />';
    //html += '   </td>';
    //html += '</tr>';
    //html += '<tr><td>&nbsp;</td><td></td></tr>';

    // Capital expenses are part of the bronze package.
    if (gWorkflowLicenseStatus == 'bronze' || gWorkflowLicenseStatus == 'silver' || gWorkflowLicenseStatus == 'gold') {
        html += '<tr>';
        html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
        html += '       Enable budget requests:';
        html += '   </td>';
        html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
        html += '       <label for="configurationBehaviorEnableCapitalAndExpenseTrackingSlider"></label><input type="checkbox" name="configurationBehaviorEnableCapitalAndExpenseTrackingSlider" id="configurationBehaviorEnableCapitalAndExpenseTrackingSlider" />';
        //if (recurringExpensesEnabled) {
        //    html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
        //    html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';
        //} else {
        //    html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on fixed dates</span></span><br />';
        //    html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on a time period</span></span><br />';
        //}
        html += '   </td>';
        html += '</tr>';
        html += '<tr><td>&nbsp;</td><td></td></tr>';
    }



    html += '<tr>';
    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Enable quote requests:';
    html += '   </td>';
    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <label for="configurationBehaviorEnableQuotingSlider"></label><input type="checkbox" name="configurationBehaviorEnableQuotingSlider" id="configurationBehaviorEnableQuotingSlider" />';
    html += '   </td>';
    html += '</tr>';
    html += '<tr><td>&nbsp;</td><td></td></tr>';


    html += '<tr>';
    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    html += '       Enable reimbursement requests:';
    html += '   </td>';
    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    html += '       <label for="configurationBehaviorEnableReimbursementRequestsSlider"></label><input type="checkbox" name="configurationBehaviorEnableReimbursementRequestsSlider" id="configurationBehaviorEnableReimbursementRequestsSlider" />';
    html += '   </td>';
    html += '</tr>';
    html += '<tr><td>&nbsp;</td><td></td></tr>';


    //html += '<tr>';
    //html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    //html += '       Enable closeouts:';
    //html += '   </td>';
    //html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    //html += '       <label for="configurationBehaviorEnableCloseOutsSlider"></label><input type="checkbox" name="configurationBehaviorEnableCloseOutsSlider" id="configurationBehaviorEnableCloseOutsSlider" />';
    //html += '   </td>';
    //html += '</tr>';
    //html += '<tr><td>&nbsp;</td><td></td></tr>';




    //// Recurring expenses are part of the silver package.
    //if (gWorkflowLicenseStatus == 'silver' || gWorkflowLicenseStatus == 'gold') {
    //    html += '<tr>';
    //    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    //    html += '       Enable recurring expenses:';
    //    html += '   </td>';
    //    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    //    html += '       <label for="configurationBehaviorEnableRecurringExpensesSlider"></label><input type="checkbox" name="configurationBehaviorEnableRecurringExpensesSlider" id="configurationBehaviorEnableRecurringExpensesSlider" />';
    //    //if (recurringExpensesEnabled) {
    //    //    html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span></span><br />';
    //    //    html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span></span><br />';
    //    //} else {
    //    //    html += '<span id="spanRecurringExpensesChoiceOnFixedDates"><input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on fixed dates</span></span><br />';
    //    //    html += '<span id="spanRecurringExpensesChoiceOnATimePeriod"><input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on a time period</span></span><br />';
    //    //}
    //    html += '   </td>';
    //    html += '</tr>';
    //    html += '<tr><td>&nbsp;</td><td></td></tr>';
    //}

    //// Supplementals are part of the gold package.
    //if (gWorkflowLicenseStatus == 'gold') {
    //    html += '<tr>';
    //    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    //    html += '       Enable addendums to existing requests (supplementals):';
    //    html += '   </td>';
    //    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    //    html += '       <label for="configurationBehaviorEnableSupplementalsSlider"></label><input type="checkbox" name="configurationBehaviorEnableSupplementalsSlider" id="configurationBehaviorEnableSupplementalsSlider" />';
    //    //html += '<input type="radio" />recurring on fixed dates<br />';
    //    //html += '<input type="radio" />recurring on a time period<br />';
    //    html += '   </td>';
    //    html += '</tr>';
    //    html += '<tr><td>&nbsp;</td><td></td></tr>';
    //}




    //if (gWorkflowLicenseStatus == 'gold') {
    //    html += '<tr>';
    //    html += '    <td colspan="2">';
    //    html += '<span style="font-size:22pt;font-style:italic;">This ensures that deleted items are retained for future reference. This functionality is incomplete. Coming soon!</span>';
    //    html += '    </td>';
    //    html += '</tr>';
    //    html += '<tr>';
    //    html += '   <td style="text-align:left;" class="bwSliderTitleCell">';
    //    html += '       Enable strict auditing controls:';
    //    html += '   </td>';
    //    html += '   <td class="bwChartCalculatorLightCurrencyTableCell">';
    //    html += '       <label for="configurationBehaviorEnableStrictAuditingSlider"></label><input type="checkbox" name="configurationBehaviorEnableStrictAuditingSlider" id="configurationBehaviorEnableStrictAuditingSlider" />';
    //    html += '   </td>';
    //    html += '</tr>';
    //    html += '<tr><td>&nbsp;</td><td></td></tr>';
    //}


    html += '</table>';




    //html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    //html += '  <tr>';
    //html += '    <td>';
    //html += '        <span style="font-size:22pt;font-style:italic;">If you have purchased licenses, you can add them here.</span>';
    //html += '    </td></tr>';
    //html += '</table>';
    //html += '<table>';
    //html += '  <tr>';
    //html += '    <td style="text-align:left;vertical-align:top;" class="bwSliderTitleCell">';
    //html += '       License:&nbsp;';
    //html += '    </td>';
    //html += '    <td class="bwChartCalculatorLightCurrencyTableCell">';
    //html += '       <input id="txtLicense" type="text" value="" style="width:400px;" class="spanH2" onkeyup="kupValidateLicenseFormat();" onchange="kupValidateLicenseFormat();" />';
    //html += '       &nbsp;&nbsp;<input type="button" id="btnAddNewLicense" value="Add" onclick="cmdAddNewLicense();" disabled style="cursor:pointer;" class="BwButton200" />';
    //html += '       <span id="spanLicenseStatus"></span>';
    ////html += '       <br /><span style="font-size:small;"><i>You currently have no licenses.</i></span>';
    ////html += '       <br /><span style="font-size:small;"><i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about your upgrade options.</a></i></span>';
    //html += '    </td>';
    //html += '  </tr>';
    //html += '  <tr>';
    //html += '    <td>';
    //html += '    </td>';
    //html += '    <td style="text-align:right;">';
    ////html += '      <span style="font-size:small;font-style:italic;text-align:right;"><i><a href="javascript:cmdUpgradeAndPricingOptions();">Click here to learn about your upgrade options.</a></i></span>';
    //html += '';
    //html += '    </td>';
    //html += '  </tr>';
    //html += '</table>';












    html += '';
    html += '    </td>';
    html += '  </tr>';
    html += '</table>';
    html += '<br /><br />';
    $('#divFunctionalAreasSubSubMenus').html(html);

    //$('#spanDepartmentTitle').text('Procurement');
    $('#spanDepartmentTitle').text('Procurement');




    var configurationBehaviorTipsOptions = {
        checked: tipsDisplayOn,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>ON</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>OFF</span>",          // Text to be displayed when unchecked
        width: 50,                 // Width of the button in pixels
        height: 22,                // Height of the button in pixels
        button_width: 24,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorTipsSlider").switchButton(configurationBehaviorTipsOptions);

    var configurationBehaviorRequireStartEndDatesOptions = {
        checked: requireStartEndDates,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted
    };
    $("input#configurationBehaviorRequireStartEndDatesSlider").switchButton(configurationBehaviorRequireStartEndDatesOptions);

    var configurationBehaviorRequireDetailsOptions = {
        checked: requireRequestDetails,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorRequireDetailsSlider").switchButton(configurationBehaviorRequireDetailsOptions);

    var configurationBehaviorEnableNewRequestAttachmentsOptions = {
        checked: enableNewRequestAttachments,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableNewRequestAttachmentsSlider").switchButton(configurationBehaviorEnableNewRequestAttachmentsOptions);


    //configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider
    var configurationBehaviorEnableNewRequestBarcodeAttachmentsOptions = {
        checked: enableNewRequestBarcodeAttachments,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider").switchButton(configurationBehaviorEnableNewRequestBarcodeAttachmentsOptions);


    var configurationBehaviorEnableQuotingOptions = {
        checked: quotingEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableQuotingSlider").switchButton(configurationBehaviorEnableQuotingOptions);


    var configurationBehaviorEnableReimbursementRequestsOptions = {
        checked: reimbursementRequestsEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableReimbursementRequestsSlider").switchButton(configurationBehaviorEnableReimbursementRequestsOptions);


    var configurationBehaviorEnableCloseOutsOptions = {
        checked: closeoutsEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableCloseOutsSlider").switchButton(configurationBehaviorEnableCloseOutsOptions);

    var configurationBehaviorEnableCapitalAndExpenseTrackingOptions = {
        checked: capitalAndExpenseTrackingEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableCapitalAndExpenseTrackingSlider").switchButton(configurationBehaviorEnableCapitalAndExpenseTrackingOptions);

    var configurationBehaviorEnableRecurringExpensesOptions = {
        checked: recurringExpensesEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableRecurringExpensesSlider").switchButton(configurationBehaviorEnableRecurringExpensesOptions);

    var configurationBehaviorEnableSupplementalsOptions = {
        checked: supplementalsEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableSupplementalsSlider").switchButton(configurationBehaviorEnableSupplementalsOptions);

    var configurationBehaviorEnableStrictAuditingOptions = {
        checked: strictAuditingEnabled,
        show_labels: true,         // Should we show the on and off labels?
        labels_placement: "left",  // Position of the labels: "both", "left" or "right"
        on_label: "<span style='font-size:30pt;'>YES</span>",            // Text to be displayed when checked
        off_label: "<span style='font-size:30pt;'>NO</span>",          // Text to be displayed when unchecked
        width: 200,                 // Width of the button in pixels
        height: 88,                // Height of the button in pixels
        button_width: 96,         // Width of the sliding part in pixels
        clear_after: null         // Override the element after which the clearing div should be inserted 
    };
    $("input#configurationBehaviorEnableStrictAuditingSlider").switchButton(configurationBehaviorEnableStrictAuditingOptions);






    $('#txtWorkflowAppTitle').val(workflowAppTitle);

    // Display the licenses.
    //displayAlertDialog('Display the licenses.');
    if (globalLicenses.length > 0) {
        var lHtml = '';
        for (var i = 0; i < globalLicenses.length; i++) {
            lHtml += '<br /><span style="font-size:x-small;color:gray;">' + globalLicenses[i][2] + '</span>&nbsp;&nbsp;'; // The license key (guid).
            lHtml += '<span style="font-size:small;font-style:italic;">This ' + globalLicenses[i][1] + ' license is good until ' + globalLicenses[i][4] + '.</span>';
        }
        document.getElementById('spanLicenseStatus').innerHTML = lHtml;
    }





    // Hook up the events.


    //selectBudgetRequestTitleFormat
    $('#selectBudgetRequestTitleFormat').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        displayAlertDialog('This functionality is not complete. Currently there is only the default Title format.');


        // Todd: Finish this!!
        document.getElementById('selectBudgetRequestTitleFormat').selectedIndex = 0; // This just forces it to always be the top selection for the time being.

    });



    $('#configurationBehaviorTipsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (tipsDisplayOn == true) tipsDisplayOn = false;
        else tipsDisplayOn = true;
        var _userDetails = [];
        _userDetails = {
            bwParticipantId: participantId,
            bwTipsDisplayOn: tipsDisplayOn.toString()
        };
        var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationbehaviorTipsDisplay";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _userDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Participant configurations to the display.
                    if (tipsDisplayOn == true) {
                        $('#spanAlertLink').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkNewRequest').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkMyStuff').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkSummary').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkConfiguration').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                        $('#spanAlertLinkHelp').html('Tips!&nbsp;&nbsp;&nbsp;&nbsp;');
                    } else {
                        $('#spanAlertLink').html('&nbsp;');
                        $('#spanAlertLinkNewRequest').html('&nbsp;');
                        $('#spanAlertLinkMyStuff').html('&nbsp;');
                        $('#spanAlertLinkSummary').html('&nbsp;');
                        $('#spanAlertLinkConfiguration').html('&nbsp;');
                        $('#spanAlertLinkHelp').html('&nbsp;');
                    }
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorTipsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    $('#configurationBehaviorRequireStartEndDatesSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (requireStartEndDates == true) requireStartEndDates = false;
        else requireStartEndDates = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwRequireStartEndDates: requireStartEndDates.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorrequirestartenddates";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=requireStartEndDates, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorRequireStartEndDatesSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    $('#configurationBehaviorRequireDetailsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (requireRequestDetails == true) requireRequestDetails = false;
        else requireRequestDetails = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwRequireRequestJustification details: requireRequestDetails.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorrequirerequestdetails";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=requireRequestDetails, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorRequireDetailsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    $('#configurationBehaviorEnableNewRequestAttachmentsSlider').change(function () {
        if (enableNewRequestAttachments == true) enableNewRequestAttachments = false;
        else enableNewRequestAttachments = true;
        var proceed = true;
        var turnOffReimbursementRequests = false; // This is our dependency flag.
        if (reimbursementRequestsEnabled == true && enableNewRequestAttachments == false) {
            proceed = confirm('Reimbursement Requests will be turned off as well, because attachments are required for this functionality.\n\n\nClick the OK button to proceed...');
            if (proceed == true) {
                turnOffReimbursementRequests = true;
            }
        }

        if (proceed == true) {
            // Check for the dependency flag.
            if (turnOffReimbursementRequests == true) {
                //reimbursementRequestsEnabled = false;
                //displayAlertDialog('reimbursementRequestsEnabled: ' + reimbursementRequestsEnabled);
                $("input#configurationBehaviorEnableReimbursementRequestsSlider").switchButton({ checked: false });
            }
            // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
            var _workflowDetails = [];
            _workflowDetails = {
                bwWorkflowAppId: workflowAppId,
                bwEnableNewRequestAttachments: enableNewRequestAttachments.toString()
            };
            var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorenablenewrequestattachments";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: _workflowDetails,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    if (data != 'SUCCESS') {
                        displayAlertDialog(data);
                    } else {
                        //displayAlertDialog('Updated enableNewRequestAttachments in DB: ' + enableNewRequestAttachments);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error in ios8.js.configurationBehaviorEnableNewRequestAttachmentsSlider.change():2: ' + errorCode + ' ' + errorMessage);
                }
            });
        }
    });

    $('#configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (enableNewRequestBarcodeAttachments == true) enableNewRequestBarcodeAttachments = false;
        else enableNewRequestBarcodeAttachments = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwEnableNewRequestBarcodeAttachments: enableNewRequestBarcodeAttachments.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorenablenewrequestbarcodeattachments";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=enableNewRequestAttachments, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableNewRequestBarcodeAttachmentsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });


    $('#configurationBehaviorEnableQuotingSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (quotingEnabled == true) quotingEnabled = false;
        else quotingEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwQuotingEnabled: quotingEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorquotingenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=quotingEnabled, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableQuotingSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });



    $('#configurationBehaviorEnableReimbursementRequestsSlider').change(function () {
        if (reimbursementRequestsEnabled == true) reimbursementRequestsEnabled = false;
        else reimbursementRequestsEnabled = true;
        var proceed = true;
        var turnOnAttachments = false; // This is our dependency flag.
        if (enableNewRequestAttachments == false && reimbursementRequestsEnabled == true) {
            proceed = confirm('Attachments will be enabled because they are needed by the Reimbursement Request process.\n\n\nClick the OK button to proceed...');
            if (proceed == true) {
                turnOnAttachments = true;
            }
        }

        if (proceed == true) {
            // Check for the dependency flag.
            if (turnOnAttachments == true) {
                //enableNewRequestAttachments = true;
                //displayAlertDialog('enableNewRequestAttachments: ' + enableNewRequestAttachments);
                $("input#configurationBehaviorEnableNewRequestAttachmentsSlider").switchButton({ checked: true });
            }
            // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
            var _workflowDetails = [];
            _workflowDetails = {
                bwWorkflowAppId: workflowAppId,
                bwExpenseRequestsEnabled: reimbursementRequestsEnabled.toString()
            };
            var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorexpenserequestsenabled";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: _workflowDetails,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    if (data != 'SUCCESS') {
                        displayAlertDialog(data);
                    } else {
                        //displayAlertDialog('Updated reimbursementRequestsEnabled in DB: ' + reimbursementRequestsEnabled);
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error in ios8.js.configurationBehaviorEnableReimbursementRequestsSlider.change():2: ' + errorCode + ' ' + errorMessage);
                }
            });
        }
    });


    // configurationBehaviorEnableCloseOutsSlider
    $('#configurationBehaviorEnableCloseOutsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (closeoutsEnabled == true) closeoutsEnabled = false;
        else closeoutsEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwCloseoutsEnabled: closeoutsEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorcloseoutsenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=quotingEnabled, and it needs to load when the worklflow data is loaded.');
                    //displayAlertDialog('This functionality is incomplete. Coming soon! ios8.js.configurationBehaviorEnableCloseOutsSlider.change().');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableCloseOutsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    $('#configurationBehaviorEnableCapitalAndExpenseTrackingSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (capitalAndExpenseTrackingEnabled == true) capitalAndExpenseTrackingEnabled = false;
        else capitalAndExpenseTrackingEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwCapitalAndExpenseTrackingEnabled: capitalAndExpenseTrackingEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorcapitalandexpensetrackingenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This functionality is incomplete. Coming soon! ios8.js.configurationBehaviorEnableCapitalAndExpenseTrackingSlider.change().');
                    //displayAlertDialog('capitalAndExpenseTrackingEnabled: ' + capitalAndExpenseTrackingEnabled);
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableCapitalAndExpenseTrackingSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    $('#configurationBehaviorEnableRecurringExpensesSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (recurringExpensesEnabled == true) recurringExpensesEnabled = false;
        else recurringExpensesEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwRecurringExpensesEnabled: recurringExpensesEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorrecurringexpensesenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This functionality is incomplete. Coming soon! ios8.js.configurationBehaviorEnableRecurringExpensesSlider.change().');
                    if (recurringExpensesEnabled) {
                        var html = '<input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on fixed dates</span>';
                        document.getElementById('spanRecurringExpensesChoiceOnFixedDates').innerHTML = html;
                        var html = '<input type="radio" name="rbRecurringExpensesChoice" /><span>recurring on a time period</span>';
                        document.getElementById('spanRecurringExpensesChoiceOnATimePeriod').innerHTML = html;
                    } else {
                        var html = '<input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on fixed dates</span>';
                        document.getElementById('spanRecurringExpensesChoiceOnFixedDates').innerHTML = html;
                        var html = '<input type="radio" name="rbRecurringExpensesChoice" disabled /><span style="color: #adadad;">recurring on a time period</span>';
                        document.getElementById('spanRecurringExpensesChoiceOnATimePeriod').innerHTML = html;
                    }

                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableRecurringExpensesSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    // configurationBehaviorEnableSupplementalsSlider
    $('#configurationBehaviorEnableSupplementalsSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (supplementalsEnabled == true) supplementalsEnabled = false;
        else supplementalsEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwSupplementalsEnabled: supplementalsEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorsupplementalsenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    //displayAlertDialog('This functionality is incomplete. Coming soon! ios8.js.configurationBehaviorEnableSupplementalsSlider.change().');
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=quotingEnabled, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableSupplementalsSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    // configurationBehaviorEnableStrictAuditingSlider
    $('#configurationBehaviorEnableStrictAuditingSlider').change(function () {
        // Save this configuration change back to the database immediately. Don't notify the user unless an error is raised.
        if (strictAuditingEnabled == true) strictAuditingEnabled = false;
        else strictAuditingEnabled = true;
        var _workflowDetails = [];
        _workflowDetails = {
            bwWorkflowAppId: workflowAppId,
            bwStrictAuditingEnabled: strictAuditingEnabled.toString()
        };
        var operationUri = webserviceurl + "/bwworkflow/updateworkflowconfigurationbehaviorstrictauditingenabled";
        $.ajax({
            url: operationUri,
            type: "POST", timeout: ajaxTimeout,
            data: _workflowDetails,
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                if (data != 'SUCCESS') {
                    displayAlertDialog(data);
                } else {
                    // Apply Workflow configurations to the display.
                    displayAlertDialog('This functionality is incomplete. Coming soon! ios8.js.configurationBehaviorEnableStrictAuditingSlider.change().');
                    //displayAlertDialog('This setting has been changed but the value does not load from the database when the app is loaded. DEV: fix this var=quotingEnabled, and it needs to load when the worklflow data is loaded.');
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error in ios8.js.configurationBehaviorEnableStrictAuditingSlider.change(): ' + errorCode + ' ' + errorMessage);
            }
        });
    });

    // Hook up the people picker
    $("#txtBwDepartmentUserName").autocomplete({
        source: function (request, response) {
            //weburl = _spPageContextInfo.siteAbsoluteUrl;
            $.ajax({
                url: webserviceurl + "/tenant/" + tenantId + "/participants/" + request.term,
                dataType: "json",
                success: function (data) {
                    var searchArray = [];
                    for (var i = 0; i < data.participants.length; i++) {
                        searchArray[i] = data.participants[i].participant;
                    }
                    response(searchArray);
                }
            });
        },
        minLength: 1, // minLength specifies how many characters have to be typed before this gets invoked.
        select: function (event, ui) {
            //log(ui.item ? "Selected: " + ui.item.label : "Nothing selected, input was " + this.value);
            //document.getElementById('btnSearch').disabled = false; // Enable the search button when there is valid content in it.
        },
        open: function () {
            //$(this).removeClass("ui-corner-all").addClass("ui-corner-top");
            //document.getElementById('btnSearch').disabled = true; // Disable the search button until there is valid content in it.
        },
        close: function () {
            //$(this).removeClass("ui-corner-top").addClass("ui-corner-all");
            //var searchValue = this.value.split(' ')[0] + ' ' + this.value.split(' ')[1];
            //if (searchValue.indexOf('undefined') > -1) document.getElementById('txtAccountingDepartmentUser').value = '';
            //else document.getElementById('txtAccountingDepartmentUser').value = searchValue; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.


            var userName = this.value.split('|')[0];
            var userId = this.value.split('|')[1];

            if (userName.indexOf('undefined') > -1) {
                //document.getElementById('txtAccountingDepartmentUser').value = '';
                document.getElementById('txtBwDepartmentUserName').value = '';
                document.getElementById('txtBwDepartmentUserId').value = '';
            } else {
                document.getElementById('txtBwDepartmentUserName').value = userName; //this.value.split(' ')[0] + ' ' + this.value.split(' ')[1]; // Just shows the Loan Number parameter (removing the borrower name) so it fits in the text box.
                document.getElementById('txtBwDepartmentUserId').value = userId;
                // Enable the button!
                document.getElementById('btnSaveRemoveAccountingDepartmentUser').disabled = false;
            }
        }
    });



    var data = {
        bwWorkflowAppId: workflowAppId
    };
    $.ajax({
        url: webserviceurl + "/bwdepartments",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            //displayAlertDialog(JSON.stringify(data));
            if (data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].bwDepartmentTitle == 'Procurement') {
                        $('#txtBwDepartmentUserName').val(data[i].bwDepartmentUserName);
                        $('#txtBwDepartmentUserId').val(data[i].bwDepartmentUserId);
                        // Create the button.
                        var html = '';
                        html += '<input id="btnSaveRemoveAccountingDepartmentUser" type="button" value="Remove" onclick="cmdRemoveAccountingDepartmentUser();" class="BwButton200" />';
                        document.getElementById('spanSaveAccountingDepartmentUserButton').innerHTML = html;
                    }
                }
            } else {
                //
                var html = '';
                html += '<input id="btnSaveRemoveAccountingDepartmentUser" type="button" value="Save" onclick="cmdSaveAccountingDepartmentUser();" disabled class="BwButton200" />';
                document.getElementById('spanSaveAccountingDepartmentUserButton').innerHTML = html;
            }

        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.generateWorkflowSettingsPage DELETE /bwdepartments:' + errorCode + ', ' + errorMessage);
        }
    });


    // Display the license information on the settings page.
    //renderLicensesOnSettingsPage(); // This is disabled while we look for investors.

}

function cmdSaveWorkflowTitle() {
    var newWorkflowTitle = document.getElementById('txtWorkflowAppTitle').value;
    var data = [];
    data = {
        bwWorkflowAppId: workflowAppId,
        bwWorkflowAppTitle: newWorkflowTitle
    };
    var operationUri = webserviceurl + "/bwworkflowapp/updateworkflowconfigurationworkflowapptitle";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            if (data != 'SUCCESS') {
                displayAlertDialog(data);
            } else {
                workflowAppTitle = newWorkflowTitle;
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdSaveWorkflowTitle(): ' + errorCode + ' ' + errorMessage);
        }
    });
}

function cmdSaveBudgetRequestTitlePrefix() {
    displayAlertDialog('This functionality is incomplete. Coming soon!');
    // Note: If there are existing budget requests, do we have to go back and rename them? Probably!!!
}

function cmdSaveNewRequestManagerTitle() {
    var managerTitle = document.getElementById('NewBudgetRequestManagerTitle').value;
    var data = [];
    data = {
        bwTenantId: tenantId,
        bwWorkflowAppId: workflowAppId,
        bwNewBudgetRequestManagerTitle: managerTitle
    };
    var operationUri = webserviceurl + "/bwworkflowapp/updateworkflowconfigurationnewbudgetrequestmanagertitle";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            if (data != 'SUCCESS') {
                displayAlertDialog(data);
            } else {
                newBudgetRequestManagerTitle = managerTitle;
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdSaveNewRequestManagerTitle(): ' + errorCode + ' ' + errorMessage);
        }
    });
}

function cmdRbgMyEmailNotificationTypes_click(message) {
    //displayAlertDialog('cmdRbgMyEmailNotificationTypes_click');
    // The configuration setting has been changed.
    emailNotificationTypes = message;
    var _userDetails = [];
    _userDetails = {
        bwParticipantId: participantId,
        bwEmailNotificationTypes: message
    };
    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationbehaviorEmailNotificationTypes";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: _userDetails,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            if (data != 'SUCCESS') {
                displayAlertDialog(data);
            } else {
                if (message == 'allnotifications') {
                    // Disable the other section.
                    document.getElementById('spanEmailNotificationTypeAllNotifications').style.color = 'black';
                    document.getElementById('spanEmailNotificationTypeOnlyTasks').style.color = 'gray';
                    document.getElementById('spanEmailNotificationTypeNoNotifications').style.color = 'gray';
                } else if (message == 'onlymytasknotifications') {
                    // Enable the time selectors so that they can be changed.
                    document.getElementById('spanEmailNotificationTypeAllNotifications').style.color = 'gray';
                    document.getElementById('spanEmailNotificationTypeOnlyTasks').style.color = 'black';
                    document.getElementById('spanEmailNotificationTypeNoNotifications').style.color = 'gray';
                } else if (message == 'nonotifications') {
                    // Enable the time selectors so that they can be changed.
                    document.getElementById('spanEmailNotificationTypeAllNotifications').style.color = 'gray';
                    document.getElementById('spanEmailNotificationTypeOnlyTasks').style.color = 'gray';
                    document.getElementById('spanEmailNotificationTypeNoNotifications').style.color = 'black';
                }
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdRbgMyEmailNotificationTypes_click(): ' + errorCode + ' ' + errorMessage);
        }
    });
}

function cmdRbgMyEmailNotificationFrequency_click(message) {
    // The configuration setting has been changed.

    // divWorkingOnItDialog
    $("#divWorkingOnItDialog").dialog({
        modal: true,
        resizable: false,
        //closeText: "Cancel",
        closeOnEscape: false, // Hit the ESC key to hide! Yeah!
        title: 'Working on it...',
        width: "800",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false//, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Close": function () {
        //        $(this).dialog("close");
        //    }
        //}
    });

    $("#divWorkingOnItDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();




    emailNotificationFrequency = message;


    emailAggregatorTwiceDailyFirstTime = document.getElementById('selectAggregateEmailTwiceDailyFirstTime').value;
    emailAggregatorTwiceDailySecondTime = document.getElementById('selectAggregateEmailTwiceDailySecondTime').value;
    emailAggregatorTwiceDailyTimezoneDisplayName = document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').value;
    //displayAlertDialog('firstTime: ' + firstTime + '  secondTime: ' + secondTime + '  timeZone: ' + timeZone);

    var _userDetails = [];
    _userDetails = {
        bwParticipantId: participantId,
        bwEmailNotificationFrequency: message,
        bwEmailAggregatorTwiceDailyFirstTime: emailAggregatorTwiceDailyFirstTime,
        bwEmailAggregatorTwiceDailySecondTime: emailAggregatorTwiceDailySecondTime,
        bwEmailAggregatorTwiceDailyTimezoneDisplayName: emailAggregatorTwiceDailyTimezoneDisplayName
    };
    var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationbehavioremailnotificationfrequency";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: _userDetails,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            $('#divWorkingOnItDialog').dialog('close'); // Close the create your account dialog.
            if (data.message != 'SUCCESS') {
                displayAlertDialog(data.message);
                if (message == 'immediately') {
                    // Disable the other section.
                    document.getElementById('spanRbEmailImmediately').style.color = 'black';
                    document.getElementById('spanRbAggregateEmailTwiceDaily').style.color = 'gray';
                    document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = true;
                    document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = true;
                    document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = true;
                } else if (message == 'aggregatetwicedaily') {
                    // Enable the time selectors so that they can be changed.
                    document.getElementById('spanRbEmailImmediately').style.color = 'gray';
                    document.getElementById('spanRbAggregateEmailTwiceDaily').style.color = 'black';
                    document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = false;
                    document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = false;
                    document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = false;
                }
            } else {
                //displayAlertDialog(message);
                if (message == 'immediately') {
                    // Disable the other section.
                    document.getElementById('spanRbEmailImmediately').style.color = 'black';
                    document.getElementById('spanRbAggregateEmailTwiceDaily').style.color = 'gray';
                    document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = true;
                    document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = true;
                    document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = true;
                } else if (message == 'aggregatetwicedaily') {
                    // Enable the time selectors so that they can be changed.
                    document.getElementById('spanRbEmailImmediately').style.color = 'gray';
                    document.getElementById('spanRbAggregateEmailTwiceDaily').style.color = 'black';
                    document.getElementById('selectAggregateEmailTwiceDailyFirstTime').disabled = false;
                    document.getElementById('selectAggregateEmailTwiceDailySecondTime').disabled = false;
                    document.getElementById('selectAggregateEmailTwiceDailyTimezoneDisplayName').disabled = false;
                }
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdRbgMyEmailNotificationFrequency_click(): ' + errorCode + ' ' + errorMessage);
        }
    });
}


function createANewWorkflowApp() {


    var data = {
        "bwParticipantId": participantId,
        "participantFriendlyName": participantFriendlyName,
        "participantEmail": participantEmail,
        "bwParticipantLogonType": participantLogonType,
        "bwTenantId": tenantId
    };
    $.ajax({
        url: webserviceurl + "/bwworkflowapps/addaworkflow",
        type: "PUT",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            workflowAppId = data.workflowAppId;
            workflowAppTitle = data.workflowAppTitle;
            //displayAlertDialog(data.message); // This extra alert dialog is just annoying. The UI adds a button so that should be enough visual confirmation.
            //generateConfigurationLeftSideMenu();


            // TODD: WE NEED TO REGENERATE selectHomePageWorkflowAppDropDown HERE SOMEWHERE!!!!


            //populateStartPageItem('divConfiguration', 'Reports', '');

            // Hide the dialog boxes.
            $('#AddAWorkflowAppDialog').dialog('close');
            $('#bwLoggedInUserDropDown').dialog('close');
            // SHow the home page.
            populateStartPageItem('divWelcome', 'Reports', '');



            // Update the database with the new selected Workflow App, then regenerate the interface.
            var data = [];
            data = {
                bwParticipantId: participantId,
                selectedWorkflowAppId: selectedWorkflowAppId
            };
            var operationUri = webserviceurl + "/bwparticipant/updateuserconfigurationselectedworkflowapp";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: data,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    if (data.message != 'SUCCESS') {
                        displayAlertDialog(data.message);
                    } else {
                        workflowAppId = selectedWorkflowAppId;
                        workflowAppTitle = selectedWorkflowAppTitle;
                        newBudgetRequestManagerTitle = data.d.results[0].bwNewBudgetRequestManagerTitle;
                        if (data.d.results[0].bwRequireStartEndDates == 'true') requireStartEndDates = true;
                        else requireStartEndDates = false;
                        if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                        else requireRequestDetails = false;
                        if (data.d.results[0].bwRequireRequestDetails == 'true') requireRequestDetails = true;
                        else requireRequestDetails = false;
                        if (data.d.results[0].bwEnableNewRequestAttachments == 'true') enableNewRequestAttachments = true;
                        else enableNewRequestAttachments = false;
                        if (data.d.results[0].bwEnableNewRequestBarcodeAttachments == 'true') enableNewRequestBarcodeAttachments = true;
                        else enableNewRequestBarcodeAttachments = false;

                        if (data.d.results[0].bwQuotingEnabled == 'true') quotingEnabled = true;
                        else quotingEnabled = false;

                        if (data.d.results[0].bwExpenseRequestsEnabled == 'true') reimbursementRequestsEnabled = true;
                        else reimbursementRequestsEnabled = false;

                        if (data.d.results[0].bwCloseoutsEnabled == 'true') closeoutsEnabled = true;
                        else closeoutsEnabled = false;

                        if (data.d.results[0].bwRecurringExpensesEnabled == 'true') recurringExpensesEnabled = true;
                        else recurringExpensesEnabled = false;

                        if (data.d.results[0].bwSupplementalsEnabled == 'true') supplementalsEnabled = true;
                        else supplementalsEnabled = false;

                        if (data.d.results[0].bwStrictAuditingEnabled == 'true') strictAuditingEnabled = true;
                        else strictAuditingEnabled = false;

                        //quotingEnabled = data.d.results[0].bwQuotingEnabled;

                        //requireStartEndDates = data.d.results[0].bwRequireStartEndDates;
                        //requireRequestDetails = data.d.results[0].bwRequireRequestDetails;
                        //enableNewRequestAttachments = data.d.results[0].bwEnableNewRequestAttachments;
                        //quotingEnabled = data.d.results[0].bwQuotingEnabled; 


                        //renderHomePagePersonalizedSection();


                        // TODD: I DONT THINK THIS IS REGENERATING THE FA SECTION PRPERLY.
                        //generateConfigurationLeftSideMenu();
                        //populateStartPageItem('divConfiguration', 'Reports', '');
                        populateStartPageItem('divBehavior', 'Reports', '');
                        // Set the selected value for the drop down on the home page, selectHomePageWorkflowAppDropDown.
                        $('#selectHomePageWorkflowAppDropDown option[value="' + selectedWorkflowAppId + '"]').attr('selected', 'selected');

                        renderHomePagePersonalizedSection();


                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error in ios8.js.createANewWorkflowApp(): ' + errorCode + ' ' + errorMessage);
                }
            });



















        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdAddAWorkflowApp():' + errorCode + ', ' + errorMessage + '::' + JSON.stringify(data));
        }
    });

}



function cmdAddAWorkflowApp() {
    // This is called from the User dropdown > New Workflow button.

    //document.getElementById('txtAddAWorkflowAppDialogUserToReplaceFriendyName').value = ''; // = ''; // Clear the text box.
    //document.getElementById('txtAddAWorkflowAppDialogUserToReplaceId').value = '';
    //document.getElementById('txtAddAWorkflowAppDialogUserToReplaceEmail').value = '';
    $("#AddAWorkflowAppDialog").dialog({
        modal: true,
        resizable: false,
        closeText: "Cancel",
        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
        title: '', //Reassign ' + userFriendlyName + '\'s tasks in this workflow.',
        width: "800px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        //buttons: {
        //    "Reassign and replace with the new user": {
        //        text: 'Reassign Tasks',
        //        id: 'btnReassignAParticipantAndReplaceWithNewUser',
        //        disabled: 'true',
        //        style: 'font-size:30pt;',
        //        click: function () {
        //            var justDeleteAlready = true;
        //            try {
        //                var newUserFriendlyName = document.getElementById('txtReassignUserTasksDialogUserToReplaceFriendyName').value;
        //                justDeleteAlready = false;
        //            } catch (e) {
        //                // No need to catch, just checking if it exists!
        //            }
        //            if (justDeleteAlready == false) {
        //                // Here we assign the new user.
        //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        //                if (proceed) {
        //                    cmdDeleteParticipantAndAssignANewUser(userId);
        //                    $(this).dialog("close");
        //                }
        //            } else {
        //                // A new user does not have to be assigned since there are no dependencies.
        //                var proceed = confirm('This action cannot be undone.\n\n\nClick the OK button to proceed...');
        //                if (proceed) {
        //                    cmdDeleteParticipant(userId);
        //                    $(this).dialog("close");
        //                }
        //            }
        //        }
        //    },
        //    "Cancel": {
        //        text: 'Cancel',
        //        style: 'font-size:30pt;',
        //        click: function () {
        //            $(this).dialog("close");
        //        }
        //    }
        //},
        open: function (event, ui) {
            $('.ui-widget-overlay').bind('click', function () { $("#AddAWorkflowAppDialog").dialog('close'); });
            //var data = [];
            //data = {
            //    bwParticipantId: userId,
            //    bwWorkflowAppId: workflowAppId
            //};
            //var operationUri = webserviceurl + "/bwworkflow/itemizeparticipantdependencies"; //removeaparticipant";
            //$.ajax({
            //    url: operationUri,
            //    type: "POST", timeout: ajaxTimeout,
            //    data: data,
            //    headers: {
            //        "Accept": "application/json; odata=verbose"
            //    },
            //    success: function (data) {
            //        // Show or hide the replacement user selection box depening if there are any dependencies (tasks or functional areas).
            //        if (data.message != 'SUCCESS') {
            //            displayAlertDialog(JSON.stringify(data)); // Todd: put a good message here.
            //        } else {
            //            if (data.NumberOfFunctionalAreas == 0 && data.NumberOfIncompleteTasks == 0 && data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager) {
            //                // There are no dependencies.
            //                var html = '';
            //                html += 'This user has no Tasks, is not an approver for any Functional Areas, and is not a Manager for any Budget Requests.';
            //                document.getElementById('spanAddAWorkflowAppDialogUserDependencyDetails').innerHTML = html;
            //                // Hide the user selection box.
            //                document.getElementById('spanAddAWorkflowAppDialogChooseAUserSection').innerHTML = '';




            //                // Change the button text.
            //                document.getElementById('divAddAWorkflowAppDialogReassignUserButton').innerHTML = 'Reassign ' + userFriendlyName;

            //                //var dialogButtons = $('#ReassignUserTasksDialog').dialog('option', 'buttons');
            //                //$.each(dialogButtons, function (buttonIndex, button) {
            //                //    if (button.id === 'btnReassignUserTasksAndReplaceWithNewUser') {
            //                //        button.text = 'Reassign ' + userFriendlyName;
            //                //        button.disabled = false;
            //                //    }
            //                //})
            //                //$("#ReassignUserTasksDialog").dialog('option', 'buttons', dialogButtons);




            //            } else {
            //                // There ARE dependencies and we need to assign a replacement user.
            //                var html = '';
            //                html += 'When this users\' tasks are reassigned, the following will need to be reassigned to a new user (alternatively you can go back and change them one at a time):';
            //                html += '<ul>';
            //                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfFunctionalAreas + ' Financial Area(s)</span></li>';
            //                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteTasks + ' incomplete Task(s)</span></li>';
            //                html += '<li style="color:red;"><span style="color:black;">' + data.NumberOfIncompleteBudgetRequestsSpecifiedAsManager + ' incomplete Budget Request(s) where specified as the Manager</span></li>';
            //                html += '</ul>';
            //                document.getElementById('spanAddAWorkflowAppDialogUserDependencyDetails').innerHTML = html;
            //                // 
            //                var html = '';
            //                html += 'Select the user to take over these items from <span style="white-space:nowrap;"><i>' + userFriendlyName + ' (' + userEmail + ')</i></span>';
            //                document.getElementById('spanAddAWorkflowAppDialogUserToReassignFriendlyName').innerHTML = html;


            //                // Change the button text.
            //                document.getElementById('divAddAWorkflowAppDialogReassignUserButton').innerHTML = 'Replace ' + userFriendlyName + ' with the new user';

            //                //var dialogButtons = $('#ReassignUserTasksDialog').dialog('option', 'buttons');
            //                //$.each(dialogButtons, function (buttonIndex, button) {
            //                //    if (button.id === 'btnReassignUserTasksAndReplaceWithNewUser') {
            //                //        button.text = 'Replace ' + userFriendlyName + ' with the new user';
            //                //        button.disabled = false;
            //                //        button.style = 'color:red;';
            //                //    }
            //                //})
            //                //$("#ReassignUserTasksDialog").dialog('option', 'buttons', dialogButtons);


            //            }
            //        }
            //    },
            //    error: function (data, errorCode, errorMessage) {
            //        //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            //        displayAlertDialog('Error in ios8.js.cmdAddAWorkflowApp().itemizeparticipantdependencies: ' + errorMessage);
            //    }
            //});
        }
    });

    // Hide the title bar.
    $("#AddAWorkflowAppDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
    // Set the title.
    //document.getElementById('spanAddAWorkflowAppDialogTitle').innerHTML = 'Reassign ' + userFriendlyName + '\'s tasks in this workflow.';

}

function cmdPurchaseBronzePackage() {
    window.location = 'http://budgetworkflow.com/shop/bronze';
}

function cmdPurchaseSilverPackage() {
    window.location = 'http://budgetworkflow.com/shop/silver';
}

function cmdPurchaseGoldPackage() {
    window.location = 'http://budgetworkflow.com/shop/gold';
}

function cmdUpgradeAndPricingOptions() {

    // This is called from the user drop down, and lets the user change things like their email address.
    try {
        $('#bwLoggedInUserDropDown').dialog("close");
    } catch (e) {
    }

    $('#bwQuickLaunchMenuTd').css({
        width: '0'
    }); // This gets rid of the jumping around.

    $('#liNewRequest').hide();
    $('#liArchive').hide();
    $('#liSummaryReport').hide();
    $('#liConfiguration').hide();
    $('#liHelp').hide();
    $('#liWelcome').show();

    $('#divWelcomeMessage').empty(); // Clear the welcome screen!

    var e1 = document.getElementById('divNewRequestMasterDiv');
    e1.style.borderRadius = '120px 0 0 120px';

    $('#divWelcomeMasterDivTitle').text('Upgrade and pricing options...');

    //$('#divMenuMasterDivWelcomeButton').css({
    //    'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer'
    //});
    //$('#divMenuMasterDivWelcomeButton').click(function () {
    //    $('#divMenuMasterDivWelcomeButton').css({
    //        'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //    });
    //    renderWelcomeScreen();
    //});
    document.getElementById('divWelcomePageLeftButtonsWelcomeButton').className = 'divLeftButtonIos8';
    $('#divWelcomePageLeftButtonsWelcomeButton').click(function () {
        renderWelcomeScreen();
    });

    // This is our Upgrade and Pricing Options screen.
    var html = '';
    html += '<span style="color: rgb(63, 63, 63); font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif; font-size: 22pt;"><strong>You can upgrade from the free Budget Workflow</strong></span><br />';
    html += '<br />';
    html += '<div style="color: rgb(63, 63, 63); font-family: \'Segoe UI Light\',\'Segoe UI\',\'Segoe\',Tahoma,Helvetica,Arial,sans-serif; font-size: 12pt;">';
    html += '    <table>';
    html += '        <tr>';
    html += '            <td style="background-color:#6682b5;color:white;padding:4px 20px 7px 15px;">';
    html += '                Basic - This is the free version.';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr>';
    html += '            <td>';
    html += '                <ul>';
    html += '                    <li>100 budget requests a month.</li>';
    html += '                    <li>Purchase order numbers tie into your existing accounting system.</li>';
    html += '                    <li>Add 25 budget requests a month for $9.99.</li>';
    html += '                </ul>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr><td>&nbsp;</td></tr>';
    html += '        <tr>';
    html += '            <td class="tdPurchaseBronzePackage" style="color:white;padding:4px 20px 7px 15px;">';
    html += '                Bronze - CAPEX. $9.99/year.&nbsp;';
    html += '                <span style="text-align:right;"><input type="button" value="Upgrade Now" onclick="cmdPurchaseBronzePackage();" style="cursor:pointer;"/></span>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr>';
    html += '            <td>';
    html += '                <ul>';
    html += '                    <li>Everything the free package has, plus capital and expense tracking.</li>';
    html += '                    <li>100 budget requests a month.</li>';
    html += '                    <li>Add 25 budget requests a month for $9.99.</li>';
    html += '                </ul>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr><td>&nbsp;</td></tr>';
    html += '        <tr>';
    html += '            <td class="tdPurchaseSilverPackage" style="padding:4px 20px 7px 15px;">';
    html += '                Silver - CAPEX + OPEX. $99.99/year.&nbsp;';
    html += '                <span style="text-align:right;"><input type="button" value="Upgrade Now" onclick="cmdPurchaseSilverPackage();" style="cursor:pointer;"/></span>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr>';
    html += '            <td>';
    html += '                <ul>';
    html += '                    <li>Everything the Bronze package has, plus recurring expenses.</li>';
    html += '                    <li>100 budget requests a month.</li>';
    html += '                    <li>Add 25 budget requests a month for $9.99.</li>';
    html += '                </ul>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr><td>&nbsp;</td></tr>';
    html += '        <tr>';
    html += '            <td class="tdPurchaseGoldPackage" style="padding:4px 20px 7px 15px;">';
    html += '                Gold - CAPEX + OPEX + Supplementals. $199.99/year.&nbsp;';
    html += '                <span style="text-align:right;"><input type="button" value="Upgrade Now" onclick="cmdPurchaseGoldPackage();" style="cursor:pointer;"/></span>';
    html += '            </td>';
    html += '        </tr>';
    html += '        <tr>';
    html += '            <td>';
    html += '                <ul>';
    html += '                    <li>Everything the other packages have, plus the ability to add supplemental requests.</li>';
    html += '                    <li>100 budget requests a month.</li>';
    html += '                    <li>Add 25 budget or supplemental requests a month for $9.99.</li>';
    html += '                </ul>';
    html += '            </td>';
    html += '        </tr>';
    html += '    </table>';
    html += '    <br />';
    //html += '    <a href="http://budgetworkflow.com/shop/capex-upgrade-for-1-year" target="_blank">Click here to purchase an upgrade</a>';
    html += '</div>';
    $('#divWelcomeMessage').html(html);
}

////function displayUnsubscribePage() {
//    // This is called from the user drop down, and lets the user change things like their email address.
//    displayAlertDialog('In displayUnsubscribePage(). You want to unsubscribe. We are working to build in this functionality.');
//    try {
//        $('#bwLoggedInUserDropDown').dialog("close");
//    } catch (e) {
//    }
//    try {
//        $('#bwQuickLaunchMenuTd').css({ width: '0' }); // This gets rid of the jumping around.

//        $('#liNewRequest').hide();
//        $('#liMyStuff').hide();
//        $('#liSummaryReport').hide();
//        $('#liConfiguration').hide();
//        $('#liHelp').hide();
//        $('#liWelcome').show();

//        $('#divWelcomeMessage').empty(); // Clear the welcome screen!

//        var e1 = document.getElementById('divNewRequestMasterDiv');
//        e1.style.borderRadius = '20px 0 0 20px';

//        $('#divWelcomeMasterDivTitle').text('Unsubscribe');

//        $('#divMenuMasterDivWelcomeButton').css({ 'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer' });
//        $('#divMenuMasterDivWelcomeButton').click(function () {
//            $('#divMenuMasterDivWelcomeButton').css({ 'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white' });
//            //$('#divWelcomeMasterDivTitle').text('Home');
//            renderWelcomeScreen();
//        });
//        // Web service call to get the user details.
//        //var operationUri = appweburl + "/bwparticipants/getuserdetailsbyparticipantid/" + participantId.toString();
//        //$.ajax({
//        //    url: operationUri,
//        //    method: "GET",
//        //    headers: {
//        //        "Accept": "application/json; odata=verbose"
//        //    },
//        //    success: function (userData) {
//        //        var userLogonType;
//        //        if (userData.d.results[0].bwParticipantMicrosoftUserId != null) {
//        //            userLogonType = 'Microsoft';
//        //        } else if (userData.d.results[0].bwParticipantFacebookUserId != null) {
//        //            userLogonType = 'Facebook';
//        //        } else if (userData.d.results[0].bwParticipantGoogleUserId != null) {
//        //            userLogonType = 'Google';
//        //        } else if (userData.d.results[0].bwParticipantLinkedInUserId != null) {
//        //            userLogonType = 'LinkedIn';
//        //        }


//        var userLogonType;
//        if (participantLogonType == 'microsoft') {
//            userLogonType = 'Microsoft';
//        } else if (participantLogonType == 'facebook') {
//            userLogonType = 'Facebook';
//        } else if (participantLogonType == 'google') {
//            userLogonType = 'Google';
//        } else if (participantLogonType == 'linkedin') {
//            userLogonType = 'LinkedIn';
//        }


//        // This is our User Options screen.
//        var html = '';
//        html += '<br />';
//        html += '<span style="font-weight:bold;">Unsubscribe</span>';
//        html += '<hr />';
//        html += '<br />';
//        //html += 'You are logged in using your ' + userLogonType + ' logon.<br />';
//        html += 'You are logged in using your ' + userLogonType + ' logon.<br />';
//        html += '<table>';
//        html += '    <tr><td>&nbsp;</td><td></td></tr>';
//        //html += '    <tr><td>Name:</td><td><input id="txtUserOptionsFriendlyName" contentEditable="false" /></td></tr>';
//        //html += '    <tr><td>Email:</td><td><input id="txtUserOptionsEmail" /></td></tr>';
//        //html += '    <tr><td>Role:</td><td><input id="txtUserOptionsRole" /></td></tr>';
//        //html += '    <tr><td>&nbsp;</td><td></td></tr>';
//        //html += '    <tr><td colspan="2" style="text-align:right;"><input type="button" id="btnSaveUserOptions" value="Save" onclick="cmdSaveUserOptions();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" id="btnCancelUserOptions" value="Cancel" onclick="cmdCancel();" style="cursor:pointer;" /></td></tr>';

//        html += '    <tr><td>- Mark the participant as unsubcribed in the database.</td></tr>';
//        html += '    <tr><td>- Notify the tenant owner that the user has chosen to unsubscribe.</td></tr>';
//        html += '    <tr><td>- Notify participants in the workflow that the user has chosen to unsubscribe.</td></tr>';
//        html += '    <tr><td>- Somehow we have to have a way for them to substitute the user in any functional areas, and places where an approval process will get held up.</td></tr>';
//        html += '    <tr><td>- Perhaps disable a financial area where they are involved until they have had a replacement assigned.</td></tr>';




//        html += '</table>';
//        html += '';
//        html += '';
//        html += '';
//        $('#divWelcomeMessage').html(html);

//        //$('#txtUserOptionsFriendlyName').val(userData.d.results[0].bwParticipantFriendlyName);
//        //$('#txtUserOptionsEmail').val(userData.d.results[0].bwParticipantEmail);
//        //$('#txtUserOptionsRole').val(userData.d.results[0].bwParticipantRole);
//        //    },
//        //    error: function (data, errorCode, errorMessage) {
//        //        displayAlertDialog('Error in ios8.js.cmdUserOptions()', errorCode + ', ' + errorMessage);
//        //    }
//        //});
//    } catch (e) {
//        displayAlertDialog('Error in ios8.js.displayUnsubscribePage()', e.message);
//    }
//}

function cmdUserOptions() {
    // This is called from the user drop down, and lets the user change things like their email address.
    try {
        $("#UserOptionsDialog").dialog({
            modal: true,
            resizable: false,
            closeText: "Cancel",
            closeOnEscape: true, // Hit the ESC key to hide! Yeah!
            title: 'User Options',
            width: "800px",
            dialogClass: "no-close", // No close button in the upper right corner.
            hide: false, // This means when hiding just disappear with no effects.
            buttons: {
                "Save": {
                    text: 'Save',
                    id: 'btnSaveUserOptions',
                    style: 'font-size:30pt;',
                    //style: "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;",
                    //disabled: 'true',
                    click: function () {
                        cmdSaveUserOptions();
                        $(this).dialog("close");
                    }
                },
                "Cancel": {
                    text: 'Cancel',
                    id: 'btnCancelUserOptions',
                    style: 'font-size:30pt;',
                    click: function () {
                        $(this).dialog("close");
                        //cmdCancel();
                    }
                }
            },
            open: function (event, ui) {
                $("#bwLoggedInUserDropDown").dialog('close'); // Close the other dialog.

                $('.ui-widget-overlay').bind('click', function () { $("#UserOptionsDialog").dialog('close'); }); // This allows the dialog to close when clicked outside of the dialog. Only works for modal dialogs.

                var userLogonType;
                if (participantLogonType == 'microsoft') {
                    userLogonType = 'Microsoft';
                } else if (participantLogonType == 'facebook') {
                    userLogonType = 'Facebook';
                } else if (participantLogonType == 'google') {
                    userLogonType = 'Google';
                } else if (participantLogonType == 'linkedin') {
                    userLogonType = 'LinkedIn';
                } else if (participantLogonType == 'custom') {
                    userLogonType = 'BudgetRequests.com';
                }

                // This is our User Options screen.
                var html = '';
                //html += '<br />';
                //html += '<span style="font-weight:bold;">User Options</span>';
                //html += '<hr />';
                //html += '<br />';
                html += 'You are logged in using your ' + userLogonType + ' logon.<br />';
                html += '<table>';
                html += '    <tr><td>&nbsp;</td><td></td></tr>';
                html += '    <tr><td>Name:</td><td><input id="txtUserOptionsFriendlyName" contentEditable="false" style="width:600px;" /></td></tr>';
                html += '    <tr><td>Email:</td><td><input id="txtUserOptionsEmail" style="width:600px;" /></td></tr>';
                html += '    <tr><td>&nbsp;</td><td></td></tr>';
                //html += '    <tr><td colspan="2" style="text-align:right;"><input type="button" id="btnSaveUserOptions" value="Save" onclick="cmdSaveUserOptions();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" id="btnCancelUserOptions" value="Cancel" onclick="cmdCancel();" style="cursor:pointer;" /></td></tr>';
                html += '</table>';
                //html += '<br /><br />';
                //html += 'DEV: Put unsubscribe functionality here!';
                html += '';
                $('#spanUserOptionsDialogContent').html(html);

                $('#txtUserOptionsFriendlyName').val(participantFriendlyName);
                $('#txtUserOptionsEmail').val(participantEmail);

            }
        });

        // Hide the title bar.
        $("#UserOptionsDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();
        // Set the title.
        //document.getElementById('spanDeleteABudgetRequestDialogTitle').innerHTML = 'Delete ' + title + '.';



    } catch (e) {
        displayAlertDialog('Error in cmdUserOptions(): ' + e.message);
    }

    //// This is called from the user drop down, and lets the user change things like their email address.
    //try {
    //    $('#bwLoggedInUserDropDown').dialog("close");
    //} catch (e) {
    //}

    //$('#bwQuickLaunchMenuTd').css({
    //    width: '0'
    //}); // This gets rid of the jumping around.

    //$('#liNewRequest').hide();
    //$('#liArchive').hide();
    //$('#liSummaryReport').hide();
    //$('#liConfiguration').hide();
    //$('#liHelp').hide();
    //$('#liWelcome').show();

    //$('#divWelcomeMessage').empty(); // Clear the welcome screen!

    //var e1 = document.getElementById('divNewRequestMasterDiv');
    //e1.style.borderRadius = '120px 0 0 120px';

    //$('#divWelcomeMasterDivTitle').text('User Options');

    //$('#divMenuMasterDivWelcomeButton').css({
    //    'height': '28px', 'width': '92%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 0', 'border-width': '0 0 0 0', 'background-color': '#6682b5', 'color': 'white', 'outline': 'none', 'cursor': 'pointer'
    //});
    //$('#divMenuMasterDivWelcomeButton').click(function () {
    //    $('#divMenuMasterDivWelcomeButton').css({
    //        'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
    //    });
    //    renderWelcomeScreen();
    //});

    //var userLogonType;
    //if (participantLogonType == 'microsoft') {
    //    userLogonType = 'Microsoft';
    //} else if (participantLogonType == 'facebook') {
    //    userLogonType = 'Facebook';
    //} else if (participantLogonType == 'google') {
    //    userLogonType = 'Google';
    //} else if (participantLogonType == 'linkedin') {
    //    userLogonType = 'LinkedIn';
    //}

    //// This is our User Options screen.
    //var html = '';
    //html += '<br />';
    //html += '<span style="font-weight:bold;">User Options</span>';
    //html += '<hr />';
    //html += '<br />';
    //html += 'You are logged in using your ' + userLogonType + ' logon.<br />';
    //html += '<table>';
    //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //html += '    <tr><td>Name:</td><td><input id="txtUserOptionsFriendlyName" contentEditable="false" /></td></tr>';
    //html += '    <tr><td>Email:</td><td><input id="txtUserOptionsEmail" /></td></tr>';
    //html += '    <tr><td>&nbsp;</td><td></td></tr>';
    //html += '    <tr><td colspan="2" style="text-align:right;"><input type="button" id="btnSaveUserOptions" value="Save" onclick="cmdSaveUserOptions();" style="cursor:pointer;" />&nbsp;&nbsp;<input type="button" id="btnCancelUserOptions" value="Cancel" onclick="cmdCancel();" style="cursor:pointer;" /></td></tr>';
    //html += '</table>';
    //html += '<br /><br />';
    //html += 'DEV: Put unsubscribe functionality here!';
    //html += '';
    //$('#divWelcomeMessage').html(html);

    //$('#txtUserOptionsFriendlyName').val(participantFriendlyName);
    //$('#txtUserOptionsEmail').val(participantEmail);

}

function cmdSaveUserOptions() {
    // This is the Save button on the user options page from the use options in the logged in drop down.
    // It lets you change and save the user friendly name, email address, and role.
    var bwParticipantFriendlyName = $('#txtUserOptionsFriendlyName').val();
    var bwParticipantEmail = $('#txtUserOptionsEmail').val();
    var bwParticipantRole = $('#txtUserOptionsRole').val();
    var modified = getCreatedTimestamp();
    var _userDetails = [];
    _userDetails = {
        bwParticipantId: participantId,
        bwParticipantFriendlyName: bwParticipantFriendlyName,
        bwParticipantEmail: bwParticipantEmail,
        bwParticipantRole: bwParticipantRole,
        Modified: modified
    };
    var operationUri = webserviceurl + "/bwparticipant/updateuserdetails";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: _userDetails,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            //$('#spanLoggedInUser').text(userFriendlyName);
            //$('#spanLoggedInUserNewRequestPage').text(userFriendlyName);
            //$('#spanLoggedInUserMyStuffPage').text(userFriendlyName);
            //$('#spanLoggedInUserSummaryReportPage').text(userFriendlyName);
            //$('#spanLoggedInUserConfigurationPage').text(userFriendlyName);
            //$('#spanLoggedInUserHelpPage').text(userFriendlyName);
            displayAlertDialog(data);
            renderWelcomeScreen();
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in ios8.js.cmdSaveUserOptions(): ' + errorCode + ' ' + errorMessage);
        }
    });
}

function cmdSignOut() {
    // This is on the logged in user drop down.

    // Reset these values!!!
    tenantId = '';
    workflowAppId = '';
    workflowAppTitle = '';
    participantId = '';
    participantLogonType = '';
    participantLogonTypeUserId = '';
    participantFriendlyName = '';
    participantEmail = '';

    $('#bwLoggedInUserDropDown').dialog('close');
    $('#spanLogoutDialogLogonProvider').text(participantLogonType); // 

    $("#LogoutDialog").dialog({
        modal: true,
        resizable: false,
        closeText: "Cancel",
        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
        title: "",
        width: "400px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        buttons: {
            "Close": function () {
                $(this).dialog("close");
            }
        }
    });




    //displayAlertDialog('ATTEMPTING TO LOG OUT OF FB');
    //FB.logout(function (response) {
    //    // user is now logged out
    //    displayAlertDialog('LOGGED OUT OF FB');
    //    window.location = 'index.html';
    //});

}

function cmdDeleteInvitation(invitationId) {
    var invitation = [];
    invitation = {
        bwInvitationId: invitationId
    };
    var operationUri = webserviceurl + "/bwinvitationsunclaimed/deletethisinvitation";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: invitation,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            if (data.n == 1 && data.ok == 1) {
                // Re-render the screen.
                populateStartPageItem('divParticipants', 'Reports', '');
            } else {
                // Something went wrong!
                displayAlertDialog('There was a problem deleting this invitation. Error: ' + JSON.stringify(data));
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in cmdDeleteInvitation(): ' + errorMessage);
        }
    });
}

//function copyInvitationToClipboard() {
//    //var invitation = document.getElementById('spanViewInvitationDialogInvitationDetails').innerHTML;
//    //document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitation;
//    document.getElementById('textareaViewInvitationDialogInvitationDetails').select();
//    document.execCommand('copy');
//}

function cmdViewInvitation(invitationId) {
    //displayAlertDialog('This functionality is incomplete. Coming soon! cmdViewInvitation().');

    $("#ViewInvitationDialog").dialog({
        modal: true,
        resizable: false,
        closeText: "Cancel",
        closeOnEscape: true, // Hit the ESC key to hide! Yeah!
        title: 'Invitation',
        width: "800px",
        dialogClass: "no-close", // No close button in the upper right corner.
        hide: false, // This means when hiding just disappear with no effects.
        //buttons: {
        //"Copy to clipboard": {
        //    text: 'Copy to clipboard',
        //    id: 'btnCopyInvitationToClipboard',
        //    style: "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;color:black;",
        //    //disabled: 'true',
        //    click: function () {
        //        copyInvitationToClipboard();
        //    }
        //},
        //    "Close":  {
        //        text: 'Close',
        //        style: "'Segoe UI Light','Segoe UI','Segoe',Tahoma,Helvetica,Arial,sans-serif;color: #3f3f3f;font-size: 30pt;color:black;",
        //        click: function () {
        //            $(this).dialog("close");
        //        }
        //    }
        //},
        open: function (event, ui) {
            $('.ui-widget-overlay').bind('click', function () { $("#ViewInvitationDialog").dialog('close'); });
            var invitationUrl = globalUrlPrefix + globalUrl + '?invitation=' + invitationId;
            //$('#invitationLink2').text(invitationUrl);
            document.getElementById('textareaViewInvitationDialogInvitationDetails').innerHTML = invitationUrl;
            document.getElementById('textareaViewInvitationDialogInvitationDetails').blur();
        }
    });

    // Hide the title bar.
    $("#ViewInvitationDialog").dialog().parents(".ui-dialog").find(".ui-dialog-titlebar").remove();


}

function generateParticipantsListButtons() {
    $('#divFunctionalAreasMasterDiv').empty(); // Clear the div and rebuild it with out new 'Departments' title.
    $('#divFunctionalAreasMasterSubMenuDiv').hide(); //This is the top bar which we want to hide in this case.
    var html = '';

    //html += '<table style="border-width: 0px; margin: 0px; padding: 0px; width: 100%;"><tbody><tr style="border-width: 0px; margin: 0px; padding: 0px;"><td style="border-width: 0px; margin: 0px; padding: 0px;">';
    //html += 'Participants';
    //html += '</td></tr></tbody></table>';

    // New html.
    html += '<table style="width:100%;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<tr style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<td style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '<div class="">';
    html += '<span id="spanSecondTopBarExpandCollapse" class="spanTopBarExpandCollapseIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">+</span><span id="xxxx" class="divTopBarTextContentsIos8" onclick="cmdSecondTopBarExpandCollapse(\'spanSecondTopBarExpandCollapse\');">Participants</span>';
    html += '</div>';
    html += '</td>';
    html += '<td style="text-align:right;white-space:nowrap;font-size:small;padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;"><!--Year:&nbsp;<select id="ddlYear" onchange="cmdYearSelectedChanged();"></select>--></td>';
    html += '</tr>';
    html += '</table>';


    $('#divFunctionalAreasMasterDiv').html(html);
    //
    disableParticipantsButton();
    //
    //$('#divFunctionalAreasButton').css({'background-color':'#6682b5'});
    //
    //$('#divParticipants').css({ 'height': '28px', 'width': '82%', 'white-space': 'nowrap', 'border-radius': '0 0 0 0', 'padding': '12px 0 0 20px', 'margin': '0 0 0 20px', 'border-width': '0 0 0 0', 'background-color': '#6682b5' });
    //
    $('#divFunctionalAreasSubSubMenus').empty();
    var html = '';
    html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
    html += '  <tr>';
    html += '    <td>';
    //
    html += '<br />';
    html += '<div class="codeSnippetContainer" id="code-snippet-4" xmlns="">';
    html += '    <div class="codeSnippetContainerTabs">';
    html += '        <div class="codeSnippetContainerTabSingle" dir="ltr"><span style="font-size:25pt;"><a>&nbsp;&nbsp;Participants&nbsp;&nbsp;</a></span></div>';
    html += '    </div>';
    html += '    <div class="codeSnippetContainerCodeContainer">';
    html += '        <div class="codeSnippetToolBar">';
    html += '            <div class="codeSnippetToolBarText">';
    html += '                <a name="CodeSnippetCopyLink" title="Copy to clipboard." style="display: none;" href="javascript:displayAlertDialog(\'Copy support is not yet implemented.\');">Copy</a>';
    html += '            </div>';
    html += '        </div>';
    html += '        <div class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5207fb9c-60fd-402f-8729-5795651a5ad3" dir="ltr">';
    html += '            <div>';
    html += '                <span id="spanBwParticipantsConfiguration" style="font-size:x-small;">';
    //
    var data = {
        "bwWorkflowId": workflowAppId
    };
    $.ajax({
        //url: appweburl + "/bwparticipants",
        url: webserviceurl + "/workflow/participants",
        type: "DELETE",
        contentType: 'application/json',
        data: JSON.stringify(data),
        success: function (data) {
            html += '<table class="myStuffTable">';
            html += '  <tr>';
            html += '    <td>Name</td>';
            html += '    <td>Email</td>';
            html += '    <td>Role</td>';
            html += '    <td></td>';
            html += '    <td></td>';
            //html += '    <td>participant id</td>';
            //html += '    <td>tenant id</td>';
            html += '  </tr>';
            for (var i = 0; i < data.length; i++) {
                html += '  <tr>';
                html += '    <td>' + data[i].bwParticipantFriendlyName + '</td>';
                html += '    <td>' + data[i].bwParticipantEmail + '</td>';
                html += '    <td>' + data[i].bwParticipantRole + '</td>';
                if ((data[i].bwParticipantId == participantId) || (data[i].bwParticipantRole == 'owner')) {
                    html += '    <td></td>';
                    //html += '    <td></td>';
                } else {
                    //html += '    <td><input type="button" value="change role" style="cursor:pointer;" onclick="cmdDisplayChangeUserRoleDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');"/></td>';
                    html += '    <td><button class="BwButton300" onclick="cmdDisplayChangeUserRoleDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');">change<br />role</button>';


                    html += '    <br /><button class="BwButton360" onclick="cmdDisplayReassignUserTasksDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');">reassign<br />responsibilities (#)</button></td>';


                    //html += '    <td><button class="BwSmallButton" onclick="cmdDisplayDeleteUserDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');">delete</button></td>';
                    html += '    <td><img src="images/trash-can.png" class="trashcan" onclick="cmdDisplayDeleteUserDialog(\'' + data[i].bwParticipantId + '\', \'' + data[i].bwParticipantFriendlyName + '\', \'' + data[i].bwParticipantEmail + '\', \'' + data[i].bwParticipantRole + '\', \'' + data[i].bwParticipantLogonType + '\');" title="Delete" style="cursor:pointer;" /></td>';
                }
                //html += '    <td>' + data[i].bwParticipantId + '</td>';
                //html += '    <td>' + data[i].bwTenantId + '</td>';
                html += '  </tr>';
            }
            //html += '<tr><td colspan="4">DONE</td></tr>';
            html += '</table>';
            //
            html += '                </span>';
            html += '            </div>';
            html += '        </div>';
            html += '    </div>';
            html += '</div>';
            //
            html += '<br />';
            html += '<div class="codeSnippetContainer" id="code-snippet-4" xmlns="">';
            html += '    <div class="codeSnippetContainerTabs">';
            html += '        <div class="codeSnippetContainerTabSingle" dir="ltr"><span style="font-size:25pt;"><a>&nbsp;&nbsp;Unclaimed Invitations&nbsp;&nbsp;</a></span></div>';
            html += '    </div>';
            html += '    <div class="codeSnippetContainerCodeContainer">';
            html += '        <div class="codeSnippetToolBar">';
            html += '            <div class="codeSnippetToolBarText">';
            html += '                <a name="CodeSnippetCopyLink" title="Copy to clipboard." style="display: none;" href="javascript:displayAlertDialog(\'Copy support is not yet implemented.\');">Copy</a>';
            html += '            </div>';
            html += '        </div>';
            html += '        <div class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5207fb9c-60fd-402f-8729-5795651a5ad3" dir="ltr">';
            html += '            <div>';
            html += '                <span id="spanBwInvitations" style="font-size:22pt;">';
            //
            var data = {
                //"bwTenantId": tenantId,
                "bwWorkflowAppId": workflowAppId
            };
            $.ajax({
                //url: appweburl + "/bwinvitationsfindall",
                url: webserviceurl + "/bwinvitationsunclaimed",
                type: "DELETE",
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (data) {
                    if (data.length == 0) {
                        html += 'There are no unclaimed invitations.';
                    } else {
                        html += '<table class="myStuffTable">';
                        html += '  <tr>';
                        //html += '    <td>name</td>';
                        //html += '    <td>role</td>';
                        //html += '    <td>email</td>';
                        //html += '    <td>participant id</td>';
                        html += '    <td>Created By</td>';
                        html += '    <td>Created Date</td>';
                        html += '    <td>Workflow</td>';
                        html += '    <td></td>';
                        html += '    <td></td>';
                        //html += '    <td>invitation delivered</td>';
                        html += '  </tr>';
                        for (var i = 0; i < data.length; i++) {
                            html += '  <tr>';
                            //html += '    <td>' + data[i].bwParticipantFriendlyName + '</td>';
                            //html += '    <td>' + data[i].bwParticipantRole + '</td>';
                            //html += '    <td>' + data[i].bwParticipantEmail + '</td>';
                            //html += '    <td>' + data[i].bwParticipantId + '</td>';
                            html += '    <td title="' + data[i].bwInvitationCreatedByEmail + '" style="cursor:default;">' + data[i].bwInvitationCreatedByFriendlyName + '</td>';
                            html += '    <td>' + data[i].bwInvitationCreatedTimestamp + '</td>';
                            html += '    <td>' + data[i].bwWorkflowAppTitle + '</td>';
                            html += '    <td><button onclick="cmdViewInvitation(\'' + data[i].bwInvitationId + '\');" class="BwButton200">view</button></td>';
                            html += '    <td><button onclick="cmdDeleteInvitation(\'' + data[i].bwInvitationId + '\');" class="BwButton200">delete</button></td>';
                            //html += '    <td>' + data[i].bwTenantId + '</td>';
                            //html += '    <td>' + data[i].bwParticipantInvitationDelivered + '</td>';
                            html += '  </tr>';
                        }
                        //html += '<tr><td colspan="5">DONE</td></tr>';
                        html += '</table>';
                    }
                    //
                    html += '                </span>';
                    html += '            </div>';
                    html += '        </div>';
                    html += '    </div>';
                    html += '</div>';
                    //
                    html += '<br />';
                    html += '<div class="codeSnippetContainer" id="code-snippet-4" xmlns="">';
                    html += '<div class="codeSnippetContainerTabs">';
                    html += '<div class="codeSnippetContainerTabSingle" dir="ltr"><span style="font-size:25pt;"><a>&nbsp;&nbsp;Invite a participant to your budget workflow by emailing them this link&nbsp;&nbsp;</a></span></div>';
                    html += '</div>';
                    html += '<div class="codeSnippetContainerCodeContainer">';
                    html += '    <div class="codeSnippetToolBar">';
                    html += '        <div class="codeSnippetToolBarText">';
                    html += '            <a name="CodeSnippetCopyLink" title="Copy to clipboard." style="display: none;" href="javascript:displayAlertDialog(\'Copy support is not yet implemented.\');">Copy</a>';
                    html += '        </div>';
                    html += '    </div>';
                    html += '    <div class="codeSnippetContainerCode" id="CodeSnippetContainerCode_5207fb9c-60fd-402f-8729-5795651a5ad3" dir="ltr">';
                    html += '        <div style="color:Black;"><pre>';
                    html += '<span id="invitationLink" style="font-size:25pt;"></span>';
                    html += '           </pre>';
                    html += '<table style="width:100%;text-align:right;"><tr><td><button id="btnInviteNewParticipant" onclick="cmdInviteNewParticipant();" class="BwButton350">Generate a new invitation link</button></td></tr></table>';
                    html += '               </div>';
                    html += '                   </div>';
                    html += '               </div>';
                    html += '           </div>';
                    //
                    html += '<span style="font-size:22pt;font-style:italic;">When a person accepts an invitation and logs in for the first time, they receive the lowest permissions role of "Participant". You will receive an email when they have joined, then you can come back here and use the "change role" button to increase their permissions.</span>';
                    //
                    html += '    </td>';
                    html += '  </tr>';
                    html += '</table>';
                    $('#divFunctionalAreasSubSubMenus').html(html);
                },
                error: function (data, errorCode, errorMessage) {
                    //window.waitDialog.close();
                    //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
                    displayAlertDialog('Error in ios8.js.generateParticipantsListButtons():1:' + errorCode + ', ' + errorMessage);
                }
            });
        },
        error: function (data, errorCode, errorMessage) {
            //window.waitDialog.close();
            //displayAlertDialog('Error in index.js.cmdCreateANewTenant()', errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.generateParticipantsListButtons():2:' + errorCode + ', ' + errorMessage);
        }
    });
}

function cmdDeleteApproverFromFinancialArea(approverNumber) {
    try {
        var displayedApprover = approverNumber - 1; // There is an offset from the titles.
        // Step 1: First we are going to load an array with the currently displayed values.
        var approvers = [];
        approvers = new Array();
        for (var i = 3; i < 11; i++) {
            var friendlyNameField = $('#txtApprover' + i + 'FriendlyName');
            if (friendlyNameField.val()) {
                // If this field exists, so will the other ones.
                var userId = $('#txtApprover' + i + 'Id').val();
                var userEmail = $('#txtApprover' + i + 'Email').val();
                var userFriendlyName = $('#txtApprover' + i + 'FriendlyName').val();
                var tmpVal = $('span[xd\\:binding="my:Approval' + i + 'BudgetThreshold"]')[0].innerHTML;
                var userBudgetThreshold = parseFloat(tmpVal.replace(/[^0-9-.]/g, ''));
                var userInfo = [];
                userInfo = new Array(4);
                userInfo[0] = userId;
                userInfo[1] = userEmail;
                userInfo[2] = userFriendlyName;
                userInfo[3] = userBudgetThreshold;
                approvers.push(userInfo);
            }
        }
        //displayAlertDialog(JSON.stringify(approvers));

        // Step 2: Then we will remove the one specified.
        approvers.splice((approverNumber - 3), 1);
        //displayAlertDialog(JSON.stringify(approvers));

        // Step 3: Then we will render the screen using the array!
        var html = '';
        html += '<table>';
        if (approvers.length > 0) {
            html += '<tr>';
            html += '  <td></td>';
            //html += '      <span style="color:cornflowerblue;font-size:x-small;">Approver</span>';
            html += '  <td></td>';
            html += '  <td style="text-align:center;">';
            html += '    <span style="color:cornflowerblue;font-size:18pt;">Budget Threshold</span>';
            html += '  </td>';
            html += '  <td></td>';
            html += '</tr>';
        }
        for (var x = 0; x < approvers.length; x++) {
            if (approvers[x][0]) { // If there is no entry, stop rendering the Approvers for this financial area.
                html += '<tr>';
                html += '  <td class="bwComTitleCell">Approver #' + (x + 2).toString() + '</td>';
                html += '  <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
                var approverNumber = x + 3;
                html += '    <input id="txtApprover' + approverNumber + 'FriendlyName" title="' + approvers[x][1] + '" value="' + approvers[x][2] + '" class="PeopleFriendlyNameSelector" onfocus="this.blur();" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
                html += '    <img src="images/addressbook-icon35x35.png" style="width:80px;height:80px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
                html += '    <input id="txtApprover' + approverNumber + 'Id" style="display:none;" value="' + approvers[x][0] + '" />';
                html += '    <input id="txtApprover' + approverNumber + 'Email" style="display:none;" value="' + approvers[x][1] + '" />';
                html += '  </td>';
                html += '  <td class="bwChartCalculatorLightCurrencyTableCell">';
                html += '    <span xd:binding="my:Approval' + approverNumber + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0">' + formatCurrency(approvers[x][3]) + '</span>';
                html += '  </td>';

                html += '<td><img src="images/trash-can.png" class="trashcan" onclick="cmdDeleteApproverFromFinancialArea(\'' + approverNumber + '\');" title="Delete" style="cursor:pointer;" /></td>';

                html += '</tr>';
            }
        }

        //if (BWMData[0][0][4][i][7][0][1]) {
        //    html += '<tr>';
        //    html += '  <td></td>';
        //    //html += '      <span style="color:cornflowerblue;font-size:x-small;">Approver</span>';
        //    html += '  <td></td>';
        //    html += '  <td style="text-align:center;">';
        //    html += '    <span style="color:cornflowerblue;font-size:x-small;">Budget Threshold</span>';
        //    html += '  </td>';
        //    html += '  <td></td>';
        //    html += '</tr>';
        //}
        //for (var x = 0; x < BWMData[0][0][4][i][7].length; x++) {
        //    if (BWMData[0][0][4][i][7][x][1]) { // If there is no entry, stop rendering the Approvers for this financial area.
        //        html += '<tr>';
        //        html += '  <td class="bwComTitleCell">Approver #' + (x + 2).toString() + '</td>';
        //        html += '  <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
        //        var approverNumber = x + 3;
        //        html += '    <input id="txtApprover' + approverNumber + 'FriendlyName" title="' + BWMData[0][0][4][i][7][x][2] + '" value="' + BWMData[0][0][4][i][7][x][1] + '" />';
        //        html += '    <img src="images/addressbook-icon18x18.png" style="width:18px;height:18px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
        //        html += '    <input id="txtApprover' + approverNumber + 'Id" style="display:none;" value="' + BWMData[0][0][4][i][7][x][0] + '" />';
        //        html += '    <input id="txtApprover' + approverNumber + 'Email" style="display:none;" value="' + BWMData[0][0][4][i][7][x][2] + '" />';
        //        html += '  </td>';
        //        html += '  <td class="bwChartCalculatorLightCurrencyTableCell">';
        //        html += '    <span xd:binding="my:Approval' + approverNumber + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0">' + formatCurrency(BWMData[0][0][4][i][7][x][3]) + '</span>';
        //        html += '  </td>';

        //        html += '<td><img src="images/trash-can.png" onclick="cmdDeleteApproverFromFinancialArea(\'' + approverNumber + '\');" title="Delete" style="cursor:pointer;" /></td>';

        //        html += '</tr>';
        //    }
        //}
        html += '</table>';

        document.getElementById('divFunctionalAreasApproverDataEntryFields').innerHTML = html;
    } catch (e) {
        displayAlertDialog('Error in cmdDeleteApproverFromFinancialArea(): ' + e.message);
    }
}

function cmdUnHideFunctionalArea(_functionalAreaId) {
    var data = [];
    data = {
        bwFunctionalAreaId: _functionalAreaId,
        IsHidden: 'false', // This is the value which hides the Financial Area.
        ModifiedByFriendlyName: participantFriendlyName,
        ModifiedById: participantId,
        ModifiedByEmail: participantEmail
    };
    var operationUri = webserviceurl + "/bwfunctionalareas/hideorshowfunctionalarea";
    $.ajax({
        url: operationUri,
        type: "POST", timeout: ajaxTimeout,
        data: data,
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            displayAlertDialog(data);
            //renderFunctionalAreaDetails(_functionalAreaId);
            populateStartPageItem('divFunctionalAreas', 'Reports', '');

        },
        error: function (data, errorCode, errorMessage) {
            //displayAlertDialog('Error in Start.js.displayConnectedWorkflows()', '1:' + errorCode + ', ' + errorMessage);
            displayAlertDialog('Error in ios8.js.cmdImmediatelyHideFunctionalArea(): ' + errorMessage);
        }
    });
}

function renderFunctionalAreaDetails(functionalAreaId) {

    try {
        $('#divIos8ConfigurationLeftMenu').dialog('close'); // Close the left menu.
    } catch (e) {
        //
    }

    try {
        var year = new Date().getFullYear().toString(); // todd hardcoded.
        var appIndex;
        for (var x = 0; x < BWMData[0].length; x++) {
            if (BWMData[0][x][0] = workflowAppId) {
                appIndex = x;
            }
        }
        //
        var functionalAreaQuote = false; // We will get this value below.

        var functionalAreaTitle = '';
        if (functionalAreaId == 'AddAFinancialArea') { // This is the exception, is the '+ Add a financial area' button.
            functionalAreaTitle = 'Add a financial area:';


        } else {
            for (var i = 0; i < BWMData[0][appIndex][4].length; i++) {
                if (BWMData[0][appIndex][4][i][0] == functionalAreaId) {
                    functionalAreaTitle = BWMData[0][appIndex][4][i][1].toString();

                    //var isQuote = false;
                    if (BWMData[0][appIndex][4][i][2] == 'true') { // Yields a bool, true or false.
                        functionalAreaQuote = true;
                    }
                    //isQuote = BWMData[0][appIndex][4][i][2].toString();
                }
            }
        }
        $('#spanFunctionalAreasTopBarTextContentsIos8').text(functionalAreaTitle); // Change the title of the section.
        $('#divFunctionalAreasMasterSubMenuDiv').show(); // This shows the header rounded bar in case it was hidden.

        ////////////
        // Regenerate the buttons being displayed, leaving out the one we have just put in the title bar above them!
        var html = '';
        html += '<table style="padding:0 0 0 0;margin:0 0 0 0;border-width:0 0 0 0;">';
        html += '    <tr>';
        html += '        <td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
        //html += '            <div id="divMenuMasterDivAddAFunctionalArea" style="height:28px;width:92%;white-space:nowrap;border-radius:0 0 0 0;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color:#6682b5;" onclick="renderFunctionalAreaDetails(\'AddAFinancialArea\');" class="evaluationChecklistAccordionLink"><!--<img src="/images/plus.png" alt="" />-->+ Add a financial area&nbsp;&nbsp;&nbsp;&nbsp;</div>';
        html += '            <div id="divMenuMasterDivAddAFunctionalArea" class="divLeftButtonIos8" onclick="renderFunctionalAreaDetails(\'AddAFinancialArea\');"><!--<img src="/images/plus.png" alt="" />-->+ Add a financial area&nbsp;&nbsp;&nbsp;&nbsp;</div>';


        html += '        </td>';
        html += '    </tr>';
        html += '    <tr><td></td></tr>';
        for (var i = 0; i < BWMData[0][appIndex][4].length; i++) {
            if (BWMData[0][appIndex][4][i][3] == year) {
                html += '    <tr>';
                html += '        <td style="padding:0 0 0 10px;margin:0 0 0 0;border-width:0 0 0 0;">';
                //html += '            <div id="divFunctionalAreaMasterDiv' + BWMData[0][0][4][i][0].toString() + '" style="height:28px;width:92%;white-space:nowrap;border-radius:0 0 0 0;padding:12px 0 0 20px;margin:0 0 0 0;border-width:0 0 0 0;background-color:#6682b5;" onclick="renderFunctionalAreaDetails(\'' + BWMData[0][0][4][i][0].toString() + '\');" class="evaluationChecklistAccordionLink">' + BWMData[0][0][4][i][1].toString() + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                html += '            <div id="divFunctionalAreaMasterDiv' + BWMData[0][appIndex][4][i][0].toString() + '" class="divLeftButtonIos8" onclick="renderFunctionalAreaDetails(\'' + BWMData[0][appIndex][4][i][0].toString() + '\');">' + BWMData[0][appIndex][4][i][1].toString() + '&nbsp;&nbsp;&nbsp;&nbsp;</div>';
                html += '        </td>';
                html += '    </tr>';
                html += '    <tr><td></td></tr>';
            }
        }
        html += '</table>';
        $('#divFunctionalAreasListButtons').html(html);
        // End Regenerate
        ///////////
        //displayAlertDialog('functionalAreaId:' + functionalAreaId);
        // Set the active button with the dotted line outline etc.
        if (functionalAreaId == 'AddAFinancialArea') { // The '+ add a financial area' button again. 
            document.getElementById('divMenuMasterDivAddAFunctionalArea').className = 'divLeftButtonSelectedIos8';
            //$('#divMenuMasterDivAddAFunctionalArea').css({
            //    'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
            //});

        } else {
            document.getElementById('divFunctionalAreaMasterDiv' + functionalAreaId).className = 'divLeftButtonSelectedIos8';
            //$('#divFunctionalAreaMasterDiv' + functionalAreaId).css({
            //    'border-width': '0px', 'margin': '0px 0px 0px 0px', 'padding': '12px 0px 0px 20px', 'outline': 'rgb(59, 103, 142) dashed 1px', 'border-radius': '0px', 'width': '92%', 'height': '28px', 'color': '#dcdcdc', 'background-color': 'white'
            //});
        }

        ///////////
        // Now we display the Functional Area details.
        $('#divFunctionalAreaSection').html($('#divFunctionalAreaTemplate').html()); // Display the functional area form.
        var html = '';
        html += '<span xd:binding="my:FunctionalAreaId" style="display:none;">' + functionalAreaId + '</span>';
        html += '<table>';
        for (var i = 0; i < BWMData[0][appIndex][4].length; i++) {
            if (BWMData[0][appIndex][4][i][0] == functionalAreaId) {
                if (BWMData[0][appIndex][4][i][7][0][1]) {
                    html += '<tr>';
                    html += '  <td></td>';
                    //html += '      <span style="color:cornflowerblue;font-size:x-small;">Approver</span>';
                    html += '  <td></td>';
                    html += '  <td style="text-align:center;">';
                    html += '    <span style="color:cornflowerblue;font-size:18pt;">Budget Threshold</span>';
                    html += '  </td>';
                    html += '  <td></td>';
                    html += '</tr>';
                }
                for (var x = 0; x < BWMData[0][appIndex][4][i][7].length; x++) {
                    if (BWMData[0][appIndex][4][i][7][x][1]) { // If there is no entry, stop rendering the Approvers for this financial area.
                        html += '<tr>';
                        html += '  <td class="bwComTitleCell">Approver #' + (x + 2).toString() + '</td>';
                        html += '  <td class="bwChartCalculatorLightCurrencyTableCell" style="white-space:nowrap;">';
                        var approverNumber = x + 3;
                        html += '    <input id="txtApprover' + approverNumber + 'FriendlyName" title="' + BWMData[0][appIndex][4][i][7][x][2] + '" value="' + BWMData[0][appIndex][4][i][7][x][1] + '" class="PeopleFriendlyNameSelector" onfocus="this.blur();" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
                        html += '    <img src="images/addressbook-icon35x35.png" style="width:80px;height:80px;cursor:pointer;vertical-align:text-bottom;" onclick="cmdDisplayPeoplePickerDialog(\'txtApprover' + approverNumber + 'FriendlyName\', \'txtApprover' + approverNumber + 'Id\', \'txtApprover' + approverNumber + 'Email\');" />';
                        //if (BWMData[0][0][4][i][7].length == (x + 1)) {
                        //    // This is the last one in the list, and we put a delete x here. The user can only delete the bottom one at the moment.
                        //    html += '&nbsp;<span style="font-weight:bold;color:red;cursor:pointer;" title="Delete">X</span>';
                        //}
                        html += '    <input id="txtApprover' + approverNumber + 'Id" style="display:none;" value="' + BWMData[0][appIndex][4][i][7][x][0] + '" />';
                        html += '    <input id="txtApprover' + approverNumber + 'Email" style="display:none;" value="' + BWMData[0][appIndex][4][i][7][x][2] + '" />';
                        html += '  </td>';
                        html += '  <td class="bwChartCalculatorLightCurrencyTableCell">';
                        html += '    <span xd:binding="my:Approval' + approverNumber + 'BudgetThreshold" class="bwCurrencyTextBox" contenteditable="true" tabindex="0">' + formatCurrency(BWMData[0][appIndex][4][i][7][x][3]) + '</span>';
                        html += '  </td>';

                        html += '<td><img src="images/trash-can.png" class="trashcan" onclick="cmdDeleteApproverFromFinancialArea(\'' + approverNumber + '\');" title="Delete" style="cursor:pointer;" /></td>';

                        html += '</tr>';
                    }
                }
                html += '</table>';
                $('#divFunctionalAreasApproverDataEntryFields').html(html);

                // Now that it is displayed, we have to fill in the missing data!
                //displayAlertDialog('displaying:' + BWMData[0][appIndex][4][i][0]);
                $('#txtFunctionalAreaId').val(BWMData[0][appIndex][4][i][0]);
                $('#txtFunctionalAreaTitle').val(BWMData[0][appIndex][4][i][1]);

                //displayAlertDialog('functionalAreaQuote: ' + functionalAreaQuote);

                if (functionalAreaQuote == true) document.getElementById('cbFunctionalAreaQuote').checked = true;
                else document.getElementById('cbFunctionalAreaQuote').checked = false;

                var faHtml = '';
                faHtml += '<select id="txtFunctionalAreaYear" class="spanH2">';
                faHtml += '<option value="' + BWMData[0][appIndex][4][i][3] + '" selected>' + BWMData[0][appIndex][4][i][3] + '</option>';
                faHtml += '</select>';
                document.getElementById('spanFunctionalAreaYear').innerHTML = faHtml;

                //$('#txtFunctionalAreaYear').val(BWMData[0][0][4][i][3]);


                $('#txtFunctionalAreaYearlyBudget').val(BWMData[0][appIndex][4][i][4]);

                //var a1 = BWMData[0][0][4][i][5][1];
                //var a2 = BWMData[0][0][4][i][6][1];
                //$('#txtApprover1Name').val(a1);
                //$('#txtApprover2Name').val(a2);



                //$('#txtApprover1Name').val(BWMData[0][0][4][i][5][1]);
                //document.getElementById('txtApprover1Name').setAttribute('title', BWMData[0][0][4][i][5][2]); // This sets the title attribute to the participant email address.
                //$('#txtApprover2Name').val(BWMData[0][0][4][i][6][1]);
                //document.getElementById('txtApprover2Name').setAttribute('title', BWMData[0][0][4][i][5][2]); // This sets the title attribute to the participant email address.


                document.getElementById('txtApprover1FriendlyName').value = BWMData[0][appIndex][4][i][5][1];
                document.getElementById('txtApprover1FriendlyName').setAttribute('title', BWMData[0][appIndex][4][i][5][2]);
                document.getElementById('txtApprover1Id').value = BWMData[0][appIndex][4][i][5][0];
                document.getElementById('txtApprover1Email').value = BWMData[0][appIndex][4][i][5][2];

                document.getElementById('txtApprover2FriendlyName').value = BWMData[0][appIndex][4][i][6][1];
                document.getElementById('txtApprover2FriendlyName').setAttribute('title', BWMData[0][appIndex][4][i][6][2]);
                document.getElementById('txtApprover2Id').value = BWMData[0][appIndex][4][i][6][0];
                document.getElementById('txtApprover2Email').value = BWMData[0][appIndex][4][i][6][2];



                //$('span[xd\\:binding = "my:Approver1Name"]')[0].innerHTML = BWMData[0][0][4][i][5]; // my:Approver1Name
                //$('span[xd\\:binding = "my:Approver2Name"]')[0].innerHTML = BWMData[0][0][4][i][6]; // my:Approver2Name
                // find the friendly names for approvers 3-10 (my:Approver3Name)
                // formatCurrency for the budget thresholds 3-10 (my:Approval3BudgetThreshold)
                //formatCurrency2('my:FunctionalAreaYearlyBudget');
                var faYearlyBudget = $('#txtFunctionalAreaYearlyBudget').val();
                $('#txtFunctionalAreaYearlyBudget').val(formatCurrency(faYearlyBudget));
                //formatCurrency2('my:Approval3BudgetThreshold');
                //formatCurrency2('my:Approval4BudgetThreshold');
                //formatCurrency2('my:Approval5BudgetThreshold');
                //formatCurrency2('my:Approval6BudgetThreshold');
                //formatCurrency2('my:Approval7BudgetThreshold');
                //formatCurrency2('my:Approval8BudgetThreshold');
                //formatCurrency2('my:Approval9BudgetThreshold');
                //formatCurrency2('my:Approval10BudgetThreshold');


                // If this is marked as Hidden, we need to replace the delete button with the "Un-Hide" button.
                if (BWMData[0][appIndex][4][i][13] == 'true') {
                    var html = '';
                    html += '<input type="button" value="Un-Hide" id="btnFunctionalAreaUnHide" onclick="cmdUnHideFunctionalArea(\'' + functionalAreaId + '\');" class="BwButton200" />';
                    html += '&nbsp;';
                    html += '<input type="button" value="Save" onclick="cmdSaveFunctionalArea();" class="BwButton200" />';
                    html += '&nbsp;';
                    //html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divFunctionalAreas\', \'Reports\', \'\');" class="BwButton200" />';
                    html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200" />';
                    document.getElementById('spanFunctionalAreaDetailsBottomButtonSection').innerHTML = html;
                } else {
                    var html = '';
                    html += '<input type="button" value="Delete" id="btnFunctionalAreaDelete" onclick="cmdDeleteFunctionalArea(\'' + functionalAreaId + '\');" class="BwButton200" />';
                    html += '&nbsp;';
                    html += '<input type="button" value="Save" onclick="cmdSaveFunctionalArea();" class="BwButton200" />';
                    html += '&nbsp;';
                    //html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divFunctionalAreas\', \'Reports\', \'\');" class="BwButton200" />';
                    html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200" />';
                    document.getElementById('spanFunctionalAreaDetailsBottomButtonSection').innerHTML = html;
                }

                hookUpThePeoplePickers();
            }
        }
        // End display Functional Area
        ///////////

        if (functionalAreaId == 'AddAFinancialArea') {
            var yearHtml = '';
            yearHtml += new Date().getFullYear().toString(); // todd: hardcoded.
            document.getElementById('spanFunctionalAreaYear').innerHTML = yearHtml;

            var html = '';
            //html += '<input type="button" value="Delete" id="btnFunctionalAreaDelete" onclick="cmdDeleteFunctionalArea(\'' + functionalAreaId + '\');" class="BwSmallButton" />';
            //html += '&nbsp;';
            html += '<input type="button" value="Save" onclick="cmdSaveFunctionalArea();" class="BwButton200" />';
            html += '&nbsp;';
            //html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divFunctionalAreas\', \'Reports\', \'\');" class="BwButton200" />';
            html += '<input type="button" value="Cancel" onclick="populateStartPageItem(\'divWelcome\', \'Reports\', \'\');" class="BwButton200" />';
            document.getElementById('spanFunctionalAreaDetailsBottomButtonSection').innerHTML = html;
        }

        //generateFunctionalAreasApproverDataEntryFields();
        var e1 = document.getElementById('divFunctionalAreas');
        e1.style.borderRadius = '120px 0 0 120px';
    } catch (e) {
        displayAlertDialog('Error in ios8.js.renderFunctionalAreaDetails(' + functionalAreaId + '): ', e.message);

    }
}

function generateFunctionalAreasApproverDataEntryFields() {
    //
    var html = '';
    html += '<table>';
    html += '    <tr>';
    html += '        <td>';

    html += '<table>';
    //html += '    <tr>';
    //html += '        <td>Approver #2-1</td>';
    //html += '    </tr>';
    //html += '    <tr>';
    //html += '        <td>';
    //html += '            <table>';
    //html += '                <tr>';
    //html += '                    <td style="text-align:left;" class="bwFADrillDownLinkCell">Name</td>';
    //html += '                    <td class="bwChartCalculatorLightCurrencyTableCell">';
    //html += '                        <span xd:binding="my:xxxx" class="bwCurrencyTextBox" contenteditable="true" onblur="//formatCurrency($(this).attr(xd:binding));" onfocusin="//currencySpanOnFocusIn(this);" onkeyup="//currencySpanOnKeyUp(this);" tabindex="0" />';
    //html += '                    </td>';
    //html += '                </tr>';
    //html += '            </table>';
    //html += '        </td>';
    //html += '    </tr>';

    // BEGIN: DO A WEB SERVICE CALL TO GET THE FUNCTIONAL AREAS AND THEN ITERATE THROUGH THEM ALL HERE
    var functionalAreaAdditionalApprovers = BWMData; //[0][xxxx][4][7];
    for (var i = 0; i < functionalAreaAdditionalApprovers.length; i++) {
        html += '    <tr>';
        html += '        <td>Approver #' + i.toString() + '-1</td>';
        html += '    </tr>';
        html += '    <tr>';
        html += '        <td>';
        html += '            <table>';
        html += '                <tr>';
        html += '                    <td style="text-align:left;" class="bwFADrillDownLinkCell">Name</td>';
        html += '                    <td class="bwChartCalculatorLightCurrencyTableCell">';
        html += '                        <span xd:binding="my:xxxx" class="bwCurrencyTextBox" contenteditable="true" onblur="//formatCurrency($(this).attr(xd:binding));" onfocusin="//currencySpanOnFocusIn(this);" onkeyup="//currencySpanOnKeyUp(this);" tabindex="0" />';
        html += '                    </td>';
        html += '                </tr>';
        html += '                <tr>';
        html += '                    <td style="text-align:left;" class="bwFADrillDownLinkCell">Budget threshold</td>';
        html += '                    <td class="bwChartCalculatorLightCurrencyTableCell">';
        html += '                        <span xd:binding="my:xxxx" class="bwCurrencyTextBox" contenteditable="true" onblur="//formatCurrency($(this).attr(xd:binding));" onfocusin="//currencySpanOnFocusIn(this);" onkeyup="//currencySpanOnKeyUp(this);" tabindex="0" />';
        html += '                    </td>';
        html += '                </tr>';
        html += '            </table>';
        html += '        </td>';
        html += '    </tr>';
    }
    // END: DO A WEB SERVICE CALL TO GET THE FUNCTIONAL AREAS AND THEN ITERATE THROUGH THEM ALL HERE

    html += '</table>';

    html += '        </td>';
    html += '    </tr>';
    html += '</table>';

    $('#divFunctionalAreasApproverDataEntryFields').html(html);
}

function cmdCreateSupplementalBudgetRequestAndStartWorkflow(budgetRequestId, supplementalRequestId, _functionalAreaId, _pmAccountId) {
    try {
        //displayAlertDialog('xxxx');
        // Create with a GUID. The workflow will give it a better name.
        //var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        //    return v.toString(16);
        //});
        //var guid = document.getElementById('BudgetRequestId').innerHTML; // = _budgetRequestId;

        //displayAlertDialog('BudgetRequestId: ' + budgetRequestId + '  _functionalAreaId: ' + _functionalAreaId + '  _pmAccountId: ' + _pmAccountId);

        // We have the filename, so now it's time to create the file.
        var filename = supplementalRequestId + ".xml";
        if (validateSupplementalRequest()) {
            var xmlDocument = createXmlDocument_InitSupplementalAr(_functionalAreaId, _pmAccountId, supplementalRequestId);
            var projectTitle = document.getElementById('strProjectTitle').value;
            var _budgetRequest = [];
            //var _functionalAreaId = document.getElementById('ddlFunctionalArea').value.split('|')[0];
            //var _pmAccountId = document.getElementById('txtProjectManagerId').value;
            var requestedCapital = document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');
            //var requestedExpense = document.getElementById('dblRequestedExpense').value;
            var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
            var created = getCreatedTimestamp();
            var duedate = getDueDateTimestamp();
            _budgetRequest = {
                //filename: filename,
                bwBudgetRequestId: supplementalRequestId,
                bwTenantId: tenantId,
                bwWorkflowAppId: workflowAppId,
                bwWorkflowId: null,

                IsSupplementalRequest: 'true',
                RelatedBudgetRequestId: budgetRequestId,

                Created: created,
                CreatedBy: participantEmail,
                CreatedById: participantId,
                CreatedByEmail: participantEmail,
                //Modified: null,
                //ModifiedBy: null,
                bwDocumentXml: xmlDocument.toString(),
                Title: null,
                ProjectTitle: projectTitle.toString(),
                BudgetAmount: null,
                RequestedCapital: requestedCapital,
                RequestedExpense: requestedExpense,
                FunctionalAreaId: _functionalAreaId,
                ARStatus: 'Submitted',
                BudgetWorkflowStatus: 'Assign Budget',
                Quote: 'false',
                //CurrentOwner: participantEmail,

                ManagerId: _pmAccountId,

                bwWorkflowToken: '0', // 0 signifies the beginning of the workflow.
                //participantId: participantId,
                //bwAssignedTo: participantFriendlyName, //participantEmail, // THIS SHOULD REALLY BE THE PM AND DISCOVERED IN THE LOOKUP ON THE SERVER SIDE
                //bwAssignedToEmail: participantEmail,
                bwDueDate: duedate
            };
            var operationUri = webserviceurl + "/bwbudgetrequests/initbudgetrequest";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: _budgetRequest,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    displayAlertDialog('The supplemental budget request has been submitted');
                    //clearNewBudgetRequestFormFields();
                    //window.location.href = 'my.html';
                    populateStartPageItem('divWelcome', 'Reports', '');
                    //renderWelcomeScreen();
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
                }
            });
        } else {
            // Validation failed for some reason.
            displayAlertDialog('Error: Validation failed for some reason.');
        }
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdCreateSupplementalBudgetRequestAndStartWorkflow(): ' + e.message);
    }
}

//function cmdCreateRecurringExpenseBudgetRequestAndStartWorkflow() {
//    displayAlertDialog('cmdCreateRecurringExpenseBudgetRequestAndStartWorkflow()');
//}

function cmdCreateRecurringExpenseBudgetRequestAndStartWorkflow() {
    try {
        // The recurring expense already exists in the database.
        // So here we are just submitting the new budget request, making sure to indicate it was spawned from a recurring expense so we can track it down later on for stats and reporting purposes!
        //
        // First we get the guid that was created when the new request form was displayed. It is done here because we need the guid prior to doing attachment file uploads so that they get stored in the correct location.
        var budgetRequestId = document.getElementById('BudgetRequestId').innerHTML;
        var recurringExpenseId = document.getElementById('RecurringExpenseId').innerHTML;

        //displayAlertDialog('recurringExpenseId: ' + recurringExpenseId);

        var recurringExpenseReminderDate = document.getElementById('dtRecurringExpenseNextReminderDate').value;
        //var submitTheFirstRecurringExpenseImmediately = document.getElementById('cbNewRequestRecurringExpenseSubmitImmediately').checked;
        if (validateNewBudgetRequestFormForRecurringExpense()) {
            var xmlDocument = createXmlDocument_InitRecurringExpenseBudgetRequest(budgetRequestId);
            var projectTitle = $('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML; //document.getElementById('strProjectTitle').value;
            var _budgetRequest = [];
            var _functionalAreaId = document.getElementById('ddlFunctionalArea').value.split('|')[0];
            var _pmAccountId = $('span[xd\\:binding = "my:Project_Manager_AccountId"]')[0].innerHTML; //document.getElementById('txtProjectManagerId').value;
            var requestedCapital = document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');
            //var requestedExpense = document.getElementById('dblRequestedExpense').value;
            var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
            var created = getCreatedTimestamp();
            var duedate = getDueDateTimestamp();
            var isAQuote = 'false'; // Definately false, since this is a recurring expense.
            _budgetRequest = {
                //filename: filename,
                bwBudgetRequestId: budgetRequestId,
                bwTenantId: tenantId,
                bwWorkflowAppId: workflowAppId,
                bwWorkflowId: null,
                IsSupplementalRequest: 'false',
                RelatedBudgetRequestId: null,

                IsRecurringExpense: 'true', // Recurring expense.
                RelatedRecurringExpenseId: recurringExpenseId, // Recurring expense.
                RecurringExpenseNextReminderDate: recurringExpenseReminderDate, // 

                CreatedBy: participantEmail,
                CreatedById: participantId,
                CreatedByEmail: participantEmail,
                bwDocumentXml: xmlDocument,
                ProjectTitle: projectTitle,
                BudgetAmount: null,
                RequestedCapital: requestedCapital,
                RequestedExpense: requestedExpense,
                FunctionalAreaId: _functionalAreaId,
                ARStatus: 'Submitted',
                BudgetWorkflowStatus: 'Assign Budget',
                Quote: isAQuote,
                ManagerId: _pmAccountId,
                bwWorkflowToken: '0' // 0 signifies the beginning of the workflow.
            };
            var operationUri = webserviceurl + "/bwbudgetrequests/initbudgetrequest";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: _budgetRequest,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    displayAlertDialog(data); //'The budget request has been submitted'); // Todd: This message should be coming from the web service.
                    clearNewBudgetRequestFormFields();
                    populateStartPageItem('divWelcome', 'Reports', '');
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
                }
            });
        } else {
            // Validation failed for some reason.
            //displayAlertDialog('Error: Validation failed for some reason.');
        }
    } catch (e) {
        displayAlertDialog('Error in cmdCreateRecurringExpenseBudgetRequestAndStartWorkflow(): ' + e.message);
    }
}

function cmdUpdateRecurringExpenseReminderDate() {
    var recurringExpenseId = document.getElementById('RecurringExpenseId').innerHTML;
    var recurringExpenseReminderDate = document.getElementById('dtRecurringExpenseNextReminderDate').value;
    // First we have to validate the date.
    var dateFromSelection = new Date(recurringExpenseReminderDate); // Instantiate the object to see if there are any errors.
    var d = dateFromSelection.getDate();
    var m = dateFromSelection.getMonth();
    var y = dateFromSelection.getFullYear();
    var formulatedDate = new Date(y, m, d);
    if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
        var today = new Date(); // It's a valid date, but we need to check if it's before Today!!
        // Todd added fix #9-8-14-002 to bw.initar.core.js.
        today.setHours(0, 0, 0, 0);
        dateFromSelection.setHours(0, 0, 0, 0);
        if (dateFromSelection <= today) {
            displayAlertDialog('Please specify an "Reminder Date" which occurs in the future before submitting your request.');
            // Bad date, clear the box.
            document.getElementById('dtRecurringExpenseNextReminderDate').value = '';
        } else {
            // Passed validation. Now save the new reminder date to the database.
            var _recurringExpense = {
                bwRecurringExpenseId: recurringExpenseId,
                ReminderDate: recurringExpenseReminderDate
            }
            var operationUri = webserviceurl + "/bwrecurringexpense/saveanewrecurringxpensereminderdate";
            $.ajax({
                url: operationUri,
                type: "POST", timeout: ajaxTimeout,
                data: _recurringExpense,
                headers: {
                    "Accept": "application/json; odata=verbose"
                },
                success: function (data) {
                    if (data != 'SUCCESS') {
                        displayAlertDialog(data); // Display the error message.
                    } else {
                        // It's good, set the style of the Save button!
                        displayAlertDialog('The reminder date has been updated.');
                        document.getElementById('btnRecurringExpenseNextReminderDate').style.cursor = 'default';
                        document.getElementById('btnRecurringExpenseNextReminderDate').setAttribute('disabled', '');
                    }
                },
                error: function (data, errorCode, errorMessage) {
                    displayAlertDialog('Error in cmdUpdateRecurringExpenseReminderDate(): ' + errorMessage);
                }
            });
        }
    } else {
        // Bad date, clear the box.
        document.getElementById('dtRecurringExpenseNextReminderDate').value = '';
    }
}

function cmdCreateBudgetRequestAndStartWorkflow() {
    try {

        displayWorkingOnItDialog();
        // First we get the guid that was created when the new request form was displayed. It is done here because we need the guid prior to doing attachment file uploads so that they get stored in the correct location.
        var guid = document.getElementById('BudgetRequestId').innerHTML;
        // Then we have to check if this is a recurring expense, and if the user wants to submit the first budget request immediately.
        //var isARecurringExpense = document.getElementById('cbNewRequestRecurringExpenseEnabled').checked;

        var isARecurringExpense = false;
        if ($('#selectNewRequestFormRequestTypeDropDown option:selected').val() == 'recurringexpense') {
            isARecurringExpense = true;
        }
        if (isARecurringExpense == true) {

            //displayAlertDialog('This is a Recurring Expense. cmdCreateBudgetRequestAndStartWorkflow()');

            var recurringExpenseId = document.getElementById('RecurringExpenseId').innerHTML;

            //displayAlertDialog('RecurringExpenseId: ' + reGuid);
            var recurringExpenseReminderDate = '';
            var tmpRecurringExpenseReminderDate = document.getElementById('dtRecurringExpenseReminderDate').value;
            if (tmpRecurringExpenseReminderDate == '') {
                // No date was selected so leave this blank.
                recurringExpenseReminderDate = '';
            } else {
                var now = new Date();
                var year = tmpRecurringExpenseReminderDate.split('/')[2];
                var month = tmpRecurringExpenseReminderDate.split('/')[0];
                var day = tmpRecurringExpenseReminderDate.split('/')[1];
                var hour = now.getHours();
                var minutes = now.getMinutes();
                var seconds = now.getSeconds();
                recurringExpenseReminderDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
            }



            var submitTheFirstRecurringExpenseImmediately = document.getElementById('cbNewRequestRecurringExpenseSubmitImmediately').checked;
            if (validateCapexForm2()) {
                // First we will save the recurring expense, then we will submit the first one if the user chose this option.
                var xmlDocument = createXmlDocument_InitRecurringExpense(recurringExpenseId);
                var projectTitle = document.getElementById('strProjectTitle').value;

                //displayAlertDialog('projectTitle: ' + projectTitle);

                var _recurringExpense = [];
                var _functionalAreaId = document.getElementById('ddlFunctionalArea').value.split('|')[0];
                var _pmAccountId = document.getElementById('txtProjectManagerId').value;


                var requestedCapital = document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');


                //var requestedExpense = document.getElementById('dblRequestedExpense').value;
                var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
                //var created = getCreatedTimestamp();
                //var duedate = getDueDateTimestamp();
                _recurringExpense = {
                    submitTheFirstRecurringExpenseImmediately: submitTheFirstRecurringExpenseImmediately,
                    bwRecurringExpenseId: recurringExpenseId,
                    bwTenantId: tenantId,
                    bwWorkflowAppId: workflowAppId,
                    bwWorkflowId: null,
                    CreatedBy: participantFriendlyName,
                    CreatedById: participantId,
                    CreatedByEmail: participantEmail,
                    ReminderDate: recurringExpenseReminderDate,
                    bwDocumentXml: xmlDocument.toString(),
                    ProjectTitle: projectTitle.toString(),
                    BudgetAmount: null,
                    RequestedCapital: requestedCapital,
                    RequestedExpense: requestedExpense,
                    FunctionalAreaId: _functionalAreaId,
                    Quote: 'false',
                    ManagerId: _pmAccountId
                    // TODD: WE NEED firendly name and email here as well.
                };
                var operationUri = webserviceurl + "/bwbudgetrequests/saveanewrecurringxpense"; //initanewrecurringexpensebudgetrequest";
                $.ajax({
                    url: operationUri,
                    type: "POST", timeout: ajaxTimeout,
                    data: _recurringExpense,
                    headers: {
                        "Accept": "application/json; odata=verbose"
                    },
                    success: function (data) {
                        displayAlertDialog(data);
                        //displayAlertDialog('The recurring expense has been submitted'); // Todd: This message should be coming from the web service.
                        clearNewBudgetRequestFormFields();
                        populateStartPageItem('divWelcome', 'Reports', '');
                    },
                    error: function (data, errorCode, errorMessage) {
                        displayAlertDialog('Error creating the budget request in budgetrequests library:1: ' + JSON.stringify(data));
                    }
                });
            } else {
                // Validation failed for some reason.
                //displayAlertDialog('Error: Validation failed for some reason.');
            }
        } else {
            // This is not a recurring expense, just a regular budget request!
            var filename = guid + ".xml";
            if (validateCapexForm2()) {
                var xmlDocument = createXmlDocument_InitAr(guid);
                if (xmlDocument == 'FAILED') {
                    displayAlertDialog('Failed to create XML.');
                } else {
                    var projectTitle = document.getElementById('strProjectTitle').value;
                    var _budgetRequest = [];
                    var _functionalAreaId = document.getElementById('ddlFunctionalArea').value.split('|')[0];
                    var _pmAccountId = document.getElementById('txtProjectManagerId').value;
                    var requestedCapital = document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');
                    //var requestedExpense = document.getElementById('dblRequestedExpense').value;
                    var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
                    var created = getCreatedTimestamp();
                    var duedate = getDueDateTimestamp();

                    var isAQuote = false;
                    if ($('#selectNewRequestFormRequestTypeDropDown option:selected').val() == 'quoterequest') {
                        isAQuote = true;
                    }

                    // bwBudgetRequestPlaceholder1 is the column name, to be changed in the future.
                    var isAReimbursementRequest = false;
                    if ($('#selectNewRequestFormRequestTypeDropDown option:selected').val() == 'expenserequest') {
                        isAReimbursementRequest = true;
                    }


                    _budgetRequest = {
                        //filename: filename,
                        bwBudgetRequestId: guid.toString(),
                        bwTenantId: tenantId,
                        bwWorkflowAppId: workflowAppId,
                        bwWorkflowId: null,
                        IsSupplementalRequest: 'false',
                        RelatedBudgetRequestId: null,

                        IsRecurringExpense: 'false', // Recurring expense.
                        RelatedRecurringExpenseId: null, // Recurring expense.

                        CreatedBy: participantEmail,
                        CreatedById: participantId,
                        CreatedByEmail: participantEmail,
                        bwDocumentXml: xmlDocument.toString(),
                        ProjectTitle: projectTitle.toString(),
                        BudgetAmount: null,
                        RequestedCapital: requestedCapital,
                        RequestedExpense: requestedExpense,
                        FunctionalAreaId: _functionalAreaId,
                        ARStatus: 'Submitted',
                        BudgetWorkflowStatus: 'Assign Budget',
                        Quote: isAQuote,
                        bwBudgetRequestPlaceholder1: isAReimbursementRequest,
                        ManagerId: _pmAccountId,
                        bwWorkflowToken: '0' // 0 signifies the beginning of the workflow.
                    };
                    var operationUri = webserviceurl + "/bwbudgetrequests/initbudgetrequest";
                    $.ajax({
                        url: operationUri,
                        type: "POST", timeout: ajaxTimeout,
                        data: _budgetRequest,
                        headers: {
                            "Accept": "application/json; odata=verbose"
                        },
                        success: function (data) {
                            displayAlertDialog('The budget request has been submitted'); // Todd: This message should be coming from the web service.
                            clearNewBudgetRequestFormFields();
                            populateStartPageItem('divWelcome', 'Reports', '');
                        },
                        error: function (data, errorCode, errorMessage) {
                            displayAlertDialog('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
                        }
                    });
                }
            } else {
                // Validation failed for some reason. This is caught in validateCapexForm2 so we don't need to do anything here.
                // displayAlertDialog('Error: Validation failed for some reason.');
            }
        }
    } catch (e) {
        displayAlertDialog('Error in ios8.js.cmdCreateBudgetRequestAndStartWorkflow(): ' + e.message);
    }
}


function clearNewBudgetRequestFormFields() {
    // This clears the fields because the request has been submitted. We don't want these to show up opulated when the user goes to submit another one.
    try {
        document.getElementById('strProjectTitle').value = '';
        document.getElementById('strBriefDescriptionOfProject').value = '';
        document.getElementById('dblRequestedCapital').value = '';
        document.getElementById('txtProjectManagerName').value = '';
        document.getElementById('txtProjectManagerId').value = '';
        document.getElementById('txtProjectManagerEmail').value = '';
        document.getElementById('dtEstimatedStartDate').value = '';
        document.getElementById('dtEstimatedEndDate').value = '';
        document.getElementById('inputFile').value = '';
    } catch (e) {
        displayAlertDialog('Error in ios8.js.clearNewBudgetRequestFormFields().');
    }
}

//function cmdCreateFirstBudgetRequestAndStartWorkflow(functionalAreaId) {
//    // Create with a GUID. The workflow will give it a better name.
//    var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
//        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
//        return v.toString(16);
//    });
//    // We have the filename, so now it's time to create the file.
//    var filename = guid + ".xml";
//    if (validateCapexForm2()) {
//        var xmlDocument = createXmlDocument_InitAr(); //createXmlDocument_InitAr();
//        var projectTitle = 'Test Budget Request'; //document.getElementById('strProjectTitle').value;function getCreatedTimestamp
//        var _budgetRequest = [];
//        var _functionalAreaId = functionalAreaId; //document.getElementById('ddlFunctionalArea').value.split('|')[0];
//        var _pmAccountId = participantId; //document.getElementById('txtProjectManagerId').value;
//        var requestedCapital = '100'; //document.getElementById('dblRequestedCapital').value.replace(/[^0-9-.]/g, '');
//        //var requestedExpense = document.getElementById('dblRequestedExpense').value;
//        var requestedExpense = 0; // Todd: enable this by hiding the field in the init form is the final solution so we can just enable it for enhanced functionality.
//        var created = getCreatedTimestamp();
//        var duedate = getDueDateTimestamp();
//        _budgetRequest = {
//            filename: filename,
//            bwBudgetRequestId: guid.toString(),
//            bwTenantId: tenantId,
//            bwWorkflowAppId: workflowAppId,
//            bwWorkflowId: null,
//            Created: created,
//            CreatedBy: participantEmail,
//            CreatedById: participantId,
//            bwDocumentXml: xmlDocument.toString(),
//            Title: null,
//            ProjectTitle: projectTitle.toString(),
//            BudgetAmount: null,
//            RequestedCapital: requestedCapital,
//            RequestedExpense: requestedExpense,
//            FunctionalAreaId: _functionalAreaId,
//            ARStatus: 'Submitted',
//            BudgetWorkflowStatus: 'Assign Budget',
//            Quote: 'false',
//            PMAccountId: _pmAccountId,
//            bwWorkflowToken: '0', // 0 signifies the beginning of the workflow.
//            bwDueDate: duedate
//        };

//        //Modified: null,
//        //ModifiedBy: null,
//        //participantId: participantId,
//        //bwAssignedTo: participantFriendlyName, //participantEmail, // THIS SHOULD REALLY BE THE PM AND DISCOVERED IN THE LOOKUP ON THE SERVER SIDE
//        //bwAssignedToEmail: participantEmail,
//        //CurrentOwner: participantEmail,

//        var operationUri = appweburl + "/bwbudgetrequests/initbudgetrequest";
//        $.ajax({
//            url: operationUri,
//            type: "POST", timeout: ajaxTimeout,
//            data: _budgetRequest,
//            headers: {
//                "Accept": "application/json; odata=verbose"
//            },
//            success: function (data) {
//                //displayAlertDialog('The budget request has been submitted');
//                //window.location.href = 'my.html';
//                //populateStartPageItem('divWelcome', 'Reports', '');
//                //renderWelcomeScreen();
//            },
//            error: function (data, errorCode, errorMessage) {
//                displayAlertDialog('Error creating the budget request in budgetrequests library. ' + JSON.stringify(data));
//            }
//        });
//    } else {
//        // Validation failed for some reason.
//        //displayAlertDialog('Error: Validation failed for some reason.');
//    }
//}

//function populateFunctionalAreas_old() {
//    //displayAlertDialog('appweburl:' + appweburl);
//    var operationUri = webserviceurl + "/_api/web/lists/getbytitle('FunctionalAreas')/items";
//    //displayAlertDialog('populateFunctionalAreas:' + operationUri);
//    $.ajax({
//        url: operationUri,
//        method: "GET",
//        headers: {
//            "Accept": "application/json; odata=verbose"
//        },
//        success: function (data) {
//            var year = document.getElementById('ddlYear').value;
//            $('#ddlFunctionalArea').empty(); // Clear the previous entries before we populate it.
//            for (var i = 0; i < data.d.results.length; i++) {
//                if (data.d.results[i].Year == year) {
//                    //$("<option value='" + data.d.results[i].Id + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
//                    if (data.d.results[i].HideFunctionalArea != true) {
//                        $("<option value='" + data.d.results[i].Id + "|" + data.d.results[i].Quote + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
//                    }
//                }
//            }
//        },
//        error: function (data, errorCode, errorMessage) {
//            displayAlertDialog('Error populating functional areas.');
//            //WriteToErrorLog('Error in bw.initar.js.populateFunctionalAreas()', 'Error populating functional areas: ' + errorCode + ', ' + errorMessage);
//        }
//    });
//}

function populateFunctionalAreas() {
    try {
        var operationUri = webserviceurl + "/getfunctionalareasbyappid/" + workflowAppId + "/" + "RETURNALL";
        $.ajax({
            url: operationUri,
            method: "GET",
            headers: {
                "Accept": "application/json; odata=verbose"
            },
            success: function (data) {
                //var year = document.getElementById('ddlYear').value;
                var year = new Date().getFullYear().toString(); // todd hardcoded
                $('#ddlFunctionalArea').empty(); // Clear the previous entries before we populate it.

                var financialAreasToDisplay = [];
                financialAreasToDisplay = new Array();
                //var areThereAnyFasDisplayed = false;
                for (var i = 0; i < data.d.results.length; i++) {
                    if (data.d.results[i].bwFunctionalAreaYear == year) {
                        //$("<option value='" + data.d.results[i].Id + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
                        if (data.d.results[i].IsHidden != 'true') {
                            var tempFa = [];
                            tempFa = new Array(3);
                            tempFa[0] = data.d.results[i].bwFunctionalAreaId;
                            tempFa[1] = data.d.results[i].bwFunctionalAreaQuote;
                            tempFa[2] = data.d.results[i].bwFunctionalAreaTitle;
                            financialAreasToDisplay.push(tempFa);
                            //$("<option value='" + data.d.results[i].bwFunctionalAreaId + "|" + data.d.results[i].bwFunctionalAreaQuote + "'>" + data.d.results[i].bwFunctionalAreaTitle + "</option>").appendTo($('#ddlFunctionalArea'));
                            //areThereAnyFasDisplayed = true;
                        }
                    }
                }
                //if (areThereAnyFasDisplayed == false) {
                if (financialAreasToDisplay.length == 0) {
                    displayAlertDialog('There are no Financial Areas to choose from for this Budget Request, therefore you cannot submit one at this time.');
                    // go to home page
                    populateStartPageItem('divWelcome', 'Reports', '');
                } else {
                    // Render the drop down.
                    $("<option value=''>Select a financial area...</option>").appendTo($('#ddlFunctionalArea'));
                    for (var i = 0; i < financialAreasToDisplay.length; i++) {
                        $("<option value='" + financialAreasToDisplay[i][0] + "|" + financialAreasToDisplay[i][1] + "'>" + financialAreasToDisplay[i][2] + "</option>").appendTo($('#ddlFunctionalArea'));
                    }
                }
            },
            error: function (data, errorCode, errorMessage) {
                displayAlertDialog('Error populating functional areas: ' + errorCode + ', ' + errorMessage);
                //WriteToErrorLog('Error in bw.initar.js.populateFunctionalAreas()', 'Error populating functional areas: ' + errorCode + ', ' + errorMessage);
            }
        });
    } catch (e) {
        displayAlertDialog('Error in populateFunctionalAreas(): ' + e.message);
    }
}

function populateFunctionalAreasForAssignBudgetEditForm() {
    //displayAlertDialog('populateFunctionalAreasForAssignBudgetEditForm');
    var operationUri = webserviceurl + "/getfunctionalareasbyappid/" + workflowAppId + "/" + "RETURNALL";
    $.ajax({
        url: operationUri,
        method: "GET",
        headers: {
            "Accept": "application/json; odata=verbose"
        },
        success: function (data) {
            //var year = document.getElementById('ddlYear').value;
            var year = new Date().getFullYear().toString(); // todd hardcoded
            $('#ddlFunctionalArea').empty(); // Clear the previous entries before we populate it.

            var financialAreasToDisplay = [];
            financialAreasToDisplay = new Array();
            //var areThereAnyFasDisplayed = false;
            for (var i = 0; i < data.d.results.length; i++) {
                if (data.d.results[i].bwFunctionalAreaYear == year) {
                    //$("<option value='" + data.d.results[i].Id + "'>" + data.d.results[i].Title + "</option>").appendTo($('#ddlFunctionalArea'));
                    if (data.d.results[i].IsHidden != 'true') {
                        var tempFa = [];
                        tempFa = new Array(3);
                        tempFa[0] = data.d.results[i].bwFunctionalAreaId;
                        tempFa[1] = data.d.results[i].bwFunctionalAreaQuote;
                        tempFa[2] = data.d.results[i].bwFunctionalAreaTitle;
                        financialAreasToDisplay.push(tempFa);
                        //$("<option value='" + data.d.results[i].bwFunctionalAreaId + "|" + data.d.results[i].bwFunctionalAreaQuote + "'>" + data.d.results[i].bwFunctionalAreaTitle + "</option>").appendTo($('#ddlFunctionalArea'));
                        //areThereAnyFasDisplayed = true;
                    }
                }
            }
            var selectedFinancialArea = $('span[xd\\:binding = "my:Functional_Area_Id"]')[0].innerHTML;
            for (var i = 0; i < financialAreasToDisplay.length; i++) {
                var a = financialAreasToDisplay[i][0];
                //displayAlertDialog('financialAreasToDisplay[i][0]: x' + financialAreasToDisplay[i][0] + 'x');
                //displayAlertDialog('selectedFinancialArea: x' + selectedFinancialArea + 'x');

                if (a == selectedFinancialArea) {
                    //displayAlertDialog('financialAreasToDisplay[i][0] == selectedFinancialArea');
                    // This option should be selected.
                    $('<option value="' + financialAreasToDisplay[i][0] + '" selected>' + financialAreasToDisplay[i][2] + '</option>').appendTo($('#ddlFunctionalArea'));
                } else {
                    $('<option value="' + financialAreasToDisplay[i][0] + '">' + financialAreasToDisplay[i][2] + '</option>').appendTo($('#ddlFunctionalArea'));
                }
            }
        },
        error: function (data, errorCode, errorMessage) {
            displayAlertDialog('Error in populateFunctionalAreasForAssignBudgetEditForm().');
            //WriteToErrorLog('Error in bw.initar.js.populateFunctionalAreas()', 'Error populating functional areas: ' + errorCode + ', ' + errorMessage);
        }
    });
}

function validateCapexForm2() {
    // This method gets called prior to saving.
    var validation = true;
    // Validate the following fields:
    // Project Title
    if (document.getElementById('strProjectTitle').value == "") {
        validation = false;
        displayAlertDialog('Please enter a "Description" before submitting your request.');
        document.getElementById('strProjectTitle').focus();
    }

    // Category
    //if (validation)
    //    if (document.getElementById('ddlCategory').value == "") {
    //        validation = false;
    //        displayAlertDialog('Please select a "Category" before submitting your request.'); 
    //        document.getElementById('ddlCategory').focus();
    //    }

    // Brief Description of Project
    if (validation)
        if (document.getElementById('strBriefDescriptionOfProject').value == "") {
            if (requireRequestDetails == true) {
                validation = false;
                displayAlertDialog('Please enter some "Details" before submitting your request.');
                document.getElementById('strBriefDescriptionOfProject').focus();
            }
        }

    // Requested Capital
    if (validation)
        try {
            if (document.getElementById('dblRequestedCapital').value == "") {
                validation = false;
                displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
                document.getElementById('dblRequestedCapital').focus();
            } else {
                var x = document.getElementById('dblRequestedCapital').value;
                var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
                if (!isNumberGreaterThanZero(y)) {
                    validation = false;
                    displayAlertDialog('Please enter a value greater than zero for "Requested Amount" before submitting your request.');
                    document.getElementById('dblRequestedCapital').value = ''; // clear the textbox before the cursor gets put back into it.
                    document.getElementById('dblRequestedCapital').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
            document.getElementById('dblRequestedCapital').focus();
        }

    //// Requested Expense
    //if (validation)
    //    try {
    //        if (document.getElementById('dblRequestedExpense').value == "") {
    //            validation = false;
    //            displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
    //            document.getElementById('dblRequestedExpense').focus();
    //        } else {
    //            var x = document.getElementById('dblRequestedExpense').value;
    //            var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
    //            //if (!isNumberGreaterThanZero(y)) {
    //            //    validation = false;
    //            //    displayAlertDialog('Please enter a value greater than zero for "Requested Expense" before submitting your request.');
    //            //    document.getElementById('dblRequestedExpense').value = ''; // clear the textbox before the cursor gets put back into it.
    //            //    document.getElementById('dblRequestedExpense').focus();
    //            //}
    //        }
    //    } catch (e) {
    //        validation = false;
    //        displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
    //        document.getElementById('dblRequestedExpense').focus();
    //    }

    // Project Manager
    if (validation) {
        try {
            if (!validateProjectManager()) {
                validation = false;
                displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.'); // todd add a focus statement here
                //document.getElementById('SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePicker_TopSpan').focus();
            }
        } catch (ex) {
            validation = false;
            displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.');
        }
    }


    // Year
    if (validation)
        if (document.getElementById('ddlYear').value == "") {
            validation = false;
            displayAlertDialog('Please select a "Year" before submitting your request.');
            document.getElementById('ddlYear').focus();
        }

    // Functional Area
    //displayAlertDialog('selectedIndex: ' + document.getElementById('ddlFunctionalArea').selectedIndex);
    if (validation)
        if (document.getElementById('ddlFunctionalArea').value == "") {
            validation = false;
            displayAlertDialog('Please select a "Financial Area" before submitting your request.');
            document.getElementById('ddlFunctionalArea').focus();
        }

    // Estimated Start Date
    var estimatedStartDate = '';
    if (validation) {
        //var iPhone;
        //try {
        //    estimatedStartDate = document.getElementById('dtEstimatedStartDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
        //    iPhone = false;
        //} catch (e) {
        // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        var myDate = document.getElementById('dtEstimatedStartDate').value;
        if (myDate.length > 0) {
            var arr = myDate.split("-");
            estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
        }
        //    iPhone = true;
        //}
        // Now that we have the date, validate it.
        try {
            if (estimatedStartDate != "") {
                var dateFromSelection = new Date(estimatedStartDate); // Instantiate the object to see if there are any errors.
                var d = dateFromSelection.getDate();
                var m = dateFromSelection.getMonth();
                var y = dateFromSelection.getFullYear();
                var formulatedDate = new Date(y, m, d);
                if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
                    var today = new Date(); // It's a valid date, but we need to check if it's before Today!!

                    // Todd added fix #9-8-14-002 to bw.initar.core.js.
                    today.setHours(0, 0, 0, 0);
                    dateFromSelection.setHours(0, 0, 0, 0);

                    if (dateFromSelection < today) {
                        validation = false;
                        displayAlertDialog('Please specify an "Estimated Start Date" which occurs today or in the future before submitting your request.');
                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                    }
                } else {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                }
            } else {
                if (requireStartEndDates == true) {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
        }
    }

    // Estimated End Date
    if (validation) {
        var estimatedEndDate = '';
        //var iPhone;
        //try {
        //    estimatedEndDate = document.getElementById('dtEstimatedEndDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
        //    iPhone = false;
        //} catch (e) {
        // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        var myDate = document.getElementById('dtEstimatedEndDate').value;
        if (myDate.length > 0) {
            var arr = myDate.split("-");
            estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
        }
        //iPhone = true;
        //}
        // Now that we have the date, validate it.
        try {
            if (estimatedEndDate != "") {
                var dateFromSelection = new Date(estimatedEndDate); // Instantiate the object to see if there are any errors.
                var d = dateFromSelection.getDate();
                var m = dateFromSelection.getMonth();
                var y = dateFromSelection.getFullYear();
                var formulatedDate = new Date(y, m, d);
                if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
                    var today = new Date(); // It's a valid date, but we need to check if it's before Today!!
                    if (dateFromSelection < today) {
                        validation = false;
                        displayAlertDialog('Please specify an "Estimated End Date" which occurs in the future before submitting your request.');
                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                    } else {
                        var startDate = new Date(estimatedStartDate);
                        if (dateFromSelection < startDate) {
                            validation = false;
                            displayAlertDialog('Please specify an "Estimated End Date" which occurs the same day, or after the "Estimated Start Date" before submitting your request.');
                            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                        }
                    }
                } else {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                }
            } else {
                if (requireStartEndDates == true) {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
        }
    }
    // Attachments *******NOT NECESSARY TO VALIDATE*******

    return validation;
}

function validateNewBudgetRequestFormForRecurringExpense() {
    // This method gets called prior to saving.
    var validation = true;
    // Validate the following fields:
    // Project Title
    if ($('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML == "") {
        validation = false;
        displayAlertDialog('Please enter a "Description" before submitting your request.');
        //document.getElementById('strProjectTitle').focus();
    }


    //displayAlertDialog('In validateNewBudgetRequestFormForRecurringExpense().');

    //var recurringExpenseReminderDate = document.getElementById('dtRecurringExpenseNextReminderDate').value;
    // Estimated Start Date
    var recurringExpenseReminderDate;
    if (validation == true) {
        var iPhone;
        try {
            recurringExpenseReminderDate = document.getElementById('dtRecurringExpenseNextReminderDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
            iPhone = false;
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            var myDate = document.getElementById('dtRecurringExpenseNextReminderDate').value;
            var arr = myDate.split("-");
            recurringExpenseReminderDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (recurringExpenseReminderDate.indexOf('undefined') > -1) recurringExpenseReminderDate = '';
            iPhone = true;
        }

        //displayAlertDialog('recurringExpenseReminderDate: ' + recurringExpenseReminderDate);

        // Now that we have the date, validate it.
        try {
            if (recurringExpenseReminderDate != "") {
                var dateFromSelection = new Date(recurringExpenseReminderDate); // Instantiate the object to see if there are any errors.
                var d = dateFromSelection.getDate();
                var m = dateFromSelection.getMonth();
                var y = dateFromSelection.getFullYear();
                var formulatedDate = new Date(y, m, d);
                if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
                    var today = new Date(); // It's a valid date, but we need to check if it's before Today!!

                    // Todd added fix #9-8-14-002 to bw.initar.core.js.
                    today.setHours(0, 0, 0, 0);
                    dateFromSelection.setHours(0, 0, 0, 0);

                    if (dateFromSelection <= today) {
                        validation = false;
                        displayAlertDialog('Please specify an "Reminder Date" which occurs in the future before submitting your request.');
                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                    }
                } else {
                    validation = false;
                    displayAlertDialog('Please specify an "Reminder Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                }
            } else {
                //if (requireStartEndDates == true) {
                validation = false;
                displayAlertDialog('Please specify an "Reminder Date" before submitting your request.');
                //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                //}
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please specify an "Reminder Date" before submitting your request.');
            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
        }
    }




    // Category
    //if (validation)
    //    if (document.getElementById('ddlCategory').value == "") {
    //        validation = false;
    //        displayAlertDialog('Please select a "Category" before submitting your request.'); 
    //        document.getElementById('ddlCategory').focus();
    //    }

    // Brief Description of Project
    if (validation)
        if (document.getElementById('strBriefDescriptionOfProject').value == "") {
            if (requireRequestDetails == true) {
                validation = false;
                displayAlertDialog('Please enter some "Details" before submitting your request.');
                document.getElementById('strBriefDescriptionOfProject').focus();
            }
        }

    // Requested Capital
    if (validation)
        try {
            //my:Requested_Capital
            if ($('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML == "") {
                validation = false;
                displayAlertDialog('Please enter a value for "Requested Capital" before submitting your request.');
                //document.getElementById('dblRequestedCapital').focus();
            } else {
                var x = $('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML;
                var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
                if (!isNumberGreaterThanZero(y)) {
                    validation = false;
                    displayAlertDialog('Please enter a value greater than zero for "Requested Capital" before submitting your request.');
                    //document.getElementById('dblRequestedCapital').value = ''; // clear the textbox before the cursor gets put back into it.
                    //document.getElementById('dblRequestedCapital').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please enter a value for "Requested Capital" before submitting your request.');
            //document.getElementById('dblRequestedCapital').focus();
        }

    //// Requested Expense
    //if (validation)
    //    try {
    //        if (document.getElementById('dblRequestedExpense').value == "") {
    //            validation = false;
    //            displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
    //            document.getElementById('dblRequestedExpense').focus();
    //        } else {
    //            var x = document.getElementById('dblRequestedExpense').value;
    //            var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
    //            //if (!isNumberGreaterThanZero(y)) {
    //            //    validation = false;
    //            //    displayAlertDialog('Please enter a value greater than zero for "Requested Expense" before submitting your request.');
    //            //    document.getElementById('dblRequestedExpense').value = ''; // clear the textbox before the cursor gets put back into it.
    //            //    document.getElementById('dblRequestedExpense').focus();
    //            //}
    //        }
    //    } catch (e) {
    //        validation = false;
    //        displayAlertDialog('Please enter a value for "Requested Expense" before submitting your request.');
    //        document.getElementById('dblRequestedExpense').focus();
    //    }

    // Project Manager
    if (validation) {
        try {
            if ($('span[xd\\:binding = "my:Project_Manager_AccountId"]')[0].innerHTML == "") {
                validation = false;
                displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.');
                //document.getElementById('dblRequestedCapital').focus();
            }

            //if (!validateProjectManager()) {

            //    var managername = document.getElementById('txtProjectManagerName').value;
            //    //displayAlertDialog('managername:' + managername);

            //    if (managername != '') result = true;


            //    validation = false;
            //    displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.'); // todd add a focus statement here
            //    //document.getElementById('SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePicker_TopSpan').focus();
            //}
        } catch (ex) {
            validation = false;
            displayAlertDialog('Please select a "' + newBudgetRequestManagerTitle + '" before submitting your request.');
        }
    }


    // Year
    //if (validation)
    //    if (document.getElementById('ddlYear').value == "") {
    //        validation = false;
    //        displayAlertDialog('Please select a "Year" before submitting your request.');
    //        document.getElementById('ddlYear').focus();
    //    }

    // Functional Area
    //displayAlertDialog('selectedIndex: ' + document.getElementById('ddlFunctionalArea').selectedIndex);
    //if (validation)
    //    if (document.getElementById('ddlFunctionalArea').value == "") {
    //        validation = false;
    //        displayAlertDialog('Please select a "Financial Area" before submitting your request.');
    //        document.getElementById('ddlFunctionalArea').focus();
    //    }

    // Estimated Start Date
    var estimatedStartDate;
    if (validation) {
        var iPhone;
        try {
            estimatedStartDate = document.getElementById('dtEstimatedStartDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
            iPhone = false;
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            var myDate = document.getElementById('dtEstimatedStartDate').value;
            var arr = myDate.split("-");
            estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
            iPhone = true;
        }
        // Now that we have the date, validate it.
        try {
            if (estimatedStartDate != "") {
                var dateFromSelection = new Date(estimatedStartDate); // Instantiate the object to see if there are any errors.
                var d = dateFromSelection.getDate();
                var m = dateFromSelection.getMonth();
                var y = dateFromSelection.getFullYear();
                var formulatedDate = new Date(y, m, d);
                if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
                    var today = new Date(); // It's a valid date, but we need to check if it's before Today!!

                    // Todd added fix #9-8-14-002 to bw.initar.core.js.
                    today.setHours(0, 0, 0, 0);
                    dateFromSelection.setHours(0, 0, 0, 0);

                    if (dateFromSelection < today) {
                        validation = false;
                        displayAlertDialog('Please specify an "Estimated Start Date" which occurs today or in the future before submitting your request.');
                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                    }
                } else {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                }
            } else {
                if (requireStartEndDates == true) {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please specify an "Estimated Start Date" before submitting your request.');
            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').focus();
        }
    }

    // Estimated End Date
    if (validation) {
        var estimatedEndDate;
        var iPhone;
        try {
            estimatedEndDate = document.getElementById('dtEstimatedEndDate').value; //document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
            iPhone = false;
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            var myDate = document.getElementById('dtEstimatedEndDate').value;
            var arr = myDate.split("-");
            estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
            iPhone = true;
        }
        // Now that we have the date, validate it.
        try {
            if (estimatedEndDate != "") {
                var dateFromSelection = new Date(estimatedEndDate); // Instantiate the object to see if there are any errors.
                var d = dateFromSelection.getDate();
                var m = dateFromSelection.getMonth();
                var y = dateFromSelection.getFullYear();
                var formulatedDate = new Date(y, m, d);
                if (((formulatedDate.getDate() == d) && (formulatedDate.getMonth() == m) && (formulatedDate.getFullYear() == y))) {
                    var today = new Date(); // It's a valid date, but we need to check if it's before Today!!
                    if (dateFromSelection < today) {
                        validation = false;
                        displayAlertDialog('Please specify an "Estimated End Date" which occurs in the future before submitting your request.');
                        //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                    } else {
                        var startDate = new Date(estimatedStartDate);
                        if (dateFromSelection < startDate) {
                            validation = false;
                            displayAlertDialog('Please specify an "Estimated End Date" which occurs the same day, or after the "Estimated Start Date" before submitting your request.');
                            //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                        }
                    }
                } else {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                }
            } else {
                if (requireStartEndDates == true) {
                    validation = false;
                    displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
                    //if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please specify an "Estimated End Date" before submitting your request.');
            if (iPhone == false) document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').focus();
        }
    }
    // Attachments *******NOT NECESSARY TO VALIDATE*******

    return validation;
}

function validateSupplementalRequest() {
    // This method gets called prior to saving.
    var validation = true;
    // Validate the following fields:
    // Project Title
    if (document.getElementById('strProjectTitle').value == "") {
        validation = false;
        displayAlertDialog('Please enter a "Description" before submitting your request.');
        document.getElementById('strProjectTitle').focus();
    }

    // Category
    //if (validation)
    //    if (document.getElementById('ddlCategory').value == "") {
    //        validation = false;
    //        displayAlertDialog('Please select a "Category" before submitting your request.'); 
    //        document.getElementById('ddlCategory').focus();
    //    }

    // Brief Description of Project
    if (validation)
        if (document.getElementById('strBriefDescriptionOfProject').value == "") {
            if (requireRequestDetails == true) {
                validation = false;
                displayAlertDialog('Please enter some "Details" before submitting your request.');
                document.getElementById('strBriefDescriptionOfProject').focus();
            }
        }

    // Requested Capital
    if (validation)
        try {
            if (document.getElementById('dblRequestedCapital').value == "") {
                validation = false;
                displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
                document.getElementById('dblRequestedCapital').focus();
            } else {
                var x = document.getElementById('dblRequestedCapital').value;
                var y = parseFloat(x.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
                if (!isNumberGreaterThanZero(y)) {
                    validation = false;
                    displayAlertDialog('Please enter a value greater than zero for "Requested Amount" before submitting your request.');
                    document.getElementById('dblRequestedCapital').value = ''; // clear the textbox before the cursor gets put back into it.
                    document.getElementById('dblRequestedCapital').focus();
                }
            }
        } catch (e) {
            validation = false;
            displayAlertDialog('Please enter a value for "Requested Amount" before submitting your request.');
            document.getElementById('dblRequestedCapital').focus();
        }

    // Attachments *******NOT NECESSARY TO VALIDATE*******

    return validation;
}

function validateProjectManager() {
    // Call EnsureUser to make sure the Project Manager is a valid user.
    var result = false;
    try {
        var managername = document.getElementById('txtProjectManagerName').value;
        //displayAlertDialog('managername:' + managername);

        if (managername != '') result = true;
        //var projectManagerPeoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePicker_TopSpan;
        //var users = projectManagerPeoplePicker.GetAllUserInfo();
        //var projectManagerUser = users[0];
        //var displayName = projectManagerUser['DisplayText'];
        ////var accountId = projectManagerUser['Description']; // email address
        //var accountId = projectManagerUser['Key'];
        //var accountType = projectManagerUser['EntityType'];
        ////var key = projectManager['Key']; // eg: i#:blahblah:someone@capexworkflow.com
        ////doc += '<my:Project_Manager_Hidden>';
        ////doc += displayName;
        ////doc += '</my:Project_Manager_Hidden>';
        return result;
    } catch (ex) {
        return false;
    }
}

function createXmlDocument_InitAr(budgetRequestId) {
    var doc = '<?xml version="1.0" encoding="UTF-8"?>';
    try {
        //var doc = '<?xml version="1.0" encoding="UTF-8"?>';
        //doc += '<?mso-infoPathSolution name="urn:schemas-microsoft-com:office:infopath:Budget-Form:-myXSD-2012-09-11T20-22-29" href="manifest.xsf" solutionVersion="1.0.1.2243" productVersion="14.0.0" PIVersion="1.0.0.0" ?>';
        //doc += '<?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.3"?>';
        //doc += '<?mso-infoPath-file-attachment-present?>';
        //doc += '<my:myFields xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:myFields  xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29"  xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:BudgetRequestId>' + budgetRequestId + '</my:BudgetRequestId>';

        // Works in IE: var curRequestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
        var curRequestedCapital = document.getElementById('dblRequestedCapital').value; // Works in Safari and IE.
        var requestedCapital = parseFloat(curRequestedCapital.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        doc += '<my:Requested_Capital>' + requestedCapital + '</my:Requested_Capital>';

        // Works in IE:
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>';
        //doc += '<my:Brief_Description_of_Project>' + document.getElementById('strBriefDescriptionOfProject').innerHTML + '</my:Brief_Description_of_Project>';
        //doc += '<my:Project_Name>' + document.getElementById('strProjectTitle').innerHTML + '</my:Project_Name>';
        // Works in Safari and IE:

        var tmpFuncAreaValueArray = document.getElementById('ddlFunctionalArea').value.split('|');
        //var tmpFuncAreaValueArray = explode('|', tmpFuncAreaValue);

        doc += '<my:Functional_Area_Id>' + tmpFuncAreaValueArray[0] + '</my:Functional_Area_Id>'; // Get the ID
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>'; // Get the Title

        var curFunctionalArea = $('#ddlFunctionalArea option:selected').text();
        curFunctionalArea = curFunctionalArea.replace(/&/g, '&amp;');
        doc += '<my:Functional_Area>' + curFunctionalArea + '</my:Functional_Area>'; // Get the Title

        var quoteVal;
        if (tmpFuncAreaValueArray[1] == true) quoteVal = true;
        else quoteVal = false;
        doc += '<my:Quote>' + quoteVal + '</my:Quote>';

        var curBriefDescription = encodeURIComponent(document.getElementById('strBriefDescriptionOfProject').value);
        doc += '<my:Brief_Description_of_Project>' + curBriefDescription + '</my:Brief_Description_of_Project>';

        var curProjectName = encodeURIComponent(document.getElementById('strProjectTitle').value);
        doc += '<my:Project_Name>' + curProjectName + '</my:Project_Name>';

        // Works in IE: var curRequestedExpense = document.getElementById('dblRequestedExpense').innerHTML;
        //var curRequestedExpense = document.getElementById('dblRequestedExpense').value;
        //var requestedExpense = parseFloat(curRequestedExpense.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        //doc += '<my:Requested_Expense xsi:nil="true">' + requestedExpense + '</my:Requested_Expense>';
        doc += '<my:Requested_Expense xsi:nil="true">0</my:Requested_Expense>';

        var estimatedStartDate;
        // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        estimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
        var arr = estimatedStartDate.split("-");
        estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
        if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
        //}
        doc += '<my:Estimated_Start_Date>' + estimatedStartDate + '</my:Estimated_Start_Date>'; // format is 'MM-dd-yyyy'

        var estimatedEndDate;
        // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        estimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
        var arr = estimatedEndDate.split("-");
        estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
        if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
        //}
        doc += '<my:Estimated_End_Date>' + estimatedEndDate + '</my:Estimated_End_Date>'; // format is 'MM-dd-yyyy'

        doc += '<my:Budget_Amount2 xsi:nil="true"></my:Budget_Amount2>';
        doc += '<my:Location></my:Location>';
        doc += '<my:Cost_Center></my:Cost_Center>';
        doc += '<my:FormStatus>FALSE</my:FormStatus>';
        // Works in IE: doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').innerHTML + '</my:Budget_Category>';
        //doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').value + '</my:Budget_Category>';
        doc += '<my:Budget_Category></my:Budget_Category>';
        doc += '<my:field3 xsi:nil="true"></my:field3>';

        doc += '<my:AttachmentsFolderName>';
        doc += attachmentsFolderName;
        doc += '</my:AttachmentsFolderName>';

        doc += '<my:CapexAttachmentsGroup>';
        doc += '    <my:CapexAttachments>';
        //var att = $('#attachments').innerHTML;
        //doc += '    	<my:CapexAttachment xsi:nil="true">' + att + '</my:CapexAttachment>';
        doc += '    </my:CapexAttachments>';
        doc += '</my:CapexAttachmentsGroup>';

        // Works in IE: doc += '<my:Year>' + document.getElementById('ddlYear').innerHTML + '</my:Year>';
        doc += '<my:Year>' + document.getElementById('ddlYear').value + '</my:Year>';
        doc += '<my:field4></my:field4>';

        var displayName = document.getElementById('txtProjectManagerName').value;
        var accountId = document.getElementById('txtProjectManagerId').value;
        var accountType = document.getElementById('txtProjectManagerEmail').value;
        doc += '<my:Project_Manager_Hidden>';
        doc += '	<pc:Person>';
        doc += '		<pc:DisplayName>' + displayName + '</pc:DisplayName>';
        doc += '		<pc:AccountId>' + encodeURIComponent(accountId) + '</pc:AccountId>';
        doc += '		<pc:AccountType>' + accountType + '</pc:AccountType>';
        doc += '	</pc:Person>';
        doc += '</my:Project_Manager_Hidden>';
        doc += '</my:myFields>';
    } catch (e) {
        var xml = doc;
        doc = 'FAILED';
        WriteToErrorLog('Error in ios8.js.createXmlDocument_InitAr()', 'Error creating the AR XML: ' + e.name + ', ' + e.message);
        WriteToErrorLog('ios8.js.createXmlDocument_InitAr()', xml);
    }

    return doc;
}

function createXmlDocument_InitRecurringExpense(recurringExpenseId) {
    var doc = '<?xml version="1.0" encoding="UTF-8"?>';
    try {
        // This method is for creating the recuring expense, NOT for submitting the budget request.
        //displayAlertDialog('createXmlDocument_InitRecurringExpense(). This method is for creating the recuring expense, NOT for submitting the budget request.');

        //var doc = '<?xml version="1.0" encoding="UTF-8"?>';
        //doc += '<?mso-infoPathSolution name="urn:schemas-microsoft-com:office:infopath:Budget-Form:-myXSD-2012-09-11T20-22-29" href="manifest.xsf" solutionVersion="1.0.1.2243" productVersion="14.0.0" PIVersion="1.0.0.0" ?>';
        //doc += '<?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.3"?>';
        //doc += '<?mso-infoPath-file-attachment-present?>';
        //doc += '<my:myFields xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:myFields  xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29"  xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:RecurringExpenseId>' + recurringExpenseId + '</my:RecurringExpenseId>';

        // Works in IE: var curRequestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
        var curRequestedCapital = document.getElementById('dblRequestedCapital').value;
        //var curRequestedCapital = $('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML; //document.getElementById('dblRequestedCapital').value; // Works in Safari and IE.
        var requestedCapital = parseFloat(curRequestedCapital.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        doc += '<my:Requested_Capital>' + requestedCapital + '</my:Requested_Capital>';

        // Works in IE:
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>';
        //doc += '<my:Brief_Description_of_Project>' + document.getElementById('strBriefDescriptionOfProject').innerHTML + '</my:Brief_Description_of_Project>';
        //doc += '<my:Project_Name>' + document.getElementById('strProjectTitle').innerHTML + '</my:Project_Name>';
        // Works in Safari and IE:

        var tmpFuncAreaValueArray = document.getElementById('ddlFunctionalArea').value.split('|');
        //var tmpFuncAreaValueArray = explode('|', tmpFuncAreaValue);

        doc += '<my:Functional_Area_Id>' + tmpFuncAreaValueArray[0] + '</my:Functional_Area_Id>'; // Get the ID
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>'; // Get the Title

        var curFunctionalArea = $('#ddlFunctionalArea option:selected').text();
        curFunctionalArea = curFunctionalArea.replace(/&/g, '&amp;');
        doc += '<my:Functional_Area>' + curFunctionalArea + '</my:Functional_Area>'; // Get the Title

        var quoteVal = false; // This is a recurring expense, so obviously is not a quote.
        //if (tmpFuncAreaValueArray[1] == true) quoteVal = true;
        //else quoteVal = false;
        doc += '<my:Quote>' + quoteVal + '</my:Quote>';

        var curBriefDescription = document.getElementById('strBriefDescriptionOfProject').value;
        //var curBriefDescription = encodeURIComponent($('span[xd\\:binding = "my:Brief_Description_of_Project"]')[0].innerHTML); //document.getElementById('strBriefDescriptionOfProject').value);
        doc += '<my:Brief_Description_of_Project>' + curBriefDescription + '</my:Brief_Description_of_Project>';

        var curProjectName = document.getElementById('strProjectTitle').value;
        //var curProjectName = encodeURIComponent($('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML);
        doc += '<my:Project_Name>' + curProjectName + '</my:Project_Name>';

        // Works in IE: var curRequestedExpense = document.getElementById('dblRequestedExpense').innerHTML;
        //var curRequestedExpense = document.getElementById('dblRequestedExpense').value;
        //var requestedExpense = parseFloat(curRequestedExpense.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        //doc += '<my:Requested_Expense xsi:nil="true">' + requestedExpense + '</my:Requested_Expense>';
        doc += '<my:Requested_Expense xsi:nil="true">0</my:Requested_Expense>';

        var estimatedStartDate;
        try {
            //estimatedStartDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
            var tmpEstimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
            //displayAlertDialog('tmpEstimatedStartDate: ' + tmpEstimatedStartDate);
            if (tmpEstimatedStartDate == '') {
                // No date was selected so leave this blank.
                estimatedStartDate = '';
            } else {
                var now = new Date();
                var year = tmpEstimatedStartDate.split('/')[2];
                var month = tmpEstimatedStartDate.split('/')[0];
                var day = tmpEstimatedStartDate.split('/')[1];
                var hour = now.getHours();
                var minutes = now.getMinutes();
                var seconds = now.getSeconds();
                estimatedStartDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
            }
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
            var arr = estimatedStartDate.split("-");
            estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
        }
        doc += '<my:Estimated_Start_Date>' + estimatedStartDate + '</my:Estimated_Start_Date>'; // format is 'MM-dd-yyyy'

        var estimatedEndDate;
        try {
            //estimatedEndDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
            var tmpEstimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
            if (tmpEstimatedEndDate == '') {
                // No date was selected so leave this blank.
                estimatedEndDate = '';
            } else {
                var now = new Date();
                var year = tmpEstimatedEndDate.split('/')[2];
                var month = tmpEstimatedEndDate.split('/')[0];
                var day = tmpEstimatedEndDate.split('/')[1];
                var hour = now.getHours();
                var minutes = now.getMinutes();
                var seconds = now.getSeconds();
                estimatedEndDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
            }
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
            var arr = estimatedEndDate.split("-");
            estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
        }
        doc += '<my:Estimated_End_Date>' + estimatedEndDate + '</my:Estimated_End_Date>'; // format is 'MM-dd-yyyy'

        doc += '<my:Budget_Amount2 xsi:nil="true"></my:Budget_Amount2>';
        doc += '<my:Location></my:Location>';
        doc += '<my:Cost_Center></my:Cost_Center>';
        doc += '<my:FormStatus>FALSE</my:FormStatus>';
        // Works in IE: doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').innerHTML + '</my:Budget_Category>';
        //doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').value + '</my:Budget_Category>';
        doc += '<my:Budget_Category></my:Budget_Category>';
        doc += '<my:field3 xsi:nil="true"></my:field3>';

        doc += '<my:AttachmentsFolderName>';
        doc += attachmentsFolderName;
        doc += '</my:AttachmentsFolderName>';

        doc += '<my:CapexAttachmentsGroup>';
        doc += '    <my:CapexAttachments>';
        //var att = $('#attachments').innerHTML;
        //doc += '    	<my:CapexAttachment xsi:nil="true">' + att + '</my:CapexAttachment>';
        doc += '    </my:CapexAttachments>';
        doc += '</my:CapexAttachmentsGroup>';

        // Works in IE: doc += '<my:Year>' + document.getElementById('ddlYear').innerHTML + '</my:Year>';
        doc += '<my:Year>' + document.getElementById('ddlYear').value + '</my:Year>';
        doc += '<my:field4></my:field4>';

        var displayName = document.getElementById('txtProjectManagerName').value;
        var accountId = document.getElementById('txtProjectManagerId').value;
        var accountType = document.getElementById('txtProjectManagerEmail').value;
        doc += '<my:Project_Manager_Hidden>';
        doc += '	<pc:Person>';
        doc += '		<pc:DisplayName>' + displayName + '</pc:DisplayName>';
        doc += '		<pc:AccountId>' + encodeURIComponent(accountId) + '</pc:AccountId>';
        doc += '		<pc:AccountType>' + accountType + '</pc:AccountType>';
        doc += '	</pc:Person>';
        doc += '</my:Project_Manager_Hidden>';
        doc += '</my:myFields>';
    } catch (e) {
        var xml = doc;
        displayAlertDialog('Error creating the AR XML. ' + e.message);
        WriteToErrorLog('Error in ios8.js.createXmlDocument_InitRecurringExpense()', 'Error creating the AR XML: ' + e.name + ', ' + e.message);
        WriteToErrorLog('ios8.js.createXmlDocument_InitRecurringExpense()', xml);
    }

    return doc;
}

function createXmlDocument_InitRecurringExpenseBudgetRequest(budgetRequestId) {
    var doc = '<?xml version="1.0" encoding="UTF-8"?>';
    try {
        // This method is for submitting the budget request.
        //displayAlertDialog('createXmlDocument_InitRecurringExpenseBudgetRequest(). This method is for submitting the budget request.');

        //var doc = '<?xml version="1.0" encoding="UTF-8"?>';
        //doc += '<?mso-infoPathSolution name="urn:schemas-microsoft-com:office:infopath:Budget-Form:-myXSD-2012-09-11T20-22-29" href="manifest.xsf" solutionVersion="1.0.1.2243" productVersion="14.0.0" PIVersion="1.0.0.0" ?>';
        //doc += '<?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.3"?>';
        //doc += '<?mso-infoPath-file-attachment-present?>';
        //doc += '<my:myFields xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:myFields  xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29"  xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:BudgetRequestId>' + budgetRequestId + '</my:BudgetRequestId>';

        // Works in IE: var curRequestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
        //var curRequestedCapital = document.getElementById('dblRequestedCapital').value;
        var curRequestedCapital = $('span[xd\\:binding = "my:Requested_Capital"]')[0].innerHTML; //document.getElementById('dblRequestedCapital').value; // Works in Safari and IE.
        var requestedCapital = parseFloat(curRequestedCapital.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        doc += '<my:Requested_Capital>' + requestedCapital + '</my:Requested_Capital>';

        // Works in IE:
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>';
        //doc += '<my:Brief_Description_of_Project>' + document.getElementById('strBriefDescriptionOfProject').innerHTML + '</my:Brief_Description_of_Project>';
        //doc += '<my:Project_Name>' + document.getElementById('strProjectTitle').innerHTML + '</my:Project_Name>';
        // Works in Safari and IE:

        var tmpFuncAreaValueArray = document.getElementById('ddlFunctionalArea').value.split('|');
        //var tmpFuncAreaValueArray = explode('|', tmpFuncAreaValue);

        doc += '<my:Functional_Area_Id>' + tmpFuncAreaValueArray[0] + '</my:Functional_Area_Id>'; // Get the ID
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>'; // Get the Title

        var curFunctionalArea = $('#ddlFunctionalArea option:selected').text();
        curFunctionalArea = curFunctionalArea.replace(/&/g, '&amp;');
        doc += '<my:Functional_Area>' + curFunctionalArea + '</my:Functional_Area>'; // Get the Title

        var quoteVal = false; // This is a recurring expense, so obviously is not a quote.
        //if (tmpFuncAreaValueArray[1] == true) quoteVal = true;
        //else quoteVal = false;
        doc += '<my:Quote>' + quoteVal + '</my:Quote>';

        //var curBriefDescription = document.getElementById('strBriefDescriptionOfProject').value;
        var curBriefDescription = encodeURIComponent($('span[xd\\:binding = "my:Brief_Description_of_Project"]')[0].innerHTML); //document.getElementById('strBriefDescriptionOfProject').value);
        doc += '<my:Brief_Description_of_Project>' + curBriefDescription + '</my:Brief_Description_of_Project>';

        //var curProjectName = document.getElementById('strProjectTitle').value;
        var curProjectName = encodeURIComponent($('span[xd\\:binding = "my:Project_Name"]')[0].innerHTML);
        doc += '<my:Project_Name>' + curProjectName + '</my:Project_Name>';

        // Works in IE: var curRequestedExpense = document.getElementById('dblRequestedExpense').innerHTML;
        //var curRequestedExpense = document.getElementById('dblRequestedExpense').value;
        //var requestedExpense = parseFloat(curRequestedExpense.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        //doc += '<my:Requested_Expense xsi:nil="true">' + requestedExpense + '</my:Requested_Expense>';
        doc += '<my:Requested_Expense xsi:nil="true">0</my:Requested_Expense>';

        var estimatedStartDate;
        try {
            //estimatedStartDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
            var tmpEstimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
            //displayAlertDialog('tmpEstimatedStartDate: ' + tmpEstimatedStartDate);
            if (tmpEstimatedStartDate == '') {
                // No date was selected so leave this blank.
                estimatedStartDate = '';
            } else {
                var now = new Date();
                var year = tmpEstimatedStartDate.split('/')[2];
                var month = tmpEstimatedStartDate.split('/')[0];
                var day = tmpEstimatedStartDate.split('/')[1];
                var hour = now.getHours();
                var minutes = now.getMinutes();
                var seconds = now.getSeconds();
                estimatedStartDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
            }
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
            var arr = estimatedStartDate.split("-");
            estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedStartDate.indexOf('undefined') > -1) estimatedStartDate = '';
        }
        doc += '<my:Estimated_Start_Date>' + estimatedStartDate + '</my:Estimated_Start_Date>'; // format is 'MM-dd-yyyy'

        var estimatedEndDate;
        try {
            //estimatedEndDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
            var tmpEstimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
            if (tmpEstimatedEndDate == '') {
                // No date was selected so leave this blank.
                estimatedEndDate = '';
            } else {
                var now = new Date();
                var year = tmpEstimatedEndDate.split('/')[2];
                var month = tmpEstimatedEndDate.split('/')[0];
                var day = tmpEstimatedEndDate.split('/')[1];
                var hour = now.getHours();
                var minutes = now.getMinutes();
                var seconds = now.getSeconds();
                estimatedEndDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
            }
        } catch (e) {
            // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
            estimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
            var arr = estimatedEndDate.split("-");
            estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
            if (estimatedEndDate.indexOf('undefined') > -1) estimatedEndDate = '';
        }
        doc += '<my:Estimated_End_Date>' + estimatedEndDate + '</my:Estimated_End_Date>'; // format is 'MM-dd-yyyy'

        doc += '<my:Budget_Amount2 xsi:nil="true"></my:Budget_Amount2>';
        doc += '<my:Location></my:Location>';
        doc += '<my:Cost_Center></my:Cost_Center>';
        doc += '<my:FormStatus>FALSE</my:FormStatus>';
        // Works in IE: doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').innerHTML + '</my:Budget_Category>';
        //doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').value + '</my:Budget_Category>';
        doc += '<my:Budget_Category></my:Budget_Category>';
        doc += '<my:field3 xsi:nil="true"></my:field3>';

        doc += '<my:AttachmentsFolderName>';
        doc += attachmentsFolderName;
        doc += '</my:AttachmentsFolderName>';

        doc += '<my:CapexAttachmentsGroup>';
        doc += '    <my:CapexAttachments>';
        //var att = $('#attachments').innerHTML;
        //doc += '    	<my:CapexAttachment xsi:nil="true">' + att + '</my:CapexAttachment>';
        doc += '    </my:CapexAttachments>';
        doc += '</my:CapexAttachmentsGroup>';

        // Works in IE: doc += '<my:Year>' + document.getElementById('ddlYear').innerHTML + '</my:Year>';
        doc += '<my:Year>' + document.getElementById('ddlYear').value + '</my:Year>';
        doc += '<my:field4></my:field4>';

        var displayName = document.getElementById('txtProjectManagerName').value;
        var accountId = document.getElementById('txtProjectManagerId').value;
        var accountType = document.getElementById('txtProjectManagerEmail').value;
        doc += '<my:Project_Manager_Hidden>';
        doc += '	<pc:Person>';
        doc += '		<pc:DisplayName>' + displayName + '</pc:DisplayName>';
        doc += '		<pc:AccountId>' + encodeURIComponent(accountId) + '</pc:AccountId>';
        doc += '		<pc:AccountType>' + accountType + '</pc:AccountType>';
        doc += '	</pc:Person>';
        doc += '</my:Project_Manager_Hidden>';
        doc += '</my:myFields>';
    } catch (e) {
        var xml = doc;
        displayAlertDialog('Error creating the AR XML. ' + e.message);
        WriteToErrorLog('Error in ios8.js.createXmlDocument_InitRecurringExpenseBudgetRequest()', 'Error creating the AR XML: ' + e.name + ', ' + e.message);
        WriteToErrorLog('ios8.js.createXmlDocument_InitRecurringExpenseBudgetRequest()', xml);
    }

    return doc;
}

function createXmlDocument_InitSupplementalAr(_functionalAreaId, _pmAccountId, budgetRequestId) {
    var doc = '<?xml version="1.0" encoding="UTF-8"?>';
    try {
        //var doc = '<?xml version="1.0" encoding="UTF-8"?>';
        //doc += '<?mso-infoPathSolution name="urn:schemas-microsoft-com:office:infopath:Budget-Form:-myXSD-2012-09-11T20-22-29" href="manifest.xsf" solutionVersion="1.0.1.2243" productVersion="14.0.0" PIVersion="1.0.0.0" ?>';
        //doc += '<?mso-application progid="InfoPath.Document" versionProgid="InfoPath.Document.3"?>';
        //doc += '<?mso-infoPath-file-attachment-present?>';
        //doc += '<my:myFields xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:myFields  xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2012-09-11T20:22:29"  xmlns:xd="http://schemas.microsoft.com/office/infopath/2003">';

        doc += '<my:BudgetRequestId>' + budgetRequestId + '</my:BudgetRequestId>';

        // Works in IE: var curRequestedCapital = document.getElementById('dblRequestedCapital').innerHTML;
        var curRequestedCapital = document.getElementById('dblRequestedCapital').value; // Works in Safari and IE.
        var requestedCapital = parseFloat(curRequestedCapital.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        doc += '<my:Requested_Capital>' + requestedCapital + '</my:Requested_Capital>';

        // Works in IE:
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>';
        //doc += '<my:Brief_Description_of_Project>' + document.getElementById('strBriefDescriptionOfProject').innerHTML + '</my:Brief_Description_of_Project>';
        //doc += '<my:Project_Name>' + document.getElementById('strProjectTitle').innerHTML + '</my:Project_Name>';
        // Works in Safari and IE:

        //var tmpFuncAreaValueArray = document.getElementById('ddlFunctionalArea').value.split('|');
        //var tmpFuncAreaValueArray = explode('|', tmpFuncAreaValue);

        doc += '<my:Functional_Area_Id>' + _functionalAreaId + '</my:Functional_Area_Id>'; // Get the ID
        //doc += '<my:Functional_Area>' + document.getElementById('ddlFunctionalArea').innerHTML + '</my:Functional_Area>'; // Get the Title

        //var curFunctionalArea = $('#ddlFunctionalArea option:selected').text();
        //curFunctionalArea = curFunctionalArea.replace(/&/g, '&amp;');
        doc += '<my:Functional_Area>' + 'needtopassthefatitle' + '</my:Functional_Area>'; // Get the Title

        //var quoteVal;
        //if (tmpFuncAreaValueArray[1] == true) quoteVal = true;
        //else quoteVal = false;
        doc += '<my:Quote>' + 'needtopassquotevalue' + '</my:Quote>';

        var curBriefDescription = encodeURIComponent(document.getElementById('strBriefDescriptionOfProject').value);
        doc += '<my:Brief_Description_of_Project>' + curBriefDescription + '</my:Brief_Description_of_Project>';

        var curProjectName = encodeURIComponent(document.getElementById('strProjectTitle').value);
        doc += '<my:Project_Name>' + curProjectName + '</my:Project_Name>';

        // Works in IE: var curRequestedExpense = document.getElementById('dblRequestedExpense').innerHTML;
        //var curRequestedExpense = document.getElementById('dblRequestedExpense').value;
        //var requestedExpense = parseFloat(curRequestedExpense.replace(/[^0-9-.]/g, '')); // Removes non-numeric characters (except decimal point and minus sign)
        //doc += '<my:Requested_Expense xsi:nil="true">' + requestedExpense + '</my:Requested_Expense>';
        doc += '<my:Requested_Expense xsi:nil="true">0</my:Requested_Expense>';

        //var estimatedStartDate;
        //try {
        //    //estimatedStartDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedStartDate_dtiEstimatedStartDateDate').value;
        //    var tmpEstimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
        //    var now = new Date();
        //    var year = tmpEstimatedStartDate.split('/')[2];
        //    var month = tmpEstimatedStartDate.split('/')[0];
        //    var day = tmpEstimatedStartDate.split('/')[1];
        //    var hour = now.getHours();
        //    var minutes = now.getMinutes();
        //    var seconds = now.getSeconds();
        //    estimatedStartDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
        //} catch (e) {
        //    // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        //    estimatedStartDate = document.getElementById('dtEstimatedStartDate').value;
        //    var arr = estimatedStartDate.split("-");
        //    estimatedStartDate = arr[1] + '/' + arr[2] + '/' + arr[0];
        //}
        doc += '<my:Estimated_Start_Date>' + '' + '</my:Estimated_Start_Date>'; // format is 'MM-dd-yyyy'

        //var estimatedEndDate;
        //try {
        //    //estimatedEndDate = document.getElementById('ctl00_PlaceHolderMain_ctl00_dtiEstimatedEndDate_dtiEstimatedEndDateDate').value;
        //    var tmpEstimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
        //    var now = new Date();
        //    var year = tmpEstimatedEndDate.split('/')[2];
        //    var month = tmpEstimatedEndDate.split('/')[0];
        //    var day = tmpEstimatedEndDate.split('/')[1];
        //    var hour = now.getHours();
        //    var minutes = now.getMinutes();
        //    var seconds = now.getSeconds();
        //    estimatedEndDate = year + '-' + month + '-' + day + 'T:' + hour + ':' + minutes + ':' + seconds;
        //} catch (e) {
        //    // iPhone uses a different control. This reformats the date string to mm/dd/yyyy.
        //    estimatedEndDate = document.getElementById('dtEstimatedEndDate').value;
        //    var arr = estimatedEndDate.split("-");
        //    estimatedEndDate = arr[1] + '/' + arr[2] + '/' + arr[0];
        //}
        doc += '<my:Estimated_End_Date>' + '' + '</my:Estimated_End_Date>'; // format is 'MM-dd-yyyy'

        doc += '<my:Budget_Amount2 xsi:nil="true"></my:Budget_Amount2>';
        doc += '<my:Location></my:Location>';
        doc += '<my:Cost_Center></my:Cost_Center>';
        doc += '<my:FormStatus>FALSE</my:FormStatus>';
        // Works in IE: doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').innerHTML + '</my:Budget_Category>';
        //doc += '<my:Budget_Category>' + document.getElementById('ddlCategory').value + '</my:Budget_Category>';
        doc += '<my:Budget_Category></my:Budget_Category>';
        doc += '<my:field3 xsi:nil="true"></my:field3>';

        doc += '<my:AttachmentsFolderName>';
        doc += attachmentsFolderName;
        doc += '</my:AttachmentsFolderName>';

        doc += '<my:CapexAttachmentsGroup>';
        doc += '    <my:CapexAttachments>';
        //var att = $('#attachments').innerHTML;
        //doc += '    	<my:CapexAttachment xsi:nil="true">' + att + '</my:CapexAttachment>';
        doc += '    </my:CapexAttachments>';
        doc += '</my:CapexAttachmentsGroup>';

        // Works in IE: doc += '<my:Year>' + document.getElementById('ddlYear').innerHTML + '</my:Year>';
        //doc += '<my:Year>' + document.getElementById('ddlYear').value + '</my:Year>';
        doc += '<my:Year>' + 'needtopassyearvalue' + '</my:Year>';
        doc += '<my:field4></my:field4>';

        //var projectManagerPeoplePicker = SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePicker_TopSpan;
        //var users = projectManagerPeoplePicker.GetAllUserInfo();
        //var projectManagerUser = users[0];
        //var displayName = projectManagerUser['DisplayText'];
        ////var accountId = projectManagerUser['Description']; // email address
        //var accountId = projectManagerUser['Key'];
        //var accountType = projectManagerUser['EntityType'];
        //doc += '<my:Project_Manager_Hidden>';
        ////doc += displayName;
        //doc += '	<pc:Person>';
        //doc += '		<pc:DisplayName>' + displayName + '</pc:DisplayName>'; // eg: 'Bill Gates'
        //doc += '		<pc:AccountId>' + encodeURIComponent(accountId) + '</pc:AccountId>'; // email address eg: 'someone@capexworkflow.com'
        //doc += '		<pc:AccountType>' + accountType + '</pc:AccountType>'; // eg: 'user'
        //doc += '	</pc:Person>';
        //doc += '</my:Project_Manager_Hidden>';
        doc += '</my:myFields>';
    } catch (e) {
        var xml = doc;
        displayAlertDialog('Error creating the AR XML. ' + e.message);
        WriteToErrorLog('Error in ios8.js.createXmlDocument_InitAr()', 'Error creating the AR XML: ' + e.name + ', ' + e.message);
        WriteToErrorLog('ios8.js.createXmlDocument_InitAr()', xml);
    }

    return doc;
}