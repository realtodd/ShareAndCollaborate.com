//var express = require('express'),
//    router = express.Router();

//router
//    // Add a binding for '/tests/automated/'
//    .get('/', function () {
//        // render the /tests/automated view
//    })

//module.exports = router;



"use strict";

// This is the fileserver API.
// This is the budgetworkflow.com API.


//
//
// THIS SECTION HAS TO BE CHANGED WHEN DEPLOYING TO A DIFFERENT URL.
//
//

console.log('Loaded fileservices.js successfully.');

var httpsHostForInterServerCommunication = 'shareandcollaborate.com';
var fromEmailAddress = 'hello@budgetworkflow.com';
var rootFilePath = 'public/_files/';
var prettyGlobalUrl = 'ShareAndCollaborate.com'; // This shows up in emails etc.

var globalUrl = 'shareandcollaborate.com';

var rootFilePath_email = 'public/_files/_emailAttachments/'; // 4-23-2024.

//
//
// end: THIS SECTION HAS TO BE CHANGED WHEN DEPLOYING TO A DIFFERENT URL.
//
//




//
// We create thumbnails for videos using FFMPEG in a few places. In order to put the code in a single place, here are the thumbnail FFMPEG instructions, stored in the ffmpegThumbnailVFInstructions variable.
// If having trouble escaping characters in drawtext, 3 forward slashes seems to be the thing. See here for more information: https://stackoverflow.com/questions/45493988/how-to-escape-all-special-characters-for-ffmpeg-drawtext-filter-in-java
//

// This is the original, positioned in the middle.
//const ffmpegThumbnailVFInstructions = "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=200:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2";

// These 2 commands get combined to put filetype and duration at the bottom of the thumbnail. 4-14-2024.
const ffmpegThumbnailVFInstructions_timestamp = "drawtext=fontfile=/path/to/font.ttf:text='xcxdurationxcx':fontcolor=white:fontsize=50:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w-20):y=(h-text_h-20)"; // Using [xcxdurationxcx] string as a placeholder.
const ffmpegThumbnailVFInstructions_filetype = "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=50:box=1:boxcolor=black@0.5:boxborderw=5:x=(20):y=(h-text_h-20)";

//
// end: We create thumbnails for videos using FFMPEG in a few places. In order to put the code in a single place, here are the thumbnail FFMPEG instructions.
//






//var imapConnected = false;
//var globalUrlPrefix = 'https://';
//var globalUrl = 'budgetnet.ca';



//const {TextDecoder, TextEncoder} = require('util');

var express = require('express'),
    //http = require('http'),
    //https = require('https'),
    path = require('path'),
    //bodyParser = require('body-parser'),
    //crypto = require('crypto'),
    //fs = require('fs'),
    //methodOverride = require('method-override'),
    mongoose = require('mongoose'); //,
//Promise = require('bluebird'); // MPO BLUEBIRD ON THE SERVER SIDE. 4-10-2024.

//bwtimerservice1 = require('./bwtimerservice.js'); // REMOVED 7-4-2023. <<<<<<<<<<<<<<<<<<< IS THIS OK?


var mongoosePaginate = require('mongoose-paginate-v2');

//var xxx = require('ssl-root-cas');

//var MailListener = require("mail-listener2");
//var fs = require('fs');

var fs = require('fs-extra');

var sendgrid = {};

const multer = require('multer');

//const ffmpegPath = require('@ffmpeg-installer/ffmpeg').path;
const ffmpegPath = '/home/todd/ffmpeg-6.0-amd64-static/ffmpeg';
var ffmpeg = require('fluent-ffmpeg'); // This is used to convert our media files.
ffmpeg.setFfmpegPath(ffmpegPath);

var im = require('imagemagick'); // Imagemagick.
//const gm = require('gm').subClass({ imageMagick: '7+' });
const gm = require('gm').subClass({ imageMagick: true });


const ffprobePath = '/home/todd/ffmpeg-6.0-amd64-static/ffprobe';
var ffprobe = require('ffprobe');
//ffprobeStatic = require('ffprobe-static');


//const DownloadHelper = require('node-downloader-helper');


const ExifReader = require('exifreader');



const decompress = require('decompress');

const Archiver = require('archiver');

const Scp = require('node-scp').Client; // We use this to copy files to the organizations external location.
var SMB2 = require('smb2'); // We use this to view and maintain the external files for an organization.

var router = express.Router();


const EmailValidator = require("email-validator");



const checkDiskSpace = require('check-disk-space').default;


// This is our solution for copying multiple files locally. Specifically for the sharing of attachments xternally. 7-1-2022
const util = require('util');
const copyFilePromise = util.promisify(fs.copyFile);

function bwCopyFiles(srcDir, destDir, files) {
    return Promise.all(files.map(function (f) {
        return copyFilePromise(path.join(srcDir, f), path.join(destDir, f));
    }));
}

function bwCopyFileAndDeleteOriginal(fromPath, toPath, newFilename) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.bwCopyFileAndDeleteOriginal(). newFilename: ' + newFilename);

            var msg = 'In start.js.bwCopyFileAndDeleteOriginal().';
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.bwCopyFileAndDeleteOriginal()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            fs.copyFile(fromPath, toPath, fs.constants.COPYFILE_EXCL, function (err) { // If the file already exists, do not overwrite. DOES THIS WORK? HMMM....
                try {

                    if (err) {

                        var msg = 'Error in start.js.bwCopyFileAndDeleteOriginal(). err: ' + err;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.bwCopyFileAndDeleteOriginal()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        fs.unlink(fromPath, function (deleteErr) {
                            try {

                                if (deleteErr) {

                                    var msg = 'Error in start.js.bwCopyFileAndDeleteOriginal(). err: ' + err;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.bwCopyFileAndDeleteOriginal()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    reject(result);

                                } else {

                                    var msg = 'In start.js.bwCopyFileAndDeleteOriginal(). COPIED FILE FROM: ' + fromPath + ', TO: ' + toPath + '. newFilename: ' + newFilename;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.bwCopyFileAndDeleteOriginal()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'SUCCESS',
                                        message: msg,
                                        newFilename: newFilename
                                    }
                                    resolve(result);

                                }

                            } catch (e) {

                                var msg = 'Exception in start.js.bwCopyFileAndDeleteOriginal():3: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.bwCopyFileAndDeleteOriginal()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            }

                        });

                    }

                } catch (e) {

                    var msg = 'Exception in start.js.bwCopyFileAndDeleteOriginal():2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.bwCopyFileAndDeleteOriginal()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            });

        } catch (e) {

            var msg = 'Exception in start.js.bwCopyFileAndDeleteOriginal():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.bwCopyFileAndDeleteOriginal()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}
















//var config = { db: 'mongodb://bwmongo1:27017,bwmongo2:27017,bwnginx2:27017/shareandcollaboratecom?replicaSet=BWREPLSET1' };
var config = { db: 'mongodb://bwmongo1:27017,bwmongo2:27017,bwnginx2:27017/budgetnetca?replicaSet=BWREPLSET1' };
var dbOptions;

if (config.db.indexOf('replicaSet') > -1) {
    dbOptions = {
        //native_parser: true,
        //auto_reconnect: false,
        //poolSize: 10,
        useNewUrlParser: true,
        useUnifiedTopology: true
    };
}





//var result = bwtimerservice1.startWorkflowTimer();
function WriteToErrorLog(threatLevel, source, errorCode, message, bwWorkflowAppId, bwParticipantId, request) {
    try {
        if (!message) {

            console.log('***********************************');
            console.log('In commondata.js.WriteToErrorLog(). xcx123425 message: ' + message + '. NOT WRITING THIS ENTRY INVALID DATA.');
            console.log('***********************************');

        } else {

            console.log('***********************************');
            console.log('In commondata.js.WriteToErrorLog(). xcx123425 message: ' + message);
            console.log('***********************************');
            //

            var bwExceptionLogEntryId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });

            console.log(message);

            var ip = 'na';
            if (request) {
                ip = request.headers['x-forwarded-for'] ||
                    request.connection.remoteAddress ||
                    request.socket.remoteAddress ||
                    (request.connection.socket ? request.connection.socket.remoteAddress : null
                    );
            }


            var timestamp = new Date();

            var BwExceptionLog = mongoose.model('BwExceptionLog');

            var bwExceptionLog = new BwExceptionLog(
                {
                    bwExceptionLogId: bwExceptionLogEntryId, // Todd: Do we need a unique id? //{ type: String, index: { unique: true } }, 
                    ErrorThreatLevel: threatLevel, // severe, high, elevated, guarded, low.
                    Timestamp: timestamp, // = new Date();
                    Source: source, // This is the method that produced the exception.
                    Message: message, // Exception message.
                    ErrorCode: errorCode, // This is the error code.
                    bwWorkflowAppId: bwWorkflowAppId,
                    bwExceptionLogParticipantId: bwParticipantId,
                    //bwTenantId: String,
                    //bwWorkflowAppId: String,
                    bwExceptionLogIp: ip
                    //bwExceptionLogUserAgent: String,
                    //bwExceptionLogReferrer: String,
                    //bwExceptionLogUserLogonType: String,
                    //bwExceptionLogUserLogonTypeId: String,
                    //bwExceptionLogParticipantId: String,
                    //bwExceptionLogParticipantFriendlyName: String,
                    //bwExceptionLogParticipantEmail: String,
                });

            //bwExceptionLogId: String, // Todd: Do we need a unique id? //{ type: String, index: { unique: true } }, 
            //ErrorThreatLevel: String, // severe, high, elevated, guarded, low.
            //Timestamp: Date, // = new Date();
            //Source: String, // This is the method that produced the exception.
            //Message: String, // Exception message.
            //ErrorCode: String, // This is the error code.
            //bwTenantId: String,
            //bwWorkflowAppId: String,
            //bwExceptionLogIp: String,
            //bwExceptionLogUserAgent: String,
            //bwExceptionLogReferrer: String,
            //bwExceptionLogUserLogonType: String,
            //bwExceptionLogUserLogonTypeId: String,
            //bwExceptionLogParticipantId: String,
            //bwExceptionLogParticipantFriendlyName: String,
            //bwExceptionLogParticipantEmail: String//, // removed 2-3-2022

            bwExceptionLog.save(function (error, mod) {
                try {
                    if (!error) {
                        console.log(message);

                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('SUCCESS in WriteToErrorLog(): ' + JSON.stringify(bwExceptionLog));
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');

                    } else {
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('Error in WriteToErrorLog(): ' + error);
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    }
                } catch (e) {
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    console.log('Exception in start.js.WriteToErrorLog():2: ' + e.message + ', ' + e.stack);
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                    console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
                }
            });
        }
    } catch (e) {
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log('Exception in start.js.WriteToErrorLog(): ' + e.message + ', ' + e.stack);
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
        console.log('XXXXXXXXXXXXXXXXXXXXXXXXXXXX');
    }
}





//mongoose.connect('mongodb://bwmongo2/budgetnetca', function (err, db) {
//mongoose.connect(config.db, dbOptions, function (err, db) {
//    try {
//        // https://github.com/Automattic/mongoose/issues/4135 for more information! Google "nodejs mongoose.connect error trap".

//        if (err) {

//            var msg = 'Error in start.js.mongoose.connect(' + config.db + ') from fileservices: ' + err;
//            console.log(msg);

//            const from = "15194881754";
//            const to = "19023851968";
//            const text = msg; //'Web services started at BudgetWorkflow.com.';

//            vonage.message.sendSms(from, to, text, function (err, responseData) {
//                if (err) {
//                    console.log(err);
//                } else {
//                    if (responseData.messages[0]['status'] === "0") {
//                        console.log("Message sent successfully.");
//                    } else {
//                        console.log("SMS message failed with error: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
//                    }
//                }
//            });

//            var message = {
//                to: 'forestadministrator@budgetworkflow.com',
//                from: 'fileservices@budgetworkflow.com',
//                subject: 'Error connecting to mongodb from FILE SERVICES', // 'Web services started at BudgetWorkflow.com.',
//                html: msg //'Web services started at BudgetWorkflow.com.'
//            }

//            sendgrid.bwSend(message).then(function (results) {
//                try {
//                    if (results.status != 'SUCCESS') {

//                        var msg = 'Error in fileservices.start.js.mongoose.connect(): ' + results.status + ', ' + results.message;
//                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                        var source = 'fileservices.start.js.mongoose.connect()';
//                        var errorCode = null;
//                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                    } else {

//                        // Do nothing.

//                    }

//                } catch (e) {

//                    var msg = 'Exception in fileservices.start.js.mongoose.connect(): ' + e.message + ', ' + e.stack;
//                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                    var source = 'fileservices.start.js.mongoose.connect()';
//                    var errorCode = null;
//                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                }

//            }).catch(function (e) {

//                var msg = 'Exception in fileservices.start.js.mongoose.connect(): ' + JSON.stringify(e);
//                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                var source = 'fileservices.start.js.mongoose.connect()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                var result = {
//                    status: 'EXCEPTION',
//                    message: msg
//                }
//                response.send(result);

//            });

//        } else {


//            //mongoose.connect('mongodb://localhost/test', function(err){
//            //    var admin = new mongoose.mongo.Admin(mongoose.connection.db);
//            //    admin.buildInfo(function (err, info) {
//            //        console.log(info.version);
//            //    });
//            //});

//            var admin = new mongoose.mongo.Admin(mongoose.connection.db);
//            admin.buildInfo(function (err, info) {
//                console.log('');
//                console.log('Mongoose version: ' + info.version);
//                console.log('');
//            });



//            //console.log('===============================================================');
//            //console.log('Connected to ' + config.db + ' successfully!');
//            //console.log('===============================================================');

//            // Activity log section:
//            var msg = 'Connected to ' + config.db + ' successfully!';
//            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//            var source = 'Fileservices: start.js';
//            var errorCode = null;
//            WriteToErrorLog(threatLevel, source, errorCode, msg);
//            //




//            //var tmpMsg = 'File services started at BudgetWorkflow.com.';

//            //const from = "15194881754";
//            //const to = "19023851968";
//            //const text = tmpMsg; //'Web services started at BudgetWorkflow.com.';

//            //vonage.message.sendSms(from, to, text, function (err, responseData) {
//            //    if (err) {
//            //        console.log(err);
//            //    } else {
//            //        if (responseData.messages[0]['status'] === "0") {
//            //            console.log("Message sent successfully.");
//            //        } else {
//            //            console.log("SMS message failed with error: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
//            //        }
//            //    }
//            //});


//            //sendgridx.send({
//            //    to: 'forestadministrator@budgetworkflow.com',
//            //    from: 'fileservices@budgetworkflow.com',
//            //    subject: tmpMsg, // 'Web services started at BudgetWorkflow.com.',
//            //    html: tmpMsg //'Web services started at BudgetWorkflow.com.'
//            //}, function (sgError, sgResponse) {
//            //    if (sgError) {

//            //    } else {

//            //    }
//            //});

//        }
//    } catch (e) {
//        console.log('Exception in mongoose.connect(): ' + e.message + ', ' + e.stack);
//    }
//}); // reconnect solves so many problems if the database goes down! Todd: doesn't always work..? Not sure... this code put here 8-7-18 4pm ast


//var bwWorkflowAppSchema = new mongoose.Schema({
//    bwWorkflowAppId: {
//        type: String, index: { unique: true }
//    },
//    bwTenantId: String,
//    bwWorkflowAppTitle: String,

//    bwWorkflowAppTheme: String, // added 12-4-2021



//    bwExternallyFacingUrlForAttachments: String, // added 6-29-2022
//    bwExternallyFacingUrlForAttachmentsSourceFolder: String, // added 6-29-2022





//    bwFiscalYear: {
//        type: Number, min: 1000, max: 9999
//    }, // added 1-23-2022 // changed to number 1-24-2022

//    bwNewBudgetRequestManagerTitle: String,
//    bwRequireStartEndDates: String, // true or false.
//    bwRequireRequestDetails: String, // true or false.
//    bwEnableNewRequestAttachments: String, // true or false.
//    bwEnableNewRequestBarcodeAttachments: String, // true or false.
//    bwQuotingEnabled: String, // true or false.

//    bwExpenseRequestsEnabled: String, // true or false. // TODD: Rename this field in the future to bwReimbursementRequestsEnabled

//    bwCloseoutsEnabled: String, // true or false.
//    bwCapitalAndExpenseTrackingEnabled: String, // true or false.
//    bwRecurringExpensesEnabled: String, // true or false.
//    bwSupplementalsEnabled: String, // true or false.

//    bwEmailEnabled: String, // true or false. Added 12-21-19
//    bwIntroductoryEmailHtml: String, // This is the email that gets sent when a new user joins the Organization/workflowApp. 6-29-2020.

//    bwStrictAuditingEnabled: String, // true or false.
//    bwDeveloperModeEnabled: String, // 12-20-2021

//    bwLargeFileUploadEnabled: String, // 3-23-2022

//    // 9-19-2020 WE NEED TO ADD CREATEDBYFRIENDLYNAME, ID, EMAIL, and for modified also!!!!!!!!!! Incorporate in the code!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Immediately this will help with admin email monitoring [title attribute for org selectable emails] !!!!!!!!!!
//    //Created: String, // removed and changed type 1-24-2022
//    //Modified: String, // removed and changed type 1-24-2022


//    Created: Date,
//    CreatedById: String,
//    CreatedByFriendlyName: String,
//    CreatedByEmail: String,
//    Modified: Date,
//    ModifiedById: String,
//    ModifiedByFriendlyName: String,
//    ModifiedByEmail: String,



//    bwWorkflowAppWebUrl: String,
//    bwWorkflows: [{
//        id: String, title: String, url: String
//    }],
//    bwSelectedCurrencySymbol: String//,

//    //bwWorkflowAppPlaceholder1: String // 1-26-2022 REMOVE THIS COLUMN SOMETIME it has been replaced with the one above.   //, // bwSelectedCurrencySymbol - rename this item at some point in the future. Values include: Dollar, Pound, Euro, Rand, Franc, Yen, Rouble, Peso, Rupee, Guilder.

//});
//var BwWorkflowApp = mongoose.model('BwWorkflowApp', bwWorkflowAppSchema);



//// This is used so that the Forest Administrator can login as the owner in any Tenant.
//var bwForestAdministratorLoginToTenantSchema = new mongoose.Schema({
//    bwTenantId: String,
//    bwWorkflowAppId: String,
//    Created: Date,
//    //bwActiveStateIdentifier: String, // This is the State, which is a part of our security mechanism. bwParticipantPlaceholder1 works in conjunction to hold the ip address etc. to prevent hacks. 
//    //bwIpAddressParticipantValidationString: String // bwParticipantPlaceholder1 works in conjunction with bwActiveStateIdentifier to hold the ip address etc. to prevent hacks.  TODD: NOT IMPLEMENTED YET!!!!! var ipAddressString = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress || request.connection.socket.remoteAddress;
//    bwForestAdministratorLoginToTenant_ActiveStateIdentifier: String,
//    bwForestAdministratorLoginToTenant_ActiveStateIPAddress: String

//});
//var BwForestAdministratorLoginToTenant = mongoose.model('BwForestAdministratorLoginToTenant', bwForestAdministratorLoginToTenantSchema);



//var bwParticipantSchema = new mongoose.Schema({
//    bwParticipantId: {
//        type: String, index: {
//            unique: true
//        }
//    },
//    TrashBin: Boolean,
//    TrashBinTimestamp: Date,
//    bwTenantId: String,
//    bwWorkflowAppId: String,
//    //bwWorkflowAppTitle: String, // ADDED 9-3-2020

//    bwActiveStateIdentifier: String, // This is the State, which is a part of our security mechanism. bwParticipantPlaceholder1 works in conjunction to hold the ip address etc. to prevent hacks. 
//    activeStateIPAddress: String, // The ip address used for this session. // 12-14-2021 bwParticipantPlaceholder1 works in conjunction with bwActiveStateIdentifier to hold the ip address etc. to prevent hacks.  TODD: NOT IMPLEMENTED YET!!!!! var ipAddressString = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress || request.connection.socket.remoteAddress;

//    trustedIpAddresses: String, // Trusted devices. 12-14-2021



//    bwActiveStateIdentifierArray: [String], // This is an array of ActiveStateIdentifiers. We need this so we can do this: _bw/getparticipantdetailsusingactivestateidentifier
//    bwActiveStateIdentifierArray_Details: [String], // The details are stored here. These 2 fields should remain in sync.
//    //
//    // In development. 8-31-2024. This needs to be able to support BwWorkflowApp.bwMultiLogonEnabled.
//    //
//    // bwActiveStateIdentifierArray.bwActiveStateIdentifierItem
//    //bwActiveStateIdentifierArray_Detail: [
//    //    {
//    //        ActiveStateIdentifier: 'xx',
//    //        ActiveStateIdentifier_FromLocalStorage: 'xx',
//    //        ActiveStateIdentifier_ForestAdministratorLoginToTenant: 'xx',

//    //        TwoFactorAuthenticationWithSms: String, // [NOT_ENABLED]
//    //        bwTwoFactorAuthenticationLatestCode: String,

//    //        activeStateIPAddress: 'xx', // We may not use this.
//    //        browserNavigatorUserAgentString: 'xxWin10;Android;etc.',
//    //        createdDate: Date,
//    //        lastModifiedDate: Date,
//    //        lastAuthorizationCheckDate: Date,
//    //        trashedDate: Date,
//    //        trashedReason: String, // What could these values be? TIME_EXPIRED, ADMIN_RESET, ??
//    //        trashedReasonDetails: String,
//    //        TrashBin: Boolean // [true, false]
//    //    },
//    //]








//    bwParticipantLogonType: String, // 'custom', 'facebook', 'google', 'microsoft', 'nologon_emailrecipient' [email recipients 7-6-2022]
//    bwParticipantLogonTypeUserId: String,
//    bwParticipantFriendlyName: String,
//    bwParticipantEmail: String,
//    customLogonPasswordSalt: String, // Note: We are using cryptographic salted password hashing. 
//    customLogonPasswordHash: String,

//    bwLastSelectedWorkflowAppId: String, // This applies to the Home screen. It remembers the last Workflow you were working with.
//    //bwLastSelectedNewRequestType: String, // This applies to the New Request screen. TODD: This has been moved to the WorkflowUser table and can be removed in the future.
//    bwLastSelectedArchiveScreenRequestType: String, // This applies to the Archive screen. TODD: This has been moved to the WorkflowUser table and can be removed in the future.
//    bwLastSelectedExecutiveSummariesExpandedOrCollapsed: String, // When the user comes to the home page, did they leave it with the Executive Summaries displaying? If so, remember that here. Values: 'expanded', 'collapsed'.

//    bwUnsubscribedStatus: String,
//    bwUnsubscribeQuickLinkState: String,
//    bwUnsubscribeQuickLinkStateTimestamp: String,
//    Created: Date, // 2-6-2022
//    Modified: Date, // 2-6-2022
//    bwTipsDisplayOn: String, // 'true'/'false'.
//    bwInvitationsOnHomePageDisplayOn: String, // true or false.
//    bwDisplayTaskDetailsBeforeRequests: String, // true or false // added 1-10-2020

//    bwEmailNotificationFrequency: String, //immediately, aggregatetwicedaily
//    bwEmailNotificationTypes: String, //allnotifications, onlymytasknotifications, nonotifications
//    bwEmailAggregatorTwiceDailyFirstTime: String, // Stored as a number from 0 to 24.
//    bwEmailAggregatorTwiceDailySecondTime: String, // Stored as a number from 0 to 24.
//    bwEmailAggregatorTwiceDailyTimezoneDisplayName: String, // AST, EST, CST, MST, PST. No accomodation for daylight savings time yet, or the rest of the world! :D
//    bwEmailAggregatorLastEmailSentTimestamp: Date, // The date that the email was sent. This is how we know if it was done today or not!

//    bwHaveWeRecognizedThemAsANewUser: Boolean, // changed from String data type 10-4-2020. // true or false. // This is a flag to let us know if we realize this person has just logged in for the first time.
//    bwParticipantPlaceholder1: String, // 
//    bwParticipantPlaceholder2: String, // This stores the "passwordreset" guid that we use in the email link.
//    bwParticipantPlaceholder3: String, // This stores the "passwordreset" X-FORWARDED-FOR string that was gotten when the password reset was requested. This ensures the user uses the same computer and location when resetting their password.
//    bwParticipantPlaceholder4: String, // This stores the "passwordreset" created timestamp. This allows us to expire the passwordreset in 5 minutes.

//    // We need to add a retry attempt check here. If it is already done, then notify the user that "A password reset request is already active. You need to wait 5 minutes before you can create another. Maximum 5 attempts.
//    bwParticipantPlaceholder5: String, // This stores the "passwordreset" "Create new password reset retry attempts". Incremented by 1 evey time.

//    bwParticipantPlaceholder6: String, // true or false. This stores the  "bwNewRequestsOnHomePageDisplayOn". At some point in the future it would be nice to rename this field.
//    bwParticipantPlaceholder7: String,
//    bwParticipantPlaceholder8: String,
//    bwParticipantPlaceholder9: String,
//    bwParticipantPlaceholder10: String,

//    bwTwoFactorAuthenticationEnabled: Boolean, // added 9-2-2021
//    bwTwoFactorAuthenticationSmsNumber: String, // This is the phone number we use to send text/SMS messages to the user.
//    bwTwoFactorAuthenticationLatestCode: String,
//    bwTwoFactorAuthenticationLatestCodeIssuedTimestamp: Date

//});
//var BwParticipant = mongoose.model('BwParticipant', bwParticipantSchema);

//var bwWorkflowUserSchema = new mongoose.Schema({
//    bwWorkflowUserId: {
//        type: String, index: {
//            unique: true
//        }
//    },
//    TrashBin: Boolean,
//    TrashBinTimestamp: Date,
//    bwTenantId: String,

//    bwWorkflowAppId: String,
//    bwParticipantId: String,

//    bwWorkflowAppTitle: String,

//    bwParticipantEmail: String,
//    bwParticipantFriendlyName: String,

//    bwParticipantLogonType: String,
//    bwParticipantRole: String, // Options include 'Forest Administrator', 'owner', 'archiveviewer', 'reportviewer', 'configurationmanager', 'participant', 'customer', 'vendor', and 'emailrecipient'. 



//    ConfigurationModifiedDate_BwForm: Date, // This is here so that if a form gets updated, for example, we can check if we need to get the new form template before displaying it. 4-15-2022
//    // Storing BwForm.ModifiedDate in bwAuthentication so that we can check if it is newer.



//    LastSelected_bwRequestTypeId: String, // This is used so that when the participant goes to create a New Request, the request type last used is selected.
//    // Types include: budgetrequest, quoterequest, expenserequest, recurringexpense.
//    // Todd: As of 9-27-16 it is not yet hooked up!!! 


//    autoRefreshHomePage: Boolean,
//    autoRefreshHomePage_Interval: Number,


//    Created: Date, // 2-6-2022
//    CreatedByFriendlyName: String,
//    CreatedById: String,
//    CreatedByEmail: String,

//    Modified: Date, // 2-6-2022
//    ModifiedByFriendlyName: String,
//    ModifiedById: String,
//    ModifiedByEmail: String,

//    bwWorkflowUserPlaceholder1: String, // In the future rename to bwLastSelectedArchiveScreenRequestType: String, // This applies to the Archive screen drop down "selectArchiveScreenRequestTypeDropDown".
//    //bwWorkflowUserPlaceholder2: String // In the future rename to bwLastSelectedNewRequestType: String, // This applies to the New Request screen drop down.

//    PinnedRequests: String // An array of pinned bwBudgetRequestId's. JSON.stringify() before saving to this field. 12-11-2022

//});
//bwWorkflowUserSchema.index({ bwWorkflowAppId: 1, bwParticipantId: 1 }, { unique: true }); // This creates the unique combination of fields. The on.index below catches a failure!!
//var BwWorkflowUser = mongoose.model('BwWorkflowUser', bwWorkflowUserSchema);
//BwWorkflowUser.on('index', function (wuoiError) {
//    // This captures the failure to put the index in place!! Means we have non-unique records!
//    if (wuoiError) {

//        var msg = 'Error in BwWorkflowUser.on.index(): ' + wuoiError;
//        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//        var source = 'start.js.BwWorkflowUser.on.index()';
//        var errorCode = null;
//        WriteToErrorLog(threatLevel, source, errorCode, msg);

//        console.log(msg)

//    }
//});

//var bwBudgetRequestSchema = new mongoose.Schema({
//    bwBudgetRequestId: {
//        type: String, index: {
//            unique: true
//        }
//    },
//    TrashBin: Boolean, // KEEP IN MIND THIS FIELD. true/false.
//    bwTenantId: String,
//    bwWorkflowAppId: String,

//    bwFiscalYear: {
//        type: Number, min: 1000, max: 9999
//    }, // This limits us to a 4-digit year, to the year 9999. If the software is still around then! :)

//    bwRequestTypeId: String, // 1-1-2022 This is the guid, should really be named bwRequestTypeId.

//    bwFormId: String,
//    bwFormChangedAuditTrail: String, // This is not used yet, but is intended to be the way we can track form changes for this request. I forsee that a form change may want to be implemented for an existing request. More to follow... 5-10-2020.

//    bwWorkflowId: String,

//    IsSupplementalRequest: String, // true or false.
//    RelatedBudgetRequestId: String, // If it is a supplemental request, then the original request Id needs to be here.

//    IsRecurringExpense: String, // true/false
//    RelatedRecurringExpenseId: String, // If this came from a recurring expense, then put the recurring expense Id here.

//    Created: Date, //String, // changed 8-27-2020
//    CreatedBy: String,
//    CreatedById: String,
//    CreatedByEmail: String,
//    Modified: Date, //String, // changed 8-27-2020
//    ModifiedByFriendlyName: String,
//    ModifiedById: String,
//    ModifiedByEmail: String,
//    bwDocumentXml: String, // This is the budget request. Supplementals are entirely separate records from this one.

//    bwRequestJson: String, // added 11-14-19 // This will now include Checklists! Adding this functionality in the client app 11-22-19

//    CloseoutXml: String, // This is the closeout.
//    Title: String,
//    ProjectTitle: String,



//    // 2-17-2022 These need to be changed to the Number data type.
//    BudgetAmount: Number, //String,
//    RequestedCapital: Number, //String,
//    RequestedExpense: Number, //String,



//    OrgId: String, // Just added this! 12-19-19
//    OrgName: String, // Just added this! 12-19-19

//    FunctionalAreaId: String,
//    ARStatus: String,
//    ARStatusModifiedTimestamp: Date, // This is necessary so that we can know when an amount is approved, for example. Needed for the burn rate report.
//    BudgetWorkflowStatus: String,
//    BudgetWorkflowStatusModifiedTimestamp: Date, // This is necessary so that we can know when an amount is approved, for example. Needed for the burn rate report.
//    Quote: String,


//    //
//    // 3-18-2022
//    //
//    // BwBudgetRequest.FileConversionQueued - Boolean. This lets us do a quick find to see if this request has any to process.
//    //
//    // BwBudgetRequest.FileConversionQueue - Describes uploaded files which need to be converted. This JSON is persistent, as we want to maintain a record of the uploaded files which were converted for a request. It's not much data so who cares. :)+
//    // Gets populated when the form widget BwAttachments.js uploads a .vob file.
//    //
//    //  FileConversionQueue [{
//    //      FileNeedsToBeConverted_Filename: xx, // This is the .vob filename, for example.
//    //      FileConversionHasCompletedTimestamp: null // If it's null, it has not been converted yet.  
//    //      bwParticipantId: xx,
//    //      bwParticipantEmail: xx,
//    //      bwParticipantsFriendlyName: xx
//    //  }]
//    //
//    FileConversionQueued: Boolean,
//    FileConversionInProgress: Boolean, // 9-8-2022

//    FileConversionQueue: String,

//    CurrentOwner: String,
//    CurrentOwnerId: String,
//    CurrentOwnerEmail: String,
//    ManagerId: String,
//    ManagerFriendlyName: String,
//    ManagerEmail: String,
//    bwApprovalLevelWorkflowToken: String,
//    bwBudgetRequestPlaceholder1: String // We are using this as "ReimbursementRequest" true/false. Rename this in the future.
//    //bwBudgetRequestPlaceholder2: String,
//    //bwBudgetRequestPlaceholder3: String,
//    //bwBudgetRequestPlaceholder4: String,
//    //bwBudgetRequestPlaceholder5: String,
//    //bwBudgetRequestPlaceholder6: String,
//    //bwBudgetRequestPlaceholder7: String,
//    //bwBudgetRequestPlaceholder8: String,
//    //bwBudgetRequestPlaceholder9: String,
//    //bwBudgetRequestPlaceholder10: String
//});
//var BwBudgetRequest = mongoose.model('BwBudgetRequest', bwBudgetRequestSchema);

////var bwExceptionLogSchema = new mongoose.Schema({
////    bwExceptionLogId: String, // Todd: Do we need a unique id? //{ type: String, index: { unique: true } }, 
////    ErrorThreatLevel: String, // severe, high, elevated, guarded, low.
////    Timestamp: Date, // = new Date();
////    Source: String, // This is the method that produced the exception.
////    Message: String, // Exception message.
////    ErrorCode: String, // This is the error code.
////    bwTenantId: String,
////    bwWorkflowAppId: String,
////    bwExceptionLogIp: String,
////    bwExceptionLogUserAgent: String,
////    bwExceptionLogReferrer: String,
////    bwExceptionLogUserLogonType: String,
////    bwExceptionLogUserLogonTypeId: String,
////    bwExceptionLogParticipantId: String,
////    bwExceptionLogParticipantFriendlyName: String,
////    bwExceptionLogParticipantEmail: String,
////    bwExceptionLogPlaceholder1: String,
////    bwExceptionLogPlaceholder2: String,
////    bwExceptionLogPlaceholder3: String,
////    bwExceptionLogPlaceholder4: String,
////    bwExceptionLogPlaceholder5: String,
////    bwExceptionLogPlaceholder6: String,
////    bwExceptionLogPlaceholder7: String,
////    bwExceptionLogPlaceholder8: String,
////    bwExceptionLogPlaceholder9: String,
////    bwExceptionLogPlaceholder10: String
////})
////var BwExceptionLog = mongoose.model('BwExceptionLog', bwExceptionLogSchema);

//// THIS TABLE MUST ONLY EVER HAVE 1 RECORD
//var bwForestConfigurationSchema = new mongoose.Schema({
//    bwForestConfigurationId: Number, // There is only ever 1 record. This value should be "1" to avoid any confusion about this.
//    ForestAdministratorId: String,
//    ForestAdministratorEmail: String,
//    ForestAdministratorFriendlyName: String,
//    ForestAdministratorTextMessageNumber: String,

//    ForestAdministratorToReviewEmailsBeforeSending: Boolean,
//    NotifyForestAdministratorToReviewEmailsViaSms: Boolean,

//    //
//    // Timer services are managed from here. 2-13-2022
//    //
//    //WorkflowTimers_ElectedServerId: String, // Currently there can only be 1 server that this runs on. Not sure how to get the server name yet.
//    WorkflowTimers_ElectedThreadId: String, // Currently there can only be 1 server thread that this runs on. We will have to look at this again when we get more traffic. This is a GUID which the thread creates on it's own.
//    //WorkflowTimers_ElectedServerLatestPing: Date, // The server, if it is allowed to, will save the timestamp here when it checks in. I want it to do this fairly often so we can reflect to the user that things are Ok.
//    //
//    // Elections: So the idea is, that if the WorkflowTimers_ElectedServerLatestPing is over 5 minutes old, and WorkflowTimers_Running is true, the next server that checks in will decide that it is elected, 
//    // setting the WorkflowTimers_ElectedServerId, WorkflowTimers_ElectedThreadId, and WorkflowTimers_ElectedServerLatestPing.
//    // 
//    SMTP_SERVER_Running: Boolean, // 6-3-2023
//    NEW_TASKS_TIMER_Running: Boolean, // true or false. The user sets this from the Admin.html page.
//    OVERDUE_TASKS_TIMER_Running: Boolean,
//    COLLABORATION_TIMEOUT_TIMER_Running: Boolean,
//    FILE_CONVERSION_TIMER_Running: Boolean,
//    FILE_SERVICES_RESPONDING_TIMER_Running: Boolean,
//    LICENSING_AND_INVOICING_TIMER_Running: Boolean,
//    NEW_USER_TIMER_Running: Boolean,
//    PENDING_EMAIL_SENDING_TIMER_Running: Boolean,
//    AGGREGATED_EMAIL_TIMER_Running: Boolean,
//    ATTACHMENT_FILE_CLEANUP_TIMER_Running: Boolean,
//    RECURRING_EXPENSES_TIMER_Running: Boolean,

//    NEW_TASKS_TIMER_Interval: Number, // 9000 milliseconds, 9 seconds.
//    OVERDUE_TASKS_TIMER_Interval: Number, // 60000; // 1 minute.
//    COLLABORATION_TIMEOUT_TIMER_Interval: Number, // 60099; // 1 minute+
//    FILE_CONVERSION_TIMER_Interval: Number, // 60099; // 1 minute+
//    FILE_SERVICES_RESPONDING_TIMER_Interval: Number, // 15000; // 15000 milleseconds = 15 seconds.
//    LICENSING_AND_INVOICING_TIMER_Interval: Number, // 15000; // 15 seconds.
//    NEW_USER_TIMER_Interval: Number, // 120000; // 2 minutes.
//    PENDING_EMAIL_SENDING_TIMER_Interval: Number, // 3000
//    AGGREGATED_EMAIL_TIMER_Interval: Number, // 3600000; // 3600000 milleseconds = 60 minutes.
//    ATTACHMENT_FILE_CLEANUP_TIMER_Interval: Number, // 14400000; // 14400000 milleseconds = 240 minutes.
//    RECURRING_EXPENSES_TIMER_Interval: Number, // 1800000; // 30 minutes.

//    SMTP_SERVER_LastRunTimestamp: Date, // 6-3-2023
//    NEW_TASKS_TIMER_LastRunTimestamp: Date,
//    OVERDUE_TASKS_TIMER_LastRunTimestamp: Date,
//    COLLABORATION_TIMEOUT_TIMER_LastRunTimestamp: Date,
//    FILE_CONVERSION_TIMER_LastRunTimestamp: Date,
//    FILE_SERVICES_RESPONDING_TIMER_LastRunTimestamp: Date,
//    LICENSING_AND_INVOICING_TIMER_LastRunTimestamp: Date,
//    NEW_USER_TIMER_LastRunTimestamp: Date,
//    PENDING_EMAIL_SENDING_TIMER_LastRunTimestamp: Date,
//    AGGREGATED_EMAIL_TIMER_LastRunTimestamp: Date,
//    ATTACHMENT_FILE_CLEANUP_TIMER_LastRunTimestamp: Date,
//    RECURRING_EXPENSES_TIMER_LastRunTimestamp: Date
//});
//var BwForestConfiguration = mongoose.model('BwForestConfiguration', bwForestConfigurationSchema);



//// COmmented out 6-28-2024.
////var bwSentEmailSchema = new mongoose.Schema({
////    bwSentEmailId: {
////        type: String, index: { unique: true }
////    },
////    bwTenantId: String,
////    bwWorkflowAppId: String,
////    Timestamp: { // 2-28-2022
////        type: Date, index: true
////    },

////    FromEmailAddress: String,

////    ToParticipantId: String,
////    ToParticipantFriendlyName: String,
////    ToParticipantEmail: String,

////    CcAddress: String,
////    BccAddress: String,
////    Subject: String,
////    Body: String,
////    Result: String,
////    RelatedRequestId: String // This is the budget request id.
////});
//////bwSentEmailSchema.plugin(mongoosePaginate); // Paging added 10-13-2020.
////var BwSentEmail = mongoose.model('BwSentEmail', bwSentEmailSchema);

////
////
//// THIS IS THE NEW SENT EMAILS TABLE. 6-28-2024.
////
////

//var bwSentEmailSchema = new mongoose.Schema({
//    bwEmailId: String,
//    bwParticipantId: String, // We need to make sure this is populated when email comes in. How do we do this...????????? 12-13-2023.
//    haraka_body: {},
//    raw_html: String,
//    raw_text: String,
//    raw: {},
//    from: [],
//    to: [],
//    cc: [],
//    bcc: [],
//    subject: String,
//    date: Date,
//    received_date: Date,
//    message_id: String,
//    attachments: [],
//    headers: {},
//    html: String,
//    text: String,
//    timestamp: Date,
//    status: String,
//    source: String,


//    in_reply_to: String,
//    //reply_to: String,
//    //references: String,


//    pickup_date: Date,
//    mail_from: {},
//    rcpt_to: [],
//    size: Number,
//    transferred: Boolean,
//    processed: Boolean,
//    extracted_html_from: String,
//    extracted_text_from: String,
//    TheUserHasReadThisEmail: Boolean, // If the user has viewed this email, true, else null or false.
//    ThisEmailIsFromAnInternalSource: Boolean, // If this email came from an internal source, true, else null or false means it came from an external source.
//    TrashBin: Boolean
//});
//bwSentEmailSchema.plugin(mongoosePaginate);
//var BwSentEmail = mongoose.model('BwSentEmail', bwSentEmailSchema);

////// Need to run this 1 time in order to make a change to the index. In this case, changed from a single field indes, to a multiple field index. 12-21-2022
////BwSentEmail.collection.dropIndexes(function (err, results) {
////    // Handle errors

////    var msg = 'In start.js.BwSentEmail.dropIndexes(): err: ' + err + ', results: ' + JSON.stringify(results);
////    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
////    var source = 'start.js.BwSentEmail.on.index()';
////    var errorCode = null;
////    WriteToErrorLog(threatLevel, source, errorCode, msg);

////});


//var bwDraftEmailSchema = new mongoose.Schema({
//    bwEmailId: String,
//    bwParticipantId: String, // We need to make sure this is populated when email comes in. How do we do this...????????? 12-13-2023.
//    haraka_body: {},
//    raw_html: String,
//    raw_text: String,
//    raw: {},
//    from: [],
//    to: [],
//    cc: [],
//    bcc: [],
//    subject: String,
//    date: Date,
//    received_date: Date,
//    message_id: String,
//    attachments: [],
//    headers: {},
//    html: String,
//    text: String,
//    timestamp: Date,
//    status: String,
//    source: String,


//    in_reply_to: String,
//    //reply_to: String,
//    //references: String,


//    pickup_date: Date,
//    mail_from: {},
//    rcpt_to: [],
//    size: Number,
//    transferred: Boolean,
//    processed: Boolean,
//    extracted_html_from: String,
//    extracted_text_from: String,
//    TheUserHasReadThisEmail: Boolean, // If the user has viewed this email, true, else null or false.
//    ThisEmailIsFromAnInternalSource: Boolean, // If this email came from an internal source, true, else null or false means it came from an external source.
//    TrashBin: Boolean
//    //bwDraftEmailId: {
//    //    type: String, index: { unique: true }
//    //},

//    //bwWorkflowAppId: String,

//    //FromEmailAddress: String,
//    //Recipients: String, // This is the "To" field now. 4-22-2024.

//    //ToParticipantId: String,
//    //ToParticipantFriendlyName: String,
//    //ToParticipantEmail: String,

//    //CcAddress: String,
//    //BccAddress: String,
//    //Subject: String,
//    //Body: String,
//    //Result: String,
//    //RelatedRequestId: String, // This doesn't always apply.

//    //Created: {
//    //    type: Date, index: true
//    //},
//    //CreatedById: String,
//    //CreatedByFriendlyName: String,
//    //CreatedByEmail: String,

//    //Modified: {
//    //    type: Date, index: true
//    //},
//    //ModifiedById: String,
//    //ModifiedByFriendlyName: String,
//    //ModifiedByEmail: String,

//    //TrashBin: Boolean,

//    //// ThisEmailIsFromAnInternalSource: Boolean
//    //ThisEmailIsToAnInternalSource: Boolean // This is for Draft emails. Is this useful? Called [ThisEmailIsFromAnInternalSource] in [email_incoming_haraka] table, but [ThisEmailIsToAnInternalSource] in this [BwDraftEmail] table.

//});
//bwDraftEmailSchema.plugin(mongoosePaginate);
//var BwDraftEmail = mongoose.model('BwDraftEmail', bwDraftEmailSchema);





//var email_incoming_haraka_Schema = new mongoose.Schema({
//    bwEmailId: String,
//    bwParticipantId: String, // We need to make sure this is populated when email comes in. How do we do this... a new UI????????? 12-13-2023.
//    haraka_body: {},
//    raw_html: String,
//    raw_text: String,
//    raw: {},
//    from: [],
//    to: [],
//    cc: [],
//    bcc: [],
//    subject: String,
//    date: Date,
//    received_date: Date,
//    message_id: String,
//    attachments: [],
//    headers: {},
//    html: String,
//    text: String,
//    timestamp: Date,
//    status: String,
//    source: String,
//    //in_reply_to: String,
//    //reply_to: String,
//    //references: String,
//    pickup_date: Date,
//    mail_from: {},
//    rcpt_to: [],
//    size: Number,
//    transferred: Boolean,
//    processed: Boolean,
//    extracted_html_from: String,
//    extracted_text_from: String,
//    TheUserHasReadThisEmail: Boolean, // If the user has viewed this email, true, else null or false.
//    ThisEmailIsFromAnInternalSource: Boolean, // If this email came from an internal source, true, else null or false means it came from an external source.
//    TrashBin: Boolean
//}, { collection: 'email_incoming_haraka' });

////var email_incoming_haraka_Schema = new mongoose.Schema({
////    haraka_body: {},
////    raw_html: String,
////    raw_text: String,
////    raw: {},
////    from: [],
////    to: [],
////    cc: [],
////    bcc: [],
////    subject: String,
////    date: Date,
////    received_date: Date,
////    message_id: String,
////    attachments: [],
////    headers: {},
////    html: String,
////    text: String,
////    timestamp: Date,
////    status: String,
////    source: String,
////    //in_reply_to: String,
////    //reply_to: String,
////    //references: String,
////    pickup_date: Date,
////    mail_from: {},
////    rcpt_to: [],
////    size: Number,
////    transferred: Boolean,
////    processed: Boolean,
////    extracted_html_from: String,
////    extracted_text_from: String
////});
//var email_incoming_haraka = mongoose.model('email_incoming_haraka', email_incoming_haraka_Schema);



//
// Changelog:
//   - Copied from fileservices 7-25-2024 8-07pm adt. New and Improved!
//   - Copied to fileservices 7-26-2024 8-05am adt. Making changes to how attachments are copied on fileservices.
//   - Copied back to webservices 7-26-2024 12-11pm adt. BOTH ARE NOW THE SAME.
//
//
// CURRENTLY THIS METHOD IS DESIGNED TO ACCEPT ONLY 1 EMAIL ADDRESS AT A TIME.
//   This means you have to handle multiple emails, splitting them up etc. before calling this method. 7-3-2024.
//
//

sendgrid.bwSend = function (params) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.sendgrid.bwSend().');

            if (!(params && params.bwWorkflowAppId_LoggedIn && params.bwParticipantId_LoggedIn && params.to && params.subject && params.html)) {

                var msg = 'Error in start.js.sendgrid.bwSend(). UNEXPECTED VALUE(S). params.bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', params.bwParticipantId_LoggedIn: ' + params.bwParticipantId_LoggedIn + ', params.to: ' + params.to + ', params.subject: ' + params.subject + ', params.html: ' + params.html;
                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                var source = 'start.js.sendgrid.bwSend()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                var result = {
                    status: 'ERROR',
                    message: msg
                }
                reject(result);

            } else {

                params.to = params.to.toLowerCase().trim(); // It is nice if all the email addresses are in lower case.

                if (!(params.to && EmailValidator.validate(params.to))) {

                    var msg = 'Invalid email address "' + JSON.stringify(params.to) + '".';
                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.sendgrid.bwSend()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                    var result = {
                        status: 'INVALID_EMAIL_ADDRESS',
                        message: msg
                    }
                    resolve(result);

                } else {

                    BwForestConfiguration.find({ bwForestConfigurationId: 1 }, function (fcError, fcResult) {
                        try {
                            if (fcError) {

                                var msg = 'Error in start.js.sendgrid.bwSend() xcx12344234. fcError: ' + fcError;
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.GET./oodata/ProjectTypes/:bwWorkflowAppId:1';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                reject(result);

                            } else {

                                var ForestAdministratorToReviewEmailsBeforeSending = true;
                                if (fcResult && fcResult[0] && fcResult[0].ForestAdministratorToReviewEmailsBeforeSending == false) {
                                    ForestAdministratorToReviewEmailsBeforeSending = false;
                                }

                                //
                                // Check if the admin has email turned on!
                                //

                                if (!params.bwWorkflowAppId_LoggedIn) {

                                    //
                                    //
                                    // NO params.bwWorkflowAppId_LoggedIn
                                    //
                                    //

                                    var msg = 'In start.js.sendgrid.bwSend(). No value for params.bwWorkflowAppId_LoggedIn. params.to: ' + params.to + ', params.forceSendThisIsANewUserSignup: ' + params.forceSendThisIsANewUserSignup + ', ForestAdministratorToReviewEmailsBeforeSending: ' + ForestAdministratorToReviewEmailsBeforeSending;
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.sendgrid.bwSend()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                    if ((params.forceSendThisIsANewUserSignup != true) && (ForestAdministratorToReviewEmailsBeforeSending == true)) {

                                        if (fcResult && fcResult[0] && (fcResult[0].NotifyForestAdministratorToReviewEmailsViaSms == true)) {

                                            var msg = 'In sendgrid.bwSend(). xcx12314-3. Sending SMS message. params: ' + JSON.stringify(params.to);
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.sendgrid.bwSend()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                            const from = "15194881754";
                                            const to = "19023851968";
                                            const text = 'New pending email for you to review. To: ' + params.to + ', Subject: ' + params.subject;

                                            vonage.message.sendSms(from, to, text, function (err, responseData) {
                                                try {
                                                    if (err) {
                                                        console.log(err);
                                                    } else {
                                                        if (responseData.messages[0]['status'] === "0") {
                                                            console.log("Message sent successfully.");
                                                        } else {
                                                            console.log("SMS message failed with error xcx23123-1: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
                                                        }
                                                    }
                                                } catch (e) {

                                                    var msg = 'Exception in start.js.sendgrid.bwSend():15. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                }
                                            });

                                            var msg = 'In sendgrid.bwSend(). SENDING EMAIL CALLING sendgrid send(). xcx2131234-1. params: ' + JSON.stringify(params.to);
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.sendgrid.bwSend()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                            sendgrid.send({
                                                to: 'forestadministrator@budgetworkflow.com',
                                                from: 'webservices@budgetworkflow.com',
                                                subject: 'New pending email for you to review. To: ' + params.to + ', Subject: ' + params.subject,
                                                html: 'New pending email for you to review. To: ' + params.to + ', Subject: ' + params.subject
                                            }, function (sgError, sgResponse) {
                                                try {
                                                    if (sgError) {

                                                        var msg = 'FATAL ERROR in sendgrid.bwSend(). xcx33442-2-22443 sgError: ' + sgError + ', sgResponse: ' + sgResponse;
                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.sendgrid.bwSend()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    } else {

                                                        var msg = 'In sendgrid.bwSend(). Called send(). xcx4432-2. sgResponse: ' + JSON.stringify(sgResponse) + '. sgError: ' + JSON.stringify(sgError);
                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.sendgrid.bwSend()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    }
                                                } catch (e) {

                                                    var msg = 'Exception in start.js.sendgrid.bwSend():14. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                }
                                            });

                                        }



                                        //
                                        // Email sending is turned off. Save to the pending email table.
                                        var bwPendingEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                            return v.toString(16);
                                        });
                                        var timestamp = new Date();
                                        var bwPendingEmail = new BwPendingEmail(
                                            {
                                                bwPendingEmailId: bwPendingEmailId,
                                                Timestamp: timestamp,
                                                bwTenantId: params.bwTenantId,
                                                bwWorkflowAppId: params.bwWorkflowAppId_LoggedIn,
                                                RelatedRequestId: params.RelatedRequestId,
                                                FromEmailAddress: fromEmailAddress,
                                                ToParticipantId: params.ToParticipantId,
                                                ToParticipantFriendlyName: params.ToParticipantFriendlyName,
                                                ToParticipantEmail: params.to,
                                                CcAddress: null,
                                                BccAddress: null,
                                                Subject: params.subject,
                                                Body: params.html,
                                                Result: null
                                            });
                                        bwPendingEmail.save(function (error) {
                                            try {
                                                if (!error) {

                                                    var msg = 'Now bwWorkflowAppId associated with: sendgrid.bwSend(). Saved new pending email entry for params.RelatedRequestId: ' + params.RelatedRequestId + ' in sendEmailNotificationFromWorkflowTemplate().';
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'bwworkflowdataservice.js.sendgrid.bwSend():xcx776-1.';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var results = {
                                                        status: 'SUCCESS',
                                                        message: 'SUCCESS'
                                                    }
                                                    resolve(results);

                                                } else {

                                                    var msg = 'Error in start.js.sendgrid.bwSend() saving new pending email entry for params.RelatedRequestId: ' + params.RelatedRequestId + ' in sendEmailNotificationFromWorkflowTemplate(): ' + error;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'xxfix bwworkflowdataservice.js.sendgrid.bwSend()()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                }
                                            } catch (e) {

                                                var msg = 'Exception in start.js.sendgrid.bwSend():13. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.sendgrid.bwSend()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                reject(result);

                                            }
                                        });

                                    } else {
                                        //
                                        // JUST SEND IT ANYWAY! Admins only see their bwWorkflowAppId. The Forest Admin (me) sees everything.
                                        //
                                        //console.log('In start.js.sendgrid.bwSend(). !params.bwWorkflowAppId.');

                                        var msg = 'in start.js.sendgrid.bwSend(). SENDING EMAIL CALLING sendgrid send(). xcx2131234-2. xcx12314-5. Sending email. params: ' + JSON.stringify(params.to);
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.sendgrid.bwSend()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                        sendgrid.send({
                                            to: params.to,
                                            from: params.from,
                                            subject: params.subject,
                                            html: params.html
                                        }, function (sgError, sgResponse) {
                                            try {
                                                if (sgError) {

                                                    var msg = 'In start.js.sendgrid.bwSend(). !params.bwWorkflowAppId_LoggedIn. sgError: ' + sgError + ', params.to: ' + params.to + ', params.html: ' + params.html;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: 'ERROR1-1: ' + sgError
                                                    }
                                                    resolve(result);

                                                } else {

                                                    //if (params.to && params.to.toLowerCase().indexOf('budgetworkflow') > -1) {
                                                    //    // Do nothing, send no confirmation email. 12-22-2021

                                                    //    var msg = 'Successfully sent email. xcx2349965. !params.bwWorkflowAppId_LoggedIn. params.to: ' + params.to;
                                                    //    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    //    var source = 'start.js.sendgrid.bwSend()';
                                                    //    var errorCode = null;
                                                    //    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    //    var result = {
                                                    //        status: 'SUCCESS',
                                                    //        message: 'SUCCESS'
                                                    //    }
                                                    //    resolve(result);

                                                    //} else {

                                                    var msg = 'In sendgrid.bwSend(). xcx12314-6. Sending SMS. params: ' + JSON.stringify(params.to) + '. xcx4432-5. sgResponse: ' + JSON.stringify(sgResponse);
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    const from = "15194881754";
                                                    const to = "19023851968";
                                                    const text = 'xcx18678BudgetWorkflow.com sent email to ' + params.to;

                                                    vonage.message.sendSms(from, to, text, function (err, responseData) {
                                                        try {
                                                            if (err) {
                                                                console.log(err);
                                                            } else {
                                                                if (responseData.messages[0]['status'] === "0") {
                                                                    console.log("Message sent successfully.");
                                                                } else {
                                                                    console.log("SMS message failed with error xcx23123-2: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
                                                                }
                                                            }
                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.sendgrid.bwSend():12. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.sendgrid.bwSend()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                        }
                                                    });

                                                    var msg = 'In start.js.sendgrid.bwSend(). SENDING EMAIL CALLING sendgrid send(). xcx2131234-3. params: ' + JSON.stringify(params.to);
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    sendgrid.send({
                                                        to: 'forestadministrator@budgetworkflow.com',
                                                        from: 'webservices@budgetworkflow.com',
                                                        subject: 'Sent email from ' + prettyGlobalUrl + ' xcx213235, to ' + params.to,
                                                        html: 'Sent email from ' + prettyGlobalUrl + ' xcx213235, to ' + params.to
                                                    }, function (sgError, sgResponse) {
                                                        try {
                                                            if (sgError) {

                                                            } else {

                                                                var msg = 'Successfully sent email in start.js.sendgrid.bwSend(). xcx2349965-2. !params.bwWorkflowAppId_LoggedIn. params.to: ' + params.to + '. xcx4432-4. sgResponse: ' + JSON.stringify(sgResponse);
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                //var result = {
                                                                //    message: 'SUCCESS'
                                                                //}
                                                                //resolve(result);

                                                            }
                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.sendgrid.bwSend():11. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.sendgrid.bwSend()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                            //var result = {
                                                            //    message: msg
                                                            //}
                                                            //reject(result);

                                                        }
                                                    });



                                                    // Save to the BwSentEmail table.
                                                    var bwSentEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                        return v.toString(16);
                                                    });
                                                    var timestamp = new Date();
                                                    var emailTo = params.to;
                                                    var bwSentEmail = new BwSentEmail( // NEW TABLE FORMAT 6-29-2024. xcx2313-1.
                                                        {
                                                            bwEmailId: bwSentEmailId,
                                                            timestamp: timestamp,
                                                            from: params.from,
                                                            to: params.to,
                                                            cc: [],
                                                            bcc: [],
                                                            subject: params.subject,
                                                            html: params.html

                                                            //bwSentEmailId: bwSentEmailId,
                                                            //Timestamp: timestamp,
                                                            //bwTenantId: null,
                                                            //bwWorkflowAppId: null,
                                                            //RelatedRequestId: null,
                                                            //FromEmailAddress: params.from,
                                                            ////ToParticipantId: null, // 3-1-2022 this is bad???
                                                            ////ToParticipantFriendlyName: null, // 3-1-2022 this is bad???
                                                            //ToParticipantId: params.ToParticipantId, // added 3-1-2022
                                                            //ToParticipantFriendlyName: params.ToParticipantFriendlyName, // added 3-1-2022
                                                            //ToParticipantEmail: params.to,
                                                            //CcAddress: null,
                                                            //BccAddress: null,
                                                            //Subject: params.subject,
                                                            //Body: params.html,
                                                            //Result: sgResponse.message
                                                        }
                                                    );
                                                    bwSentEmail.save(function (seError) {
                                                        try {
                                                            if (!seError) {

                                                                // Saved!
                                                                var msg = 'Success in start.js.sendgrid.bwSend(). No bwWorkflowAppId associated with delivered email xcx234536-2 (& saved to bwSentEmail) to ' + params.to + ':"' + params.subject + '"';
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: 'SUCCESS'
                                                                }
                                                                resolve(result);

                                                            } else {

                                                                var msg = 'Error in start.js.sendgrid.bwSend(). saving to sent emails table, but delivered email to ' + params.to + '. error: ' + JSON.stringify(seError);
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: 'ERROR2: ' + msg
                                                                }
                                                                reject(result);

                                                            }
                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.sendgrid.bwSend():10. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.sendgrid.bwSend()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            reject(result);

                                                        }
                                                    });


                                                    //}

                                                }
                                            } catch (e) {

                                                var msg = 'Exception in start.js.sendgrid.bwSend():9. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.sendgrid.bwSend()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                reject(result);

                                            }
                                        });
                                    }

                                } else {

                                    //
                                    //
                                    // HAS params.bwWorkflowAppId_LoggedIn.
                                    //
                                    //

                                    // const text = 'BudgetWorkflow.com email queued. To: ' + params.to + ', Subject: "' + params.subject + '", bwWorkflowAppID: ' + params.bwWorkflowAppId + '.';
                                    //var msg = 'In sendgrid.bwSend(). params.bwWorkflowAppId: ' + params.bwWorkflowAppId + ', params.to: ' + params.to + ', params.subject: ' + params.subject;
                                    //var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    //var source = 'start.js.sendgrid.bwSend()';
                                    //var errorCode = null;
                                    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                    var RelatedRequestId = null;
                                    if (params.RelatedRequestId) RelatedRequestId = params.RelatedRequestId;

                                    BwWorkflowApp.findOne({ bwWorkflowAppId: params.bwWorkflowAppId_LoggedIn }, function (wafError, wafResult) {
                                        try {
                                            if (wafError) {

                                                var msg = 'Error in start.js.sendgrid.bwSend(). wafError: ' + wafError;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.sendgrid.bwSend()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                reject(result);

                                            } else {

                                                var bwEmailEnabled;
                                                if (wafResult) {
                                                    bwEmailEnabled = wafResult.bwEmailEnabled;
                                                }

                                                if ((params.forceSendThisIsANewUserSignup == true) || ((bwEmailEnabled == 'true') && (ForestAdministratorToReviewEmailsBeforeSending == false))) {

                                                    var msg = 'In start.js.sendgrid.bwSend(). Found BwWorkflowApp, calling BwParticipant.findOne() to see if this is an INTERNAL or EXTERNAL destination address. bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + params.bwParticipantId_LoggedIn + ', to: ' + params.to + ', from: ' + params.from + ', subject: ' + + params.subject + '.';
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    BwParticipant.findOne({ $or: [{ bwParticipantId: params.ToParticipantId }, { bwParticipantEmail: params.to }] }, function (pcError, pcResult) {
                                                        try {
                                                            if (pcError) {

                                                                var msg = 'Error in start.js.sendgrid.bwSend(). pcError: ' + pcError;
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                reject(result);

                                                            } else {

                                                                if (!pcResult) {

                                                                    //
                                                                    //
                                                                    // When we get here, it means we are sending an email to an EXTERNAL address which is not registered with budgetworkflow.com. 1-13-2024.
                                                                    //
                                                                    //

                                                                    var msg = 'In start.js.sendgrid.bwSend(). Could not find the participant in the BwParticipant table. This is an email destined for an EXTERNAL destination. bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + params.bwParticipantId_LoggedIn + ', to: ' + params.to + ', from: ' + params.from + ', subject: ' + + params.subject + '.';
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                    var message = {
                                                                        personalizations: [],
                                                                        from: {
                                                                            email: params.from, // 'hello@shareandcollaborate.com'//,
                                                                            //name: 'Example Order Confirmation'
                                                                        },
                                                                        replyTo: {
                                                                            email: 'hello@shareandcollaborate.com'//,
                                                                            //name: 'Example Customer Service Team'
                                                                        },
                                                                        subject: params.subject,
                                                                        content: [
                                                                            {
                                                                                type: 'text/html',
                                                                                value: params.html
                                                                            }
                                                                        ],
                                                                        attachments: params.attachments

                                                                        // https://sendgrid.com/en-us/blog/embedding-images-emails-facts <<< A GREAT EXPLANATION OF INLINE AND ATTACHMENTS.

                                                                    };

                                                                    //
                                                                    // This way we make sure noone gets exposed to anyone elses email address. 6-30-2023.
                                                                    //
                                                                    var tmpList = params.to.split(',');
                                                                    if (tmpList.length) {
                                                                        for (var i = 0; i < tmpList.length; i++) {

                                                                            var person = {
                                                                                to: {
                                                                                    email: tmpList[i]
                                                                                }
                                                                            };

                                                                            message.personalizations.push(person);

                                                                        }

                                                                    } else {

                                                                        var person = {
                                                                            to: {
                                                                                email: params.to
                                                                            }
                                                                        };

                                                                        message.personalizations.push(person);

                                                                    }

                                                                    var msg = 'In sendgrid.bwSend(). SENDING EMAIL CALLING sendgrid send(). xcx2131234-4. params: ' + JSON.stringify(params.to);
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                    sendgrid.send(
                                                                        //sendgrid.sendMultiple({ // This makes sure that everyone doesn't see each others email addresses.
                                                                        //    to: params.to,
                                                                        //    from: params.from,
                                                                        //    subject: params.subject,
                                                                        //    html: params.html
                                                                        message, function (sgError, sgResponse) {
                                                                            try {
                                                                                if (sgError) {

                                                                                    var msg = 'Error in sendgrid.bwSend(). xcx33442-2-22: FAILED TO SEND EMAIL USING SENDGRID. to: ' + params.to + ', subject: ' + params.subject + ', sgError: ' + sgError + ', sgResponse: ' + sgResponse;
                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: 'ERROR4 xcx2131: ' + sgError + ', ' + msg
                                                                                    }
                                                                                    reject(result);

                                                                                } else {

                                                                                    //var msg = 'In sendgrid.bwSend(). Called send(). bwEmailNotificationFrequency == immediately. xcx5543. Sent email. message: ' + JSON.stringify(message) + ', params: ' + JSON.stringify(params.to) + '. sgError: ' + JSON.stringify(sgError) + ', sgResponse: ' + JSON.stringify(sgResponse); // bwWorkflowAppId":"c48535a4-9a6b-4b95-9d67-c6569e9695d8","ToParticipantId"
                                                                                    var msg = 'In sendgrid.bwSend(). Called send(). bwEmailNotificationFrequency == immediately. xcx5543-43. Sent email to: ' + JSON.stringify(params.to) + '. xcx4432-1. sgResponse: ' + JSON.stringify(sgResponse) + '. sgError: ' + JSON.stringify(sgError);
                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                    var msg = 'Email sent ?successfully. xcx345467-1.'; //: ' + JSON.stringify(sgResponse);
                                                                                    console.log(msg);
                                                                                    //var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                    //var source = 'start.js.sendgrid.bwSend()';
                                                                                    //var errorCode = null;
                                                                                    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    ////var tmpEmail = '@' + globalUrl; // eg: if ((params.to.indexOf('@budgetworkflow.com') > -1)) {
                                                                                    //var tmpEmail1 = '@shareandcollaborate.com';
                                                                                    //var tmpEmail2 = '@budgetworkflow.com';
                                                                                    //var tmpEmail3 = '@budgetrequests.com';

                                                                                    //if ((params.to.indexOf(tmpEmail1) > -1) || (params.to.indexOf(tmpEmail2) > -1) || (params.to.indexOf(tmpEmail3) > -1)) {
                                                                                    //    //    // Do nothing, we don't need to know if these emails get sent. 2-16-2022 Trimming down the quantity of emails that are being sent.

                                                                                    //    var msg = 'xcx4457 This was a budgetworkflow.com email, so not sending. params.to: ' + params.to;
                                                                                    //    console.log(msg);
                                                                                    //    //    //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                    //    //    //var source = 'start.js.sendgrid.bwSend()';
                                                                                    //    //    //var errorCode = null;
                                                                                    //    //    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    //} else {

                                                                                    //    var msg = 'In sendgrid.bwSend(). SENDING EMAIL CALLING sendgrid send(). xcx2131234-5. params: ' + JSON.stringify(params.to);
                                                                                    //    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                    //    var source = 'start.js.sendgrid.bwSend()';
                                                                                    //    var errorCode = null;
                                                                                    //    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    //    sendgrid.send({
                                                                                    //        to: 'forestadministrator@budgetworkflow.com',
                                                                                    //        from: 'webservices@budgetworkflow.com',
                                                                                    //        subject: 'xcx2BudgetWorkflow.com sent email to ' + params.to,
                                                                                    //        html: 'xcx2BudgetWorkflow.com sent email to ' + params.to + '. Email: ' + params.html
                                                                                    //    }, function (sgError, sgResponse) {
                                                                                    //        try {
                                                                                    //            if (sgError) {

                                                                                    //                var msg = 'xcx4458 Error sending email to ' + 'forestadministrator@budgetworkflow.com' + ': ' + JSON.stringify(sgError);
                                                                                    //                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    //                var source = 'start.js.sendgrid.bwSend()';
                                                                                    //                var errorCode = null;
                                                                                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    //                //var result = {
                                                                                    //                //    message: msg
                                                                                    //                //}
                                                                                    //                //reject(result);

                                                                                    //            } else {

                                                                                    //                // Do nothing.
                                                                                    //                var msg = 'xcx4458 Email sent successfully to ' + 'forestadministrator@budgetworkflow.com' + ': ' + JSON.stringify(sgError) + '. xcx4432-6. sgResponse: ' + JSON.stringify(sgResponse);
                                                                                    //                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    //                var source = 'start.js.sendgrid.bwSend()';
                                                                                    //                var errorCode = null;
                                                                                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    //            }
                                                                                    //        } catch (e) {

                                                                                    //            var msg = 'Exception in start.js.sendgrid.bwSend():7. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                                    //            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    //            var source = 'start.js.sendgrid.bwSend()';
                                                                                    //            var errorCode = null;
                                                                                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    //            //var result = {
                                                                                    //            //    message: msg
                                                                                    //            //}
                                                                                    //            //reject(result);

                                                                                    //        }
                                                                                    //    });
                                                                                    //}
                                                                                    //}

                                                                                    //var msg = 'Preparing to save sent email to BwSentEmail table. xcx448'; //: ' + JSON.stringify(sgResponse);
                                                                                    //console.log(msg);
                                                                                    //var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                    //var source = 'start.js.sendgrid.bwSend()';
                                                                                    //var errorCode = null;
                                                                                    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.ToParticipantId);

                                                                                    // Save to the BwSentEmail table.
                                                                                    var bwEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                                        return v.toString(16);
                                                                                    });

                                                                                    var attachments = [];
                                                                                    if (params.attachments && params.attachments.length && (params.attachments.length > 0)) {
                                                                                        for (var i = 0; i < params.attachments.length; i++) {
                                                                                            var attachment = params.attachments[i];
                                                                                            attachment.content = ''; // This is the bulk of the content, a base64 string, and we don't need it, because we have our sent attachments saved on the fileservices server, along with thumbnails, etc.
                                                                                            attachments.push(attachment);
                                                                                        }
                                                                                    }

                                                                                    var bwSentEmail = new BwSentEmail( // NEW TABLE FORMAT 6-29-2024. xcx2313-2.
                                                                                        {
                                                                                            bwEmailId: bwEmailId,
                                                                                            bwParticipantId: params.bwParticipantId_LoggedIn,
                                                                                            timestamp: new Date(),
                                                                                            from: params.from,
                                                                                            to: params.to,
                                                                                            cc: [],
                                                                                            bcc: [],
                                                                                            subject: params.subject,
                                                                                            html: params.html,
                                                                                            attachments: attachments // 7-17-2024.

                                                                                            //bwSentEmailId: bwSentEmailId,
                                                                                            //Timestamp: new Date(),
                                                                                            ////bwTenantId: bwTenantId, // add
                                                                                            //bwWorkflowAppId: params.bwWorkflowAppId_LoggedIn, // add
                                                                                            //RelatedRequestId: RelatedRequestId, // add
                                                                                            //FromEmailAddress: params.from,
                                                                                            //ToParticipantId: params.ToParticipantId, // add
                                                                                            //ToParticipantFriendlyName: params.ToParticipantFriendlyName, // add
                                                                                            //ToParticipantEmail: JSON.stringify(params.to),
                                                                                            //CcAddress: null,
                                                                                            //BccAddress: null,
                                                                                            //Subject: params.subject,
                                                                                            //Body: params.html,
                                                                                            //Result: sgResponse.message
                                                                                        });
                                                                                    bwSentEmail.save(function (seError, mod) {
                                                                                        try {
                                                                                            if (seError) {

                                                                                                var msg = 'Error in start.js.sendgrid.bwSend(). Unexpected result for seError: ' + JSON.stringify(seError) + '. Failed to save email to sent emails table, but delivered email to ' + params.to + '. xcx3342 seError: ' + JSON.stringify(seError);
                                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                var result = {
                                                                                                    status: 'ERROR',
                                                                                                    message: msg,
                                                                                                    data: params
                                                                                                }
                                                                                                reject(result);

                                                                                            } else {

                                                                                                var msg = 'In start.js.sendgrid.bwSend(). Saved email to sent emails table, and delivered email to ' + params.to + '. xcx55678. mod: ' + JSON.stringify(mod);
                                                                                                var threatLevel = 'guarded'; // verbose, severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                var result = {
                                                                                                    status: 'SUCCESS',
                                                                                                    message: msg,
                                                                                                    _id: mod._id // We pass this so that IF WE SENT ANY ATTACHMENTS, WE HAVE TO RENAME THE FOLDER HERE TO THE [_id], so that it shows up in our "Sent Items" list in the UI.
                                                                                                    //bwEmailId: bwEmailId 
                                                                                                    //data: params
                                                                                                }
                                                                                                resolve(result);

                                                                                            }
                                                                                        } catch (e) {

                                                                                            var msg = 'Exception in start.js.sendgrid.bwSend():6344. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                            var result = {
                                                                                                status: 'EXCEPTION',
                                                                                                message: msg
                                                                                            }
                                                                                            reject(result);

                                                                                        }
                                                                                    });

                                                                                }

                                                                            } catch (e) {

                                                                                var msg = 'Exception in start.js.sendgrid.bwSend():5. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                var result = {
                                                                                    status: 'EXCEPTION',
                                                                                    message: msg
                                                                                }
                                                                                reject(result);

                                                                            }
                                                                        });

                                                                } else {

                                                                    //
                                                                    //
                                                                    // When we get here, it means we are sending an email to an INTERNAL address which is registered with budgetworkflow.com. 7-2-2024.
                                                                    //
                                                                    //

                                                                    var msg = 'In start.js.sendgrid.bwSend(). Found the participant in the BwParticipant table. This is an email destined for an INTERNAL destination. bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + params.bwParticipantId_LoggedIn + ', to: ' + params.to + ', from: ' + params.from + ', subject: ' + + params.subject + '. bwParticipantId: ' + pcResult.bwParticipantId + ', pcResult.bwEmailNotificationFrequency: ' + pcResult.bwEmailNotificationFrequency + ', pcResult.bwEmailNotificationTypes: ' + pcResult.bwEmailNotificationTypes;
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                    // Check if the user wants to receive this email.
                                                                    //if (bwEmailNotificationTypes == 'allnotifications') {  //allnotifications, onlymytasknotifications

                                                                    if (pcResult.bwEmailNotificationFrequency == 'aggregatetwicedaily') {  //immediately, aggregatetwicedaily

                                                                        var bwEmailAggregatorId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { // Since we are creating this, we will create a unique GUID.
                                                                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                            return v.toString(16);
                                                                        });
                                                                        var bwEmailAggregator = new BwEmailAggregator(
                                                                            {
                                                                                bwEmailAggregatorId: bwEmailAggregatorId,
                                                                                bwParticipantId: params.ToParticipantId,
                                                                                bwParticipantFriendlyName: params.ToParticipantFriendlyName,
                                                                                bwParticipantEmail: params.to,
                                                                                bwWorkflowAppId: params.bwWorkflowAppId_LoggedIn,
                                                                                Created: new Date(),
                                                                                EmailSubject: params.subject.substring(0, 1024), // 7-14-2023. Prevents ERR_BUFFER_OUT_OF_BOUNDS: Attempt to write outside buffer bounds. 
                                                                                EmailBody: params.html.substring(0, 1024)  // 7-14-2023. Prevents ERR_BUFFER_OUT_OF_BOUNDS: Attempt to write outside buffer bounds. 
                                                                            }
                                                                        );
                                                                        bwEmailAggregator.save(function (eaError) {

                                                                            if (eaError) {

                                                                                try {

                                                                                    var msg = 'FATAL ERROR xcx33442-1 BLAH BLAH : FAILED TO SAVE EMAIL to sendgrid.bwSend(). to: ' + params.to + ', subject: ' + params.subject + ', eaError: ' + eaError + ', params.html: ' + params.html; // + ', sgResponse: ' + sgResponse;
                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: msg
                                                                                    }
                                                                                    reject(result);

                                                                                } catch (e) {

                                                                                    var msg = 'xcx2 FATAL ERROR xcx33442-1 BLAH BLAH : FAILED TO SAVE EMAIL to sendgrid.bwSend(). to: ' + params.to + ', subject: ' + params.subject + ', eaError: ' + eaError; // + ', params.html: ' + params.html; // + ', sgResponse: ' + sgResponse;
                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: msg
                                                                                    }
                                                                                    reject(result);

                                                                                }

                                                                            } else {

                                                                                // Saved.
                                                                                var msg = 'SUCCESS in sendgrid.bwSend(). xcx742-2-1 Saved email to bwEmailAggregator table for ' + params.to + '. RESOLVE NULL TEST XCX23124555555.';
                                                                                var threatLevel = 'guarded'; // verbose, severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                var result = {
                                                                                    status: 'SUCCESS',
                                                                                    message: msg
                                                                                }
                                                                                resolve(result);

                                                                            }

                                                                        });

                                                                    } else if (pcResult.bwEmailNotificationFrequency == 'immediately') {  //immediately, aggregatetwicedaily

                                                                        // Send the email immediately.

                                                                        //var msg = 'In sendgrid.bwSend(). xcx12314-2. Sending SMS message. params.to: ' + JSON.stringify(params.to);
                                                                        //var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //var source = 'start.js.sendgrid.bwSend()';
                                                                        //var errorCode = null;
                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //const from = "15194881754";
                                                                        //const to = "19023851968";
                                                                        //const text = 'BudgetWorkflow.com email queued. To: ' + params.to + ', Subject: "' + params.subject + '", bwWorkflowAppID: ' + params.bwWorkflowAppId + '.';

                                                                        //vonage.message.sendSms(from, to, text, function (err, responseData) {
                                                                        //    try {
                                                                        //        if (err) {
                                                                        //            console.log(err);
                                                                        //        } else {
                                                                        //            if (responseData.messages[0]['status'] === "0") {
                                                                        //                console.log("Message sent successfully.");
                                                                        //            } else {
                                                                        //                console.log("SMS message failed with error xcx23123-3: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
                                                                        //            }
                                                                        //        }
                                                                        //    } catch (e) {

                                                                        //        var msg = 'Exception in start.js.sendgrid.bwSend():16. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                        //        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //        var source = 'start.js.sendgrid.bwSend()';
                                                                        //        var errorCode = null;
                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //        //var result = {
                                                                        //        //    message: msg
                                                                        //        //}
                                                                        //        //reject(result);

                                                                        //    }
                                                                        //});

                                                                        //if (params.to == 'todd@budgetworkflow.com') {

                                                                        //
                                                                        //
                                                                        // WE NEED TO FIND THE bwParticipantId for the users who are getting internal email. 5-23-2024.
                                                                        //
                                                                        //

                                                                        //BwParticipant.find({ bwParticipantEmail: params.to }, function (pcError, pcResult) {
                                                                        //    try {
                                                                        //        if (pcError) {

                                                                        //            var msg = 'Error in start.js.sendgrid.bwSend()xcx2342355. params.to: ' + params.to + ', pcError: ' + pcError;
                                                                        //            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                        //            var source = 'start.js.sendgrid.bwSend()';
                                                                        //            var errorCode = null;
                                                                        //            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        //            var result = {
                                                                        //                status: 'ERROR',
                                                                        //                message: msg
                                                                        //            }
                                                                        //            reject(result);

                                                                        //        } else {

                                                                        //            if (!pcResult) {

                                                                        //                var msg = 'Error in start.js.sendgrid.bwSend()xcx778456. params.to: ' + params.to + ', pcResult: ' + JSON.stringify(pcResult);
                                                                        //                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                        //                var source = 'start.js.sendgrid.bwSend()';
                                                                        //                var errorCode = null;
                                                                        //                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        //                var result = {
                                                                        //                    status: 'ERROR',
                                                                        //                    message: msg
                                                                        //                }
                                                                        //                reject(result);

                                                                        //            } else {

                                                                        //var msg = 'In start.js.sendgrid.bwSend(). pcResult: ' + JSON.stringify(pcResult);
                                                                        //var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //var source = 'start.js.sendgrid.bwSend()';
                                                                        //var errorCode = null;
                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId); // , params.ToParticipantId);

                                                                        //if (pcResult && pcResult.length && (pcResult.length > 1)) { // This is just a redundant check to make sure this never happens. It can never happen. Especially now.


                                                                        //    var msg = 'Error in start.js.sendgrid.bwSend(). params.to: ' + params.to + ', This email cannot be sent. THIS USER HAS MULTIPLE ENTRIES FOR bwParticipantEmail IN THE BwParticipant table. ALERT ** ALERT ** bwParticipantEmail/params.to: ' + xx + ', ' + JSON.stringify(pcResult);
                                                                        //    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                        //    var source = 'start.js.sendgrid.bwSend()';
                                                                        //    var errorCode = null;
                                                                        //    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn); // , params.ToParticipantId);

                                                                        //    var result = {
                                                                        //        status: 'ERROR',
                                                                        //        message: msg
                                                                        //    }
                                                                        //    reject(result);

                                                                        //} else {


                                                                        //var originPath = "public/_files/_draftEmailAttachments/" + params.bwParticipantId_LoggedIn + "/" + params.bwDraftEmailId;
                                                                        //var destinationPath = "public/_files/_emailAttachments/" + params.ToParticipantId + "/" + bwEmailId;

                                                                        if (!(pcResult.bwParticipantId && params.bwParticipantId_LoggedIn)) {

                                                                            var msg = 'Error in start.js.sendgrid.bwSend(). params.to: ' + params.to + ', This email cannot be sent. THIS EMAIL IS MARKED INTERNAL BUT unexpected value for params.bwDraftEmailId: ' + params.bwDraftEmailId + ', pcResult.bwParticipantId: ' + pcResult.bwParticipantId + ', params.bwParticipantId_LoggedIn: ' + params.bwParticipantId_LoggedIn;
                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn); // , params.ToParticipantId);

                                                                            var result = {
                                                                                status: 'ERROR',
                                                                                message: msg
                                                                            }
                                                                            reject(result);

                                                                        } else {

                                                                            //
                                                                            //
                                                                            // If the participant uses our hosted email, then route this email internally rather then sending it using Sendgrid. CONFIRMED 1-5-2024.
                                                                            //
                                                                            // INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL ** INTERNAL
                                                                            //
                                                                            // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                                                            //
                                                                            //

                                                                            var msg = 'Preparing to save sent email to BwSentEmail table. params.to: ' + params.to + ', pcResult.bwParticipantId: ' + pcResult.bwParticipantId + ', pcResult.bwParticipantEmail: ' + pcResult.bwParticipantEmail;
                                                                            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                            //
                                                                            //
                                                                            // Changed this from the BwSentEmail table to the email_incoming_haraka, making sure to mark it as INTERNAL. 1-5-2024.
                                                                            //
                                                                            //

                                                                            var bwEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                                return v.toString(16);
                                                                            });

                                                                            var attachments = []; // 5-22-2024.
                                                                            if (params.attachments) {
                                                                                attachments = params.attachments;

                                                                                //
                                                                                // We have attachments. This is the place to to copy them to the correct folder.
                                                                                // Since this is an INTERNAL email, we can just do a simple file CUT-AND-COPY.
                                                                                //
                                                                                // CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY ** CUT-AND-COPY
                                                                                //
                                                                                //

                                                                                var email = new email_incoming_haraka(
                                                                                    {
                                                                                        bwEmailId: bwEmailId,
                                                                                        from: params.from, //[], // fromEmailAddress
                                                                                        to: JSON.stringify(params.to), //[], // otrMod.bwParticipantEmail
                                                                                        //cc: [],
                                                                                        //bcc: [],
                                                                                        subject: params.subject,
                                                                                        date: new Date(),
                                                                                        attachments: attachments, // 5-22-2024. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                                        html: params.html,
                                                                                        timestamp: new Date(),
                                                                                        source: 'budgetworkflow', // Options are 'haraka', 'budgetworkflow'. 10-3-2023.
                                                                                        bwParticipantId: pcResult.bwParticipantId,
                                                                                        TheUserHasReadThisEmail: false,
                                                                                        ThisEmailIsFromAnInternalSource: true // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                                                                    });
                                                                                email.save(function (error, eihMod) {
                                                                                    try {
                                                                                        if (error) {

                                                                                            var msg = 'Error in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx2312312-1. error: ' + error;
                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                            var result = {
                                                                                                status: 'ERROR',
                                                                                                message: msg
                                                                                            }
                                                                                            reject(result);

                                                                                        } else {

                                                                                            var originPath = "public/_files/_emailAttachments/" + params.bwParticipantId_LoggedIn + "/" + params.bwDraftEmailId; // This is an _id, we should rename this someday. 7-15-2024.
                                                                                            var destinationPath = "public/_files/_emailAttachments/" + pcResult.bwParticipantId + "/" + eihMod._id;

                                                                                            var emailattachmentsFolderPath = rootFilePath + '_emailAttachments'; //'public/_files/' + bwWorkflowAppId;
                                                                                            var mkdirEmailAttachments = function (emailattachmentsFolderPath) {
                                                                                                try {
                                                                                                    fs.mkdirSync(emailattachmentsFolderPath);
                                                                                                } catch (e) {
                                                                                                    if (e.code != 'EEXIST') throw e;
                                                                                                }
                                                                                            }

                                                                                            var participantFolderPath = emailattachmentsFolderPath + '/' + pcResult.bwParticipantId;
                                                                                            var mkdirParticipant = function (participantFolderPath) {
                                                                                                try {
                                                                                                    fs.mkdirSync(participantFolderPath);
                                                                                                } catch (e) {
                                                                                                    if (e.code != 'EEXIST') throw e;
                                                                                                }
                                                                                            }

                                                                                            var emailFolderPath = participantFolderPath + '/' + bwEmailId;
                                                                                            var mkdirEmail = function (emailFolderPath) {
                                                                                                try {
                                                                                                    fs.mkdirSync(emailFolderPath);
                                                                                                } catch (e) {
                                                                                                    if (e.code != 'EEXIST') throw e;
                                                                                                }
                                                                                            }

                                                                                            mkdirEmailAttachments(emailattachmentsFolderPath);
                                                                                            mkdirParticipant(participantFolderPath);
                                                                                            mkdirEmail(emailFolderPath);

                                                                                            fs.copy(originPath, destinationPath, function (err) {
                                                                                                try {

                                                                                                    if (err) {

                                                                                                        var msg = 'Error in start.js.sendgrid.bwSend.fs.copy().xcx21313. err: ' + err;
                                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                        var result = {
                                                                                                            status: 'ERROR',
                                                                                                            message: msg
                                                                                                        }
                                                                                                        reject(result);

                                                                                                    } else {

                                                                                                        //
                                                                                                        //
                                                                                                        //

                                                                                                        var bwSentEmail = new BwSentEmail(
                                                                                                            {
                                                                                                                bwEmailId: bwEmailId,
                                                                                                                bwParticipantId: params.bwParticipantId_LoggedIn,
                                                                                                                from: params.from, //[], // fromEmailAddress
                                                                                                                to: JSON.stringify(params.to), //[], // otrMod.bwParticipantEmail
                                                                                                                //cc: [],
                                                                                                                //bcc: [],
                                                                                                                subject: params.subject,
                                                                                                                date: new Date(),
                                                                                                                html: params.html,
                                                                                                                timestamp: new Date(),
                                                                                                                source: 'budgetworkflow', // Options are 'haraka', 'budgetworkflow'. 10-3-2023.                                                                                                      

                                                                                                                TheUserHasReadThisEmail: false,
                                                                                                                ThisEmailIsFromAnInternalSource: true // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                                                                                            });
                                                                                                        bwSentEmail.save(function (error, seMod) {
                                                                                                            try {
                                                                                                                if (error) {

                                                                                                                    var msg = 'Error in start.js.sendgrid.bwSend.bwSentEmail.save(). xcx2312312-2xcx44. error: ' + error;
                                                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                                    var result = {
                                                                                                                        status: 'ERROR',
                                                                                                                        message: msg
                                                                                                                    }
                                                                                                                    reject(result);

                                                                                                                } else {

                                                                                                                    var originPath = "public/_files/_emailAttachments/" + params.bwParticipantId_LoggedIn + "/" + params.bwDraftEmailId; // This is an _id, we should rename this someday. 7-15-2024.
                                                                                                                    var destinationPath = "public/_files/_emailAttachments/" + params.bwParticipantId_LoggedIn + "/" + seMod._id;

                                                                                                                    var emailattachmentsFolderPath = rootFilePath + '_emailAttachments'; //'public/_files/' + bwWorkflowAppId;
                                                                                                                    var mkdirEmailAttachments = function (emailattachmentsFolderPath) {
                                                                                                                        try {
                                                                                                                            fs.mkdirSync(emailattachmentsFolderPath);
                                                                                                                        } catch (e) {
                                                                                                                            if (e.code != 'EEXIST') throw e;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    var participantFolderPath = emailattachmentsFolderPath + '/' + pcResult.bwParticipantId;
                                                                                                                    var mkdirParticipant = function (participantFolderPath) {
                                                                                                                        try {
                                                                                                                            fs.mkdirSync(participantFolderPath);
                                                                                                                        } catch (e) {
                                                                                                                            if (e.code != 'EEXIST') throw e;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    var emailFolderPath = participantFolderPath + '/' + bwEmailId;
                                                                                                                    var mkdirEmail = function (emailFolderPath) {
                                                                                                                        try {
                                                                                                                            fs.mkdirSync(emailFolderPath);
                                                                                                                        } catch (e) {
                                                                                                                            if (e.code != 'EEXIST') throw e;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    mkdirEmailAttachments(emailattachmentsFolderPath);
                                                                                                                    mkdirParticipant(participantFolderPath);
                                                                                                                    mkdirEmail(emailFolderPath);

                                                                                                                    fs.copy(originPath, destinationPath, function (err) {
                                                                                                                        try {

                                                                                                                            if (err) {

                                                                                                                                var msg = 'Error in start.js.sendgrid.bwSend.fs.copy(). xcx234543534. err: ' + err;
                                                                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                                                var errorCode = null;
                                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                                                var result = {
                                                                                                                                    status: 'ERROR',
                                                                                                                                    message: msg
                                                                                                                                }
                                                                                                                                reject(result);

                                                                                                                            } else {

                                                                                                                                if (!params.bwDraftEmailId) { // If there is no bwDraftEmailId, thne it is an email like the one sent from the "emailattachmentsexternally" functionality.

                                                                                                                                    var msg = 'In start.js.sendgrid.bwSend.bwSentEmail.save(). Saved new INTERNAL email entry. xcx213312-1-1. pcResult.bwParticipantId: ' + pcResult.bwParticipantId + ', ToParticipantFriendlyName: ' + params.ToParticipantFriendlyName + ', params.ToParticipantId: ' + params.ToParticipantId + ',  email: ' + JSON.stringify(email);
                                                                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                                                                    var errorCode = null;
                                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                                                    var result = {
                                                                                                                                        status: 'SUCCESS',
                                                                                                                                        message: msg
                                                                                                                                    }
                                                                                                                                    resolve(result);

                                                                                                                                } else {

                                                                                                                                    //
                                                                                                                                    //
                                                                                                                                    // NOW WE NEED TO DELETE THIS FROM THE SENDER USERS DRAFT FOLDER/DATABASE TABLE. (Set TrashBin: true). 5-23-2024.
                                                                                                                                    //
                                                                                                                                    //

                                                                                                                                    BwDraftEmail.updateOne({ _id: params.bwDraftEmailId }, { TrashBin: true }, function (deuError, deuMod) {
                                                                                                                                        try {

                                                                                                                                            if (deuError) {

                                                                                                                                                var msg = 'Error in start.js.sendgrid.bwSend.BwDraftEmail.updateOne(). deuError: ' + deuError;
                                                                                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                                                                var errorCode = null;
                                                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                                                var result = {
                                                                                                                                                    status: 'ERROR',
                                                                                                                                                    message: msg
                                                                                                                                                }
                                                                                                                                                reject(result);

                                                                                                                                            } else {

                                                                                                                                                var msg = 'In start.js.sendgrid.bwSend.email_incoming_haraka.save(). Saved new INTERNAL email entry and deleted from the BwDraftEmail table. xcx213312-1-1. eihMod._id: ' + eihMod._id;
                                                                                                                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                                                                var errorCode = null;
                                                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                                                                var result = {
                                                                                                                                                    status: 'SUCCESS',
                                                                                                                                                    message: msg,
                                                                                                                                                    _id: eihMod._id // 7-26-2024.
                                                                                                                                                }
                                                                                                                                                resolve(result);

                                                                                                                                            }

                                                                                                                                        } catch (e) {

                                                                                                                                            var msg = 'Exception in start.js.sendgrid.bwSend():5: ' + e.message + ', ' + e.stack;
                                                                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                                                                            var errorCode = null;
                                                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                                            var result = {
                                                                                                                                                status: 'EXCEPTION',
                                                                                                                                                message: msg
                                                                                                                                            }
                                                                                                                                            reject(result);

                                                                                                                                        }

                                                                                                                                    });

                                                                                                                                }

                                                                                                                            }

                                                                                                                        } catch (e) {

                                                                                                                            var msg = 'Exception in start.js.sendgrid.bwSend():xcx5547778: ' + e.message + ', ' + e.stack;
                                                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                                                            var errorCode = null;
                                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                            var result = {
                                                                                                                                status: 'EXCEPTION',
                                                                                                                                message: msg
                                                                                                                            }
                                                                                                                            reject(result);

                                                                                                                        }

                                                                                                                    });

                                                                                                                }

                                                                                                            } catch (e) {

                                                                                                                var msg = 'Exception in start.js.sendgrid.bwSend():5554: ' + e.message + ', ' + e.stack;
                                                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.sendgrid.bwSend()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                var result = {
                                                                                                                    status: 'EXCEPTION',
                                                                                                                    message: msg
                                                                                                                }
                                                                                                                reject(result);

                                                                                                            }

                                                                                                        });

                                                                                                    }

                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.sendgrid.bwSend.fs.copy():2: ' + e.message + ', ' + e.stack;
                                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        status: 'EXCEPTION',
                                                                                                        message: msg
                                                                                                    }
                                                                                                    reject(result);

                                                                                                }
                                                                                            });

                                                                                        }

                                                                                    } catch (e) {

                                                                                        var msg = 'Exception in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx213134123: ' + e.message + ', ' + e.stack;
                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                        var result = {
                                                                                            status: 'EXCEPTION',
                                                                                            message: msg
                                                                                        }
                                                                                        reject(result);

                                                                                    }
                                                                                });

                                                                            } else {

                                                                                var email = new email_incoming_haraka(
                                                                                    {
                                                                                        bwEmailId: bwEmailId,
                                                                                        from: params.from, //[], // fromEmailAddress
                                                                                        to: JSON.stringify(params.to), //[], // otrMod.bwParticipantEmail
                                                                                        //cc: [],
                                                                                        //bcc: [],
                                                                                        subject: params.subject,
                                                                                        date: new Date(),
                                                                                        html: params.html,
                                                                                        timestamp: new Date(),
                                                                                        source: 'budgetworkflow', // Options are 'haraka', 'budgetworkflow'. 10-3-2023.                                                                                                      
                                                                                        bwParticipantId: pcResult.bwParticipantId,
                                                                                        TheUserHasReadThisEmail: false,
                                                                                        ThisEmailIsFromAnInternalSource: true // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                                                                    });
                                                                                email.save(function (error) {
                                                                                    try {
                                                                                        if (error) {

                                                                                            var msg = 'Error in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx2312312-3. error: ' + error;
                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                            var result = {
                                                                                                status: 'ERROR',
                                                                                                message: msg
                                                                                            }
                                                                                            reject(result);

                                                                                        } else {

                                                                                            var bwSentEmail = new BwSentEmail(
                                                                                                {
                                                                                                    bwEmailId: bwEmailId,
                                                                                                    bwParticipantId: params.bwParticipantId_LoggedIn,
                                                                                                    from: params.from, //[], // fromEmailAddress
                                                                                                    to: JSON.stringify(params.to), //[], // otrMod.bwParticipantEmail
                                                                                                    //cc: [],
                                                                                                    //bcc: [],
                                                                                                    subject: params.subject,
                                                                                                    date: new Date(),
                                                                                                    html: params.html,
                                                                                                    timestamp: new Date(),
                                                                                                    source: 'budgetworkflow', // Options are 'haraka', 'budgetworkflow'. 10-3-2023.                                                                                                      

                                                                                                    TheUserHasReadThisEmail: false,
                                                                                                    ThisEmailIsFromAnInternalSource: true // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                                                                                });
                                                                                            bwSentEmail.save(function (error) {
                                                                                                try {
                                                                                                    if (error) {

                                                                                                        var msg = 'Error in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx2312312-4. error: ' + error;
                                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                        var result = {
                                                                                                            status: 'ERROR',
                                                                                                            message: msg
                                                                                                        }
                                                                                                        reject(result);

                                                                                                    } else {

                                                                                                        if (!params.bwDraftEmailId) { // If there is no bwDraftEmailId, thne it is an email like the one sent from the "emailattachmentsexternally" functionality.

                                                                                                            var msg = 'In start.js.sendgrid.bwSend.email_incoming_haraka.save(). Saved new INTERNAL email entry. xcx213312-1-1. pcResult.bwParticipantId: ' + pcResult.bwParticipantId + ', ToParticipantFriendlyName: ' + params.ToParticipantFriendlyName + ', params.ToParticipantId: ' + params.ToParticipantId + ',  email: ' + JSON.stringify(email);
                                                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.sendgrid.bwSend()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                            var result = {
                                                                                                                status: 'SUCCESS',
                                                                                                                message: msg
                                                                                                            }
                                                                                                            resolve(result);

                                                                                                        } else {

                                                                                                            //
                                                                                                            //
                                                                                                            // NOW WE NEED TO DELETE THIS FROM THE SENDER USERS DRAFT FOLDER/DATABASE TABLE. (Set TrashBin: true). 5-23-2024.
                                                                                                            //
                                                                                                            //

                                                                                                            BwDraftEmail.updateOne({ _id: params.bwDraftEmailId }, { TrashBin: true }, function (deuError, deuMod) {
                                                                                                                try {

                                                                                                                    if (deuError) {

                                                                                                                        var msg = 'Error in start.js.sendgrid.bwSend.BwDraftEmail.updateOne(). deuError: ' + deuError;
                                                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        var result = {
                                                                                                                            status: 'ERROR',
                                                                                                                            message: msg
                                                                                                                        }
                                                                                                                        response.send(result);

                                                                                                                    } else {

                                                                                                                        var msg = 'In start.js.sendgrid.bwSend.email_incoming_haraka.save(). Saved new INTERNAL email entry and deleted from the BwDraftEmail table. xcx213312-1-2.';
                                                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                                                        var result = {
                                                                                                                            status: 'SUCCESS',
                                                                                                                            message: msg
                                                                                                                        }
                                                                                                                        resolve(result);

                                                                                                                    }

                                                                                                                } catch (e) {

                                                                                                                    var msg = 'Exception in start.js.sendgrid.bwSend():5: ' + e.message + ', ' + e.stack;
                                                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        status: 'EXCEPTION',
                                                                                                                        message: msg
                                                                                                                    }
                                                                                                                    response.send(result);

                                                                                                                }

                                                                                                            });

                                                                                                        }

                                                                                                    }

                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.sendgrid.bwSend():5554: ' + e.message + ', ' + e.stack;
                                                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.sendgrid.bwSend()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        status: 'EXCEPTION',
                                                                                                        message: msg
                                                                                                    }
                                                                                                    response.send(result);

                                                                                                }

                                                                                            });

                                                                                        }

                                                                                    } catch (e) {

                                                                                        var msg = 'Exception in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx213134123: ' + e.message + ', ' + e.stack;
                                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                                        var result = {
                                                                                            status: 'EXCEPTION',
                                                                                            message: msg
                                                                                        }
                                                                                        reject(result);

                                                                                    }
                                                                                });

                                                                            }

                                                                        }

                                                                        //}

                                                                        //            }

                                                                        //        }

                                                                        //    } catch (e) {

                                                                        //        var msg = 'Exception in start.js.sendgrid.bwSend():7xcx32543463. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                        //        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                        //        var source = 'start.js.sendgrid.bwSend()';
                                                                        //        var errorCode = null;
                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn);

                                                                        //    }

                                                                        //});

                                                                        //} else {


                                                                        //    var msg = 'The user does not host their email with us, so send using Sendgrid. EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL **';
                                                                        //    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //    var source = 'start.js.sendgrid.bwSend()';
                                                                        //    var errorCode = null;
                                                                        //    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //    //
                                                                        //    //
                                                                        //    // The user does not host their email with us, so send using Sendgrid.
                                                                        //    //
                                                                        //    // EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL ** EXTERNAL
                                                                        //    //
                                                                        //    // EXTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on emailservices (Haraka) server.
                                                                        //    //
                                                                        //    //

                                                                        //    // see: http://sendgrid.com/docs/API_Reference/Web_API_v3/Mail/errors.html#message.personalizations.to

                                                                        //    var message = {
                                                                        //        personalizations: [],
                                                                        //        from: {
                                                                        //            email: params.from, // 'hello@shareandcollaborate.com'//,
                                                                        //            //name: 'Example Order Confirmation'
                                                                        //        },
                                                                        //        replyTo: {
                                                                        //            email: 'support@shareandcollaborate.com'//,
                                                                        //            //name: 'Example Customer Service Team'
                                                                        //        },
                                                                        //        subject: params.subject,
                                                                        //        content: [
                                                                        //            {
                                                                        //                type: 'text/html',
                                                                        //                value: params.html
                                                                        //            }
                                                                        //        ]

                                                                        //    };

                                                                        //    //
                                                                        //    // This way we make sure noone gets exposed to anyone elses email address. 6-30-2023.
                                                                        //    //
                                                                        //    var tmpList = params.to.split(',');
                                                                        //    if (tmpList.length) {
                                                                        //        for (var i = 0; i < tmpList.length; i++) {

                                                                        //            var person = {
                                                                        //                to: {
                                                                        //                    email: tmpList[i]
                                                                        //                }
                                                                        //            };

                                                                        //            message.personalizations.push(person);

                                                                        //        }

                                                                        //    } else {

                                                                        //        var person = {
                                                                        //            to: {
                                                                        //                email: params.to
                                                                        //            }
                                                                        //        };

                                                                        //        message.personalizations.push(person);

                                                                        //    }


                                                                        //    sendgrid.send(
                                                                        //        //sendgrid.sendMultiple({ // This makes sure that everyone doesn't see each others email addresses.
                                                                        //        //    to: params.to,
                                                                        //        //    from: params.from,
                                                                        //        //    subject: params.subject,
                                                                        //        //    html: params.html
                                                                        //        message, function (sgError, sgResponse) {
                                                                        //            try {
                                                                        //                if (sgError) {

                                                                        //                    var msg = 'FATAL ERROR in sendgrid.bwSend(). xcx33442-2: FAILED TO SEND EMAIL USING SENDGRID. to: ' + params.to + ', subject: ' + params.subject + ', sgError: ' + sgError + ', sgResponse: ' + sgResponse;
                                                                        //                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                    var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    var errorCode = null;
                                                                        //                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                    var result = {
                                                                        //                        status: 'ERROR',
                                                                        //                        message: 'ERROR4: ' + sgError + ', ' + msg
                                                                        //                    }
                                                                        //                    reject(result);

                                                                        //                } else {



                                                                        //                    //var msg = 'In sendgrid.bwSend(). Called send(). bwEmailNotificationFrequency == immediately. xcx5543. Sent email. message: ' + JSON.stringify(message) + ', params: ' + JSON.stringify(params.to) + '. sgError: ' + JSON.stringify(sgError) + ', sgResponse: ' + JSON.stringify(sgResponse); // bwWorkflowAppId":"c48535a4-9a6b-4b95-9d67-c6569e9695d8","ToParticipantId"
                                                                        //                    var msg = 'In sendgrid.bwSend(). Called send(). bwEmailNotificationFrequency == immediately. xcx5543. Sent email to: ' + JSON.stringify(params.to) + '. sgResponse: ' + JSON.stringify(sgResponse) + '. sgError: ' + JSON.stringify(sgError);
                                                                        //                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                    var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    var errorCode = null;
                                                                        //                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);




                                                                        //                    var msg = 'Email sent ?successfully. xcx345467-1.'; //: ' + JSON.stringify(sgResponse);
                                                                        //                    console.log(msg);
                                                                        //                    //var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                        //                    //var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    //var errorCode = null;
                                                                        //                    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);





                                                                        //                    //var tmpEmail = '@' + globalUrl; // eg: if ((params.to.indexOf('@budgetworkflow.com') > -1)) {
                                                                        //                    var tmpEmail1 = '@shareandcollaborate.com';
                                                                        //                    var tmpEmail2 = '@budgetworkflow.com';
                                                                        //                    var tmpEmail3 = '@budgetrequests.com';

                                                                        //                    if ((params.to.indexOf(tmpEmail1) > -1) || (params.to.indexOf(tmpEmail2) > -1) || (params.to.indexOf(tmpEmail3) > -1)) {
                                                                        //                        //    // Do nothing, we don't need to know if these emails get sent. 2-16-2022 Trimming down the quantity of emails that are being sent.

                                                                        //                        var msg = 'xcx4457 This was a budgetworkflow.com email, so not sending. params.to: ' + params.to;
                                                                        //                        console.log(msg);
                                                                        //                        //    //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        //                        //    //var source = 'start.js.sendgrid.bwSend()';
                                                                        //                        //    //var errorCode = null;
                                                                        //                        //    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                    } else {

                                                                        //                        var msg = 'In sendgrid.bwSend(). xcx12314-9. Sending email. params: ' + JSON.stringify(params.to);
                                                                        //                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                        var source = 'start.js.sendgrid.bwSend()';
                                                                        //                        var errorCode = null;
                                                                        //                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                        sendxgrid.send({
                                                                        //                            to: 'forestadministrator@budgetworkflow.com',
                                                                        //                            from: 'webservices@budgetworkflow.com',
                                                                        //                            subject: 'xcx2BudgetWorkflow.com sent email to ' + params.to,
                                                                        //                            html: 'xcx2BudgetWorkflow.com sent email to ' + params.to + '. Email: ' + params.html
                                                                        //                        }, function (sgError, sgResponse) {
                                                                        //                            try {
                                                                        //                                if (sgError) {

                                                                        //                                    var msg = 'xcx4458 Error sending email to ' + 'forestadministrator@budgetworkflow.com' + ': ' + JSON.stringify(sgError);
                                                                        //                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                                    var source = 'start.js.sendgrid.bwSend()';
                                                                        //                                    var errorCode = null;
                                                                        //                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                                    //var result = {
                                                                        //                                    //    message: msg
                                                                        //                                    //}
                                                                        //                                    //reject(result);

                                                                        //                                } else {

                                                                        //                                    // Do nothing.
                                                                        //                                    var msg = 'xcx4458 Email sent successfully to ' + 'forestadministrator@budgetworkflow.com' + ': ' + JSON.stringify(sgError);
                                                                        //                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                                    var source = 'start.js.sendgrid.bwSend()';
                                                                        //                                    var errorCode = null;
                                                                        //                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                                }
                                                                        //                            } catch (e) {

                                                                        //                                var msg = 'Exception in start.js.sendgrid.bwSend():7. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                        //                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                                var source = 'start.js.sendgrid.bwSend()';
                                                                        //                                var errorCode = null;
                                                                        //                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                                //var result = {
                                                                        //                                //    message: msg
                                                                        //                                //}
                                                                        //                                //reject(result);

                                                                        //                            }
                                                                        //                        });
                                                                        //                    }
                                                                        //                    //}

                                                                        //                    var msg = 'Preparing to save sent email to BwSentEmail table. xcx448'; //: ' + JSON.stringify(sgResponse);
                                                                        //                    console.log(msg);
                                                                        //                    //var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                        //                    //var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    //var errorCode = null;
                                                                        //                    //WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);






                                                                        //                    //
                                                                        //                    //
                                                                        //                    // Changed this from the BwSentEmail table to the email_incoming_haraka, making sure to mark it as INTERNAL. 1-5-2024.
                                                                        //                    //
                                                                        //                    //

                                                                        //                    var email = new email_incoming_haraka(
                                                                        //                        {
                                                                        //                            //haraka_body: {},
                                                                        //                            //raw_html: String,
                                                                        //                            //raw_text: String,
                                                                        //                            //raw: {},
                                                                        //                            from: params.from, //[], // fromEmailAddress
                                                                        //                            to: JSON.stringify(params.to), //[], // otrMod.bwParticipantEmail
                                                                        //                            //cc: [],
                                                                        //                            //bcc: [],
                                                                        //                            subject: params.subject,
                                                                        //                            date: new Date(),
                                                                        //                            //received_date: Date,
                                                                        //                            //message_id: String,
                                                                        //                            //attachments: [],
                                                                        //                            //headers: {},
                                                                        //                            html: params.html,
                                                                        //                            //text: String,
                                                                        //                            timestamp: new Date(),
                                                                        //                            //status: String,
                                                                        //                            source: 'budgetworkflow', // Options are 'haraka', 'budgetworkflow'. 10-3-2023.
                                                                        //                            //in_reply_to: String,
                                                                        //                            //reply_to: String,
                                                                        //                            //references: String,
                                                                        //                            //pickup_date: Date,
                                                                        //                            //mail_from: {},
                                                                        //                            //rcpt_to: [],
                                                                        //                            //size: Number,
                                                                        //                            //transferred: Boolean,
                                                                        //                            //processed: Boolean,
                                                                        //                            //extracted_html_from: String,
                                                                        //                            //extracted_text_from: String,

                                                                        //                            bwWorkflowAppId: params.bwWorkflowAppId,
                                                                        //                            RelatedRequestId: RelatedRequestId,
                                                                        //                            ToParticipantId: params.ToParticipantId,
                                                                        //                            ToParticipantFriendlyName: params.ToParticipantFriendlyName,

                                                                        //                            TheUserHasReadThisEmail: false,
                                                                        //                            ThisEmailIsFromAnInternalSource: true
                                                                        //                        });
                                                                        //                    email.save(function (error) {
                                                                        //                        try {
                                                                        //                            if (error) {

                                                                        //                                var msg = 'Error in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx2312312-2. error: ' + error;
                                                                        //                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                                var source = 'start.js.sendgrid.bwSend()';
                                                                        //                                var errorCode = null;
                                                                        //                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                                var result = {
                                                                        //                                    status: 'ERROR',
                                                                        //                                    message: msg
                                                                        //                                }
                                                                        //                                reject(result);

                                                                        //                            } else {

                                                                        //                                var msg = 'In start.js.sendgrid.bwSend.email_incoming_haraka.save(). Saved new INTERNAL email entry. xcx213312-2.';
                                                                        //                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                                var source = 'start.js.sendgrid.bwSend()';
                                                                        //                                var errorCode = null;
                                                                        //                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                                var result = {
                                                                        //                                    status: 'SUCCESS',
                                                                        //                                    message: msg
                                                                        //                                }
                                                                        //                                resolve(result);

                                                                        //                            }

                                                                        //                        } catch (e) {

                                                                        //                            var msg = 'Exception in start.js.sendgrid.bwSend.email_incoming_haraka.save(). xcx213134123-2: ' + e.message + ', ' + e.stack;
                                                                        //                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                            var source = 'start.js.sendgrid.bwSend()';
                                                                        //                            var errorCode = null;
                                                                        //                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                            var result = {
                                                                        //                                status: 'EXCEPTION',
                                                                        //                                message: msg
                                                                        //                            }
                                                                        //                            reject(result);

                                                                        //                        }
                                                                        //                    });





                                                                        //                    //// Save to the BwSentEmail table.
                                                                        //                    //var bwSentEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                        //                    //    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                        //                    //    return v.toString(16);
                                                                        //                    //});
                                                                        //                    //var timestamp = new Date();
                                                                        //                    //var bwSentEmail = new BwSentEmail(
                                                                        //                    //    {
                                                                        //                    //        bwSentEmailId: bwSentEmailId,
                                                                        //                    //        Timestamp: timestamp,
                                                                        //                    //        //bwTenantId: bwTenantId, // add
                                                                        //                    //        bwWorkflowAppId: params.bwWorkflowAppId, // add
                                                                        //                    //        RelatedRequestId: RelatedRequestId, // add
                                                                        //                    //        FromEmailAddress: params.from,
                                                                        //                    //        ToParticipantId: params.ToParticipantId, // add
                                                                        //                    //        ToParticipantFriendlyName: params.ToParticipantFriendlyName, // add
                                                                        //                    //        ToParticipantEmail: JSON.stringify(params.to),
                                                                        //                    //        CcAddress: null,
                                                                        //                    //        BccAddress: null,
                                                                        //                    //        Subject: params.subject,
                                                                        //                    //        Body: params.html,
                                                                        //                    //        Result: sgResponse.message
                                                                        //                    //    });
                                                                        //                    //bwSentEmail.save(function (seError) {
                                                                        //                    //    try {
                                                                        //                    //        if (seError) {

                                                                        //                    //            var msg = 'WEIRD BEHAVIOR>>>>> Unexpected result for seError: ' + JSON.stringify(seError) + '. Failed to save email to sent emails table, but delivered email to ' + params.to + '. xcx3342 seError: ' + JSON.stringify(seError);
                                                                        //                    //            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                    //            var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    //            var errorCode = null;
                                                                        //                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                    //            var result = {
                                                                        //                    //                status: 'ERROR',
                                                                        //                    //                message: msg,
                                                                        //                    //                data: params
                                                                        //                    //            }
                                                                        //                    //            reject(result);

                                                                        //                    //        } else {

                                                                        //                    //            var msg = 'xcx742-2-2 Saved email to sent emails table, and delivered email to ' + params.to + '.';
                                                                        //                    //            var threatLevel = 'elevated'; // verbose, severe, high, elevated, guarded, low.
                                                                        //                    //            var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    //            var errorCode = null;
                                                                        //                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                    //            var result = {
                                                                        //                    //                status: 'SUCCESS',
                                                                        //                    //                message: msg,
                                                                        //                    //                data: params
                                                                        //                    //            }
                                                                        //                    //            resolve(result);

                                                                        //                    //        }
                                                                        //                    //    } catch (e) {

                                                                        //                    //        var msg = 'Exception in start.js.sendgrid.bwSend():6. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                        //                    //        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                    //        var source = 'start.js.sendgrid.bwSend()';
                                                                        //                    //        var errorCode = null;
                                                                        //                    //        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                    //        var result = {
                                                                        //                    //            status: 'EXCEPTION',
                                                                        //                    //            message: msg
                                                                        //                    //        }
                                                                        //                    //        reject(result);

                                                                        //                    //    }
                                                                        //                    //});






















                                                                        //                }

                                                                        //            } catch (e) {

                                                                        //                var msg = 'Exception in start.js.sendgrid.bwSend():5. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                                        //                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        //                var source = 'start.js.sendgrid.bwSend()';
                                                                        //                var errorCode = null;
                                                                        //                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId, params.ToParticipantId);

                                                                        //                var result = {
                                                                        //                    status: 'EXCEPTION',
                                                                        //                    message: msg
                                                                        //                }
                                                                        //                reject(result);

                                                                        //            }
                                                                        //        });

                                                                        //}

                                                                    } else {

                                                                        // Unexpected value for bwEmailNotificationFrequency. This should never happen, but perhaps the value was not populated during provisioning.
                                                                        var msg = 'Error in start.js.sendgrid.bwSend(). Unexpected value for pcResult.bwEmailNotificationFrequency: ' + pcResult.bwEmailNotificationFrequency + ', params.to: ' + params.to;
                                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.sendgrid.bwSend()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                        var result = {
                                                                            status: 'ERROR',
                                                                            message: msg
                                                                        }
                                                                        reject(result);

                                                                    }

                                                                }

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.sendgrid.bwSend():5xcx2354346. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.sendgrid.bwSend()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            reject(result);

                                                        }
                                                    });

                                                } else {

                                                    //
                                                    // Email sending is turned off. Save to the pending email table.
                                                    //

                                                    var msg = 'In start.js.sendgrid.bwSend(). Email sending is turned off. Save to the pending email table. bwEmailEnabled: ' + bwEmailEnabled + ', params.bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', wafResult: ' + JSON.stringify(wafResult);
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.sendgrid.bwSend()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                    var bwPendingEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                        return v.toString(16);
                                                    });
                                                    var timestamp = new Date();
                                                    var toParticipantEmail = params.to; //.replace('<', '&lt;').replace('>', '&gt;');
                                                    var bwPendingEmail = new BwPendingEmail(
                                                        {
                                                            bwPendingEmailId: bwPendingEmailId,
                                                            //bwTenantId: bwTenantId,
                                                            bwWorkflowAppId: params.bwWorkflowAppId_LoggedIn,
                                                            Timestamp: timestamp,
                                                            FromEmailAddress: fromEmailAddress,
                                                            ToParticipantId: params.ToParticipantId,
                                                            ToParticipantFriendlyName: params.ToParticipantFriendlyName,
                                                            ToParticipantEmail: params.to,
                                                            CcAddress: null,
                                                            BccAddress: null,
                                                            Subject: params.subject,
                                                            Body: params.html,
                                                            Result: null,
                                                            RelatedRequestId: RelatedRequestId
                                                        });
                                                    bwPendingEmail.save(function (error) {
                                                        try {
                                                            if (!error) {

                                                                var msg = 'In sendgrid.bwSend(). Saved new pending email entry for bwBudgetRequestId: ' + RelatedRequestId + ', params.bwWorkflowAppId_LoggedIn: ' + params.bwWorkflowAppId_LoggedIn + ', params.to: ' + params.to + ', params.subject: ' + params.subject;
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'xxfix start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);
                                                                console.log(msg);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg
                                                                }
                                                                resolve(result);

                                                            } else {

                                                                var msg = 'Error saving new pending email entry for bwBudgetRequestId: ' + RelatedRequestId + ' in sendEmailNotificationFromWorkflowTemplate(): ' + error;
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'xxfix start.js.sendgrid.bwSend()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg //'Error saving new pending email entry for bwBudgetRequestId: ' + RelatedRequestId + ', error: ' + error
                                                                }
                                                                reject(result);

                                                            }
                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.sendgrid.bwSend():4. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.sendgrid.bwSend()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            reject(result);

                                                        }
                                                    });
                                                }
                                            }
                                        } catch (e) {

                                            var msg = 'Exception in start.js.sendgrid.bwSend():3. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.sendgrid.bwSend()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        }
                                    });
                                }

                            }
                        } catch (e) {

                            var msg = 'Exception in start.js.sendgrid.bwSend():2. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.sendgrid.bwSend()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            reject(result);

                        }
                    });

                }

            }

        } catch (e) {

            var msg = 'Exception in start.js.sendgrid.bwSend():1. params.to: ' + params.to + ': ' + e.message + ', ' + e.stack;
            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
            var source = 'start.js.sendgrid.bwSend()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, params.bwWorkflowAppId_LoggedIn, params.bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    })
};


router.get('/_files/getstatusoffileservices', function (request, response) {
    try {
        var result = 'SUCCESS';
        response.send(result);
    } catch (e) {
        response.send('Error in GET /getstatusoffileservices:' + e.message);
    }
});

router.get('/_files/getfileserverdiskspace', function (request, response) {
    try {

        checkDiskSpace('/dev/sda2').then(function (diskSpace) {
            try {
                //  For example, results 3-24-2022: {"diskPath":"/","free":457131900928,"size":502467059712} 

                var free = diskSpace.free;
                var size = diskSpace.size;
                var available = size - free;

                var gb = Number(available / 1000000000).toFixed(1); // Note: `free` and `size` are in bytes
                diskSpace["available"] = gb;

                response.send(diskSpace);

            } catch (e) {

                var msg = 'Exception in getfileserverdiskspace():1: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'In GET /_files/getfileserverdiskspace()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                response.send(msg);

            }
        })

    } catch (e) {

        var msg = 'Exception in getfileserverdiskspace():2: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'In GET /_files/getfileserverdiskspace()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});

//router.get('/_files/getdiskspace', function (request, response) {
//    try {
//        console.log('In getdiskspace().');

//        var xx = checkDiskSpace('/mnt');

//        console.log('xx:' + xx);
//        //checkDiskSpace('/mnt/mygames').then((diskSpace) => {
//        //    console.log(diskSpace)
//        //    // {
//        //    //     diskPath: '/',
//        //    //     free: 12345678,
//        //    //     size: 98756432
//        //    // }
//        //    // Note: `free` and `size` are in bytes
//        //})


//        //checkDiskSpace('/mnt').then(function (diskSpace) {
//        //    console.log('getdiskspace: ' + diskSpace)
//        //    // {
//        //    //     diskPath: '/',
//        //    //     free: 12345678,
//        //    //     size: 98756432
//        //    // }
//        //    // Note: `free` and `size` are in bytes

//        //    //var result = 'SUCCESS';
//        //    response.send(diskSpace);

//        //}).catch(function(e) {

//        //    console.log('Exception in getdiskspace(): ' + e.message);

//        //});


//    } catch (e) {
//        response.send('Exception in GET /getdiskspace:' + e.message + ', ' + e.stack);
//    }
//});



function getAttachmentsItemizedForSendingWithEmail(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.getAttachmentsItemizedForSendingWithEmail().');

            var msg = 'In start.js.getAttachmentsItemizedForSendingWithEmail(). bwWorkflowAppId_LoggedIn: ' + bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + bwParticipantId_LoggedIn + ', _id: ' + _id;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            //
            // Reach out to the file system and find them.
            //   - We use 2 folders for each email, 'ATTACHMENTS' and 'INLINE'. This is a reflection of the contentDisposition, which is 'attachment' or 'inline'.
            //   - Therefore we have 2 methods, getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(), and getAttachmentsItemizedForSendingWithEmail_INLINE().
            //   - This is because we may want to handle inline attachments slightly differently than attachment attached files. 
            //

            getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id).then(function (results) {
                try {

                    if (results.status != 'SUCCESS') {

                        var msg = 'Error in start.js.getAttachmentsItemizedForSendingWithEmail(). Error returning from getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(): ' + results.status + ', ' + results.message;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        var attachments_ATTACHMENTS = results.attachments;

                        getAttachmentsItemizedForSendingWithEmail_INLINE(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id).then(function (results) {
                            try {

                                if (results.status != 'SUCCESS') {

                                    var msg = 'Error in start.js.getAttachmentsItemizedForSendingWithEmail(). Error returning from getAttachmentsItemizedForSendingWithEmail_INLINE(): ' + results.status + ', ' + results.message;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    reject(result);

                                } else {

                                    var attachments_INLINE = results.attachments;

                                    var result = {
                                        status: 'SUCCESS',
                                        message: 'SUCCESS',
                                        attachments_ATTACHMENTS: attachments_ATTACHMENTS,
                                        attachments_INLINE: attachments_INLINE
                                    }

                                    resolve(result);

                                }

                            } catch (e) {

                                var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail():5: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            }

                        }).catch(function (e) {

                            var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail():4: ' + JSON.stringify(e);
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            reject(result);

                        });

                    }

                } catch (e) {

                    var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail():3: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            }).catch(function (e) {

                var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail():2: ' + JSON.stringify(e);
                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                reject(result);

            });

        } catch (e) {

            var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}

function getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS().');

            var msg = 'In start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(). bwWorkflowAppId_LoggedIn: ' + bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + bwParticipantId_LoggedIn + ', _id: ' + _id;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            //
            // Reach out to the file system and find them! 
            //

            var budgetRequestFolderPath = rootFilePath_email + bwParticipantId_LoggedIn + '/' + _id + '/ATTACHMENTS';
            fs.readdir(budgetRequestFolderPath, function (err, files) {
                try {
                    if (err) {

                        if (String(err).indexOf('ENOENT: no such file or directory') > -1) {

                            //{"status":"ERROR","message":"Error in /_files/getlistofattachments_foremail. err: Error: ENOENT: no such file or directory, scandir 'public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/711acdab-f23e-414d-94b8-c3806657f314'"}

                            var result = {
                                status: 'SUCCESS',
                                message: 'There are no files and no directory.',
                                verboseMessage: 'There are no files and no directory: ' + budgetRequestFolderPath,
                                attachments: []
                            }

                            resolve(result);

                        } else {

                            var msg = 'Error in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(). err: ' + err;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                            console.log(msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }

                            reject(result);

                        }

                    } else {

                        if (files.length > 0) {

                            var data = [];
                            var metadataFileCounter = 0;
                            for (var i = 0; i < files.length; i++) {

                                //
                                // Make sure we filter out the .metadata files!!! We don't want these returned to the user.
                                //
                                // Note that this is a flat file system. We don't want subfolders, there are too many disadvantages to that approach.
                                //
                                //
                                // Now check if this is a _320px_ file or not... only display 320px ones.
                                //
                                var extensionIndex = files[i].split('.').length - 1;
                                var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];

                                //
                                // FileType is one of: METADATA, THUMBNAIL, FILE.
                                //
                                var fileType = 'FILE';
                                if (fileExtension == 'metadata') {
                                    fileType = 'METADATA';
                                }
                                var thumbnailSearchTextForImage = '_60px_.png'; // + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                    fileType = 'THUMBNAIL_60px';
                                }
                                var thumbnailSearchTextForImage = '_320px_.' + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                    fileType = 'THUMBNAIL_320px';
                                }
                                if (files[i].indexOf('_thumbnail_.png') > -1) {
                                    fileType = 'THUMBNAIL_video';
                                }
                                var thumbnailSearchTextForPdf = '_thumbnail_320px_pdf_.' + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForPdf) > -1) {
                                    fileType = 'THUMBNAIL_320px_PDF';
                                }

                                var printableImageSearchTextForImage = '_640x480px_.' + fileExtension;
                                if (files[i].indexOf(printableImageSearchTextForImage) > -1) {
                                    fileType = 'PRINTABLE_640x480px';
                                }
                                //
                                //

                                if (fileType == 'METADATA') {

                                    // This is a .metadata file.
                                    var metadataFilePath = budgetRequestFolderPath + '/' + files[i];

                                    var metaData = fs.readFileSync(metadataFilePath).toString();

                                    var description = '';
                                    var size = '';
                                    var birthtime = '';
                                    var bwParticipantId_old = '';
                                    var bwParticipantEmail = '';
                                    var bwParticipantFriendlyName = '';
                                    var FileConversionStatus = '';

                                    try {
                                        var json = JSON.parse(metaData);

                                        description = json.description;
                                        size = json.size;
                                        birthtime = json.birthtime;
                                        bwParticipantId_old = json.bwParticipantId;
                                        bwParticipantEmail = json.bwParticipantEmail;
                                        bwParticipantFriendlyName = json.bwParticipantFriendlyName;
                                        FileConversionStatus = json.FileConversionStatus;

                                    } catch (e) { }

                                    var fileEntry_Filename = files[i].split('.metadata')[0];

                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {
                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }
                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Description = description;
                                        data[fileEntryIndex].Size = size;
                                        data[fileEntryIndex].Birthtime = birthtime;
                                        data[fileEntryIndex].bwParticipantId = bwParticipantId_old;
                                        data[fileEntryIndex].bwParticipantEmail = bwParticipantEmail;
                                        data[fileEntryIndex].bwParticipantFriendlyName = bwParticipantFriendlyName;
                                        data[fileEntryIndex].tracking = 'changed xcx21342-1 METADATA, added metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath;
                                        data[fileEntryIndex].FileConversionStatus = FileConversionStatus;

                                    } else {

                                        var fileData = {
                                            Display_Filename: fileEntry_Filename,
                                            Actual_Filename: fileEntry_Filename,
                                            Description: description,
                                            Size: size,
                                            Birthtime: birthtime,
                                            bwParticipantId: bwParticipantId_old,
                                            bwParticipantEmail: bwParticipantEmail,
                                            bwParticipantFriendlyName: bwParticipantFriendlyName,
                                            tracking: 'added xcx21342-1 METADATA with its metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                            FoundSourceFile: false
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'PRINTABLE_640x480px') { // This is our printable size. For instance, when creating a PDF of receipts.

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_640x480px_.' + fileExtension;
                                    //var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        //thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Printable_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension;
                                        //data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Printable_Filename: files[i],
                                            //Display_Filename: files[i],
                                            //Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false//,
                                            //Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_60px') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_60px_.png'; // + fileExtension;
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_320px') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_320px_.' + fileExtension;
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_320px_PDF') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_thumbnail_320px_pdf_' + '.png';
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_video') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_thumbnail_.png';
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'FILE') {

                                    //
                                    //
                                    // WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023.
                                    //
                                    //

                                    var msg = 'In fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(). fileType: ' + fileType + '. THIS IS A WORK IN PROGRESS. WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023. xcx3994582.';
                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    console.log('');
                                    console.log('****************************');
                                    console.log('****************************');
                                    console.log(msg);
                                    console.log('****************************');
                                    console.log('****************************');
                                    console.log('');

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].tracking = 'changed xcx21342-4-1 FILE fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].FoundSourceFile = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-4-1 FILE fileExtension: ' + fileExtension + ', Display_Filename: ' + files[i] + ', Actual_Filename: ' + files[i],
                                            FoundSourceFile: true
                                        };
                                        data.push(fileData);

                                    }

                                } else {

                                    var msg = 'Error in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS(). Unexpected value for fileType: ' + fileType;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                                    console.log(msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    reject(result);

                                }

                            }

                            // Now we iterate through the data json and got rid of entries with FoundSourceFile = true.
                            var validFiles = [];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i].FoundSourceFile == true) {
                                    validFiles.push(data[i]);
                                }
                            }

                            //
                            // We are going to add a json property which is in lowercase, in order for us to do a proper alphabetical search.
                            //
                            for (var i = 0; i < validFiles.length; i++) {
                                var x = validFiles[i].Display_Filename.toLowerCase();
                                validFiles[i]["sortable_filename"] = x;
                            }

                            validFiles.sort(function (a, b) {
                                if (a.sortable_filename < b.sortable_filename) { return -1; }
                                if (a.sortable_filename > b.sortable_filename) { return 1; }
                                return 0;
                            });

                            // This is just for the returned message in case we nee some troubleshooting data on the client side.
                            var allActualFiles = [];
                            for (var j = 0; j < files.length; j++) {
                                allActualFiles.push(files[j]);
                            }

                            var draftEmailFolderPath = rootFilePath_email + bwParticipantId_LoggedIn + '/' + _id + '/' + 'ATTACHMENTS';

                            var attachments = [];

                            for (var i = 0; i < validFiles.length; i++) {

                                var pathToAttachment = draftEmailFolderPath + '/' + validFiles[i].Display_Filename;
                                var attachment = fs.readFileSync(pathToAttachment).toString('base64');
                                var json = {
                                    content: attachment,
                                    fileName: validFiles[i].Display_Filename,
                                    filename: validFiles[i].Display_Filename, // Sendgrid wants a lowercase filename. 7-4-2024.
                                    //type: "image/png", //  "application/pdf",
                                    contentType: 'image/png',
                                    contentDisposition: 'attachment',
                                    cid: validFiles[i].Display_Filename
                                }
                                attachments.push(json);
                            }

                            // There are attachments.
                            var result = {
                                status: 'SUCCESS',
                                message: 'There are attachments.',
                                attachments: attachments
                            }

                            resolve(result);


                        } else {

                            // There are no attachments.
                            var result = {
                                status: 'SUCCESS',
                                message: 'There are no attachments.',
                                attachments: []
                            }

                            resolve(result);

                        }

                    }

                } catch (e) {

                    var msg = 'Exception in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS():3: pathToAttachment: ' + pathToAttachment + ', validFiles: ' + JSON.stringify(validFiles) + ' :: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                    console.log(msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }
            });

        } catch (e) {

            var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail_ATTACHMENTS()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}
function getAttachmentsItemizedForSendingWithEmail_INLINE(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.getAttachmentsItemizedForSendingWithEmail_INLINE().');

            var msg = 'In start.js.getAttachmentsItemizedForSendingWithEmail_INLINE(). bwWorkflowAppId_LoggedIn: ' + bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + bwParticipantId_LoggedIn + ', _id: ' + _id;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            //
            // Reach out to the file system and find them! 
            //

            var budgetRequestFolderPath = rootFilePath_email + bwParticipantId_LoggedIn + '/' + _id + '/INLINE';
            fs.readdir(budgetRequestFolderPath, function (err, files) {
                try {
                    if (err) {

                        if (String(err).indexOf('ENOENT: no such file or directory') > -1) {

                            //{"status":"ERROR","message":"Error in /_files/getlistofattachments_foremail. err: Error: ENOENT: no such file or directory, scandir 'public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/711acdab-f23e-414d-94b8-c3806657f314'"}

                            var result = {
                                status: 'SUCCESS',
                                message: 'There are no files and no directory.',
                                verboseMessage: 'There are no files and no directory: ' + budgetRequestFolderPath,
                                attachments: []
                            }

                            resolve(result);

                        } else {

                            var msg = 'Error in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE(). err: ' + err;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                            console.log(msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }

                            reject(result);

                        }

                    } else {

                        if (files.length > 0) {

                            var data = [];
                            var metadataFileCounter = 0;
                            for (var i = 0; i < files.length; i++) {

                                //
                                // Make sure we filter out the .metadata files!!! We don't want these returned to the user.
                                //
                                // Note that this is a flat file system. We don't want subfolders, there are too many disadvantages to that approach.
                                //
                                //
                                // Now check if this is a _320px_ file or not... only display 320px ones.
                                //
                                var extensionIndex = files[i].split('.').length - 1;
                                var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];

                                //
                                // FileType is one of: METADATA, THUMBNAIL, FILE.
                                //
                                var fileType = 'FILE';
                                if (fileExtension == 'metadata') {
                                    fileType = 'METADATA';
                                }
                                var thumbnailSearchTextForImage = '_60px_.png'; // + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                    fileType = 'THUMBNAIL_60px';
                                }
                                var thumbnailSearchTextForImage = '_320px_.' + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                    fileType = 'THUMBNAIL_320px';
                                }
                                if (files[i].indexOf('_thumbnail_.png') > -1) {
                                    fileType = 'THUMBNAIL_video';
                                }
                                var thumbnailSearchTextForPdf = '_thumbnail_320px_pdf_.' + fileExtension;
                                if (files[i].indexOf(thumbnailSearchTextForPdf) > -1) {
                                    fileType = 'THUMBNAIL_320px_PDF';
                                }

                                var printableImageSearchTextForImage = '_640x480px_.' + fileExtension;
                                if (files[i].indexOf(printableImageSearchTextForImage) > -1) {
                                    fileType = 'PRINTABLE_640x480px';
                                }
                                //
                                //

                                if (fileType == 'METADATA') {

                                    // This is a .metadata file.
                                    var metadataFilePath = budgetRequestFolderPath + '/' + files[i];

                                    var metaData = fs.readFileSync(metadataFilePath).toString();

                                    var description = '';
                                    var size = '';
                                    var birthtime = '';
                                    var bwParticipantId_old = '';
                                    var bwParticipantEmail = '';
                                    var bwParticipantFriendlyName = '';
                                    var FileConversionStatus = '';

                                    try {
                                        var json = JSON.parse(metaData);

                                        description = json.description;
                                        size = json.size;
                                        birthtime = json.birthtime;
                                        bwParticipantId_old = json.bwParticipantId;
                                        bwParticipantEmail = json.bwParticipantEmail;
                                        bwParticipantFriendlyName = json.bwParticipantFriendlyName;
                                        FileConversionStatus = json.FileConversionStatus;

                                    } catch (e) { }

                                    var fileEntry_Filename = files[i].split('.metadata')[0];

                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {
                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }
                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Description = description;
                                        data[fileEntryIndex].Size = size;
                                        data[fileEntryIndex].Birthtime = birthtime;
                                        data[fileEntryIndex].bwParticipantId = bwParticipantId_old;
                                        data[fileEntryIndex].bwParticipantEmail = bwParticipantEmail;
                                        data[fileEntryIndex].bwParticipantFriendlyName = bwParticipantFriendlyName;
                                        data[fileEntryIndex].tracking = 'changed xcx21342-1 METADATA, added metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath;
                                        data[fileEntryIndex].FileConversionStatus = FileConversionStatus;

                                    } else {

                                        var fileData = {
                                            Display_Filename: fileEntry_Filename,
                                            Actual_Filename: fileEntry_Filename,
                                            Description: description,
                                            Size: size,
                                            Birthtime: birthtime,
                                            bwParticipantId: bwParticipantId_old,
                                            bwParticipantEmail: bwParticipantEmail,
                                            bwParticipantFriendlyName: bwParticipantFriendlyName,
                                            tracking: 'added xcx21342-1 METADATA with its metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                            FoundSourceFile: false
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'PRINTABLE_640x480px') { // This is our printable size. For instance, when creating a PDF of receipts.

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_640x480px_.' + fileExtension;
                                    //var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        //thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Printable_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension;
                                        //data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Printable_Filename: files[i],
                                            //Display_Filename: files[i],
                                            //Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false//,
                                            //Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_60px') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_60px_.png'; // + fileExtension;
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_320px') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_320px_.' + fileExtension;
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_320px_PDF') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_thumbnail_320px_pdf_' + '.png';
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'THUMBNAIL_video') {

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    // Formulate the filename we are searching for.
                                    var thumbnailSearchText = '_thumbnail_.png';
                                    var thisIsAThumbnailFile = false;
                                    if (files[i].indexOf(thumbnailSearchText) > -1) {
                                        // This file is a 320px thumbnail. 
                                        //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                        //   - The user can click on the thumbnail to see the larger resolution image.
                                        fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                        thisIsAThumbnailFile = true;
                                    }

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].Actual_Filename = files[i];
                                        data[fileEntryIndex].tracking = 'changed xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].Thumbnail = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension,
                                            FoundSourceFile: false,
                                            Thumbnail: true
                                        };
                                        data.push(fileData);

                                    }

                                } else if (fileType == 'FILE') {

                                    //
                                    //
                                    // WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023.
                                    //
                                    //

                                    var msg = 'In fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE(). fileType: ' + fileType + '. THIS IS A WORK IN PROGRESS. WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023. xcx3994582.';
                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    console.log('');
                                    console.log('****************************');
                                    console.log('****************************');
                                    console.log(msg);
                                    console.log('****************************');
                                    console.log('****************************');
                                    console.log('');

                                    // This is not a .metadata file.
                                    var fileEntry_Filename = files[i];

                                    //
                                    // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                    //
                                    var fileEntryAlreadyExists = false;
                                    var fileEntryIndex;
                                    for (var j = 0; j < data.length; j++) {

                                        if (data[j].Display_Filename == fileEntry_Filename) {
                                            fileEntryAlreadyExists = true;
                                            fileEntryIndex = j;
                                            break;
                                        }
                                    }

                                    if (fileEntryAlreadyExists == true) {

                                        data[fileEntryIndex].tracking = 'changed xcx21342-4-1 FILE fileExtension: ' + fileExtension;
                                        data[fileEntryIndex].FoundSourceFile = true;

                                    } else {

                                        var fileData = {
                                            Display_Filename: files[i],
                                            Actual_Filename: files[i],
                                            Description: '',
                                            Size: '',
                                            Birthtime: '',
                                            tracking: 'added xcx21342-4-1 FILE fileExtension: ' + fileExtension + ', Display_Filename: ' + files[i] + ', Actual_Filename: ' + files[i],
                                            FoundSourceFile: true
                                        };
                                        data.push(fileData);

                                    }

                                } else {

                                    var msg = 'Error in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE(). Unexpected value for fileType: ' + fileType;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                                    console.log(msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    reject(result);

                                }

                            }

                            // Now we iterate through the data json and got rid of entries with FoundSourceFile = true.
                            var validFiles = [];
                            for (var i = 0; i < data.length; i++) {
                                if (data[i].FoundSourceFile == true) {
                                    validFiles.push(data[i]);
                                }
                            }

                            //
                            // We are going to add a json property which is in lowercase, in order for us to do a proper alphabetical search.
                            //
                            for (var i = 0; i < validFiles.length; i++) {
                                var x = validFiles[i].Display_Filename.toLowerCase();
                                validFiles[i]["sortable_filename"] = x;
                            }

                            validFiles.sort(function (a, b) {
                                if (a.sortable_filename < b.sortable_filename) { return -1; }
                                if (a.sortable_filename > b.sortable_filename) { return 1; }
                                return 0;
                            });

                            // This is just for the returned message in case we nee some troubleshooting data on the client side.
                            var allActualFiles = [];
                            for (var j = 0; j < files.length; j++) {
                                allActualFiles.push(files[j]);
                            }

                            var draftEmailFolderPath = rootFilePath_email + bwParticipantId_LoggedIn + '/' + _id + '/' + 'INLINE';

                            var attachments = [];

                            for (var i = 0; i < validFiles.length; i++) {

                                var pathToAttachment = draftEmailFolderPath + '/' + validFiles[i].Display_Filename;
                                var attachment = fs.readFileSync(pathToAttachment).toString('base64');
                                var json = {
                                    content: attachment,
                                    fileName: validFiles[i].Display_Filename,
                                    filename: validFiles[i].Display_Filename, // Sendgrid wants a lowercase filename. 7-4-2024.
                                    //type: "image/png", //  "application/pdf",
                                    contentType: 'image/png',
                                    contentDisposition: 'attachment',
                                    cid: validFiles[i].Display_Filename
                                }
                                attachments.push(json);
                            }

                            // There are attachments.
                            var result = {
                                status: 'SUCCESS',
                                message: 'There are attachments.',
                                attachments: attachments
                            }

                            resolve(result);


                        } else {

                            // There are no attachments.
                            var result = {
                                status: 'SUCCESS',
                                message: 'There are no attachments.',
                                attachments: []
                            }

                            resolve(result);

                        }

                    }

                } catch (e) {

                    var msg = 'Exception in fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE():3: pathToAttachment: ' + pathToAttachment + ', validFiles: ' + JSON.stringify(validFiles) + ' :: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'fileservices.start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);
                    console.log(msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }
            });

        } catch (e) {

            var msg = 'Exception in start.js.getAttachmentsItemizedForSendingWithEmail_INLINE():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getAttachmentsItemizedForSendingWithEmail_INLINE()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}

router.post('/_files/sendsingleemailnow', function (request, response) {
    try {
        console.log('In fileservices.start.js.sendsingleemailnow().');

        //
        // THIS IS WHERE SINGLE EMAILS GET SENT FROM USERS. Lots of email and user authorization to happen here...... for the time being, we will just let me do it. 2-7-2023. COMMENTED OUT FOR NOW<<<<<<<<<
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /sendsingleemailnow().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwParticipantId = request.body.bwParticipantId;

                    var _id = request.body._id;

                    var to = request.body.to;
                    //try {
                    //    to = request.body.To.split(';'); // This creates the array required to send to multiple recipients.
                    //} catch(e) {}

                    //var to = request.body.To.split(';'); // This creates the array required to send to multiple recipients.
                    var from = request.body.from;
                    var subject = request.body.subject;
                    var body = request.body.body;

                    if (!(bwWorkflowAppId_LoggedIn && bwParticipantId_LoggedIn && to && subject && body)) {

                        var msg = '';
                        if (!to) {

                            msg = 'Invalid email address "' + JSON.stringify(to) + '".';

                            var result = {
                                status: 'INVALID_PARAMETER',
                                message: msg
                            }
                            response.send(result);

                        } else if (!subject) {

                            msg = 'Invalid subject line "' + JSON.stringify(subject) + '".';

                            var result = {
                                status: 'INVALID_PARAMETER',
                                message: msg
                            }
                            response.send(result);

                        } else if (!body) {

                            msg = 'Invalid body content "' + JSON.stringify(body) + '".';

                            var result = {
                                status: 'INVALID_PARAMETER',
                                message: msg
                            }
                            response.send(result);

                        } else {

                            msg = 'Error in fileservices.start.js.sendsingleemailnow(). Invalid values(s), the email cannot be sent. request.body: ' + JSON.stringify(request.body);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            response.send(result);

                        }

                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                        var source = 'fileservices.start.js.sendsingleemailnow()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                    } else {

                        var msg = 'In fileservices.start.js.sendsingleemailnow(). _id: ' + _id + ', to: ' + to + ', from: ' + from;
                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                        var source = 'fileservices.start.js.sendsingleemailnow()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                        if (!_id || (_id == 'NEW_EMAIL')) { // This means there are no attachments, because when the first attachment is added, a _id gets issued.

                            sendgrid.bwSend({
                                bwWorkflowAppId_LoggedIn: bwWorkflowAppId_LoggedIn,
                                bwParticipantId_LoggedIn: bwParticipantId_LoggedIn,
                                to: to,
                                from: from,
                                subject: subject,
                                html: body

                                //bwWorkflowAppId: bwWorkflowAppId
                                //ToParticipantFriendlyName: '',
                                //ToParticipantId: '',
                                //ToParticipantEmail: ''
                                //AParticipantIsSendingThisEmail: true
                            }).then(function (results) {
                                try {
                                    if (results.status != 'SUCCESS') {

                                        if (results.status == 'INVALID_EMAIL_ADDRESS') {

                                            var result = {
                                                status: 'INVALID_EMAIL_ADDRESS',
                                                message: results.message
                                            };
                                            response.send(result);

                                        } else {

                                            var msg = 'In fileservices.start.js.sendsingleemailnow(). There was an error emailing ' + to + ':2: ' + results.status + ', ' + results.message;
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'fileservices.start.js.sendsingleemailnow()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                            var result = {
                                                status: 'ERROR',
                                                message: msg
                                            };
                                            response.send(result);

                                        }

                                    } else {

                                        var msg = 'In fileservices.start.js.sendsingleemailnow(). Successfully returned from sendgrid.bwSend(). _id == [NEW_EMAIL] xcx2131312-1. from: ' + from + ', to ' + to + ':"' + subject + '". _id: ' + _id;
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                        var result = {
                                            status: 'SUCCESS',
                                            message: msg
                                        }
                                        response.send(result);

                                    }

                                } catch (e) {

                                    var msg = 'Exception in fileservices.start.js.sendsingleemailnow():5: ' + e.message + ', ' + e.stack;
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    var result = {
                                        status: 'EXCEPTION',
                                        message: msg
                                    }
                                    response.send(result);

                                }

                            }).catch(function (e) {

                                var msg = 'Exception in fileservices.start.js.sendsingleemailnow():4: ' + JSON.stringify(e);
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'fileservices.start.js.sendsingleemailnow()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            });

                        } else {

                            //
                            // We may have attachments.
                            //

                            //
                            //
                            // ADDING ATTACHMENTS FUNCTIONALITY. 4-25-2024.
                            //
                            //

                            // pathToAttachment = `${__dirname}/attachment.pdf`;
                            // attachment = fs.readFileSync(pathToAttachment).toString("base64");

                            // const msg = {
                            //   to: 'test@example.com',
                            //   from: 'test@example.com',
                            //   subject: 'Sending with SendGrid is Fun',
                            //   text: 'and easy to do anywhere, even with Node.js',
                            //   attachments: [
                            //     {
                            //       content: attachment,
                            //       filename: "attachment.pdf",
                            //       type: "application/pdf",
                            //       disposition: "attachment"
                            //     }
                            //   ]
                            // };


                            //
                            //
                            // WE HAVE TO LOOK IN 2 FOLDERS: ['files_attached', 'files_inline']
                            //
                            //

                            // var FILE_ATTACHMENT_TYPE = request.body.FILE_ATTACHMENT_TYPE; // ['files_attached', 'files_inline']

                            //
                            //
                            // WE SEND THE ATTACHMENTS THIS WAY. THIS DOES NOT INCLUDE INLINE ONES. 5-28-2024.
                            //
                            //

                            var msg = 'In fileservices.start.js.sendsingleemailnow(). LOOKING FOR ATTACHMENTS PRIOR TO SENDING EMAIL.';
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'fileservices.start.js.sendsingleemailnow()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            console.log(msg);

                            getAttachmentsItemizedForSendingWithEmail(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id).then(function (results) {
                                try {

                                    if (results.status != 'SUCCESS') {

                                        var msg = 'Error in fileservices.start.js.sendsingleemailnow(). Response from getAttachmentsItemizedForSendingWithEmail(): ' + results.status + ', ' + results.message;
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    } else {

                                        var attachments = [];

                                        if (results.attachments_ATTACHMENTS && results.attachments_ATTACHMENTS.length && (results.attachments_ATTACHMENTS.length > 0)) {
                                            for (var i = 0; i < results.attachments_ATTACHMENTS.length; i++) {
                                                attachments.push(results.attachments_ATTACHMENTS[i]);
                                            }
                                        }

                                        if (results.attachments_INLINE && results.attachments_INLINE.length && (results.attachments_INLINE.length > 0)) {
                                            for (var i = 0; i < results.attachments_INLINE.length; i++) {
                                                attachments.push(results.attachments_INLINE[i]);
                                            }
                                        }

                                        //var msg = 'In fileservices.start.js.sendsingleemailnow(). Successfully sent email and saved to the BwSentEmail table. attachments.length: ' + attachments.length + '. from: ' + from + ', to ' + to + ':"' + subject + '". xcx2131312-1. _id: ' + _id + ', attachments: ' + JSON.stringify(attachments);
                                        //var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        //var source = 'fileservices.start.js.sendsingleemailnow()';
                                        //var errorCode = null;
                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                        //var result = {
                                        //    status: 'TESTING', //'SUCCESS',
                                        //    message: msg
                                        //}
                                        //response.send(result);

                                        var message;
                                        if (attachments && attachments.length && (attachments.length > 0)) {

                                            message = {
                                                bwWorkflowAppId_LoggedIn: bwWorkflowAppId_LoggedIn,
                                                bwParticipantId_LoggedIn: bwParticipantId_LoggedIn,
                                                to: to,
                                                from: from,
                                                subject: subject,
                                                html: body,

                                                bwWorkflowAppId: bwWorkflowAppId,
                                                ToParticipantFriendlyName: '',
                                                ToParticipantId: '',
                                                ToParticipantEmail: '',
                                                //AParticipantIsSendingThisEmail: true
                                                bwDraftEmailId: _id,

                                                attachments: attachments
                                            }

                                        } else {

                                            message = {
                                                bwWorkflowAppId_LoggedIn: bwWorkflowAppId_LoggedIn,
                                                bwParticipantId_LoggedIn: bwParticipantId_LoggedIn,
                                                to: to,
                                                from: from,
                                                subject: subject,
                                                html: body,

                                                bwWorkflowAppId: bwWorkflowAppId,
                                                ToParticipantFriendlyName: '',
                                                ToParticipantId: '',
                                                ToParticipantEmail: '',
                                                //AParticipantIsSendingThisEmail: true
                                                bwDraftEmailId: _id
                                            }

                                        }

                                        var promise = sendgrid.bwSend(message);
                                        promise.then(function (results) {
                                            try {
                                                if (results.status != 'SUCCESS') {

                                                    var msg = 'In fileservices.start.js.sendsingleemailnow(). There was an error emailing ' + to + ':2: ' + results.status + ', ' + results.message;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    };
                                                    response.send(result);

                                                } else {

                                                    var msg = 'In fileservices.start.js.sendsingleemailnow(). Successfully sent email and saved to the BwSentEmail table. attachments.length: ' + attachments.length + '. from: ' + from + ', to ' + to + ':"' + subject + '". xcx2131312-1. _id: ' + _id;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                    //
                                                    //
                                                    // IF WE SENT ANY ATTACHMENTS, WE HAVE TO RENAME THE FOLDER HERE TO THE [bwEmailId: bwSentEmailId], so that it shows up in our "Sent Items" list in the UI.
                                                    //   - 
                                                    //
                                                    //

                                                    var new__id = results._id;

                                                    if (!new__id) {

                                                        var msg = 'Error in fileservices.start.js.sendsingleemailnow(). new__id: ' + new__id + ', results: ' + JSON.stringify(results);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        response.send(result);


                                                    } else {

                                                        var msg = 'In fileservices.start.js.sendsingleemailnow(). xcx34234364. new__id: ' + new__id + ', results: ' + JSON.stringify(results);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                        //
                                                        //
                                                        // IF WE SENT ANY ATTACHMENTS, WE HAVE TO RENAME THE FOLDER HERE TO THE [new__id], so that it shows up in our "Sent Items" list in the UI.
                                                        //   -
                                                        //
                                                        //

                                                        if (attachments && attachments.length && (attachments.length > 0)) {

                                                            var originPath = "public/_files/_emailAttachments/" + bwParticipantId_LoggedIn + "/" + _id;
                                                            var destinationPath = "public/_files/_emailAttachments/" + bwParticipantId_LoggedIn + "/" + new__id;

                                                            var msg = 'In fileservices.start.js.sendsingleemailnow(). Email sent successfully. Copying to sent items folder. originPath: ' + originPath + ', destinationPath: ' + destinationPath;
                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                            var source = 'fileservices.start.js.sendsingleemailnow()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                            var emailattachmentsFolderPath = rootFilePath + '_emailAttachments';
                                                            var mkdirEmailAttachments = function (emailattachmentsFolderPath) {
                                                                try {
                                                                    fs.mkdirSync(emailattachmentsFolderPath);
                                                                } catch (e) {
                                                                    if (e.code != 'EEXIST') throw e;
                                                                }
                                                            }

                                                            var participantFolderPath = emailattachmentsFolderPath + '/' + bwParticipantId_LoggedIn;
                                                            var mkdirParticipant = function (participantFolderPath) {
                                                                try {
                                                                    fs.mkdirSync(participantFolderPath);
                                                                } catch (e) {
                                                                    if (e.code != 'EEXIST') throw e;
                                                                }
                                                            }

                                                            var emailFolderPath = participantFolderPath + '/' + new__id;
                                                            var mkdirEmail = function (emailFolderPath) {
                                                                try {
                                                                    fs.mkdirSync(emailFolderPath);
                                                                } catch (e) {
                                                                    if (e.code != 'EEXIST') throw e;
                                                                }
                                                            }

                                                            mkdirEmailAttachments(emailattachmentsFolderPath);
                                                            mkdirParticipant(participantFolderPath);
                                                            mkdirEmail(emailFolderPath);

                                                            fs.copy(originPath, destinationPath, function (err) {
                                                                try {

                                                                    if (err) {

                                                                        var msg = 'Error in fileservices.start.js.sendsingleemailnow.fs.copy(). err: ' + err;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                        var result = {
                                                                            status: 'ERROR',
                                                                            message: msg
                                                                        }
                                                                        response.send(result);

                                                                    } else {

                                                                        var msg = 'In fileservices.start.js.sendsingleemailnow(). Email sent successfully. Copy to sent items folder saved successfully. Preparing to remove source folder: ' + originPath;

                                                                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                        var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                        fs.rmdir(originPath, { recursive: true, force: true }, function (err) {
                                                                            try {
                                                                                if (err) {

                                                                                    var msg = 'Error in fileservices.start.js.sendsingleemailnow(). Error deleting the folder: ' + originPath + '. err: ' + err;
                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: msg
                                                                                    }
                                                                                    response.send(result);

                                                                                } else {

                                                                                    var msg = 'In fileservices.start.js.sendsingleemailnow(). Email sent successfully. Copy to sent items folder saved successfully, and source folder removed. originPath: ' + originPath;

                                                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                                    var result = {
                                                                                        status: 'SUCCESS',
                                                                                        message: msg
                                                                                    }
                                                                                    response.send(result);

                                                                                }

                                                                            } catch (e) {

                                                                                var msg = 'Exception in fileservices.start.js.sendsingleemailnow():8xcx: ' + e.message + ', ' + e.stack;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                                                var result = {
                                                                                    status: 'EXCEPTION',
                                                                                    message: msg
                                                                                }
                                                                                response.send(result);

                                                                            }
                                                                        });

                                                                    }

                                                                } catch (e) {

                                                                    var msg = 'Exception in fileservices.start.js.sendsingleemailnow.fs.copy():2: ' + e.message + ', ' + e.stack;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                    var result = {
                                                                        status: 'EXCEPTION',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                }
                                                            });

                                                        } else {

                                                            // No attachments.

                                                            var msg = 'In fileservices.start.js.sendsingleemailnow(). Email sent successfully. No attachmentss to copy to sent items folder.';

                                                            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                            var source = 'fileservices.start.js.sendsingleemailnow()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                            var result = {
                                                                status: 'SUCCESS',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }

                                                    }

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in fileservices.start.js.sendsingleemailnow():5: ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'fileservices.start.js.sendsingleemailnow()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);

                                            }

                                        }).catch(function (e) {

                                            var msg = 'Exception in fileservices.start.js.sendsingleemailnow():4: ' + JSON.stringify(e);
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'fileservices.start.js.sendsingleemailnow()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        });

                                    }

                                } catch (e) {

                                    var msg = 'Exception in fileservices.start.js.sendsingleemailnow():4-12: ' + e.message + ', ' + e.stack;
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.sendsingleemailnow()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    var result = {
                                        status: 'EXCEPTION',
                                        message: msg
                                    }
                                    response.send(result);

                                }

                            }).catch(function (e) {

                                var msg = 'Exception in fileservices.start.js.sendsingleemailnow():4-22: ' + JSON.stringify(e);
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'fileservices.start.js.sendsingleemailnow()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            });

                        }

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /sendsingleemailnow().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in fileservices.start.js.sendsingleemailnow():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                var source = 'fileservices.start.js.sendsingleemailnow()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in fileservices.start.js.sendsingleemailnow():2: ' + JSON.stringify(e);
            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
            var source = 'fileservices.start.js.sendsingleemailnow()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in fileservices.start.js.sendsingleemailnow(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
        var source = 'fileservices.start.js.sendsingleemailnow()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }

});



router.post('/_files/savedraftemail', function (request, response) {
    try {
        console.log('In fileservices.start.js.savedraftemail().');

        //
        // This is the web service which is called when a user wants to save a draft email.
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant'); //'Forest Administrator');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /savedraftemail().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var _id = request.body._id; // If this is valid, the web service will resave the draft, instead of creating a new one.

                    //var bwEmailId = request.body.bwEmailId;
                    var bwParticipantId = request.body.bwParticipantId;
                    //timestamp: new Date(),
                    var from = request.body.from;
                    var to = request.body.to;
                    var cc = request.body.cc;
                    var bcc = request.body.bcc;
                    var subject = request.body.subject;
                    var html = request.body.html;

                    if (!_id) {
                        _id = null; // This is just so the [BwDraftEmail.findOne({ _id: _id }] will execute. Not the best maybe, but it works for now. In the future fixing this will get potentially get rid of this hit on the database.
                    }

                    if (_id == 'NEW_EMAIL') {

                        // Save.
                        var bwEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                            return v.toString(16);
                        });
                        var bwDraftEmail = new BwDraftEmail(
                            {
                                bwEmailId: bwEmailId,
                                bwParticipantId: bwParticipantId,
                                timestamp: new Date(), // Every time a draft gets saved, we update the timestamp.
                                from: from,
                                to: to,
                                cc: cc,
                                bcc: bcc,
                                subject: subject,
                                html: html


                            }
                        );
                        bwDraftEmail.save(function (desError, bwDraftEmail1) {
                            try {

                                if (desError) {

                                    var msg = 'Error in fileservices.start.js.savedraftemail() saving to BwDraftEmail table. desError: ' + desError;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.savedraftemail()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    var msg = 'In fileservices.start.js.savedraftemail(). Draft email saved successfully.';

                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    var source = 'fileservices.start.js.savedraftemail()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'SUCCESS',
                                        message: msg,
                                        bwDraftEmail: { _id: bwDraftEmail1._id } // Need to return this so the UI can keep track of the draft emails, and also get the _id if this is the first time saving this draft email.
                                    }
                                    response.send(result);

                                }

                            } catch (e) {

                                var msg = 'Exception in fileservices.start.js.savedraftemail():5: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'fileservices.start.js.savedraftemail()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }

                        });

                    } else {

                        BwDraftEmail.findOne({ _id: _id }, function (defError, defResult) {
                            try {

                                if (defError) {

                                    var msg = 'Error in fileservices.start.js.savedraftemail(). defError: ' + defError;

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    // Get the attachments itemized. 7-17-2024.

                                    getAttachmentsItemizedForSendingWithEmail(bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn, _id).then(function (results) {
                                        try {

                                            if (results.status != 'SUCCESS') {

                                                var msg = 'Error in fileservices.start.js.savedraftemail(). Response from getAttachmentsItemizedForSendingWithEmail(): ' + results.status + ', ' + results.message;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'fileservices.start.js.savedraftemail()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);

                                            } else {

                                                var attachments = [];

                                                if (results.attachments_ATTACHMENTS && results.attachments_ATTACHMENTS.length && (results.attachments_ATTACHMENTS.length > 0)) {
                                                    for (var i = 0; i < results.attachments_ATTACHMENTS.length; i++) {
                                                        attachments.push(results.attachments_ATTACHMENTS[i]);
                                                    }
                                                }

                                                if (results.attachments_INLINE && results.attachments_INLINE.length && (results.attachments_INLINE.length > 0)) {
                                                    for (var i = 0; i < results.attachments_INLINE.length; i++) {
                                                        attachments.push(results.attachments_INLINE[i]);
                                                    }
                                                }

                                                // At this point we have a valid attachments variable.

                                                if (!defResult) {

                                                    // Save.

                                                    var bwEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                        return v.toString(16);
                                                    });
                                                    var bwDraftEmail = new BwDraftEmail(
                                                        {
                                                            bwEmailId: bwEmailId,
                                                            bwParticipantId: bwParticipantId,
                                                            timestamp: new Date(), // Every time a draft gets saved, we update the timestamp.
                                                            from: from,
                                                            to: to,
                                                            cc: cc,
                                                            bcc: bcc,
                                                            subject: subject,
                                                            html: html,
                                                            attachments: attachments
                                                        }
                                                    );
                                                    bwDraftEmail.save(function (desError, bwDraftEmail1) {
                                                        try {

                                                            if (desError) {

                                                                var msg = 'Error in fileservices.start.js.savedraftemail() saving to BwDraftEmail table. desError: ' + desError;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'fileservices.start.js.savedraftemail()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                var msg = 'In fileservices.start.js.savedraftemail(). Draft email saved successfully. _id: ' + _id;

                                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                var source = 'fileservices.start.js.savedraftemail()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg,
                                                                    bwDraftEmail: { _id: bwDraftEmail1._id }
                                                                }
                                                                response.send(result);

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in fileservices.start.js.savedraftemail():5: ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'fileservices.start.js.savedraftemail()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }

                                                    });

                                                } else {

                                                    // Update.
                                                    //BwDraftEmail.updateOne({ _id: _id }, { FromEmailAddress: FromEmailAddress, Recipients: Recipients, CcAddress: CcAddress, BccAddress: BccAddress, Subject: Subject, Body: Body, Modified: new Date(), ModifiedById: bwParticipantId, ModifiedByFriendlyName: bwParticipantFriendlyName, ModifiedByEmail: bwParticipantEmail }, function (deuError, deuMod) {
                                                    BwDraftEmail.updateOne({ _id: _id }, { bwParticipantId: bwParticipantId, from: from, to: to, cc: cc, bcc: bcc, subject: subject, html: html, attachments: attachments, timestamp: new Date() }, function (deuError, deuMod) {
                                                        try {

                                                            if (deuError) {

                                                                var msg = 'Error in fileservices.start.js.savedraftemail.BwDraftEmail.updateOne(). deuError: ' + deuError;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'fileservices.start.js.savedraftemail()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                var msg = 'In fileservices.start.js.savedraftemail(). Succesfully updated the BwDraftEmail table. deuMod: ' + JSON.stringify(deuMod);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg,
                                                                    bwDraftEmail: { _id: _id }

                                                                }
                                                                response.send(result);

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in fileservices.start.js.savedraftemail():6: ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'fileservices.start.js.savedraftemail()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }

                                                    });

                                                }

                                            }

                                        } catch (e) {

                                            var msg = 'Exception in fileservices.start.js.savedraftemail():5: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'fileservices.start.js.savedraftemail()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    });

                                }

                            } catch (e) {

                                var msg = 'Exception in fileservices.start.js.savedraftemail():4: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'fileservices.start.js.savedraftemail()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }

                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /savedraftemail().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in fileservices.start.js.savedraftemail():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'fileservices.start.js.savedraftemail()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in fileservices.start.js.savedraftemail():2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'fileservices.start.js.savedraftemail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in fileservices.start.js.savedraftemail(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'fileservices.start.js.savedraftemail()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});



router.post('/_files/createdraftemailreply', function (request, response) { // savedraftemail
    try {
        console.log('In start.js.createdraftemailreply().');

        //
        // This is the web service which is called when a user wants to reply to an email. 
        //   - copy all the attachments to the new/draft email. 
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant'); //'Forest Administrator');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /createdraftemailreply().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var originalEmail__id = request.body.originalEmail__id; // If this is valid, the web service will copy the email and attachments, and save it in the BwDraftEmail table.

                    if (!originalEmail__id) {

                        var msg = 'Error in start.js.createdraftemailreply(). Unexpected value for originalEmail__id: ' + originalEmail__id;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.createdraftemailreply()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        response.send(result);

                    } else {

                        email_incoming_haraka.findOne({ _id: originalEmail__id }, function (defError, defResult) {
                            try {

                                if (defError) {

                                    var msg = 'Error in start.js.createdraftemailreply(). defError: ' + defError;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.createdraftemailreply()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    if (!(defResult && defResult._id)) {

                                        var msg = 'Error in start.js.createdraftemailreply(). Unexpected value for defResult: ' + defResult;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.createdraftemailreply()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }
                                        response.send(result);

                                    } else {

                                        //
                                        // We have confirmed that the origin email exists.
                                        //   - Now we have to create the new/draft email, so that we get a value for _id.
                                        //   - Then we have to copy over any attachments.
                                        //

                                        var bwDraftEmail = new BwDraftEmail(
                                            {
                                                bwParticipantId: bwParticipantId_LoggedIn,
                                                timestamp: new Date(), // Every time a draft gets saved, we update the timestamp.
                                                from: defResult.from,
                                                to: defResult.to,
                                                cc: defResult.cc,
                                                bcc: defResult.bcc,
                                                subject: defResult.subject,
                                                html: defResult.html,
                                                attachments: defResult.attachments
                                                //TheUserHasReadThisEmail: false,
                                                //ThisEmailIsFromAnInternalSource: true // INTERNAL <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< means attachments are stored on fileservices server.
                                            });
                                        bwDraftEmail.save(function (error, mod) {
                                            try {
                                                if (error) {

                                                    var msg = 'Error in start.js.createdraftemailreply().bwDraftEmail.save(). xcx2312312-1. error: ' + error;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.createdraftemailreply()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                } else {

                                                    // We reuse the defResult object, correcting the _id. This saves us another hit on the databaase. We return defResult below when status is a 'SUCCESS'.
                                                    defResult["_id"] = mod._id;

                                                    var msg = 'In start.js.createdraftemailreply().bwDraftEmail.save(). SETTING _id FROM mod RETURNED FROM NEW RECORD CREATION. mod._id: ' + mod._id;
                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.createdraftemailreply()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                    if (!(defResult.attachments && defResult.attachments.length && (defResult.attachments.length > 0))) {

                                                        //
                                                        // There are no attachments, so just respond with the new _id.
                                                        //

                                                        var msg = 'In start.js.createdraftemailreply(). Draft email saved successfully. There are no attachments. mod: ' + JSON.stringify(mod);
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.createdraftemailreply()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: msg,
                                                            bwDraftEmail: defResult
                                                        }
                                                        response.send(result);

                                                    } else {

                                                        //
                                                        // Copy over any attachments.
                                                        //

                                                        var msg = 'In start.js.createdraftemailreply(). Draft email saved successfully. There are attachments. mod._id: ' + mod._id;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.createdraftemailreply()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                        var originPath = "public/_files/_emailAttachments/" + bwParticipantId_LoggedIn + "/" + originalEmail__id;
                                                        var destinationPath = "public/_files/_emailAttachments/" + bwParticipantId_LoggedIn + "/" + mod._id;

                                                        var msg = 'In start.js.createdraftemailreply(). Draft email saved successfully. originPath: ' + originPath + ', destinationPath: ' + destinationPath;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.createdraftemailreply()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                        var emailattachmentsFolderPath = rootFilePath + '_emailAttachments';
                                                        var mkdirEmailAttachments = function (emailattachmentsFolderPath) {
                                                            try {
                                                                fs.mkdirSync(emailattachmentsFolderPath);
                                                            } catch (e) {
                                                                if (e.code != 'EEXIST') throw e;
                                                            }
                                                        }

                                                        var participantFolderPath = emailattachmentsFolderPath + '/' + bwParticipantId_LoggedIn;
                                                        var mkdirParticipant = function (participantFolderPath) {
                                                            try {
                                                                fs.mkdirSync(participantFolderPath);
                                                            } catch (e) {
                                                                if (e.code != 'EEXIST') throw e;
                                                            }
                                                        }

                                                        var emailFolderPath = participantFolderPath + '/' + mod._id;
                                                        var mkdirEmail = function (emailFolderPath) {
                                                            try {
                                                                fs.mkdirSync(emailFolderPath);
                                                            } catch (e) {
                                                                if (e.code != 'EEXIST') throw e;
                                                            }
                                                        }

                                                        mkdirEmailAttachments(emailattachmentsFolderPath);
                                                        mkdirParticipant(participantFolderPath);
                                                        mkdirEmail(emailFolderPath);

                                                        fs.copy(originPath, destinationPath, function (err) {
                                                            try {

                                                                if (err) {

                                                                    var msg = 'Error in start.js.createdraftemailreply.fs.copy(). err: ' + err;
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.createdraftemailreply()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                } else {

                                                                    var msg = 'In start.js.createdraftemailreply(). Draft email saved successfully.';

                                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.createdraftemailreply()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg,
                                                                        bwDraftEmail: defResult
                                                                    }
                                                                    response.send(result);

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.createdraftemailreply.fs.copy():2: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.createdraftemailreply()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            }
                                                        });

                                                    }

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in start.js.createdraftemailreply.bwDraftEmail.save(). xcx213134123: ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.createdraftemailreply()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);

                                            }
                                        });

                                    }

                                }

                            } catch (e) {

                                var msg = 'Exception in start.js.createdraftemailreply():4: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.createdraftemailreply()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }

                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /createdraftemailreply().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.createdraftemailreply():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.createdraftemailreply()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.createdraftemailreply():2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.createdraftemailreply()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.createdraftemailreply(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.createdraftemailreply()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});




function getMetadataFilesAndFilenameSearchResults_ForRequest(bwBudgetRequestId, requestFolderPath, searchTerm_Lowercase) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.getMetadataFilesAndFilenameSearchResults_ForRequest(). requestFolderPath: ' + requestFolderPath);

            fs.readdir(requestFolderPath, function (brError, brFiles) {
                try {

                    if (brError) {

                        var msg = 'Error in In getMetadataFilesAndFilenameSearchResults_ForRequest().fs.readdir(). Error listing the files in requestFolderPath: ' + requestFolderPath + ': ' + brError;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js._files/getsearchresults_forfiles()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        var searchResults = [];
                        var metadataFileArray = [];

                        for (var i = 0; i < brFiles.length; i++) {

                            // First, we search the file name for a match.
                            if (String(brFiles[i]).toLowerCase().indexOf(searchTerm_Lowercase) > -1) {
                                if (!(searchResults.indexOf(bwBudgetRequestId) > -1)) {
                                    searchResults.push(bwBudgetRequestId);
                                }
                            }

                            // Then we get the .metadata files, which we will search later on, all at once.
                            if (String(brFiles[i]).indexOf('.metadata') > -1) {

                                var metadataFile = {
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filepath: requestFolderPath + '/' + brFiles[i]
                                }
                                metadataFileArray.push(metadataFile);

                            }
                        }

                        //
                        //
                        // We have a list of .metadata files in metadataFileArray. We need to inspect the contents of each file for our search term.
                        //
                        //

                        var results1 = {
                            searchResults: searchResults,
                            metadataFileArray: metadataFileArray
                        }

                        var result = {
                            status: 'SUCCESS',
                            message: 'SUCCESS',
                            results: results1
                        }
                        resolve(result);


                        ///////////////////////////////////////////////////////////////// <<<<<<<<<<<<<<<<<<<<It works above this line.



                    }

                } catch (e) {

                    var msg = 'Exception in start.js.getMetadataFilesAndFilenameSearchResults_ForRequest():xcx213123: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            });

        } catch (e) {

            var msg = 'Exception in start.js.getMetadataFilesAndFilenameSearchResults_ForRequest():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}


function bwCheckFileForSearchTerm(bwBudgetRequestId, filepath, searchterm) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.bwCheckFileForSearchTerm(). bwBudgetRequestId: ' + bwBudgetRequestId + ', filepath: ' + filepath);

            // var result = {
            //    status: 'SUCCESS',
            //    message: 'SUCCESS',
            //    results: []
            //}
            //resolve(result);

            fs.readFile(filepath, function (error, data) {
                try {

                    if (error) {

                        var msg = 'Error in start.js.bwCheckFileForSearchTerm(). error: ' + error;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.bwCheckFileForSearchTerm()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        var re = new RegExp(searchterm, 'i');
                        var searchResult = String(data).match(re);

                        if (searchResult) {

                            var msg = 'In start.js.bwCheckFileForSearchTerm(). xcx111234. bwBudgetRequestId: ' + bwBudgetRequestId + '. searchResult: ' + searchResult + ', filepath: ' + filepath;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.bwCheckFileForSearchTerm()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'SUCCESS',
                                message: 'SUCCESS',
                                results: bwBudgetRequestId
                            }
                            resolve(result);

                        } else {

                            var result = {
                                status: 'SUCCESS',
                                message: 'SUCCESS',
                                results: null
                            }
                            resolve(result);

                        }

                    }

                } catch (e) {

                    var msg = 'Exception in start.js.bwCheckFileForSearchTerm():2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.bwCheckFileForSearchTerm()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            });

        } catch (e) {

            var msg = 'Exception in start.js.bwCheckFileForSearchTerm():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.bwCheckFileForSearchTerm()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}


router.post('/_files/getsearchresults_forfiles', function (request, response) {
    try {
        console.log('In start.js.getsearchresults_forfiles().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /getsearchresults_forfiles().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var searchTerm = String(request.body.searchTerm);

                    var searchTerm_Lowercase = searchTerm.toLowerCase();

                    //
                    //
                    // This search searches the following:
                    //    - File name
                    //    - .metadata file contents
                    //    - NOT FILE CONTENTS
                    //    - NOT OCR IMAGE FILES
                    //

                    var searchResults = [];

                    var metadataFileArray = [];

                    var workflowFolderPath = rootFilePath + bwWorkflowAppId; // 'public/_files/' + bwWorkflowAppId;

                    fs.readdir(workflowFolderPath, { withFileTypes: true }, function (error, folders) {
                        try {

                            if (error) {

                                var msg = 'Error in In _files/getsearchresults_forfiles().fs.readdir(). Error listing the folders in workflowFolderPath: ' + workflowFolderPath + ': ' + error;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js._files/getsearchresults_forfiles()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                var promiseArray2 = [];

                                folders.forEach(function (folder) {

                                    if (folder.isDirectory()) {

                                        var bwBudgetRequestId = folder.name;

                                        var msg = 'MARK NAMEX1: bwBudgetRequestId: ' + bwBudgetRequestId;
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.getsearchresults_forfiles()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var requestFolderPath = workflowFolderPath + '/' + bwBudgetRequestId;

                                        var promise = getMetadataFilesAndFilenameSearchResults_ForRequest(bwBudgetRequestId, requestFolderPath, searchTerm_Lowercase);
                                        promiseArray2.push(promise);

                                    }

                                });

                                Promise.allSettled(promiseArray2)
                                    .then(function (results) {
                                        try {

                                            var msg = 'BACK FROM ALLSETTLED1: ' + JSON.stringify(results);
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.getsearchresults_forfiles()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                            // Return the search results.

                                            var searchResults = [];
                                            for (var i = 0; i < results.length; i++) {

                                                if (results[i].status == 'fulfilled') {
                                                    if (results[i].value.results.searchResults && results[i].value.results.searchResults.length && (results[i].value.results.searchResults.length > 0)) {

                                                        for (var j = 0; j < results[i].value.results.searchResults.length; j++) {
                                                            searchResults.push(results[i].value.results.searchResults[j]);
                                                        }

                                                    }
                                                }

                                            }

                                            var metadataFileArray = [];
                                            for (var i = 0; i < results.length; i++) {

                                                if (results[i].status == 'fulfilled') {
                                                    if (results[i].value.results.metadataFileArray && results[i].value.results.metadataFileArray.length && (results[i].value.results.metadataFileArray.length > 0)) {


                                                        //{ "bwBudgetRequestId": "undefined", "filepath": "public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/undefined/undefined.metadata" }

                                                        for (var j = 0; j < results[i].value.results.metadataFileArray.length; j++) {
                                                            if (results[i].value.results.metadataFileArray[j] && results[i].value.results.metadataFileArray[j].bwBudgetRequestId && (results[i].value.results.metadataFileArray[j].bwBudgetRequestId == 'undefined')) {
                                                                // Do not add this one. Invalid value for bwBudgetRequestId.
                                                            } else if (!(results[i].value.results.metadataFileArray[j] && results[i].value.results.metadataFileArray[j].bwBudgetRequestId)) {
                                                                // Do not add this one. Invalid value for bwBudgetRequestId.
                                                            } else {
                                                                metadataFileArray.push(results[i].value.results.metadataFileArray[j]);
                                                            }
                                                        }

                                                    }
                                                }

                                            }

                                            var promiseArray2 = [];

                                            for (var i = 0; i < metadataFileArray.length; i++) {

                                                var msg = '>>>>>LOOK HERE metadataFileArray[i]: ' + JSON.stringify(metadataFileArray[i]);
                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var promise = bwCheckFileForSearchTerm(metadataFileArray[i].bwBudgetRequestId, metadataFileArray[i].filepath, searchTerm_Lowercase); // var metadataFilePath = metadataFileArray[i];
                                                promiseArray2.push(promise);

                                            }

                                            Promise.allSettled(promiseArray2)
                                                .then(function (results) {
                                                    try {

                                                        var msg = 'In getMetadataFilesAndFilenameSearchResults_ForRequesxxx(). BACK FROM ALLSETTLED2: ' + JSON.stringify(results);
                                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        for (var i = 0; i < results.length; i++) {

                                                            if (results[i].status == 'fulfilled') {
                                                                if (results[i].value.results) {

                                                                    if (!(searchResults.indexOf(results[i].value.results) > -1)) {
                                                                        searchResults.push(results[i].value.results); // Add the bwBudgetRequestId to the array.
                                                                    }

                                                                }
                                                            }

                                                        }

                                                        //
                                                        //
                                                        // Now we have to query the BwBudgetRequest table in order to return this results set.
                                                        //
                                                        //

                                                        //BwBudgetRequest.find({ bwWorkflowAppId: bwWorkflowAppId, TrashBin: { $ne: true }, $or: [{ Title: { $regex: searchTerm, $options: 'i' } }, { ProjectTitle: { $regex: searchTerm, $options: 'i' } }, { bwRequestJson: { $regex: searchTerm, $options: 'i' } }] }, null, { sort: { Created: 'descending' } }, function (brError, brResult) {
                                                        BwBudgetRequest.find({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: { $in: searchResults }, TrashBin: { $ne: true } }, null, { sort: { Created: 'descending' } }, function (brError, brResult) {
                                                            try {

                                                                if (brError) {

                                                                    var msg = 'Error in start.js.getsearchresults_forfiles(). brError: ' + brError;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.getsearchresults_forfiles()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                } else {

                                                                    console.log('searchTerm: ' + searchTerm + ', brResult.length: ' + brResult.length);

                                                                    var result = {
                                                                        message: 'In getsearchresults_forfiles(). Search results from BwBudgetRequest for bwWorkflowAppId: ' + bwWorkflowAppId + ', searchTerm: ' + searchTerm,
                                                                        status: 'SUCCESS',
                                                                        data: brResult,
                                                                        searchTerm: searchTerm
                                                                    }
                                                                    response.send(result);

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.getsearchresults_forfiles(): ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.getsearchresults_forfiles()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            }

                                                        }).lean();

                                                    } catch (e) {

                                                        var msg = 'Exception in start.js.getMetadataFilesAndFilenameSearchResults_ForRequest():xcx213123222: ' + e.message + ', ' + e.stack;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    }

                                                }).catch(function (e) {

                                                    var msg = 'Exception in start.js.getMetadataFilesAndFilenameSearchResults_ForRequest():xcx213123222-44: ' + JSON.stringify(e);
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.getMetadataFilesAndFilenameSearchResults_ForRequest()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                });

                                        } catch (e) {

                                            var msg = 'Exception in start.js.getsearchresults_forfiles():xcx213123222: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.getsearchresults_forfiles()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    }).catch(function (e) {

                                        var msg = 'Exception in start.js.getsearchresults_forfiles():xcx213123222-77: ' + JSON.stringify(e);
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.getsearchresults_forfiles()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    });

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.getsearchresults_forfiles(): ' + e.message + ', ' + e.stack;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.getsearchresults_forfiles()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }

                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /getsearchresults_forfiles().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.getsearchresults_forfiles(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getsearchresults_forfiles()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.getsearchresults_forfiles(): ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getsearchresults_forfiles()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.getsearchresults_forfiles(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getsearchresults_forfiles()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }

});







router.put('/_files/uploadidentifyingimageforinventoryitem', function (request, response) {
    try {
        console.log('In PUT /_files/uploadidentifyingimageforinventoryitem()');

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwInventoryItemId = request.body.bwInventoryItemId;

        var bwParticipantId = request.body.bwParticipantId;
        var bwParticipantEmail = request.body.bwParticipantEmail;
        var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;

        var _Filename = request.body.Filename;
        var _FileContent = request.body.FileContent;

        // This metadata is going to be stored in a file named [filename].metadata which will exist in the same folder as the file(s).
        // This means anytime we rename, we have to also rename the .metadata file.
        // The format of the metadata file will be in XML. So far we have only one element, but as we start to leverage .docx and other files, 
        // we will scrape the metadata from them, and allow the user to add stuff as well.
        // file.metadata file XML format:
        // - <description></description>
        var description = request.body.Description;

        console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
        console.log('bwInventoryItemId: ' + bwInventoryItemId);
        console.log('bwParticipantId: ' + bwParticipantId);
        console.log('_Filename: ' + _Filename);
        //console.log('_FileContent: ' + _FileContent);
        console.log('description: ' + description);

        // Check the WorkflowAppId folder exists.
        var workflowFolderPath = rootFilePath + bwWorkflowAppId; //'public/_files/' + bwWorkflowAppId;
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }


        var inventoryImageFolderPath1 = rootFilePath + bwWorkflowAppId + '/inventoryimages';
        var mkdirBudgetRequestId1 = function (inventoryImageFolderPath1) {
            try {
                fs.mkdirSync(inventoryImageFolderPath1);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }





        // Check the BudgetRequestId folder exists.
        //var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var inventoryImageFolderPath = rootFilePath + bwWorkflowAppId + '/inventoryimages/' + bwInventoryItemId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirBudgetRequestId = function (inventoryImageFolderPath) {
            try {
                fs.mkdirSync(inventoryImageFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirBudgetRequestId1(inventoryImageFolderPath1); // Make sure the participantimages folder exists.
        mkdirBudgetRequestId(inventoryImageFolderPath);

        // Now we know we have the folder, save the file in it!
        var _filePath = inventoryImageFolderPath + '/' + _Filename;
        console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
            if (err) {
                console.log(err);
                response.send(err);
            } else {

                // Convert if an .AMR file.
                if (_filePath.toUpperCase().indexOf('.AMR') > -1) {
                    console.log('Preparing to convert .amr to .mp3: ' + _filePath);
                    var amrIndex = _filePath.toUpperCase().indexOf('.AMR');
                    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                    console.log(mp3FilePath);
                    ffmpeg(_filePath)
                        .toFormat('mp3')
                        .on('error', function (err) {

                            var msg = 'The .AMR file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                            console.log(msg);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                            var errorCode = null;
                            var message = msg;
                            WriteToErrorLog(threatLevel, source, errorCode, message);

                        })
                        .on('progress', function (progress) {
                            // console.log(JSON.stringify(progress));
                            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                        })
                        .on('end', function () {
                            console.log('FFMPEG: Processing finished !');

                            // Now that we have our .mp3 file, delete the .amr file.
                            var fileToDeletePath = inventoryImageFolderPath + '/' + _Filename;
                            fs.unlink(fileToDeletePath, function (deleteErr) {
                                if (deleteErr) {
                                    console.log(deleteErr);
                                    response.send(deleteErr);
                                } else {
                                    console.log('The file ' + fileToDeletePath + ' was deleted!');
                                    var msg = 'The .AMR file was converted successfully to a .mp3 file.';
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                    var errorCode = null;
                                    var message = msg;
                                    WriteToErrorLog(threatLevel, source, errorCode, message);
                                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                                    if (description != '') {
                                        var amrIndex = _Filename.toUpperCase().indexOf('.AMR');
                                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                                        var metaFilePath = inventoryImageFolderPath + '/' + mp3Filename + '.metadata';
                                        var metaFileContent = '';
                                        metaFileContent += '<description>';
                                        metaFileContent += description;
                                        metaFileContent += '</description>';
                                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                                            if (metaErr) {
                                                console.log(metaErr);
                                                response.send(metaErr);
                                            } else {
                                                console.log('The file ' + metaFilePath + ' was saved!');
                                                response.send('The file ' + metaFilePath + ' was saved!');
                                            }
                                        });
                                    } else {
                                        console.log('The file was saved!');
                                        response.send('The file was saved!');
                                    }
                                }
                            });
                        })
                        .save(mp3FilePath); //path where you want to save your file
                } else if (_filePath.toUpperCase().indexOf('.M4A') > -1) {




                    console.log('Preparing to convert .m4a to .mp3: ' + _filePath);
                    var amrIndex = _filePath.toUpperCase().indexOf('.M4A');
                    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                    console.log(mp3FilePath);
                    ffmpeg(_filePath)
                        .toFormat('mp3')
                        .on('error', function (err) {

                            var msg = 'The .M4A file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                            console.log(msg);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                            var errorCode = null;
                            var message = msg;
                            WriteToErrorLog(threatLevel, source, errorCode, message);

                        })
                        .on('progress', function (progress) {
                            // console.log(JSON.stringify(progress));
                            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                        })
                        .on('end', function () {
                            console.log('FFMPEG: Processing finished !');

                            // Now that we have our .mp3 file, delete the .m4a file.
                            var fileToDeletePath = inventoryImageFolderPath + '/' + _Filename;
                            fs.unlink(fileToDeletePath, function (deleteErr) {
                                if (deleteErr) {
                                    console.log(deleteErr);
                                    response.send(deleteErr);
                                } else {

                                    console.log('The file ' + fileToDeletePath + ' was deleted!');

                                    var msg = 'The .M4A file was converted successfully to a .mp3 file.';
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                                    if (description != '') {
                                        var amrIndex = _Filename.toUpperCase().indexOf('.M4A');
                                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                                        var metaFilePath = inventoryImageFolderPath + '/' + mp3Filename + '.metadata';
                                        var metaFileContent = '';
                                        metaFileContent += '<description>';
                                        metaFileContent += description;
                                        metaFileContent += '</description>';
                                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                                            if (metaErr) {
                                                console.log(metaErr);
                                                response.send(metaErr);
                                            } else {
                                                console.log('The file ' + metaFilePath + ' was saved!');
                                                response.send('The file ' + metaFilePath + ' was saved!');
                                            }
                                        });
                                    } else {
                                        console.log('The file was saved!');
                                        response.send('The file was saved!');
                                    }
                                }
                            });
                        })
                        .save(mp3FilePath); //path where you want to save your file





                } else {
                    // This section deals with files that don't need to be converted to another type of file.

                    // Todd: New 8-21-18
                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                    if (description != '') {
                        var metaFilePath = inventoryImageFolderPath + '/' + _Filename + '.metadata';
                        var metaFileContent = '';
                        metaFileContent += '<description>';
                        metaFileContent += description;
                        metaFileContent += '</description>';
                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                            if (metaErr) {
                                console.log(metaErr);
                                response.send(metaErr);
                            } else {
                                console.log('The file was saved!');
                                response.send('The file was saved!');
                            }
                        });
                    } else {
                        console.log('The file was saved!');
                        response.send('The file was saved!');
                    }


                    //console.log('The file was saved!');
                    //response.send('The file was saved!');
                }
            }
        });

    } catch (e) {
        console.log('Exception in PUT uploadidentifyingimageforinventoryitem: ' + e.message);

        // Exception section:
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploadidentifyingimageforparticipant()';
        var errorCode = null;
        var message = e.message;
        //WriteToErrorLog(threatLevel, source, errorCode, message);
        //
        response.send('Exception in PUT uploadidentifyingimageforinventoryitem: ' + e.message + ', ' + e.stack);
    }
});



router.put('/_files/UploadIdentifyingImageForParticipant', function (request, response) {
    try {
        console.log('In start.js.UploadIdentifyingImageForParticipant()');

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwParticipantId = request.body.bwParticipantId;
        var _Filename = request.body.Filename;
        var _FileContent = request.body.FileContent;

        var description = request.body.Description;

        console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
        console.log('bwParticipantId: ' + bwParticipantId);
        console.log('_Filename: ' + _Filename);
        console.log('description: ' + description);

        // Check the WorkflowAppId folder exists.
        var workflowFolderPath = rootFilePath + bwWorkflowAppId; //'public/_files/' + bwWorkflowAppId;
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        var participantImageFolderPath1 = rootFilePath + bwWorkflowAppId + '/participantimages';
        var mkdirBudgetRequestId1 = function (participantImageFolderPath1) {
            try {
                fs.mkdirSync(participantImageFolderPath1);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        // Check the BudgetRequestId folder exists.
        //var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var participantImageFolderPath = rootFilePath + bwWorkflowAppId + '/participantimages/' + bwParticipantId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirBudgetRequestId = function (participantImageFolderPath) {
            try {
                fs.mkdirSync(participantImageFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirBudgetRequestId1(participantImageFolderPath1); // Make sure the participantimages folder exists.
        mkdirBudgetRequestId(participantImageFolderPath);

        // Now we know we have the folder, save the file in it!
        var _filePath = participantImageFolderPath + '/' + _Filename;
        console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
            if (err) {
                console.log(err);
                response.send(err);
            } else {

                // This section deals with files that don't need to be converted to another type of file.

                // Todd: New 8-21-18
                // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                //if (description != '') {
                //    var metaFilePath = participantImageFolderPath + '/' + _Filename + '.metadata';
                //    var metaFileContent = '';
                //    metaFileContent += '<description>';
                //    metaFileContent += description;
                //    metaFileContent += '</description>';
                //    fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                //        if (metaErr) {
                //            console.log(metaErr);
                //            response.send(metaErr);
                //        } else {
                //            console.log('The file was saved!');
                //            //response.send('The file was saved!');
                //        }
                //    });
                //} else {
                //    console.log('The file was saved!');
                //    //response.send('The file was saved!');
                //}

                var smallIdentifyingImagePath = workflowFolderPath + '/participantimages/' + bwParticipantId + '/' + 'userimage_50x50px.png';

                gm(_filePath)
                    .resize(50)
                    .write(smallIdentifyingImagePath, function (err) {
                        try {
                            if (err) {

                                var msg = 'Error creating thethumbnail in start.js.UploadIdentifyingImageForParticipant.ffmpeg.on.end.gm.write(): ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.UploadIdentifyingImageForParticipant()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                var msg = 'In ProcessFileAfterUpload.ffmpeg.on.end.gm.write(). Saved thumbnail (' + _filePath + ') and tiny thumbnail (' + smallIdentifyingImagePath + ').';
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.UploadIdentifyingImageForParticipant()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'SUCCESS',
                                    message: msg
                                }
                                response.send(result);

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.UploadIdentifyingImageForParticipant.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.UploadIdentifyingImageForParticipant()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }

                    });

            }

        });

    } catch (e) {

        var msg = 'Exception in start.js.UploadIdentifyingImageForParticipant(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploadidentifyingimageforparticipant()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

router.put('/_files/uploadidentifyingimagefororg', function (request, response) {
    try {
        console.log('In PUT /_files/uploadidentifyingimagefororg()');
        //var bwTenantId = request.body.bwTenantId;
        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwOrgId = request.body.bwOrgId;
        var _Filename = 'orgimage.png'; //request.body.Filename;
        var _FileContent = request.body.FileContent;

        // This metadata is going to be stored in a file named [filename].metadata which will exist in the same folder as the file(s).
        // This means anytime we rename, we have to also rename the .metadata file.
        // The format of the metadata file will be in XML. So far we have only one element, but as we start to leverage .docx and other files, 
        // we will scrape the metadata from them, and allow the user to add stuff as well.
        // file.metadata file XML format:
        // - <description></description>
        var description = request.body.Description;

        console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
        console.log('bwOrgId: ' + bwOrgId);
        console.log('_Filename: ' + _Filename);
        //console.log('_FileContent: ' + _FileContent);
        console.log('description: ' + description);

        // Check the WorkflowAppId folder exists.
        var workflowFolderPath = rootFilePath + bwWorkflowAppId; //'public/_files/' + bwWorkflowAppId;
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }


        var orgImageFolderPath1 = rootFilePath + bwWorkflowAppId + '/orgimages';
        var mkdirWorkflowAppId1 = function (workflowFolderPath1) {
            try {
                fs.mkdirSync(workflowFolderPath1);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }


        // Check the BudgetRequestId folder exists.
        //var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var orgImageFolderPath = rootFilePath + bwWorkflowAppId + '/orgimages/' + bwOrgId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirBudgetRequestId = function (orgImageFolderPath) {
            try {
                fs.mkdirSync(orgImageFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirWorkflowAppId1(orgImageFolderPath1); // make sure the orgimages folder exists
        mkdirBudgetRequestId(orgImageFolderPath);

        // Now we know we have the folder, save the file in it!
        var _filePath = orgImageFolderPath + '/' + _Filename;
        console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
            if (err) {
                console.log(err);
                response.send(err);
            } else {

                //// Convert if an .AMR file.
                //if (_filePath.toUpperCase().indexOf('.AMR') > -1) {
                //    console.log('Preparing to convert .amr to .mp3: ' + _filePath);
                //    var amrIndex = _filePath.toUpperCase().indexOf('.AMR');
                //    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                //    console.log(mp3FilePath);
                //    ffmpeg(_filePath)
                //        .toFormat('mp3')
                //        .on('error', function (err) {

                //            var msg = 'The .AMR file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                //            console.log(msg);
                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                //            var source = 'In PUT /_files/uploadidentifyingimagefororg()';
                //            var errorCode = null;
                //            var message = msg;
                //            WriteToErrorLog(threatLevel, source, errorCode, message);

                //        })
                //        .on('progress', function (progress) {
                //            // console.log(JSON.stringify(progress));
                //            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                //        })
                //        .on('end', function () {
                //            console.log('FFMPEG: Processing finished !');

                //            // Now that we have our .mp3 file, delete the .amr file.
                //            var fileToDeletePath = orgImageFolderPath + '/' + _Filename;
                //            fs.unlink(fileToDeletePath, function (deleteErr) {
                //                if (deleteErr) {
                //                    console.log(deleteErr);
                //                    response.send(deleteErr);
                //                } else {
                //                    console.log('The file ' + fileToDeletePath + ' was deleted!');
                //                    var msg = 'The .AMR file was converted successfully to a .mp3 file.';
                //                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                //                    var source = 'In PUT /_files/uploadidentifyingimagefororg()';
                //                    var errorCode = null;
                //                    var message = msg;
                //                    WriteToErrorLog(threatLevel, source, errorCode, message);
                //                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                //                    if (description != '') {
                //                        var amrIndex = _Filename.toUpperCase().indexOf('.AMR');
                //                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                //                        var metaFilePath = orgImageFolderPath + '/' + mp3Filename + '.metadata';
                //                        var metaFileContent = '';
                //                        metaFileContent += '<description>';
                //                        metaFileContent += description;
                //                        metaFileContent += '</description>';
                //                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                //                            if (metaErr) {
                //                                console.log(metaErr);
                //                                response.send(metaErr);
                //                            } else {
                //                                console.log('The file ' + metaFilePath + ' was saved!');
                //                                response.send('The file ' + metaFilePath + ' was saved!');
                //                            }
                //                        });
                //                    } else {
                //                        console.log('The file was saved!');
                //                        response.send('The file was saved!');
                //                    }
                //                }
                //            });
                //        })
                //        .save(mp3FilePath); //path where you want to save your file
                //} else if (_filePath.toUpperCase().indexOf('.M4A') > -1) {




                //    console.log('Preparing to convert .m4a to .mp3: ' + _filePath);
                //    var amrIndex = _filePath.toUpperCase().indexOf('.M4A');
                //    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                //    console.log(mp3FilePath);
                //    ffmpeg(_filePath)
                //        .toFormat('mp3')
                //        .on('error', function (err) {

                //            var msg = 'The .M4A file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                //            console.log(msg);
                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                //            var source = 'In PUT /_files/uploadidentifyingimagefororg()';
                //            var errorCode = null;
                //            var message = msg;
                //            WriteToErrorLog(threatLevel, source, errorCode, message);

                //        })
                //        .on('progress', function (progress) {
                //            // console.log(JSON.stringify(progress));
                //            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                //        })
                //        .on('end', function () {
                //            console.log('FFMPEG: Processing finished !');

                //            // Now that we have our .mp3 file, delete the .m4a file.
                //            var fileToDeletePath = orgImageFolderPath + '/' + _Filename;
                //            fs.unlink(fileToDeletePath, function (deleteErr) {
                //                if (deleteErr) {
                //                    console.log(deleteErr);
                //                    response.send(deleteErr);
                //                } else {

                //                    console.log('The file ' + fileToDeletePath + ' was deleted!');

                //                    var msg = 'The .M4A file was converted successfully to a .mp3 file.';
                //                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                //                    var source = 'In PUT /_files/uploadidentifyingimagefororg()';
                //                    var errorCode = null;
                //                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                //                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                //                    if (description != '') {
                //                        var amrIndex = _Filename.toUpperCase().indexOf('.M4A');
                //                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                //                        var metaFilePath = orgImageFolderPath + '/' + mp3Filename + '.metadata';
                //                        var metaFileContent = '';
                //                        metaFileContent += '<description>';
                //                        metaFileContent += description;
                //                        metaFileContent += '</description>';
                //                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                //                            if (metaErr) {
                //                                console.log(metaErr);
                //                                response.send(metaErr);
                //                            } else {
                //                                console.log('The file ' + metaFilePath + ' was saved!');
                //                                response.send('The file ' + metaFilePath + ' was saved!');
                //                            }
                //                        });
                //                    } else {
                //                        console.log('The file was saved!');
                //                        response.send('The file was saved!');
                //                    }
                //                }
                //            });
                //        })
                //        .save(mp3FilePath); //path where you want to save your file





                //} else {
                // This section deals with files that don't need to be converted to another type of file.

                // Todd: New 8-21-18
                // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                if (description != '') {
                    var metaFilePath = orgImageFolderPath + '/' + _Filename + '.metadata';
                    var metaFileContent = '';
                    metaFileContent += '<description>';
                    metaFileContent += description;
                    metaFileContent += '</description>';
                    fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                        if (metaErr) {
                            console.log(metaErr);
                            response.send(metaErr);
                        } else {
                            console.log('The file was saved!');
                            response.send('The file was saved!');
                        }
                    });
                } else {
                    console.log('The file was saved!');
                    response.send('The file was saved!');
                }


                //console.log('The file was saved!');
                //response.send('The file was saved!');
                //}
            }
        });

    } catch (e) {
        console.log("Exception: " + e.message);

        // Exception section:
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploadidentifyingimagefororg()';
        var errorCode = null;
        var message = e.message;
        //WriteToErrorLog(threatLevel, source, errorCode, message);
        //
        response.send('Error in PUT uploadidentifyingimagefororg: ' + e.message);
    }
});







function checkForUnknownFileNameExtensionsAndForMimeTypeMatch(bwWorkflowAppId, bwBudgetRequestId, filePath) {
    return new Promise(function (resolve, reject) {
        try {

            var msg = 'In start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). filePath: ' + filePath + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', bwWorkflowAppId: ' + bwWorkflowAppId;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'In start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

            // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
            var extensionIndex = filePath.split('.').length - 1;
            var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

            console.log('');
            console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
            console.log('');

            var fileExtensions = ['png', 'jpg', 'jpeg', 'jfif', 'webp', 'gif', 'xlsx', 'xls', 'ods', 'odt', 'pdf', 'mp4', 'rtf', 'vob', 'mp3', 'm4a', 'amr', 'avi', 'zip', 'xcf', 'aifc'] // 5-10-2024 added .aifc. // 8-14-2023: Added 'avi' file extension to this array. // 10-14-2023: Added 'm4a' and 'amr'.
            if (fileExtensions.indexOf(fileExtension) > -1) {

                console.log('');
                console.log('>>>>>>>>>>>>>> In checkBadFileNameExtensionsForMimeTypeMatch(). It is a known file type, so just pass it on and continue. filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
                console.log('');

                var msg = 'It is a known file type, so just pass it on and continue.';
                var result = {
                    status: 'SUCCESS',
                    message: msg,
                    bwWorkflowAppId: bwWorkflowAppId,
                    bwBudgetRequestId: bwBudgetRequestId,
                    filePath: filePath
                }

                resolve(result);

            } else {

                //
                // Unknown file type. Check if this could be an image file by checking the mime type.
                //

                console.log('');
                console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch().  Unknown file type. Check if this could be an image file by checking the mime type. filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
                console.log('');

                gm(filePath).identify(function (gmError, gmResult) {
                    try {
                        if (gmError) {

                            var msg = 'Error in start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify(). filePath: ' + filePath + ', gmError: ' + gmError;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            console.log('');
                            console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). msg: ' + msg + ', filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
                            console.log('');

                            var result = {
                                status: 'ERROR',
                                message: msg,
                                bwWorkflowAppId: bwWorkflowAppId,
                                bwBudgetRequestId: bwBudgetRequestId,
                                filePath: filePath
                            }

                            resolve(result);

                        } else {

                            // For example:
                            // gmResult: {
                            //    "Format": "PNG (Portable Network Graphics)",
                            //    "format": "PNG",
                            //    "Mime type": "image/png"
                            // }

                            var mimeTypes = ['image/png', 'image/jpeg', 'image/bmp', 'image/gif', 'image/svg+xml', 'image/tiff', 'image/webp'];
                            var mimeTypeExtensions = ['.png', '.jpg', '.bmp', '.gif', '.svg', '.tiff', '.webp'];

                            var mimeTypeIndex = mimeTypes.indexOf(gmResult["Mime type"]);

                            if (mimeTypeIndex > -1) {

                                var extensionIndex = filePath.split('.').length - 1;
                                var fileExtension = filePath.split('.')[extensionIndex];

                                var newFilePath = '';
                                for (var i = 0; i < extensionIndex; i++) {
                                    newFilePath += filePath.split('.')[i];
                                }

                                newFilePath += mimeTypeExtensions[mimeTypeIndex]; // For example, adds '.png' for 'image/png'. This is how we change the extension to reflect the mime type of the file.

                                console.log('');
                                console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). filePath: ' + filePath + ', newFilePath: ' + newFilePath);
                                console.log('');

                                // Now we must update the filename and the metadata file.
                                fs.rename(filePath, newFilePath, function (err) {
                                    try {
                                        if (err) {

                                            var msg = 'Error in saveattachmentmetadata.fs.rename():1: filePath: ' + filePath + ', newFilePath: ' + newFilePath + ', error: ' + err;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.saveattachmentmetadata()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'ERROR',
                                                message: msg,
                                                bwWorkflowAppId: bwWorkflowAppId,
                                                bwBudgetRequestId: bwBudgetRequestId
                                            }

                                            resolve(result);

                                        } else {

                                            // Rename the existing .metadata file to match the newFilename.
                                            var originalMetadataFilePath = filePath + '.metadata';
                                            var newMetadataFilePath = newFilePath + '.metadata';
                                            fs.rename(originalMetadataFilePath, newMetadataFilePath, function (err2) {
                                                try {
                                                    if (err2) {

                                                        //var msg = 'Error in saveattachmentmetadata.fs.rename():2: originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + err2;
                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        //var source = 'start.js.POST.saveattachmentmetadata()';
                                                        //var errorCode = null;
                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        //response.send(msg);

                                                        console.log('*************************');
                                                        console.log('*************************');
                                                        console.log('stats xcx232143-1: ');
                                                        console.log('*************************');
                                                        console.log('*************************');

                                                        var stats = fs.statSync(newFilePath);
                                                        var size = stats["size"];
                                                        var birthtime = stats["birthtime"];

                                                        console.log('*************************');
                                                        console.log('*************************');
                                                        console.log('birthtime xcx232143-1: ' + birthtime);
                                                        console.log('*************************');
                                                        console.log('*************************');

                                                        //var metaFileContent = '';
                                                        //metaFileContent += '<description>';
                                                        //metaFileContent += description;
                                                        //metaFileContent += '</description>';
                                                        //metaFileContent += '<size>';
                                                        //metaFileContent += size;
                                                        //metaFileContent += '</size>';
                                                        //metaFileContent += '<birthtime>';
                                                        //metaFileContent += birthtime;
                                                        //metaFileContent += '</birthtime>';

                                                        var json = {};
                                                        //json["description"] = description;
                                                        json["size"] = size;
                                                        json["birthtime"] = birthtime;
                                                        //json["bwParticipantId"] = bwParticipantId;
                                                        //json["bwParticipantEmail"] = bwParticipantEmail;
                                                        //json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                        var metaFileContent = JSON.stringify(json);

                                                        fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                            try {
                                                                if (metaErr) {

                                                                    var msg = 'Error in saveattachmentmetadata.fs.writeFile():3-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.POST.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId
                                                                    }

                                                                    resolve(result);

                                                                } else {

                                                                    var msg = 'The file was saved!';
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.POST.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: newFilePath
                                                                    }

                                                                    resolve(result);

                                                                }
                                                            } catch (e) {

                                                                var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify():5: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                    bwBudgetRequestId: bwBudgetRequestId
                                                                }

                                                                reject(result);

                                                            }
                                                        });

                                                    } else {

                                                        //var size = '';
                                                        //var birthtime = '';
                                                        //var data = fs.readFileSync(newMetadataFilePath).toString();
                                                        //var firstPass2 = data.split('<size>')[1];
                                                        //size = firstPass2.split('</size>')[0];
                                                        //var firstPass3 = data.split('<birthtime>')[1];
                                                        //birthtime = firstPass3.split('</birthtime>')[0];

                                                        //var metaFileContent = '';
                                                        //metaFileContent += '<description>';
                                                        ////metaFileContent += description;
                                                        //metaFileContent += '</description>';
                                                        //metaFileContent += '<size>';
                                                        //metaFileContent += size;
                                                        //metaFileContent += '</size>';
                                                        //metaFileContent += '<birthtime>';
                                                        //metaFileContent += birthtime;
                                                        //metaFileContent += '</birthtime>';


                                                        var data = fs.readFileSync(newMetadataFilePath).toString();
                                                        var json = JSON.parse(data);


                                                        //var json = {};
                                                        //json["description"] = description;
                                                        json["size"] = size;
                                                        json["birthtime"] = birthtime;
                                                        //json["bwParticipantId"] = bwParticipantId;
                                                        //json["bwParticipantEmail"] = bwParticipantEmail;
                                                        //json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                        var metaFileContent = JSON.stringify(json);

                                                        fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                            try {
                                                                if (metaErr) {

                                                                    var msg = 'Error in saveattachmentmetadata.fs.writeFile():3: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.POST.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId
                                                                    }

                                                                    resolve(result);

                                                                } else {

                                                                    var msg = 'The file was saved!';
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.POST.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: newFilePath
                                                                    }

                                                                    resolve(result);

                                                                }
                                                            } catch (e) {

                                                                var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify():4: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                    bwBudgetRequestId: bwBudgetRequestId
                                                                }

                                                                reject(result);

                                                            }
                                                        });

                                                    }
                                                } catch (e) {

                                                    var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify():3: ' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId
                                                    }

                                                    reject(result);

                                                }
                                            });

                                        }
                                    } catch (e) {

                                        var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify():2: ' + e.message + ', ' + e.stack;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg,
                                            bwWorkflowAppId: bwWorkflowAppId,
                                            bwBudgetRequestId: bwBudgetRequestId
                                        }

                                        reject(result);

                                    }
                                });

                            } else {

                                var msg = 'The file mime type was unrecognized, so the file extension has not been changed. Mime type: ' + String(gmResult["Mime type"]);
                                var result = {
                                    status: 'SUCCESS',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                console.log('');
                                console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). msg: ' + msg + ', filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
                                console.log('');

                                resolve(result);

                            }

                        }
                    } catch (e) {

                        var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch.gm.identify(): ' + e.message + ', ' + e.stack;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg,
                            bwWorkflowAppId: bwWorkflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId
                        }

                        console.log('');
                        console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). msg: ' + msg + ', filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
                        console.log('');

                        reject(result);

                    }
                });

            }

        } catch (e) {

            var msg = 'Exception in checkForUnknownFileNameExtensionsAndForMimeTypeMatch(): ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.checkForUnknownFileNameExtensionsAndForMimeTypeMatch()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg,
                bwWorkflowAppId: bwWorkflowAppId,
                bwBudgetRequestId: bwBudgetRequestId
            }

            console.log('');
            console.log('>>>>>>>>>>>>>> In checkForUnknownFileNameExtensionsAndForMimeTypeMatch(). msg: ' + msg + ', filePath: ' + filePath + ', extensionIndex: ' + extensionIndex + ', fileExtension: ' + fileExtension);
            console.log('');

            reject(result);

        }
    });
}











////
//// I put this back here to support the iPad 2 and other old devices, which do not have the FormData class built-in. This seems like a good indicator that we just need this simple upload which does not use Multer. 4-21-2023.
////
//router.put('/_files/uploadattachment', function (request, response) {
//    try {
//        console.log('In PUT /_files/uploadattachment()');
//        //var bwTenantId = request.body.bwTenantId;
//        var bwWorkflowAppId = request.body.bwWorkflowAppId;
//        var bwBudgetRequestId = request.body.bwBudgetRequestId;
//        var _Filename = request.body.Filename;
//        var _FileContent = request.body.FileContent;

//        // This metadata is going to be stored in a file named [filename].metadata which will exist in the same folder as the file(s).
//        // This means anytime we rename, we have to also rename the .metadata file.
//        // The format of the metadata file will be in XML. So far we have only one element, but as we start to leverage .docx and other files, 
//        // we will scrape the metadata from them, and allow the user to add stuff as well.
//        // file.metadata file XML format:
//        // - <description></description>
//        var description = request.body.Description;

//        console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
//        console.log('bwBudgetRequestId: ' + bwBudgetRequestId);
//        console.log('_Filename: ' + _Filename);
//        //console.log('_FileContent: ' + _FileContent);
//        console.log('description: ' + description);

//        // Check the WorkflowAppId folder exists.
//        var workflowFolderPath = rootFilePath + bwWorkflowAppId; //'public/_files/' + bwWorkflowAppId;
//        var mkdirWorkflowAppId = function (workflowFolderPath) {
//            try {
//                fs.mkdirSync(workflowFolderPath);
//            } catch (e) {
//                if (e.code != 'EEXIST') throw e;
//            }
//        }
//        // Check the BudgetRequestId folder exists.
//        var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
//        var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
//            try {
//                fs.mkdirSync(budgetRequestFolderPath);
//            } catch (e) {
//                if (e.code != 'EEXIST') throw e;
//            }
//        }

//        mkdirWorkflowAppId(workflowFolderPath);
//        mkdirBudgetRequestId(budgetRequestFolderPath);

//        // Now we know we have the folder, save the file in it!
//        var _filePath = budgetRequestFolderPath + '/' + _Filename;
//        //console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

//        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
//            if (err) {
//                console.log(err);
//                response.send(err);
//            } else {

//                // Convert if an .AMR file.
//                if (_filePath.toUpperCase().indexOf('.AMR') > -1) {
//                    console.log('Preparing to convert .amr to .mp3: ' + _filePath);
//                    var amrIndex = _filePath.toUpperCase().indexOf('.AMR');
//                    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
//                    console.log(mp3FilePath);
//                    ffmpeg(_filePath)
//                        .toFormat('mp3')
//                        .on('error', function (err) {
//                            console.log('FFMPEG: An error occurred: ' + err.message);

//                            var msg = 'The .AMR file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
//                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                            var source = 'In PUT /_files/uploadattachment()';
//                            var errorCode = null;
//                            var message = msg;
//                            WriteToErrorLog(threatLevel, source, errorCode, message);
//                        })
//                        .on('progress', function (progress) {
//                            // console.log(JSON.stringify(progress));
//                            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
//                        })
//                        .on('end', function () {
//                            console.log('FFMPEG: Processing finished !');

//                            // Now that we have our .mp3 file, delete the .amr file.
//                            var fileToDeletePath = budgetRequestFolderPath + '/' + _Filename;
//                            fs.unlink(fileToDeletePath, function (deleteErr) {
//                                if (deleteErr) {
//                                    console.log(deleteErr);
//                                    response.send(deleteErr);
//                                } else {
//                                    console.log('The file ' + fileToDeletePath + ' was deleted!');
//                                    var msg = 'The .AMR file was converted successfully to a .mp3 file.';
//                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                                    var source = 'In PUT /_files/uploadattachment()';
//                                    var errorCode = null;
//                                    var message = msg;
//                                    WriteToErrorLog(threatLevel, source, errorCode, message);
//                                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
//                                    if (description != '') {
//                                        var amrIndex = _Filename.toUpperCase().indexOf('.AMR');
//                                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
//                                        var metaFilePath = budgetRequestFolderPath + '/' + mp3Filename + '.metadata';
//                                        var metaFileContent = '';
//                                        metaFileContent += '<description>';
//                                        metaFileContent += description;
//                                        metaFileContent += '</description>';
//                                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
//                                            if (metaErr) {
//                                                console.log(metaErr);
//                                                response.send(metaErr);
//                                            } else {
//                                                console.log('The file ' + metaFilePath + ' was saved!');
//                                                response.send('The file ' + metaFilePath + ' was saved!');
//                                            }
//                                        });
//                                    } else {
//                                        console.log('The file was saved!');
//                                        response.send('The file was saved!');
//                                    }
//                                }
//                            });
//                        })
//                        .save(mp3FilePath); //path where you want to save your file
//                } else if (_filePath.toUpperCase().indexOf('.M4A') > -1) {




//                    console.log('Preparing to convert .m4a to .mp3: ' + _filePath);
//                    var amrIndex = _filePath.toUpperCase().indexOf('.M4A');
//                    var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
//                    console.log(mp3FilePath);
//                    ffmpeg(_filePath)
//                        .toFormat('mp3')
//                        .on('error', function (err) {
//                            console.log('FFMPEG: An error occurred: ' + err.message);

//                            var msg = 'The .M4A file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
//                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                            var source = 'In PUT /_files/uploadattachment()';
//                            var errorCode = null;
//                            var message = msg;
//                            WriteToErrorLog(threatLevel, source, errorCode, message);
//                        })
//                        .on('progress', function (progress) {
//                            // console.log(JSON.stringify(progress));
//                            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
//                        })
//                        .on('end', function () {
//                            console.log('FFMPEG: Processing finished !');

//                            // Now that we have our .mp3 file, delete the .m4a file.
//                            var fileToDeletePath = budgetRequestFolderPath + '/' + _Filename;
//                            fs.unlink(fileToDeletePath, function (deleteErr) {
//                                if (deleteErr) {
//                                    console.log(deleteErr);
//                                    response.send(deleteErr);
//                                } else {
//                                    console.log('The file ' + fileToDeletePath + ' was deleted!');
//                                    var msg = 'The .M4A file was converted successfully to a .mp3 file.';
//                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                                    var source = 'In PUT /_files/uploadattachment()';
//                                    var errorCode = null;
//                                    var message = msg;
//                                    WriteToErrorLog(threatLevel, source, errorCode, message);
//                                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
//                                    if (description != '') {
//                                        var amrIndex = _Filename.toUpperCase().indexOf('.M4A');
//                                        var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
//                                        var metaFilePath = budgetRequestFolderPath + '/' + mp3Filename + '.metadata';
//                                        var metaFileContent = '';
//                                        metaFileContent += '<description>';
//                                        metaFileContent += description;
//                                        metaFileContent += '</description>';
//                                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
//                                            if (metaErr) {
//                                                console.log(metaErr);
//                                                response.send(metaErr);
//                                            } else {
//                                                console.log('The file ' + metaFilePath + ' was saved!');
//                                                response.send('The file ' + metaFilePath + ' was saved!');
//                                            }
//                                        });
//                                    } else {
//                                        console.log('The file was saved!');
//                                        response.send('The file was saved!');
//                                    }
//                                }
//                            });
//                        })
//                        .save(mp3FilePath); //path where you want to save your file





//                } else {
//                    // This section deals with files that don't need to be converted to another type of file.

//                    // Todd: New 8-21-18
//                    // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
//                    if (description != '') {
//                        var metaFilePath = budgetRequestFolderPath + '/' + _Filename + '.metadata';
//                        var metaFileContent = '';
//                        metaFileContent += '<description>';
//                        metaFileContent += description;
//                        metaFileContent += '</description>';
//                        fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
//                            if (metaErr) {
//                                console.log(metaErr);
//                                response.send(metaErr);
//                            } else {
//                                console.log('The file was saved!');
//                                response.send('The file was saved!');
//                            }
//                        });
//                    } else {
//                        console.log('The file was saved!');
//                        response.send('The file was saved!');
//                    }


//                    //console.log('The file was saved!');
//                    //response.send('The file was saved!');
//                }
//            }
//        });

//    } catch (e) {

//        var msg = 'Exception in /_files/uploadattachment(): ' + e.message + ', ' + e.stack; // router.put('/_files/uploadattachment', function (request, response) {
//        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//        var source = 'start.js.PUT.uploadattachment()';
//        var errorCode = null;
//        WriteToErrorLog(threatLevel, source, errorCode, msg);

//        var result = {
//            status: 'EXCEPTION',
//            message: msg
//        }
//        response.send(result);

//    }
//});





//
// I put this back here to support the iPad 2 and other old devices, which do not have the FormData class built-in. This seems like a good indicator that we just need this simple upload which does not use Multer. 4-21-2023.
//
router.put('/_files/uploadattachment', function (request, response) {
    try {
        console.log('In PUT /_files/uploadattachment()');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /uploadattachment().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');


                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    var fileName = request.body.Filename;
                    var _FileContent = request.body.FileContent;

                    var bwParticipantId = request.body.bwParticipantId;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;

                    // This metadata is going to be stored in a file named [filename].metadata which will exist in the same folder as the file(s).
                    // This means anytime we rename, we have to also rename the .metadata file.
                    // The format of the metadata file will be in XML. So far we have only one element, but as we start to leverage .docx and other files, 
                    // we will scrape the metadata from them, and allow the user to add stuff as well.
                    // file.metadata file XML format:
                    // - <description></description>
                    var description = request.body.Description;

                    console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
                    console.log('bwBudgetRequestId: ' + bwBudgetRequestId);
                    console.log('fileName: ' + fileName);
                    //console.log('_FileContent: ' + _FileContent);
                    console.log('description: ' + description);

                    // Check the WorkflowAppId folder exists.
                    var workflowFolderPath = rootFilePath + bwWorkflowAppId; // 'public/_files/' + bwWorkflowAppId;
                    var mkdirWorkflowAppId = function (workflowFolderPath) {
                        try {
                            fs.mkdirSync(workflowFolderPath);
                        } catch (e) {
                            if (e.code != 'EEXIST') throw e;
                        }
                    }
                    // Check the BudgetRequestId folder exists.
                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                    var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
                        try {
                            fs.mkdirSync(budgetRequestFolderPath);
                        } catch (e) {
                            if (e.code != 'EEXIST') throw e;
                        }
                    }

                    mkdirWorkflowAppId(workflowFolderPath);
                    mkdirBudgetRequestId(budgetRequestFolderPath);

                    //
                    // WE HAVE TO CHECK THAT WE ARE NOT OVERWRITING A FILE OF THE SAME NAME. This is also done in uploadattachment_large(). 4-24-2023.
                    //

                    console.log('');
                    console.log('******************************************************');
                    console.log('******************************************************');
                    console.log('WE HAVE TO CHECK THAT WE ARE NOT OVERWRITING A FILE OF THE SAME NAME. fileName: ' + fileName);
                    console.log('******************************************************');
                    console.log('******************************************************');
                    console.log('');

                    fs.readdir(budgetRequestFolderPath, function (err, files) {
                        try {
                            console.log('In _files/uploadattachment.fs.readdir().');
                            if (err) {

                                var msg = 'Error in In _files/uploadattachment()..fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js._files/uploadattachment()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(msg);

                            } else {

                                console.log('******************');
                                console.log('In _files/uploadattachment.fs.readdir(). files: ' + JSON.stringify(files));
                                console.log('******************');

                                // Due to the file conversions, we have to check for different file extensions. I think the best approach is to just make sure that we just never match the first part (first split('.')).
                                // So, having stated that premise, lets take the file array, and remove the extensions. Then we will just compare the first part of the file names.
                                // Step 1: Remove extensions from all files in this array.
                                var newFilesArray = [];
                                for (var i = 0; i < files.length; i++) {
                                    var extensionIndex = files[i].split('.').length - 1;
                                    var newFileName_WithoutExtension = '';
                                    for (var j = 0; j < extensionIndex; j++) {
                                        newFileName_WithoutExtension += files[i].split('.')[j];
                                    }
                                    newFilesArray.push(newFileName_WithoutExtension);
                                }
                                // Step 2: Remove the extension from this filename.
                                var extensionIndex = fileName.split('.').length - 1;
                                var fileExtension = fileName.toLowerCase().split('.')[extensionIndex];
                                var newFileName_WithoutExtension = '';
                                for (var i = 0; i < extensionIndex; i++) {
                                    newFileName_WithoutExtension += fileName.split('.')[i];
                                }
                                // Step 3: Now we can compare and ensure the file names are always different.
                                if (newFilesArray.indexOf(newFileName_WithoutExtension) > -1) {
                                    // This file already exists, so we will come up with a new name for the new file, so that we don't over-write the existing one.
                                    //var extensionIndex = fileName.split('.').length - 1;
                                    //var fileExtension = fileName.toLowerCase().split('.')[extensionIndex];

                                    //var newFileName_WithoutExtension = '';
                                    //for (var i=0;i<extensionIndex;i++) {
                                    //    newFileName_WithoutExtension += fileName.split('.')[i];
                                    //}

                                    for (var i = 0; i < 100; i++) {
                                        var newFilenamePrefix = newFileName_WithoutExtension + ' - copy(' + i + ').';
                                        var newFilename = newFilenamePrefix + fileExtension;
                                        if (!(newFilesArray.indexOf(newFilenamePrefix) > -1)) {
                                            // This new file name is unique. Yay!
                                            fileName = newFilename;
                                            break;
                                        }
                                    }
                                }

                                //console.log('');
                                //console.log('******************');
                                //console.log('In _files/uploadattachment.fs.readdir(). fileName: ' + JSON.stringify(fileName));
                                //console.log('******************');
                                //console.log('');

                                console.log('');
                                console.log('******************************************************');
                                console.log('******************************************************');
                                console.log('In _files/uploadattachment.fs.readdir(). Writing file. fileName: ' + fileName);
                                console.log('******************************************************');
                                console.log('******************************************************');
                                console.log('');

                                // Now we know we have the folder, save the file in it!
                                var filePath = budgetRequestFolderPath + '/' + fileName;
                                //console.log('Writing file. Size for file ' + fileName + ': ' + _FileContent.length);

                                fs.writeFile(filePath, _FileContent, 'binary', function (err) {
                                    if (err) {
                                        console.log(err);
                                        response.send(err);
                                    } else {

                                        var extensionIndex1 = filePath.split('.').length - 1;
                                        var fileExtension1 = filePath.toLowerCase().split('.')[extensionIndex1];

                                        if ((fileExtension1 == 'zip') && (filePath.indexOf('ZIPPEDFILES_') > -1)) {

                                            //
                                            // This is a zip file which needs to be extracted.
                                            //

                                            var destinationFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                            decompress(filePath, destinationFolderPath).then(function (files) {

                                                //
                                                // Now that the zip file has been extracted, we need to delete it, and process each file so that they get their thumbnail and metadata files.
                                                //

                                                // Delete the zip file.
                                                fs.unlink(filePath, function (deleteErr) {
                                                    if (deleteErr) {

                                                        var msg = 'Error in In _files/uploadattachment().fs.unlink(). Error deleting the file: ' + filePath + '. deleteErr: ' + deleteErr;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js._files/uploadattachment()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        response.send(msg);

                                                    } else {

                                                        var promiseArray = [];
                                                        for (var i = 0; i < files.length; i++) {
                                                            var filePath2 = budgetRequestFolderPath + '/' + files[i].name;

                                                            var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-1.';
                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.ProcessFileAfterUpload()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            var promise = ProcessFileAfterUpload(filePath2, '', bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName);
                                                            promiseArray.push(promise);
                                                        }

                                                        Promise.all(promiseArray).then(function (results) {

                                                            var result = {
                                                                status: results.status,
                                                                message: results.message
                                                            }
                                                            response.send(result);

                                                        }).catch(function (e) {

                                                            var msg = 'Exception in ProcessFileAfterUpload.catch():3:' + JSON.stringify(e);
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.ProcessFileAfterUpload()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            var result = {
                                                                status: results.status,
                                                                message: results.message
                                                            }
                                                            response.send(result);


                                                        });

                                                    }
                                                });

                                            }).catch(function (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload.catch():2:' + JSON.stringify(e);
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: results.status,
                                                    message: results.message
                                                }
                                                response.send(result);

                                            });


                                        } else {

                                            var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-2.';
                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.ProcessFileAfterUpload()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var promise = ProcessFileAfterUpload(filePath, description, bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName);
                                            promise.then(function (results) {
                                                try {

                                                    var result = {
                                                        status: results.status,
                                                        message: results.message
                                                    }
                                                    response.send(result);

                                                } catch (e) {

                                                    var msg = 'Exception in ProcessFileAfterUpload.then(). xcx4443:' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ProcessFileAfterUpload.then()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId
                                                    }
                                                    response.send(result);

                                                }

                                            }).catch(function (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload.catch():' + JSON.stringify(e);
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: results.status,
                                                    message: results.message
                                                }
                                                response.send(result);

                                            });

                                        }

                                    }
                                });

                            }
                        } catch (e) {

                            var msg = 'Exception in _files/uploadattachment():2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js._files/uploadattachment().';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /uploadattachment().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./uploadattachment:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./uploadattachment()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/uploadattachment:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./uploadattachment()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in /_files/uploadattachment(): ' + e.message + ', ' + e.stack; // router.put('/_files/uploadattachment', function (request, response) {
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploadattachment()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

function ProcessFileAfterUpload(filePath, description, bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName, convertToAPdf) {
    //
    // ******************************************************************************************************************************
    // *** THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. *** 4-23-2023.
    // ******************************************************************************************************************************
    //
    console.log('');
    console.log('>>> In ProcessFileAfterUpload(). THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD.. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', filePath: ' + filePath);
    console.log('');

    var msg = '>>> In ProcessFileAfterUpload(). THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', filePath: ' + filePath;
    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
    var source = 'start.js.ProcessFileAfterUpload()';
    var errorCode = null;
    WriteToErrorLog(threatLevel, source, errorCode, msg);

    return new Promise(function (resolve, reject) {
        try {

            //
            //
            // First, we have to check if this is a .zip file, which we want to extract. 9-10-2023.
            //
            //

            //
            // This where we are creating the .metadata file.
            //
            var stats = fs.statSync(filePath);
            var size = stats["size"];
            var birthtime = stats["birthtime"].toISOString(); // UTC. Doing it this way because this is how MongoDb does it, using toISOString() with a new Date().

            console.log('In start.js./ProcessFileAfterUpload(). This where we are creating the .metadata file. size: ' + size + ', birthtime: ' + birthtime + ', filePath: ' + filePath);

            //var description = request.body.Description;

            var metaFilePath = filePath + '.metadata';

            var json = {};
            json["description"] = description;
            json["size"] = size;
            json["birthtime"] = birthtime;
            json["bwParticipantId"] = bwParticipantId;
            json["bwParticipantEmail"] = bwParticipantEmail;
            json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

            var metaFileContent = JSON.stringify(json);

            fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                try {
                    if (metaErr) {

                        var msg = 'Error in In _files/ProcessFileAfterUpload.fs.writeFile(). Error saving metadata file [' + metaFilePath + ']. ' + metaErr;
                        console.log(msg);
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = '_files/ProcessFileAfterUpload().';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                    } else {

                        var msg = 'In _files/ProcessFileAfterUpload.fs.writeFile(). Successfully saved metadata file [' + metaFilePath + '].';
                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                        var source = '_files/ProcessFileAfterUpload().';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                    }
                } catch (e) {

                    var msg = 'Exception in _files/ProcessFileAfterUpload():2-2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = '_files/ProcessFileAfterUpload().';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                }
            });

            //
            //
            // THIS IS WHERE WE CHECK if we want this file to be converted to a pdf file.
            //
            //
            if ((convertToAPdf == true) || (convertToAPdf == 'true')) {

                var tempArray = filePath.split('.');
                tempArray.splice(tempArray.length - 1); // remove the last one.
                var filenameWithoutExtension = '';
                for (var i = 0; i < tempArray.length; i++) {
                    filenameWithoutExtension += tempArray[i];
                }

                var pdfFilePath = filenameWithoutExtension + '.pdf';

                console.log('');
                console.log('');
                console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WE want this file to be converted to a pdf file. filePath: ' + filePath + ', filenameWithoutExtension: ' + filenameWithoutExtension + ', pdfFilePath: ' + pdfFilePath);
                console.log('');
                console.log('');
                console.log('');

                gm(filePath)
                    .autoOrient()
                    .write(pdfFilePath, function (err) {
                        try {
                            if (err) {

                                var msg = 'Error creating the pdf in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else {

                                //var thumbnailPath = pdfFilePath + '_thumbnail_320px_pdf_' + '.png';
                                var thumbnailPath = pdfFilePath + '_320px_.png'; // 8-4-2024.

                                var msg = '>>>>>>>>>>>>>>xcx443 In ProcessFileAfterUpload(). Creating .pdf thumbnail at ' + pdfFilePath + '.';
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                gm(pdfFilePath + '[0]')
                                    .resize(320)
                                    .font('Arial', 72)
                                    .drawText(75, 200, 'PDF') // 'PDF')
                                    .write(thumbnailPath, function (err) {
                                        try {
                                            if (err) {

                                                var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'In ProcessFileAfterUpload()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg,
                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: pdfFilePath
                                                }

                                                reject(result);

                                            } else {

                                                //
                                                //
                                                // NOW THAT WE HAVE our pdf files and thumbnail, we have to delete the original file, and it's .metadata file.
                                                //
                                                //

                                                fs.unlink(filePath, function (deleteErr) {
                                                    if (deleteErr) {
                                                        console.log(deleteErr);
                                                        response.send(deleteErr);
                                                    } else {

                                                        var metadataFilePath = filePath + '.metadata';

                                                        fs.unlink(metadataFilePath, function (deleteErr) {
                                                            if (deleteErr) {
                                                                console.log(deleteErr);
                                                                response.send(deleteErr);
                                                            } else {

                                                                console.log('The files ' + filePath + ' and ' + metadataFilePath + ' were deleted!');

                                                                var msg = 'In ProcessFileAfterUpload.imagemagick.write(). Created .' + 'PDF' + ' thumbnail at [' + thumbnailPath + '].';
                                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                var source = 'In ProcessFileAfterUpload()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg,
                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: pdfFilePath
                                                                }

                                                                resolve(result);

                                                            }
                                                        });

                                                    }
                                                });

                                            }

                                        } catch (e) {

                                            var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg,
                                                bwWorkflowAppId: bwWorkflowAppId,
                                                bwBudgetRequestId: bwBudgetRequestId,
                                                filePath: pdfFilePath
                                            }

                                            reject(result);

                                        }

                                    });

                            }

                        } catch (e) {

                            var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg,
                                bwWorkflowAppId: bwWorkflowAppId,
                                bwBudgetRequestId: bwBudgetRequestId,
                                filePath: filePath
                            }

                            reject(result);

                        }

                    });

            } else {

                if (filePath.toLowerCase().indexOf('.aifc') > 0) { // Added .aifc 8-10-2024.

                    console.log('Preparing to convert .aifc to .mp3: ' + filePath);
                    var amrIndex = filePath.toLowerCase().indexOf('.aifc');
                    var mp3FilePath = filePath.substring(0, amrIndex) + '.mp3';
                    console.log(mp3FilePath);

                    ffmpeg(filePath)
                        .toFormat('mp3')
                        .on('error', function (err) {

                            var msg = 'The .aifc file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                            console.log(msg);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'In PUT /_files/xcx432235666()';
                            var errorCode = null;
                            var message = msg;
                            WriteToErrorLog(threatLevel, source, errorCode, message);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            reject(result);

                        })
                        .on('progress', function (progress) {
                            // console.log(JSON.stringify(progress));
                            console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted xcx343252.');
                        })
                        .on('end', function () {
                            console.log('FFMPEG: Processing finished! xcx3432542.');


                            // 
                            var result = {
                                status: 'SUCCESS',
                                message: 'SUCCESS',
                                result: 'SUCCESS'
                            }
                            resolve(result);

                            //
                            // >>>>>>>>>> THIS NEEDS WORK!!!!!!!!! DEV!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 8-10-2024.
                            //

                            //// Now that we have our .mp3 file, delete the .amr file.
                            //var fileToDeletePath = inventoryImageFolderPath + '/' + _Filename;    
                            //fs.unlink(fileToDeletePath, function (deleteErr) {
                            //    if (deleteErr) {
                            //        console.log(deleteErr);
                            //        response.send(deleteErr);
                            //    } else {
                            //        console.log('The file ' + fileToDeletePath + ' was deleted!');
                            //var msg = 'The .aifc file was converted successfully to a .mp3 file.';
                            //        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            //        var source = 'In PUT /_files/uploadidentifyingimageforparticipant()xcx343255333';
                            //        var errorCode = null;
                            //        var message = msg;
                            //        WriteToErrorLog(threatLevel, source, errorCode, message);

                            //        // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                            //        if (description != '') {
                            //            var amrIndex = _Filename.toUpperCase().indexOf('.AMR');
                            //            var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                            //            var metaFilePath = inventoryImageFolderPath + '/' + mp3Filename + '.metadata';
                            //            var metaFileContent = '';
                            //            metaFileContent += '<description>';
                            //            metaFileContent += description;
                            //            metaFileContent += '</description>';
                            //            fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                            //                if (metaErr) {
                            //                    console.log(metaErr);
                            //                    response.send(metaErr);
                            //                } else {
                            //                    console.log('The file ' + metaFilePath + ' was saved!');
                            //                    response.send('The file ' + metaFilePath + ' was saved!');
                            //                }
                            //            });
                            //        } else {
                            //            console.log('The file was saved!');
                            //            response.send('The file was saved!');
                            //        }
                            //    }
                            //});





                        })
                        .save(mp3FilePath); //path where you want to save your file

                } else if ((filePath.toLowerCase().indexOf('.mp4') > 0) || (filePath.toLowerCase().indexOf('.avi') > 0)) { // Added .avi check here 8-14-2023. 

                    ffprobe(filePath, { path: ffprobePath }, function (err, info) {
                        if (err) {

                            var msg = 'Error in FFPROBE: ' + err;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        } else {

                            var duration_seconds = info.streams[0].duration; // For example, duration: 651.151151

                            var hoursLeft = Math.floor(duration_seconds / 3600);
                            var min = Math.floor((duration_seconds - hoursLeft * 3600) / 60);
                            var secondsLeft = duration_seconds - hoursLeft * 3600 - min * 60;
                            //secondsLeft = Math.round(secondsLeft * 100) / 100;
                            secondsLeft = Math.trunc(Math.round(secondsLeft * 100) / 100);
                            var duration = hoursLeft < 10 ? "0" + hoursLeft : hoursLeft;
                            duration += ":" + (min < 10 ? "0" + min : min);
                            duration += ":" + (secondsLeft < 10 ? "0" + secondsLeft : secondsLeft);

                            var msg = 'FFPROBE DETAILS FOR ' + filePath + ': duration: ' + duration; //  ' + JSON.stringify(info);
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GET._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            // Create a thumbnail for this file.
                            var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';

                            // Replace with our duration.
                            var duration_temp = duration.replaceAll(':', '\\\:'); // This is required for ffmpeg.
                            var ffmpegThumbnailVFInstructions_timestamp_temp = ffmpegThumbnailVFInstructions_timestamp.replace('xcxdurationxcx', duration_temp);

                            var ffmpegThumbnailVFInstructions_temp = '[in]' + ffmpegThumbnailVFInstructions_filetype + ',' + ffmpegThumbnailVFInstructions_timestamp_temp; // Use the [in] command to join together multiple drawtext commands.

                            ffmpeg(filePath)
                                .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                .output(thumbnailPath)
                                .outputOptions(
                                    '-frames', '1'  // Capture just one frame of the video
                                )
                                .addOption('-vf', ffmpegThumbnailVFInstructions_temp) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                .on('error', function (err) {

                                    var msg = 'Error creating the thumbnail in ProcessFileAfterUpload.ffmpeg.on.error(): ' + err.message + ', ' + err.stack;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'In start.js./ProcessFileAfterUpload()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    var result = {
                                        status: 'ERROR',
                                        result: msg,
                                        message: msg
                                    }
                                    reject(result);

                                })
                                .on('end', function () {

                                    gm(thumbnailPath)
                                        .resize(320)
                                        //.font('Arial', 72)
                                        //.drawText(75, 200, 'PDF') 
                                        .write(thumbnailPath, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating thethumbnail in ProcessFileAfterUpload.ffmpeg.on.end.gm.write(): ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: pdfFilePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var msg = 'In ProcessFileAfterUpload.ffmpeg.on.end.gm.write(). Rescaled thumbnail at [' + thumbnailPath + '].';
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
                                                        try {
                                                            if (bruError) {

                                                                var msg = 'Error in ProcessFileAfterUpload.ffmpeg.on.end.gm.write(). Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                                                var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.ProcessFileAfterUpload()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    result: msg,
                                                                    message: msg
                                                                }
                                                                reject(result);

                                                            } else {

                                                                if (bruMod.modifiedCount == 0) {

                                                                    //
                                                                    // The request doesn't exist yet. We need to create it! // 9-8-2022
                                                                    //
                                                                    var msg = 'In _files/ProcessFileAfterUpload.BwBudgetRequest.update() xcx1423. Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.ProcessFileAfterUpload()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    console.log(msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        result: 'NO_REQUEST_SAVED',
                                                                        message: msg
                                                                    }
                                                                    resolve(result);

                                                                } else {

                                                                    // The request already exists, so just respond with SUCCESS.
                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        result: 'SUCCESS'
                                                                    }
                                                                    resolve(result);

                                                                }

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in POST _files/ProcessFileAfterUpload xcx4443-2:' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.ProcessFileAfterUpload()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                result: msg,
                                                                message: msg
                                                            }
                                                            reject(msg);

                                                        }
                                                    });

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: pdfFilePath
                                                }

                                                reject(result);

                                            }

                                        });

                                })
                                .run()

                        }
                    });

                } else {

                    //
                    // This is where the small image is created for display in the executive summaries. this approach speeds up the application immensly! 10-27-2022
                    //
                    // The thumbnail size is 320px wide, with constrained proportions. The name will be the filename, with _320px.jpg suffix.
                    //
                    var promise = checkForUnknownFileNameExtensionsAndForMimeTypeMatch(bwWorkflowAppId, bwBudgetRequestId, filePath); // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
                    promise.then(function (results) {
                        try {

                            var bwWorkflowAppId = results.bwWorkflowAppId;
                            var bwBudgetRequestId = results.bwBudgetRequestId;
                            var filePath = results.filePath;

                            if (results.status == 'ERROR') {

                                var msg = 'In ProcessFileAfterUpload(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():1-1: ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else if (results.status == 'EXCEPTION') {

                                var msg = 'In ProcessFileAfterUpload(). Exception returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch(): ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else if (results.status != 'SUCCESS') {

                                var msg = 'In ProcessFileAfterUpload(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():2: ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else { // SUCCESS

                                var extensionIndex = filePath.split('.').length - 1;
                                var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

                                if ((fileExtension == 'pdf') || (fileExtension == 'doc') || (fileExtension == 'docx') || (fileExtension == 'odt')) {

                                    //var thumbnailPath = filePath + '_thumbnail_320px_pdf_' + '.png';
                                    var thumbnailPath = filePath + '_320px_.png'; // 8-4-2024.

                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload(). Creating .pdf thumbnail at ' + thumbnailPath + '.';

                                    console.log('');
                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                    console.log('**************************************');
                                    console.log(msg);
                                    console.log('**************************************');
                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                    console.log('');

                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'In ProcessFileAfterUpload()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    gm(filePath + '[0]')
                                        .resize(320)
                                        .font('Arial', 72)
                                        .drawText(75, 200, fileExtension.toUpperCase()) // 'PDF')
                                        .write(thumbnailPath, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: filePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var msg = 'In ProcessFileAfterUpload.imagemagick.write(). Created .' + fileExtension + ' thumbnail at [' + thumbnailPath + '].';
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'SUCCESS',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: filePath
                                                    }

                                                    resolve(result);

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: filePath
                                                }

                                                reject(result);

                                            }

                                        });

                                } else if ((fileExtension == 'png') || (fileExtension == 'jpg') || (fileExtension == 'jpeg') || (fileExtension == 'jfif') || (fileExtension == 'webp') || (fileExtension == 'gif')) {

                                    var thumbnailPath = filePath + '_320px_.png'; // changed this 8-4-2024. // + fileExtension;

                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload(). Creating 320px thumbnail at ' + thumbnailPath + '. filePath: ' + filePath;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'In start.js.ProcessFileAfterUpload()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    ////
                                    //// We make sure the thumbnail does not already exist, because if it does, it won't get overriden for some reason.
                                    ////
                                    //fs.unlink(thumbnailPath, function (deleteErr) {
                                    //// We don't want to catch the error if the file doesn't exist. Just carry on! :)



                                    //
                                    // The following was previously resized using ffmpeg. However, ffmpeg is meant for video and cannot detect EXIF tags (which indicate if the image should be rotated). In some cases, the resizing resulted in a rotated image.
                                    // So, using this Imagemagick code.
                                    //
                                    gm(filePath)
                                        .resize(320)
                                        .autoOrient()
                                        //.rotate("#545651", 78)
                                        // Draw Rectangle using drawRectangle function
                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
                                        .write(thumbnailPath, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating the 320px thumbnail in ProcessFileAfterUpload.imagemagick.write(): ' + err + ' :: filePath: ' + filePath + ', thumbnailPath: ' + thumbnailPath;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: filePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var msg = 'In ProcessFileAfterUpload.imagemagick.write(). Created 320px thumbnail at [' + thumbnailPath + '].';
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var printableImagePath = filePath + '_640x480px_.' + fileExtension;

                                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload(). Creating 640x480px printable image at ' + printableImagePath + '.';
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    gm(filePath)
                                                        .resize(640, 480, '^') // The '^' argument on the resize function will tell GraphicsMagick to use the height and width as a minimum instead of the default behavior, maximum. The resulting resized image will have either the width or height be your designated dimension, while the non-conforming dimension is larger than the specified size.
                                                        .autoOrient()
                                                        //.rotate("#545651", 78)
                                                        // Draw Rectangle using drawRectangle function
                                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
                                                        .write(printableImagePath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error creating the 640x480px printable image in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In ProcessFileAfterUpload()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: filePath
                                                                    }

                                                                    reject(result);

                                                                } else {

                                                                    var msg = 'In ProcessFileAfterUpload.imagemagick.write(). Created 640x480px printable image at [' + printableImagePath + '].';
                                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In ProcessFileAfterUpload()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: filePath
                                                                    }

                                                                    resolve(result);

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: filePath
                                                                }

                                                                reject(result);

                                                            }

                                                        });

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: filePath
                                                }

                                                reject(result);

                                            }

                                        });

                                } else {

                                    // fileExtension
                                    var msg = 'In ProcessFileAfterUpload.xcx324234(). fileExtension: ' + fileExtension;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'In ProcessFileAfterUpload()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    var result = {
                                        status: 'SUCCESS',
                                        message: msg,
                                        bwWorkflowAppId: bwWorkflowAppId,
                                        bwBudgetRequestId: bwBudgetRequestId,
                                        filePath: filePath
                                    }

                                    resolve(result);

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in ProcessFileAfterUpload.checkBadFileNameExtensionsForMimeTypeMatch.then(). xcx4443:' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ProcessFileAfterUpload.checkBadFileNameExtensionsForMimeTypeMatch.then()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg,
                                bwWorkflowAppId: bwWorkflowAppId,
                                bwBudgetRequestId: bwBudgetRequestId
                            }

                            reject(result);

                        }

                    }).catch(function (e) {

                        var msg = 'Exception in ProcessFileAfterUpload.checkBadFileNameExtensionsForMimeTypeMatch.catch():' + e;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.ProcessFileAfterUpload.checkBadFileNameExtensionsForMimeTypeMatch.catch()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg,
                            bwWorkflowAppId: bwWorkflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId
                        }

                        reject(result);

                    });

                    //
                    // We don't bother doing these synchronously, just let 'er run! :)
                    //

                    BwBudgetRequest.updateOne({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
                        try {
                            if (bruError) {

                                var msg = 'Error in _files/ProcessFileAfterUpload().xcx457 Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.PUT._files/ProcessFileAfterUpload()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                //var result = {
                                //    status: 'ERROR',
                                //    result: msg,
                                //    message: msg
                                //}
                                //response.send(result);

                            } else {

                                if (bruMod.modifiedCount == 0) {

                                    // The request doesn't exist yet. We need to create it!
                                    var msg = 'In _files/ProcessFileAfterUpload.BwBudgetRequest.update(). Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.POST._files/ProcessFileAfterUpload()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    console.log(msg);

                                    //var result = {
                                    //    status: 'SUCCESS',
                                    //    result: 'NO_REQUEST_SAVED',
                                    //    message: msg
                                    //}
                                    //response.send(result);

                                } else {

                                    // The request already exists, so just respond with SUCCESS.
                                    //var result = {
                                    //    status: 'SUCCESS',
                                    //    result: 'SUCCESS'
                                    //}
                                    //response.send(result);

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in POST _files/ProcessFileAfterUpload xcx4443:' + e.message + ', ' + e.stack;
                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST._files/ProcessFileAfterUpload()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            //var result = {
                            //    status: 'EXCEPTION',
                            //    result: msg,
                            //    message: msg
                            //}
                            //response.send(msg);

                        }
                    });
                }

            }

        } catch (e) {

            var msg = 'Exception in start.js.ProcessFileAfterUpload():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.ProcessFileAfterUpload(). bwParticipantId: ' + bwParticipantId;
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            };
            reject(result);

        }
    });
}



router.post('/_files/bwCutAndPaste_Attachment_To_Email', function (request, response) { // bwCutAndPaste_Attachment(ActiveStateIdentifier, OriginFilePath, DestinationSlideSetGuid, DestinationSlideSetFilename)
    try {
        // This is for the slideshow copy and paste among slide sets.
        console.log('In start.js.bwCutAndPaste_Attachment_To_Email(). This is for the copy and paste of attachments among requests.');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /bwCutAndPaste_Attachment_To_Email().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var fileUrl = request.body.fileUrl;

                    // Sample fileUrl: https://shareandcollaborate.com/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/7cd8f74f-ccd6-4d37-9459-5bc542ceb233/Historical Handout for St Thomas September 2022 (2).pdf?v=d918f553-4db8-4064-89b7-6eac626c8c9f&ActiveStateIdentifier=968b5ddb-c685-4f56-a383-e21fedbd9fa7

                    var tmp1 = fileUrl.split('https://')[1];
                    var tmp2 = tmp1.split('_files/')[1];
                    var tmp3 = tmp2.split('/')[2];

                    var bwWorkflowAppId = tmp2.split('/')[0];
                    var bwBudgetRequestId = tmp2.split('/')[1];
                    var filename = tmp3.split('?')[0];

                    if (!((bwWorkflowAppId_LoggedIn == bwWorkflowAppId) && bwBudgetRequestId && filename)) {

                        var results = {
                            bwWorkflowAppId: bwWorkflowAppId,
                            bwBudgetRequestId: bwBudgetRequestId,
                            filename: filename
                        }

                        var msg = 'Error in start.js.bwCutAndPaste_Attachment_To_Email(). Invalid value(s) encountered. This process cannot continue. results: ' + JSON.stringify(results);

                        var result = {
                            status: 'ERROR',
                            message: msg,
                            results: results
                        }

                        response.send(result);

                    } else {

                        //
                        // Itemize all related files which have to be copied as well... metadata and thumbnail files.
                        // Thanks to our naming convention, we can search for the prefix and be sure that we get all of the related files.
                        //

                        var requestBody = {
                            bwWorkflowAppId: bwWorkflowAppId_LoggedIn,
                            RelatedRequestId: null,

                            bwParticipantId: bwParticipantId_LoggedIn,
                            bwParticipantEmail: null,
                            bwParticipantFriendlyName: null,

                            FromEmailAddress: null,
                            Recipients: null,
                            CcAddress: null,
                            BccAddress: null,
                            Subject: null,
                            Body: null
                        }

                        var _id = 'NEW_EMAIL';

                        ensureWeHaveADraftEmailCreatedForANewEmail(_id, requestBody).then(function (results) {
                            try {

                                var _id = results._id; // This is the MongoDB generated _id for the record.

                                if (!_id || (_id == 'NEW_EMAIL')) {

                                    var msg = 'Error in start.js.bwCutAndPaste_Attachment_To_Email(). INVALID VALUE FOR _id: ' + _id + '. THIS PROCESS CANNOT PROCEED.';
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    var msg = '>>> RETURNED FROM ensureWeHaveADraftEmailCreatedForANewEmail() with value for _id: ' + _id;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                    var budgetRequestFolderPath_Origin = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/';
                                    var emailFolderPath1 = rootFilePath + '_emailAttachments/' + bwParticipantId_LoggedIn + '/' + _id + '/';
                                    var emailFolderPath_Destination = emailFolderPath1 + 'ATTACHMENTS/';

                                    fs.readdir(budgetRequestFolderPath_Origin, function (err, files_Origin) {
                                        try {
                                            console.log('In start.js.bwCutAndPaste_Attachment_To_Email().fs.readdir().');
                                            if (err) {

                                                var msg = 'Error in start.js.bwCutAndPaste_Attachment_To_Email().fs.readdir(). Error listing the files in budgetRequestFolderPath_Origin: ' + budgetRequestFolderPath_Origin + ': ' + err;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                response.send(result);

                                            } else {

                                                //
                                                // Iterate through all of the files in the folder, and make our own list of files which are related to our copy-and-paste file.
                                                //
                                                var OriginFilesToCopyAndPaste = []; // These are the files we are going to copy-and-paste.
                                                for (var i = 0; i < files_Origin.length; i++) {
                                                    if (files_Origin[i].split(filename).length > 1) {
                                                        // We found one of our files.
                                                        OriginFilesToCopyAndPaste.push(files_Origin[i]);
                                                    }
                                                }

                                                //var results = {
                                                //    OriginFilesToCopyAndPaste: OriginFilesToCopyAndPaste,
                                                //    _id: _id,
                                                //    budgetRequestFolderPath_Origin: budgetRequestFolderPath_Origin,
                                                //    emailFolderPath_Destination: emailFolderPath_Destination
                                                //}
                                                //var msg = 'SUCCESS';
                                                //var result = {
                                                //    status: 'SUCCESS',
                                                //    message: msg,
                                                //    results: results
                                                //}

                                                //response.send(result);

                                                //
                                                // Check that we aren't overwriting any files in the destination folder.
                                                //

                                                // First, we have to check that the destination folder exists. If it doesn't, we will create it.
                                                // It will not exist, as this is a new email.

                                                var mkdirBudgetRequestId1 = function (budgetRequestFolderPath) {
                                                    try {
                                                        fs.mkdirSync(budgetRequestFolderPath);
                                                    } catch (e) {
                                                        if (e.code != 'EEXIST') throw e;
                                                    }
                                                }
                                                mkdirBudgetRequestId1(emailFolderPath1);

                                                var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
                                                    try {
                                                        fs.mkdirSync(budgetRequestFolderPath);
                                                    } catch (e) {
                                                        if (e.code != 'EEXIST') throw e;
                                                    }
                                                }
                                                mkdirBudgetRequestId(emailFolderPath_Destination);

                                                //
                                                // At this point we are certain that the folder exists, so proceed.
                                                //

                                                fs.readdir(emailFolderPath_Destination, function (err, files_Destination) {
                                                    try {

                                                        if (err) {

                                                            var msg = 'Error in start.js.bwCutAndPaste_Attachment_To_Email().fs.readdir(). Error listing the files in emailFolderPath_Destination: ' + emailFolderPath_Destination + ': ' + err;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            var result = {
                                                                status: 'ERROR',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        } else {

                                                            //
                                                            // First, we want to make sure the file doesn't already exist.
                                                            //

                                                            var theFilesThatAlreadyExistInTheDestinationFolder = [];
                                                            for (var i = 0; i < files_Destination.length; i++) {
                                                                for (var j = 0; j < OriginFilesToCopyAndPaste.length; j++) {
                                                                    if (files_Destination[i] == OriginFilesToCopyAndPaste[j]) {
                                                                        theFilesThatAlreadyExistInTheDestinationFolder.push(files_Destination[i]);
                                                                    }
                                                                }
                                                            }

                                                            if (theFilesThatAlreadyExistInTheDestinationFolder.length > 0) {

                                                                //
                                                                // If we get here, the file already exists. We just exit with an error. We are not remediating this use case at this time. 11-5-2023.
                                                                //

                                                                var msg = 'File(s) already exist in the destination folder. theFilesThatAlreadyExistInTheDestinationFolder: ' + JSON.stringify(theFilesThatAlreadyExistInTheDestinationFolder);
                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                for (var i = 0; i < OriginFilesToCopyAndPaste.length; i++) {

                                                                    var originFilePath = budgetRequestFolderPath_Origin + OriginFilesToCopyAndPaste[i];
                                                                    var destinationFilePath = emailFolderPath_Destination + OriginFilesToCopyAndPaste[i];

                                                                    var msg = 'In bwCutAndPaste_Attachment_To_Email(). COPY FILE FROM: ' + originFilePath + ', TO: ' + destinationFilePath;
                                                                    console.log(msg);

                                                                    fs.copyFile(originFilePath, destinationFilePath, function (err) {
                                                                        try {
                                                                            if (err) {

                                                                                var msg = 'Error in start.js.bwCutAndPaste_Attachment_To_Email().fs.readdir(). err: ' + err;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                            } else {

                                                                                var msg = 'In bwCutAndPaste_Attachment_To_Email(). COPIED FILE FROM: ' + originFilePath + ', TO: ' + destinationFilePath;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                            }
                                                                        } catch (e) {

                                                                            var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():2-45: ' + e.message + ', ' + e.stack;
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        }
                                                                    });

                                                                }

                                                                var results = {
                                                                    _id: _id
                                                                }

                                                                var msg = 'SUCCESS';
                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg,
                                                                    results: results
                                                                }

                                                                response.send(result);

                                                            }

                                                        }

                                                    } catch (e) {

                                                        var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():3-554-2: ' + e.message + ', ' + e.stack;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    }
                                                });

                                            }

                                        } catch (e) {

                                            var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():3-554: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }
                                    });

                                }

                            } catch (e) {

                                var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():3xcx7754: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                var result = {
                                    message: msg,
                                    status: 'EXCEPTION'
                                }
                                response.send(result);

                            }

                        }).catch(function (e) {

                            var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():3xcx34345: ' + JSON.stringify(e);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            }
                            response.send(result);

                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /bwCutAndPaste_Attachment_To_Email().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                //var tmp1 = fileUrl.split('https://')[1];
                //var tmp2 = tmp1.split('_files/')[1];
                //var bwWorkflowAppId = tmp2.split('/')[0];
                //var tmp3 = tmp2.split('/')[1];
                //var bwBudgetRequestId = tmp3.split('/')[0];
                //var tmp4 = tmp3.split('/')[1];

                var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email(). fileUrl: ' + fileUrl + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', tmp2: ' + tmp2 + ', bwBudgetRequestId: ' + bwBudgetRequestId + ' : ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.bwCutAndPaste_Attachment_To_Email(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.bwCutAndPaste_Attachment_To_Email()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});



router.post('/_files/bwCutAndPaste_Attachment', function (request, response) { // bwCutAndPaste_Attachment(ActiveStateIdentifier, OriginFilePath, DestinationSlideSetGuid, DestinationSlideSetFilename)
    try {
        // This is for the slideshow copy and paste among slide sets.
        console.log('In start.js.bwCutAndPaste_Attachment(). This is for the copy and paste of attachments among requests.');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /bwCutAndPaste_Attachment().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    //var data = {
                    //    bwParticipantId_LoggedIn: participantId,
                    //    bwActiveStateIdentifier: activeStateIdentifier,
                    //    bwWorkflowAppId_LoggedIn: workflowAppId,

                    //    bwWorkflowAppId: workflowAppId,

                    //    FileNameToCutAndPaste: fileNameToCutAndPaste,
                    //    bwBudgetRequestId_Origin: bwBudgetRequestId_Origin,
                    //    bwBudgetRequestId_Destination: bwBudgetRequestId_Destination,

                    //    bwParticipantId: participantId,
                    //    bwParticipantFriendlyName: participantFriendlyName,
                    //    bwParticipantEmail: participantEmail
                    //};

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var FileNameToCutAndPaste = decodeURI(request.body.FileNameToCutAndPaste.trim());
                    var bwBudgetRequestId_Origin = request.body.bwBudgetRequestId_Origin;
                    var bwBudgetRequestId_Destination = request.body.bwBudgetRequestId_Destination;

                    //
                    // First, we have to get the common prefix for this file. This ensures that we get the thumbnail(s) and .metadata files, without missing any of them.
                    //    - considering these file suffixes: "_thumbnail_.png", "_320px_.png", "_320px_"[any image extension [png, jpg, jpeg, jfif, webp, gif]].
                    //

                    var FilePrefixToCutAndPaste;
                    if (FileNameToCutAndPaste.split('_thumbnail_.png').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_thumbnail_.png')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.png').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.png')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.jpg').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.jpg')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.jpeg').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.jpeg')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.jfif').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.jfif')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.webp').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.webp')[0];
                    } else if (FileNameToCutAndPaste.split('_320px_.gif').length > 1) {
                        FilePrefixToCutAndPaste = FileNameToCutAndPaste.split('_320px_.gif')[0];
                    } else {

                        FilePrefixToCutAndPaste = '';

                        var extensionIndex = FileNameToCutAndPaste.split('.').length - 1;
                        for (var i = 0; i < extensionIndex; i++) {
                            FilePrefixToCutAndPaste += FileNameToCutAndPaste.split('.')[i];
                        }

                    }

                    // https://shareandcollaborate.com/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/138e8a19-2156-4211-9a0f-3c115b858d1f/recipt%20-wharffinder-com%2010-46.png_320px_.png?v=5acd7fb4-b0b2-4180-96f1-338fffe1dc81&ActiveStateIdentifier=f2345854-b24b-495d-ac47-e6370ce226d0

                    if (!FilePrefixToCutAndPaste) {

                        var msg = 'Error in start.js.bwCutAndPaste_Attachment(). xcx2131244. Error determining FilePrefixToCutAndPaste. FileNameToCutAndPaste: ' + FileNameToCutAndPaste + ', FilePrefixToCutAndPaste: ' + FilePrefixToCutAndPaste + '.';
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.bwCutAndPaste_Attachment()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        response.send(result);

                    } else {

                        var msg = 'In start.js.bwCutAndPaste_Attachment(). xcx1234328888. FileNameToCutAndPaste: ' + FileNameToCutAndPaste + ', FilePrefixToCutAndPaste: ' + FilePrefixToCutAndPaste + '.';
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.bwCutAndPaste_Attachment()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        //
                        // Itemize all related files which have to be copied as well... metadata and thumbnail files.
                        // Thanks to our naming convention, we can search for the prefix and be sure that we get all of the related files.
                        //

                        var budgetRequestFolderPath_Origin = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId_Origin + '/';
                        var budgetRequestFolderPath_Destination = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId_Destination;

                        fs.readdir(budgetRequestFolderPath_Origin, function (err, files_Origin) {
                            try {
                                console.log('In start.js.bwCutAndPaste_Attachment().fs.readdir().');
                                if (err) {

                                    var msg = 'Error in start.js.bwCutAndPaste_Attachment().fs.readdir(). Error listing the files in budgetRequestFolderPath_Origin: ' + budgetRequestFolderPath_Origin + ': ' + err;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.bwCutAndPaste_Attachment()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    //
                                    // Iterate through all of the files in the folder, and make our own list of files which are related to our copy-and-paste file.
                                    //
                                    var OriginFilesToCopyAndPaste = []; // These are the files we are going to copy-and-paste.
                                    for (var i = 0; i < files_Origin.length; i++) {
                                        if (files_Origin[i].split(FilePrefixToCutAndPaste).length > 1) {
                                            // We found one of our files.
                                            OriginFilesToCopyAndPaste.push(files_Origin[i]);
                                        }
                                    }

                                    //
                                    // Check that we aren't overwriting any files in the destination folder.
                                    //

                                    // First, we have to check that the destination folder exists. If it doesn't, we will create it.
                                    var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
                                        try {
                                            fs.mkdirSync(budgetRequestFolderPath);
                                        } catch (e) {
                                            if (e.code != 'EEXIST') throw e;
                                        }
                                    }
                                    mkdirBudgetRequestId(budgetRequestFolderPath_Destination);

                                    //
                                    // At this point we are certain that the folder exists, so proceed.
                                    //

                                    fs.readdir(budgetRequestFolderPath_Destination, function (err, files_Destination) {
                                        try {

                                            if (err) {

                                                var msg = 'Error in start.js.bwCutAndPaste_Attachment().fs.readdir(). Error listing the files in budgetRequestFolderPath_Destination: ' + budgetRequestFolderPath_Destination + ': ' + err;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.bwCutAndPaste_Attachment()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                response.send(result);

                                            } else {

                                                //
                                                // First, we want to make sure the file doesn't already exist.
                                                //

                                                var theFilesThatAlreadyExistInTheDestinationFolder = [];
                                                for (var i = 0; i < files_Destination.length; i++) {
                                                    for (var j = 0; j < OriginFilesToCopyAndPaste.length; j++) {
                                                        if (files_Destination[i] == OriginFilesToCopyAndPaste[j]) {
                                                            theFilesThatAlreadyExistInTheDestinationFolder.push(files_Destination[i]);
                                                        }
                                                    }
                                                }

                                                if (theFilesThatAlreadyExistInTheDestinationFolder.length > 0) {

                                                    //
                                                    // If we get here, the file already exists. We just exit with an error. We are not remediating this use case at this time. 11-5-2023.
                                                    //

                                                    var msg = 'File(s) already exist in the destination folder. theFilesThatAlreadyExistInTheDestinationFolder: ' + JSON.stringify(theFilesThatAlreadyExistInTheDestinationFolder);
                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                } else {

                                                    for (var i = 0; i < OriginFilesToCopyAndPaste.length; i++) {

                                                        var originFilePath = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId_Origin + '/' + OriginFilesToCopyAndPaste[i];
                                                        var destinationFilePath = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId_Destination + '/' + OriginFilesToCopyAndPaste[i];

                                                        var msg = 'In bwCutAndPaste_Attachment(). COPY FILE FROM: ' + originFilePath + ', TO: ' + destinationFilePath;
                                                        console.log(msg);

                                                        fs.copyFile(originFilePath, destinationFilePath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error in start.js.bwCutAndPaste_Attachment().fs.readdir(). err: ' + err;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.bwCutAndPaste_Attachment()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                } else {

                                                                    var msg = 'In bwCutAndPaste_Attachment(). COPIED FILE FROM: ' + originFilePath + ', TO: ' + destinationFilePath;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.bwCutAndPaste_Attachment()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                }
                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.bwCutAndPaste_Attachment():2-45: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.bwCutAndPaste_Attachment()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            }
                                                        });

                                                    }

                                                    var msg = 'SUCCESS';
                                                    var result = {
                                                        status: 'SUCCESS',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                }

                                            }
                                        } catch (e) {

                                            var msg = 'Exception in start.js.bwCutAndPaste_Attachment():3-554-2: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.bwCutAndPaste_Attachment()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }
                                    });

                                }
                            } catch (e) {

                                var msg = 'Exception in start.js.bwCutAndPaste_Attachment():3-554: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.bwCutAndPaste_Attachment()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }
                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /bwCutAndPaste_Attachment().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.bwCutAndPaste_Attachment():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.bwCutAndPaste_Attachment()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.bwCutAndPaste_Attachment():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.bwCutAndPaste_Attachment()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.bwCutAndPaste_Attachment(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.bwCutAndPaste_Attachment()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});





const storage_attachments = multer.diskStorage({
    destination: function (request, file, cb) {
        try {

            console.log('In multer.diskStorage.storage_attachments.destination().');

            var bwWorkflowAppId = request.body.bwWorkflowAppId;
            var bwBudgetRequestId = request.body.bwBudgetRequestId;

            // Check the WorkflowAppId folder exists.
            var workflowFolderPath = rootFilePath + bwWorkflowAppId;
            var mkdirWorkflowAppId = function (workflowFolderPath) {
                try {
                    fs.mkdirSync(workflowFolderPath);
                } catch (e) {
                    if (e.code != 'EEXIST') throw e;
                }
            }
            // Check the BudgetRequestId folder exists.
            var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
            var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
                try {
                    fs.mkdirSync(budgetRequestFolderPath);
                } catch (e) {
                    if (e.code != 'EEXIST') throw e;
                }
            }

            mkdirWorkflowAppId(workflowFolderPath);
            mkdirBudgetRequestId(budgetRequestFolderPath);

            cb(null, budgetRequestFolderPath); // this sets the destination for the file to be written to.

        } catch (e) {

            var msg = 'Exception in multer.diskStorage.destination(): ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = '_files/uploadattachment_large()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

        }
    },
    filename: function (request, file, cb) {

        console.log('In multer.diskStorage.filename().');

        var fileName = request.body.Filename;

        console.log('******************');
        console.log('******************');
        console.log('In multer.diskStorage.filename(). request.body: ' + JSON.stringify(request.body));
        console.log('******************');
        console.log('******************');

        //
        // Here is where we check if the file exists already. If so, add (2) (or appropriate number), after it! 11-8-2022
        //
        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwBudgetRequestId = request.body.bwBudgetRequestId;

        var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;

        fs.readdir(budgetRequestFolderPath, function (err, files) {
            try {
                console.log('In multer.diskStorage.filename.fs.readdir().');
                if (err) {

                    var msg = 'Error in In multer.diskStorage.filename().fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js._files/In multer.diskStorage.filename().()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    response.send(msg);

                } else {

                    console.log('******************');
                    console.log('In multer.diskStorage.filename.fs.readdir(). files: ' + JSON.stringify(files));
                    console.log('******************');

                    if (files.indexOf(fileName) > -1) {
                        // This file already exists, so we will come up with a new name for the new file, so that we don't over-write the existing one.
                        var extensionIndex = fileName.split('.').length - 1;
                        var fileExtension = fileName.toLowerCase().split('.')[extensionIndex];

                        var newFileName_WithoutExtension = '';
                        for (var i = 0; i < extensionIndex; i++) {
                            newFileName_WithoutExtension += fileName.split('.')[i];
                        }

                        for (var i = 0; i < 100; i++) {
                            var newFilename = newFileName_WithoutExtension + ' - copy(' + i + ').' + fileExtension;
                            if (!(files.indexOf(newFilename) > -1)) {
                                // This new file name is unique. Yay!
                                fileName = newFilename;
                                break;
                            }
                        }
                    }

                    console.log('');
                    console.log('******************');
                    console.log('In multer.diskStorage.filename.fs.readdir(). fileName: ' + JSON.stringify(fileName));
                    console.log('******************');
                    console.log('');

                    cb(null, fileName);
                }
            } catch (e) {

                var msg = 'Exception in multer.diskStorage.filename():2: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = '_files/In multer.diskStorage.filename().';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

            }
        });

    }
})

function UnzipFilesAndCopyAndRenameAsNecessary(bwWorkflowAppId, bwBudgetRequestId, zipFilePath, destinationFolderPath, destinationFolderPath_ZipTemp) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.UnzipFilesAndCopyRenameAsNecessary().');

            fs.mkdir(destinationFolderPath_ZipTemp, function (err) {
                try {

                    if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                        var msg = 'Error in start.js.UnzipFilesAndCopyAndRenameAsNecessary(). Error creating folder ' + destinationFolderPath_ZipTemp + ': ' + err;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        //
                        // NOW WE ARE CERTAIN THE FOLDER EXISTS. CONTINUE...
                        //

                        decompress(zipFilePath, destinationFolderPath_ZipTemp).then(function (unzippedFiles) {

                            //
                            // Look at the files, 1 by 1, to determine that there is not a duplicate filename. If so, create a new name before copying to the final destination.
                            // Then we have to delete the temp folder. 
                            //

                            fs.readdir(destinationFolderPath, function (err, existingFiles) {
                                try {

                                    if (err) {

                                        var msg = 'Error in start.js.UnzipFilesAndCopyAndRenameAsNecessary(). Error listing the files in destinationFolderPath: ' + destinationFolderPath + ': ' + err;
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }
                                        reject(result);

                                    } else {

                                        //
                                        // Iterate through them and check for duplicate filenames. Manage this using promiseArray.
                                        //

                                        var promiseArray = [];

                                        var tmpWorkingFilesArray = []; // This is a reduced array for use in 1 place below.
                                        for (var i = 0; i < unzippedFiles.length; i++) {
                                            tmpWorkingFilesArray.push(unzippedFiles[i].path);
                                        }

                                        var msg = 'Queuing up these files in start.js.UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(): unzippedFiles.length: ' + unzippedFiles.length + ', tmpWorkingFilesArray: ' + JSON.stringify(tmpWorkingFilesArray);
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        for (var i = 0; i < unzippedFiles.length; i++) {

                                            var zippedFilename = unzippedFiles[i].path;

                                            if (existingFiles.indexOf(zippedFilename) > -1) {

                                                //
                                                // This filename is already in the destination folder. So, we have to come up with a new one using our scheme like (1).
                                                //

                                                var extensionIndex = zippedFilename.split('.').length - 1;
                                                var fileExtension = zippedFilename.toLowerCase().split('.')[extensionIndex];

                                                var newFilename = '';
                                                for (var j = 0; j < extensionIndex; j++) { // This loop re-assembles the file name.
                                                    newFilename += zippedFilename.split('.')[j];
                                                }

                                                //
                                                //
                                                // THIS ISNT CORRECT YET!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! WHAT IF THE NEW FILENAME WE MADE IS IN THE NEW ZIP FILE?????? WEIRD USE CASE BUT HAPPENS EASILY.
                                                //
                                                //




                                                // Now we have the filename (newFilename), minus the extension... so iterate and find a non-used filename using our (1) notation added to the filename to make it unique.
                                                for (var j = 2; j < 100; j++) { // Surely 100 tries is enough. :)
                                                    var x = newFilename + '(' + j + ')' + '.' + fileExtension;
                                                    if (!((existingFiles.indexOf(x) > -1) || (tmpWorkingFilesArray.indexOf(x) > -1))) {
                                                        // We found a good filename. Woop!

                                                        var msg = 'We found a good filename in start.js.UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(): ' + x;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        tmpWorkingFilesArray.push(x); // When we upload multiple files, this will ensure that nothing gets overwritten.
                                                        newFilename = x;
                                                        break;
                                                    } else {
                                                        //Do nothing. This file name must already exist, so try again.
                                                    }
                                                }

                                                //
                                                // At this point we have a unique file name. Copy it to it's destination and delete it from the temp folder.
                                                //

                                                var fromPath = destinationFolderPath_ZipTemp + '/' + zippedFilename;
                                                var toPath = destinationFolderPath + '/' + newFilename;

                                                var promise = bwCopyFileAndDeleteOriginal(fromPath, toPath, newFilename);
                                                promise.then(function (results) {

                                                    if (results.status != 'SUCCESS') {

                                                        var msg = 'Error in start.js.UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(): ' + results.status + ' :: ' + results.message;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        reject(result);

                                                    } else {

                                                        var msg = 'SUCCESS in UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(). results: ' + JSON.stringify(results);
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    }

                                                }).catch(function (e) {

                                                    var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():6: ' + JSON.stringify(e);
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                });

                                                promiseArray.push(promise);

                                            } else {

                                                //
                                                // This filename has not been used.
                                                //

                                                var msg = 'This filename has not been used. in start.js.UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(): zippedFilename: ' + zippedFilename;
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                //
                                                // At this point we have a unique file name. Copy it to it's destination and delete it from the temp folder.
                                                //

                                                var fromPath = destinationFolderPath_ZipTemp + '/' + zippedFilename;
                                                var toPath = destinationFolderPath + '/' + zippedFilename;

                                                var promise = bwCopyFileAndDeleteOriginal(fromPath, toPath, zippedFilename);
                                                promise.then(function (results) {

                                                    if (results.status != 'SUCCESS') {

                                                        var msg = 'Error in start.js.UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(): ' + results.status + ' :: ' + results.message;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        reject(result);

                                                    } else {

                                                        var msg = 'SUCCESS in UnzipFilesAndCopyAndRenameAsNecessary.bwCopyFileAndDeleteOriginal(). results: ' + JSON.stringify(results);
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    }

                                                }).catch(function (e) {

                                                    var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():6: ' + JSON.stringify(e);
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                });

                                                promiseArray.push(promise);

                                            }

                                        }

                                        Promise.all(promiseArray).then(function (results) {

                                            var filesArray = [];
                                            for (var i = 0; i < results.length; i++) {
                                                filesArray.push(results[i].newFilename);
                                            }

                                            var msg = 'SUCCESS in UnzipFilesAndCopyAndRenameAsNecessary(). filesArray: ' + JSON.stringify(filesArray) + ', promiseArray.length: ' + promiseArray.length;
                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'SUCCESS',
                                                message: 'SUCCESS',
                                                files: filesArray
                                            }
                                            resolve(result);

                                        }).catch(function (e) {

                                            var msg = 'Exception in UnzipFilesAndCopyAndRenameAsNecessary():5: ' + JSON.stringify(e);
                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        });

                                    }

                                } catch (e) {

                                    var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():4: ' + e.message + ', ' + e.stack;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'EXCEPTION',
                                        message: msg
                                    }
                                    reject(result);

                                }
                            });

                        }).catch(function (e) {

                            var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():3: ' + JSON.stringify(e);
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            reject(result);

                        });

                    }

                } catch (e) {

                    var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            });

        } catch (e) {

            var msg = 'Exception in start.js.UnzipFilesAndCopyAndRenameAsNecessary():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.UnzipFilesAndCopyAndRenameAsNecessary()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }

    });

}

//const upload_attachments = multer({ storage: storage_attachments }); //, limits: { fieldSize: 2 * 1024 * 1024 } })

const upload_attachments = multer({
    storage: storage_attachments //,
    //limits: { // Todd added 1-20-2024. Does it work? NO!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //    fieldNameSize: 300,
    //    fileSize: 5000 //705080000, // 705.080 MB
    //},
    //fileFilter: function (req, file, callback) { // Todd added 1-20-2024. Does it work? NO!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //    //const acceptableExtensions = ['.png', '.jpg'];
    //    //if (!(acceptableExtensions.includes(Path.extname(file.originalname)))) {
    //    //    return callback(new Error('...'));
    //    //}

    //    const fileSize = parseInt(req.headers['content-length']); // TODD: 1-20-2024. THIS IS NO GOOD BECAUSE THE WHOLE FILE IS UPLOADED BEFORE THIS IS CHECKED. Maybe it is just in the worng place, maybe a newer version of multer, who knows.
    //    //if (fileSize > 705080000) { // 705.080 MB
    //    if (fileSize > 5000) { // 705.080 MB
    //        return callback(new Error('xcx213123 ERROR: FILE IS TOO LARGE.'));
    //    } else {

    //        callback(null, true);

    //    }

    //},
}); //, limits: { fieldSize: 2 * 1024 * 1024 } })

//router.post('/_files/uploadattachment_large', upload_attachments.single('multerFileUploadIdentifier_original'), function (request, response) { // This identifies which input-file element we are using to upload. We create one behind the scenes to accomodate the FFMPEG WASM output, so we upload the NEW file, not the original one. 8-2-2023.
router.post('/_files/uploadattachment_large', upload_attachments.single('multerFileUploadIdentifier_pre-processed-file'), function (request, response) { // This identifies which input-file element we are using to upload. We create one behind the scenes to accomodate the FFMPEG WASM output, so we upload the NEW file, not the original one. 8-2-2023.
    try {
        console.log('In start.js.uploadattachment_large().'); // 12-8-2022 added authorization.

        var bwParticipantId_LoggedIn = request.body.bwParticipantId;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'customer');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /uploadattachment_large().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    var bwParticipantId = request.body.bwParticipantId;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;

                    var filePath = request.file.path;

                    var extensionIndex1 = filePath.split('.').length - 1;
                    var fileExtension1 = filePath.toLowerCase().split('.')[extensionIndex1];

                    if ((fileExtension1 == 'zip') && (filePath.indexOf('ZIPPEDFILES_') > -1)) {

                        //
                        // This is a zip file which needs to be extracted. We unzip to a temp folder, then look at each file name to be sure we don't over-write an existing file.
                        //

                        var zipFilePath = filePath; // We expect the file name to come in like: var archiveFileName = 'ZIPPEDFILES_' + guid + '.zip';

                        var zipFolderPath = '';
                        var extensionIndex = zipFilePath.split('.').length - 1;

                        for (var i = 0; i < extensionIndex; i++) {
                            zipFolderPath += zipFilePath.split('.')[i]; // This will end up like: 'ZIPPEDFILES_' + guid
                        }

                        var destinationFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
                        var destinationFolderPath_ZipTemp = zipFolderPath;

                        var msg = 'Calling UnzipFilesAndCopyAndRenameAsNecessary(). xcx231312-1. zipFilePath: ' + zipFilePath;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.uploadattachment_large()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        UnzipFilesAndCopyAndRenameAsNecessary(bwWorkflowAppId, bwBudgetRequestId, zipFilePath, destinationFolderPath, destinationFolderPath_ZipTemp).then(function (results) {
                            try {

                                if (results.status != 'SUCCESS') {

                                    var msg = 'Error in start.js.uploadattachment_large.UnzipFilesAndCopyAndRenameAsNecessary(): ' + results.message;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.uploadattachment_large()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    //
                                    // Now that the files have been added to the folder, we have to call ProcessFileAfterUpload() to create thumbnails and the .metadata file.
                                    //

                                    var files = results.files;

                                    var promiseArray = [];
                                    for (var i = 0; i < files.length; i++) {
                                        var filePath2 = destinationFolderPath + '/' + files[i];

                                        var msg = 'Sending file to ProcessFileAfterUpload(). filePath2: ' + filePath2 + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', bwParticipantId: ' + bwParticipantId + ', files: ' + JSON.stringify(files);
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.uploadattachment_large()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                        var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-3.';
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.ProcessFileAfterUpload()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var promise = ProcessFileAfterUpload(filePath2, '', bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName);
                                        promiseArray.push(promise);
                                    }

                                    Promise.all(promiseArray).then(function (results) {
                                        try {

                                            // Delete the zip file.
                                            fs.unlink(zipFilePath, function (deleteErr) {
                                                if (deleteErr) {

                                                    var msg = 'Error in start.js.uploadattachment_large(). Error deleting the file: ' + zipFilePath + '. deleteErr: ' + deleteErr;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.uploadattachment_large()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                } else {

                                                    //
                                                    // Delete the zip folder.
                                                    //

                                                    fs.rmdir(destinationFolderPath_ZipTemp, { recursive: true, force: true }, function (err) {
                                                        try {
                                                            if (err) {

                                                                var msg = 'Error in start.js.uploadattachment_large(). Error deleting the folder: ' + destinationFolderPath_ZipTemp + '. err: ' + err;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.uploadattachment_large()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                var msg = 'Zip file uploaded and extracted successfully. Returned from start.js.uploadattachment_large.UnzipFilesAndCopyAndRenameAsNecessary.ProcessFileAfterUpload(). Deleted: zipFilePath: ' + zipFilePath + ', folderPath: ' + destinationFolderPath_ZipTemp + '. results: ' + JSON.stringify(results);
                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.uploadattachment_large()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.uploadattachment_large():8: ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.uploadattachment_large()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }
                                                    });

                                                }

                                            });

                                        } catch (e) {

                                            var msg = 'Exception in start.js.uploadattachment_large():7: ' + JSON.stringify(e);
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.uploadattachment_large()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    }).catch(function (e) {

                                        var msg = 'Exception in start.js.uploadattachment_large():6: ' + JSON.stringify(e);
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.uploadattachment_large()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    });

                                }

                            } catch (e) {

                                var msg = 'Exception in start.js.uploadattachment_large():5: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.uploadattachment_large()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }

                        }).catch(function (e) {

                            var msg = 'Exception in start.js.uploadattachment_large():4: ' + JSON.stringify(e);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.uploadattachment_large()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        });

                    } else if ((fileExtension1 == 'xcf')) {

                        //
                        // There are file types which we don't want to generate a thumbnail for. xcf is the gimp image editor experimental format.
                        //

                        var result = {
                            status: 'SUCCESS',
                            message: 'No thumbnail generated for the .xcf file format.'
                        }

                        response.send(result);


                    } else {

                        var description = request.body.Description;

                        var convertToAPdf = request.body.ConvertToAPdf; // 6-30-2023.

                        var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-4.';
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.ProcessFileAfterUpload()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var promise = ProcessFileAfterUpload(filePath, description, bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName, convertToAPdf);
                        promise.then(function (results) {
                            try {

                                var result = {
                                    status: results.status,
                                    message: results.message
                                }
                                response.send(result);

                            } catch (e) {

                                var msg = 'Exception in start.js.uploadattachment_large.ProcessFileAfterUpload.then(). xcx4443:' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.uploadattachment_large()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg,
                                    bwWorkflowAppId: bwWorkflowAppId,
                                    bwBudgetRequestId: bwBudgetRequestId
                                }
                                response.send(result);

                            }

                        }).catch(function (e) {

                            var msg = 'Exception in start.js.uploadattachment_large.ProcessFileAfterUpload.catch(): ' + JSON.stringify(e);
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.start.js.uploadattachment_large()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            var result = {
                                status: 'Exception xcx999888777: ' + JSON.stringify(e), // results.status,
                                message: 'Exception xcx999888777: ' + JSON.stringify(e)  //results.message
                            }
                            response.send(result);

                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /uploadattachment_large().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.uploadattachment_large():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.uploadattachment_large()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.uploadattachment_large():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.uploadattachment_large()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.uploadattachment_large():1: ' + e.message + ', ' + e.stack;
        if (request) {
            msg += ', request.body: ' + JSON.stringify(request.body);
        }
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.uploadattachment_large()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            result: msg,
            message: msg
        }
        response.send(msg);

    }
});










/////////////////////////////////////////////////
/////////////////////////////////////////////////
// THESE ARE THE EMAIL ATTACHMENT FILE SERVICES
/////////////////////////////////////////////////
/////////////////////////////////////////////////



const storage_attachments_email = multer.diskStorage({
    destination: function (request, file, cb) {
        try {

            console.log('In multer.diskStorage.storage_attachments_email.destination().');

            //var bwWorkflowAppId = request.body.bwWorkflowAppId;
            //var bwBudgetRequestId = request.body.bwBudgetRequestId;
            var bwParticipantId = request.body.bwParticipantId;
            var _id = request.body._id;

            ensureWeHaveADraftEmailCreatedForANewEmail(_id, request.body).then(function (results) {
                try {

                    //var _id = results._id; // This is the MongoDB generated _id for the record.
                    //request.body.bwDraftEmailId = results._id; // This is the MongoDB generated _id for the record.
                    //bwDraftEmailId = request.body.bwDraftEmailId;
                    _id = results._id; // If it was a 'NEW_EMAIL', then we now have a valid _id.

                    // Do we need this?
                    request.body._id = _id;

                    if (!_id || (_id == 'NEW_EMAIL')) {

                        var msg = 'Error in start.js.storage_attachments_email(). INVALID VALUE FOR _id: ' + _id + '. THIS PROCESS CANNOT PROCEED.';
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.storage_attachments_email()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        response.send(result);

                    } else {

                        var msg = '>>>In storage_attachments_email(). RETURNED FROM ensureWeHaveADraftEmailCreatedForANewEmail() with value for _id: ' + _id;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.storage_attachments_email()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var attachmentOrInline = request.body.bwAttachmentOrInline;

                        if (!((attachmentOrInline == 'ATTACHMENTS') || (attachmentOrInline == 'INLINE'))) {

                            var msg = 'Error in start.js.storage_attachments_email(). INVALID VALUE FOR attachmentOrInline: ' + attachmentOrInline + '. THIS PROCESS CANNOT PROCEED.';
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.storage_attachments_email()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            response.send(result);

                        } else {

                            // Check that the rootFilePath_email exists.
                            var mkdirRootFilePath_email = function (rootFilePath_email) {
                                try {
                                    fs.mkdirSync(rootFilePath_email);
                                } catch (e) {
                                    if (e.code != 'EEXIST') throw e;
                                }
                            }

                            var participantFolderPath = rootFilePath_email + bwParticipantId;
                            var mkdirParticipantFolder = function (participantFolderPath) {
                                try {
                                    fs.mkdirSync(participantFolderPath);
                                } catch (e) {
                                    if (e.code != 'EEXIST') throw e;
                                }
                            }

                            var destinationFolderPath1 = rootFilePath_email + bwParticipantId + '/' + _id;
                            var mkdirDestinationFolder1 = function (destinationFolderPath1) {
                                try {
                                    fs.mkdirSync(destinationFolderPath1);
                                } catch (e) {
                                    if (e.code != 'EEXIST') throw e;
                                }
                            }

                            var destinationFolderPath = rootFilePath_email + bwParticipantId + '/' + _id + '/' + attachmentOrInline; // ['ATTACHMENTS', 'INLINE']
                            var mkdirDestinationFolder = function (destinationFolderPath) {
                                try {
                                    fs.mkdirSync(destinationFolderPath);
                                } catch (e) {
                                    if (e.code != 'EEXIST') throw e;
                                }
                            }

                            mkdirRootFilePath_email(rootFilePath_email);
                            mkdirParticipantFolder(participantFolderPath);
                            mkdirDestinationFolder1(destinationFolderPath1);
                            mkdirDestinationFolder(destinationFolderPath);

                            var msg = 'In multer.diskStorage.storage_attachments_email.destination(). destinationFolderPath: ' + destinationFolderPath;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = '_files/In multer.diskStorage.storage_attachments_email.filename().';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            cb(null, destinationFolderPath); // this sets the destination for the file to be written to.

                        }

                    }

                } catch (e) {

                    var msg = 'Exception in multer.diskStorage.storage_attachments_email.destination():xcx231232: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = '_files/uploadattachment_large()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                }

            });

        } catch (e) {

            var msg = 'Exception in multer.diskStorage.storage_attachments_email.destination(): ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = '_files/uploadattachment_large()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

        }
    },
    filename: function (request, file, cb) {

        console.log('In multer.diskStorage.storage_attachments_email.filename().');

        var fileName = request.body.Filename;

        console.log('******************');
        console.log('******************');
        console.log('In multer.diskStorage.storage_attachments_email.filename(). request.body: ' + JSON.stringify(request.body));
        console.log('******************');
        console.log('******************');

        //
        // Here is where we check if the file exists already. If so, add (2) (or appropriate number), after it! 11-8-2022
        //
        //var bwWorkflowAppId = request.body.bwWorkflowAppId;
        //var bwBudgetRequestId = request.body.bwBudgetRequestId;
        var bwParticipantId = request.body.bwParticipantId;
        var _id = request.body._id;
        var attachmentOrInline = request.body.bwAttachmentOrInline;

        var budgetRequestFolderPath = rootFilePath_email + bwParticipantId + '/' + _id + '/' + attachmentOrInline;

        fs.readdir(budgetRequestFolderPath, function (err, files) {
            try {
                console.log('In multer.diskStorage.filename.fs.readdir().');
                if (err) {

                    var msg = 'Error in In multer.diskStorage.storage_attachments_email.filename().fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js._files/In multer.diskStorage.storage_attachments_email.filename().()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    response.send(msg);

                } else {

                    console.log('******************');
                    console.log('In multer.diskStorage.storage_attachments_email.filename.fs.readdir(). files: ' + JSON.stringify(files));
                    console.log('******************');

                    if (files.indexOf(fileName) > -1) {
                        // This file already exists, so we will come up with a new name for the new file, so that we don't over-write the existing one.
                        var extensionIndex = fileName.split('.').length - 1;
                        var fileExtension = fileName.toLowerCase().split('.')[extensionIndex];

                        var newFileName_WithoutExtension = '';
                        for (var i = 0; i < extensionIndex; i++) {
                            newFileName_WithoutExtension += fileName.split('.')[i];
                        }

                        for (var i = 0; i < 100; i++) {
                            var newFilename = newFileName_WithoutExtension + ' - copy(' + i + ').' + fileExtension;
                            if (!(files.indexOf(newFilename) > -1)) {
                                // This new file name is unique. Yay!
                                fileName = newFilename;
                                break;
                            }
                        }
                    }

                    console.log('');
                    console.log('******************');
                    console.log('In multer.diskStorage.storage_attachments_email.filename.fs.readdir(). fileName: ' + JSON.stringify(fileName));
                    console.log('******************');
                    console.log('');

                    cb(null, fileName);
                }
            } catch (e) {

                var msg = 'Exception in multer.diskStorage.storage_attachments_email.filename():2: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = '_files/In multer.diskStorage.storage_attachments_email.filename().';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

            }
        });

    }
})


const upload_attachments_email = multer({
    storage: storage_attachments_email //,
    //limits: { // Todd added 1-20-2024. Does it work? NO!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //    fieldNameSize: 300,
    //    fileSize: 5000 //705080000, // 705.080 MB
    //},
    //fileFilter: function (req, file, callback) { // Todd added 1-20-2024. Does it work? NO!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //    //const acceptableExtensions = ['.png', '.jpg'];
    //    //if (!(acceptableExtensions.includes(Path.extname(file.originalname)))) {
    //    //    return callback(new Error('...'));
    //    //}

    //    const fileSize = parseInt(req.headers['content-length']); // TODD: 1-20-2024. THIS IS NO GOOD BECAUSE THE WHOLE FILE IS UPLOADED BEFORE THIS IS CHECKED. Maybe it is just in the worng place, maybe a newer version of multer, who knows.
    //    //if (fileSize > 705080000) { // 705.080 MB
    //    if (fileSize > 5000) { // 705.080 MB
    //        return callback(new Error('xcx213123 ERROR: FILE IS TOO LARGE.'));
    //    } else {

    //        callback(null, true);

    //    }

    //},
}); //, limits: { fieldSize: 2 * 1024 * 1024 } })



function ensureWeHaveADraftEmailCreatedForANewEmail(_id, requestBody) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.ensureWeHaveADraftEmailCreatedForANewEmail().');

            var msg = 'In start.js.ensureWeHaveADraftEmailCreatedForANewEmail(). _id: ' + _id;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            if (_id == 'NEW_EMAIL') {

                //
                // This means we do not have an email in the BwDraftEmail table yet. We need one in order to get an _id, and be able to save the attachment.
                //

                var bwWorkflowAppId = requestBody.bwWorkflowAppId;
                var RelatedRequestId = requestBody.RelatedRequestId;

                var bwParticipantId = requestBody.bwParticipantId;
                var bwParticipantEmail = requestBody.bwParticipantEmail;
                var bwParticipantFriendlyName = requestBody.bwParticipantFriendlyName;

                var FromEmailAddress = requestBody.FromEmailAddress;
                var Recipients = requestBody.Recipients;
                var CcAddress = requestBody.CcAddress;
                var BccAddress = requestBody.BccAddress;
                var Subject = requestBody.Subject;
                var Body = requestBody.Body;

                //if (!(FromEmailAddress && bwParticipantEmail && bwParticipantFriendlyName)) {

                //    // If any of this is missing, we use the bwParticipantId and go and get it.

                //    BwParticipant.findOne({ bwParticipantId: bwParticipantId }, function (pfError, pfResult) {
                //        try {
                //            if (pfError) {

                //                var msg = 'Error in start.js.ensureWeHaveADraftEmailCreatedForANewEmail(). pfError: ' + pfError;
                //                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                //                var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //                var errorCode = null;
                //                WriteToErrorLog(threatLevel, source, errorCode, msg);

                //                var result = {
                //                    status: 'ERROR',
                //                    message: msg
                //                }
                //                response.send(result);

                //            } else {

                //                if (!pfResult) {

                //                    var msg = 'Error in start.js.ensureWeHaveADraftEmailCreatedForANewEmail(). Unexpected value for pfResult: ' + pfResult;
                //                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                //                    var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //                    var errorCode = null;
                //                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                //                    var result = {
                //                        status: 'ERROR',
                //                        message: msg
                //                    }
                //                    response.send(result);

                //                } else {

                //                    var bwParticipantEmail = pfResult.bwParticipantEmail;
                //                    var bwParticipantFriendlyName = pfResult.bwParticipantFriendlyName;

                //                    var FromEmailAddress = pfResult.bwParticipantEmail;

                //                    var bwDraftEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                //                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                //                        return v.toString(16);
                //                    });

                //                    var bwDraftEmail = new BwDraftEmail(
                //                        {
                //                            bwDraftEmailId: bwDraftEmailId,

                //                            bwWorkflowAppId: bwWorkflowAppId,
                //                            RelatedRequestId: RelatedRequestId,

                //                            FromEmailAddress: FromEmailAddress,
                //                            Recipients: Recipients,

                //                            CcAddress: CcAddress,
                //                            BccAddress: BccAddress,
                //                            Subject: Subject,
                //                            Body: Body,

                //                            Created: new Date(),
                //                            CreatedById: bwParticipantId,
                //                            CreatedByFriendlyName: bwParticipantFriendlyName,
                //                            CreatedByEmail: bwParticipantEmail
                //                        }
                //                    );
                //                    bwDraftEmail.save(function (desError, desResult) {
                //                        try {

                //                            if (desError) {

                //                                var msg = 'Error in start.js.ensureWeHaveADraftEmailCreatedForANewEmail() saving to BwDraftEmail table. desError: ' + desError;
                //                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                //                                var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //                                var errorCode = null;
                //                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                //                                var result = {
                //                                    status: 'ERROR',
                //                                    message: msg
                //                                }
                //                                reject(result);

                //                            } else {

                //                                var msg = 'In start.js.ensureWeHaveADraftEmailCreatedForANewEmail():1: Draft email saved successfully. bwDraftEmailId: ' + bwDraftEmailId + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', bwParticipantEmail: ' + bwParticipantEmail + ', bwParticipantFriendlyName: ' + bwParticipantFriendlyName;

                //                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                //                                var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //                                var errorCode = null;
                //                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                //                                var result = {
                //                                    status: 'SUCCESS',
                //                                    message: msg,
                //                                    _id: desResult.id // To get _id: https://stackoverflow.com/questions/6854431/how-do-i-get-the-objectid-after-i-save-an-object-in-mongoose
                //                                }
                //                                resolve(result);

                //                            }

                //                        } catch (e) {

                //                            var msg = 'Exception in start.js.ensureWeHaveADraftEmailCreatedForANewEmail():5: ' + e.message + ', ' + e.stack;
                //                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                //                            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //                            var errorCode = null;
                //                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                //                            var result = {
                //                                status: 'EXCEPTION',
                //                                message: msg
                //                            }
                //                            reject(result);

                //                        }

                //                    });

                //                }

                //            }

                //        } catch (e) {

                //            var msg = 'Exception in start.js.ensureWeHaveADraftEmailCreatedForANewEmail():3: ' + e.message + ', ' + e.stack;
                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                //            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                //            var errorCode = null;
                //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                //            var result = {
                //                status: 'EXCEPTION',
                //                message: msg
                //            }
                //            response.send(result);

                //        }

                //    });

                //} else {

                var bwEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });

                var bwDraftEmail = new BwDraftEmail(
                    {
                        bwEmailId: bwEmailId,
                        bwParticipantId: bwParticipantId,
                        timestamp: new Date(), // Every time a draft gets saved, we update the timestamp.
                        from: '',
                        to: '',
                        cc: '',
                        bcc: '',
                        subject: '',
                        html: ''
                    }
                );
                bwDraftEmail.save(function (desError, desResult) {
                    try {

                        if (desError) {

                            var msg = 'Error in start.js.ensureWeHaveADraftEmailCreatedForANewEmail() saving to BwDraftEmail table. desError: ' + desError;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            reject(result);

                        } else {

                            var msg = 'In start.js.ensureWeHaveADraftEmailCreatedForANewEmail():2: Draft email saved successfully. bwEmailId: ' + bwEmailId + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', bwParticipantEmail: ' + bwParticipantEmail + ', bwParticipantFriendlyName: ' + bwParticipantFriendlyName;

                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'SUCCESS',
                                message: msg,
                                _id: desResult.id // To get _id: https://stackoverflow.com/questions/6854431/how-do-i-get-the-objectid-after-i-save-an-object-in-mongoose
                            }
                            resolve(result);

                        }

                    } catch (e) {

                        var msg = 'Exception in start.js.ensureWeHaveADraftEmailCreatedForANewEmail():5: ' + e.message + ', ' + e.stack;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg
                        }
                        reject(result);

                    }

                });

                //}

            } else {

                //
                // We already have this email saved in the BwDraftEmail table.
                //

                var msg = 'In start.js.ensureWeHaveADraftEmailCreatedForANewEmail(). We already have this email saved in the BwDraftEmail table.';

                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                var result = {
                    status: 'SUCCESS',
                    message: msg,
                    _id: _id
                }
                resolve(result);

            }

        } catch (e) {

            var msg = 'Exception in start.js.ensureWeHaveADraftEmailCreatedForANewEmail():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.ensureWeHaveADraftEmailCreatedForANewEmail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}

router.post('/_files/uploadattachment_large_email', upload_attachments_email.single('multerFileUploadIdentifier_pre-processed-file'), function (request, response) { // This identifies which input-file element we are using to upload. We create one behind the scenes to accomodate the FFMPEG WASM output, so we upload the NEW file, not the original one. 8-2-2023.
    try {
        console.log('In start.js.uploadattachment_large_email().'); // 12-8-2022 added authorization.

        var bwParticipantId_LoggedIn = request.body.bwParticipantId;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'customer');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /uploadattachment_large_email().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    //var bwDraftEmailId = request.body.bwDraftEmailId;
                    var _id = request.body._id;

                    ensureWeHaveADraftEmailCreatedForANewEmail(_id, request.body).then(function (results) {
                        try {

                            var _id = results._id; // This is the MongoDB generated _id for the record.

                            if (!_id || (_id == 'NEW_EMAIL')) {

                                var msg = 'Error in start.js.uploadattachment_large_email(). INVALID VALUE FOR _id: ' + _id + '. THIS PROCESS CANNOT PROCEED.';
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.uploadattachment_large_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                var msg = '>>> RETURNED FROM ensureWeHaveADraftEmailCreatedForANewEmail() with value for _id: ' + _id;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.uploadattachment_large_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn, bwParticipantId_LoggedIn);

                                var attachmentOrInline = request.body.bwAttachmentOrInline;

                                if (!((attachmentOrInline == 'ATTACHMENTS') || (attachmentOrInline == 'INLINE'))) {

                                    var msg = 'Error in start.js.uploadattachment_large_email(). INVALID VALUE FOR attachmentOrInline: ' + attachmentOrInline + '. THIS PROCESS CANNOT PROCEED.';
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.uploadattachment_large_email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                                    var RelatedRequestId = request.body.RelatedRequestId;

                                    var bwParticipantId = request.body.bwParticipantId;
                                    var bwParticipantEmail = request.body.bwParticipantEmail;
                                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;

                                    var filePath = request.file.path;

                                    var extensionIndex1 = filePath.split('.').length - 1;
                                    var fileExtension1 = filePath.toLowerCase().split('.')[extensionIndex1];

                                    if ((fileExtension1 == 'zip') && (filePath.indexOf('ZIPPEDFILES_') > -1)) {

                                        //
                                        // This is a zip file which needs to be extracted. We unzip to a temp folder, then look at each file name to be sure we don't over-write an existing file.
                                        //

                                        var zipFilePath = filePath; // We expect the file name to come in like: var archiveFileName = 'ZIPPEDFILES_' + guid + '.zip';

                                        var zipFolderPath = '';
                                        var extensionIndex = zipFilePath.split('.').length - 1;

                                        for (var i = 0; i < extensionIndex; i++) {
                                            zipFolderPath += zipFilePath.split('.')[i]; // This will end up like: 'ZIPPEDFILES_' + guid
                                        }

                                        var destinationFolderPath_ZipTemp = zipFolderPath;

                                        var participantFolderPath = rootFilePath_email + bwParticipantId;
                                        var mkdirParticipantFolder = function (participantFolderPath) {
                                            try {
                                                fs.mkdirSync(participantFolderPath);
                                            } catch (e) {
                                                if (e.code != 'EEXIST') throw e;
                                            }
                                        }

                                        var destinationFolderPath1 = rootFilePath_email + bwParticipantId + '/' + _id;
                                        var mkdirDestinationFolder1 = function (destinationFolderPath1) {
                                            try {
                                                fs.mkdirSync(destinationFolderPath1);
                                            } catch (e) {
                                                if (e.code != 'EEXIST') throw e;
                                            }
                                        }

                                        var destinationFolderPath = rootFilePath_email + bwParticipantId + '/' + _id + '/' + attachmentOrInline; // ['ATTACHMENTS', 'INLINE']
                                        var mkdirDestinationFolder = function (destinationFolderPath) {
                                            try {
                                                fs.mkdirSync(destinationFolderPath);
                                            } catch (e) {
                                                if (e.code != 'EEXIST') throw e;
                                            }
                                        }

                                        mkdirParticipantFolder(participantFolderPath);
                                        mkdirDestinationFolder1(destinationFolderPath1);
                                        mkdirDestinationFolder(destinationFolderPath);

                                        UnzipFilesAndCopyAndRenameAsNecessary(bwWorkflowAppId, _id, zipFilePath, destinationFolderPath, destinationFolderPath_ZipTemp).then(function (results) {
                                            try {

                                                if (results.status != 'SUCCESS') {

                                                    var msg = 'Error in start.js.uploadattachment_large_email.UnzipFilesAndCopyAndRenameAsNecessary(): ' + results.message;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.uploadattachment_large_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                } else {

                                                    //
                                                    // Now that the files have been added to the folder, we have to call ProcessFileAfterUpload_email() to create thumbnails and the .metadata file.
                                                    //

                                                    var files = results.files;

                                                    var promiseArray = [];
                                                    for (var i = 0; i < files.length; i++) {
                                                        var filePath2 = destinationFolderPath + '/' + files[i];

                                                        var msg = 'In start.js.uploadattachment_large_email.UnzipFilesAndCopyAndRenameAsNecessary(). Sending file to ProcessFileAfterUpload_email(). filePath2: ' + filePath2 + ', bwParticipantId: ' + bwParticipantId + ', _id: ' + _id;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.uploadattachment_large_email()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                        var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-5.';
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.ProcessFileAfterUpload()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var promise = ProcessFileAfterUpload_email2(filePath2, '', _id, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName);
                                                        promiseArray.push(promise);
                                                    }

                                                    Promise.all(promiseArray).then(function (results) {
                                                        try {

                                                            // Delete the zip file.
                                                            fs.unlink(zipFilePath, function (deleteErr) {
                                                                if (deleteErr) {

                                                                    var msg = 'Error in start.js.uploadattachment_large_email(). Error deleting the file: ' + zipFilePath + '. deleteErr: ' + deleteErr;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.uploadattachment_large_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                } else {

                                                                    //
                                                                    // Delete the zip folder.
                                                                    //

                                                                    fs.rmdir(destinationFolderPath_ZipTemp, { recursive: true, force: true }, function (err) {
                                                                        try {
                                                                            if (err) {

                                                                                var msg = 'Error in start.js.uploadattachment_large_email(). Error deleting the folder: ' + destinationFolderPath_ZipTemp + '. err: ' + err;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.uploadattachment_large_email()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                var result = {
                                                                                    status: 'ERROR',
                                                                                    message: msg
                                                                                }
                                                                                response.send(result);

                                                                            } else {

                                                                                var msg = 'Zip file uploaded and extracted successfully. Returned from start.js.uploadattachment_large_email.UnzipFilesAndCopyAndRenameAsNecessary.ProcessFileAfterUpload_email(). Deleted: zipFilePath: ' + zipFilePath + ', folderPath: ' + destinationFolderPath_ZipTemp + '. results: ' + JSON.stringify(results);
                                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.uploadattachment_large_email()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                var result = {
                                                                                    status: 'SUCCESS',
                                                                                    message: msg,
                                                                                    _id: _id
                                                                                }
                                                                                response.send(result);

                                                                            }

                                                                        } catch (e) {

                                                                            var msg = 'Exception in start.js.uploadattachment_large_email():8: ' + e.message + ', ' + e.stack;
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.uploadattachment_large_email()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                                            var result = {
                                                                                status: 'EXCEPTION',
                                                                                message: msg
                                                                            }
                                                                            response.send(result);

                                                                        }
                                                                    });

                                                                }

                                                            });

                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.uploadattachment_large_email():7: ' + JSON.stringify(e);
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.uploadattachment_large_email()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }

                                                    }).catch(function (e) {

                                                        var msg = 'Exception in start.js.uploadattachment_large_email():6: ' + JSON.stringify(e);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.uploadattachment_large_email()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    });

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in start.js.uploadattachment_large_email():5: ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.uploadattachment_large_email()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);

                                            }

                                        }).catch(function (e) {

                                            var msg = 'Exception in start.js.uploadattachment_large_email():4: ' + JSON.stringify(e);
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.uploadattachment_large_email()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        });

                                    } else if ((fileExtension1 == 'xcf')) {

                                        //
                                        // There are file types which we don't want to generate a thumbnail for. xcf is the gimp image editor experimental format.
                                        //

                                        var result = {
                                            status: 'SUCCESS',
                                            message: 'No thumbnail generated for the .xcf file format.',
                                            _id: _id
                                        }

                                        response.send(result);


                                    } else {

                                        var description = request.body.Description;

                                        var convertToAPdf = request.body.ConvertToAPdf; // 6-30-2023.

                                        var msg = '>>> Calling ProcessFileAfterUpload(). xcx213455-6.';
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.ProcessFileAfterUpload()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var promise = ProcessFileAfterUpload_email2(filePath, description, _id, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName, convertToAPdf);
                                        promise.then(function (results) {
                                            try {

                                                var result = {
                                                    status: results.status,
                                                    message: results.message,
                                                    _id: _id
                                                }
                                                response.send(result);

                                            } catch (e) {

                                                var msg = 'Exception in start.js.uploadattachment_large_email.ProcessFileAfterUpload_email2.then(). xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.uploadattachment_large_email()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                    _id: _id
                                                }
                                                response.send(result);

                                            }

                                        }).catch(function (e) {

                                            var msg = 'Exception in start.js.uploadattachment_large_email.ProcessFileAfterUpload_email2.catch(): ' + JSON.stringify(e);
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.start.js.uploadattachment_large_email()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            var result = {
                                                status: 'Exception xcx999888777: ' + JSON.stringify(e), // results.status,
                                                message: 'Exception xcx999888777: ' + JSON.stringify(e)  //results.message
                                            }
                                            response.send(result);

                                        });

                                    }

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.uploadattachment_large_email():3xcx7754: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.uploadattachment_large_email()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            }
                            response.send(result);

                        }

                    }).catch(function (e) {

                        var msg = 'Exception in start.js.uploadattachment_large_email():3xcx34345: ' + JSON.stringify(e);
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.uploadattachment_large_email()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                        var result = {
                            message: msg,
                            status: 'EXCEPTION'
                        }
                        response.send(result);

                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /uploadattachment_large_email().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.uploadattachment_large_email():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.uploadattachment_large_email()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.uploadattachment_large_email():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.uploadattachment_large_email()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.uploadattachment_large_email():1: ' + e.message + ', ' + e.stack;
        if (request) {
            msg += ', request.body: ' + JSON.stringify(request.body);
        }
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.uploadattachment_large_email()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            result: msg,
            message: msg
        }
        response.send(msg);

    }
});

// Todd added 2024. This also exists in start.js, index.js.
function ProcessFileAfterUpload_email2(filePath, description, bwDraftEmailId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName, convertToAPdf) {
    //
    // ******************************************************************************************************************************
    // *** THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. *** 4-23-2023.
    // ******************************************************************************************************************************
    //
    console.log('');
    console.log('>>> In ProcessFileAfterUpload_email2(). THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. bwParticipantId: ' + bwParticipantId + ', bwDraftEmailId: ' + bwDraftEmailId + ', filePath: ' + filePath);
    console.log('');
    return new Promise(function (resolve, reject) {
        try {

            //
            //
            // First, we have to check if this is a .zip file, which we want to extract. 9-10-2023.
            //
            //

            //
            // This where we are creating the .metadata file.
            //
            var stats = fs.statSync(filePath);
            var size = stats["size"];
            var birthtime = stats["birthtime"].toISOString(); // UTC. Doing it this way because this is how MongoDb does it, using toISOString() with a new Date().

            console.log('In start.js./ProcessFileAfterUpload_email(). This where we are creating the .metadata file. size: ' + size + ', birthtime: ' + birthtime + ', filePath: ' + filePath);

            //var description = request.body.Description;

            var metaFilePath = filePath + '.metadata';

            var json = {};
            json["description"] = description;
            json["size"] = size;
            json["birthtime"] = birthtime;
            json["bwParticipantId"] = bwParticipantId;
            json["bwParticipantEmail"] = bwParticipantEmail;
            json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

            var metaFileContent = JSON.stringify(json);

            fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                try {
                    if (metaErr) {

                        var msg = 'Error in In _files/ProcessFileAfterUpload_email.fs.writeFile(). Error saving metadata file [' + metaFilePath + ']. ' + metaErr;
                        console.log(msg);
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = '_files/ProcessFileAfterUpload_email().';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                    } else {

                        var msg = 'In _files/ProcessFileAfterUpload_email.fs.writeFile(). Successfully saved metadata file [' + metaFilePath + '].';
                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                        var source = '_files/ProcessFileAfterUpload_email().';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                    }
                } catch (e) {

                    var msg = 'Exception in _files/ProcessFileAfterUpload_email():2-2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = '_files/ProcessFileAfterUpload_email().';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                }
            });

            //
            //
            // THIS IS WHERE WE CHECK if we want this file to be converted to a pdf file.
            //
            //
            if ((convertToAPdf == true) || (convertToAPdf == 'true')) {

                var tempArray = filePath.split('.');
                tempArray.splice(tempArray.length - 1); // remove the last one.
                var filenameWithoutExtension = '';
                for (var i = 0; i < tempArray.length; i++) {
                    filenameWithoutExtension += tempArray[i];
                }

                var pdfFilePath = filenameWithoutExtension + '.pdf';

                console.log('');
                console.log('');
                console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WE want this file to be converted to a pdf file. filePath: ' + filePath + ', filenameWithoutExtension: ' + filenameWithoutExtension + ', pdfFilePath: ' + pdfFilePath);
                console.log('');
                console.log('');
                console.log('');

                gm(filePath)
                    .autoOrient()
                    .write(pdfFilePath, function (err) {
                        try {
                            if (err) {

                                var msg = 'Error creating the pdf in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwDraftEmailId: bwDraftEmailId,
                                    //bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else {

                                //var thumbnailPath = pdfFilePath + '_thumbnail_320px_pdf_' + '.png';
                                var thumbnailPath = pdfFilePath + '_320px_.png'; // 8-4-2024.

                                var msg = '>>>>>>>>>>>>>>xcx443 In ProcessFileAfterUpload_email(). Creating .pdf thumbnail at ' + pdfFilePath + '.';
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                gm(pdfFilePath + '[0]')
                                    .resize(320)
                                    .font('Arial', 72)
                                    .drawText(75, 200, 'PDF') // 'PDF')
                                    .write(thumbnailPath, function (err) {
                                        try {
                                            if (err) {

                                                var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'In ProcessFileAfterUpload_email()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg,
                                                    bwDraftEmailId: bwDraftEmailId,
                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: pdfFilePath
                                                }

                                                reject(result);

                                            } else {

                                                //
                                                //
                                                // NOW THAT WE HAVE our pdf files and thumbnail, we have to delete the original file, and it's .metadata file.
                                                //
                                                //

                                                fs.unlink(filePath, function (deleteErr) {
                                                    if (deleteErr) {
                                                        console.log(deleteErr);
                                                        response.send(deleteErr);
                                                    } else {

                                                        var metadataFilePath = filePath + '.metadata';

                                                        fs.unlink(metadataFilePath, function (deleteErr) {
                                                            if (deleteErr) {
                                                                console.log(deleteErr);
                                                                response.send(deleteErr);
                                                            } else {

                                                                console.log('The files ' + filePath + ' and ' + metadataFilePath + ' were deleted!');

                                                                var msg = 'In ProcessFileAfterUpload_email.imagemagick.write(). Created .' + 'PDF' + ' thumbnail at [' + thumbnailPath + '].';
                                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                var source = 'In ProcessFileAfterUpload_email()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: msg,
                                                                    bwDraftEmailId: bwDraftEmailId,
                                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: pdfFilePath
                                                                }

                                                                resolve(result);

                                                            }
                                                        });

                                                    }
                                                });

                                            }

                                        } catch (e) {

                                            var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg,
                                                bwDraftEmailId: bwDraftEmailId,
                                                //bwBudgetRequestId: bwBudgetRequestId,
                                                filePath: pdfFilePath
                                            }

                                            reject(result);

                                        }

                                    });

                            }

                        } catch (e) {

                            var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg,
                                bwDraftEmailId: bwDraftEmailId,
                                //bwBudgetRequestId: bwBudgetRequestId,
                                filePath: filePath
                            }

                            reject(result);

                        }

                    });

            } else {

                if ((filePath.toLowerCase().indexOf('.mp4') > 0) || (filePath.toLowerCase().indexOf('.avi') > 0)) { // Added .avi check here 8-14-2023.

                    ffprobe(filePath, { path: ffprobePath }, function (err, info) {
                        if (err) {

                            var msg = 'Error in FFPROBE: ' + err;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        } else {

                            var duration_seconds = info.streams[0].duration; // For example, duration: 651.151151

                            var hoursLeft = Math.floor(duration_seconds / 3600);
                            var min = Math.floor((duration_seconds - hoursLeft * 3600) / 60);
                            var secondsLeft = duration_seconds - hoursLeft * 3600 - min * 60;
                            //secondsLeft = Math.round(secondsLeft * 100) / 100;
                            secondsLeft = Math.trunc(Math.round(secondsLeft * 100) / 100);
                            var duration = hoursLeft < 10 ? "0" + hoursLeft : hoursLeft;
                            duration += ":" + (min < 10 ? "0" + min : min);
                            duration += ":" + (secondsLeft < 10 ? "0" + secondsLeft : secondsLeft);

                            var msg = 'FFPROBE DETAILS FOR ' + filePath + ': duration: ' + duration; //  ' + JSON.stringify(info);
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GET._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            // Create a thumbnail for this file.
                            var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';

                            // Replace with our duration.
                            var duration_temp = duration.replaceAll(':', '\\\:'); // This is required for ffmpeg.
                            var ffmpegThumbnailVFInstructions_timestamp_temp = ffmpegThumbnailVFInstructions_timestamp.replace('xcxdurationxcx', duration_temp);

                            var ffmpegThumbnailVFInstructions_temp = '[in]' + ffmpegThumbnailVFInstructions_filetype + ',' + ffmpegThumbnailVFInstructions_timestamp_temp; // Use the [in] command to join together multiple drawtext commands.

                            ffmpeg(filePath)
                                .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                .output(thumbnailPath)
                                .outputOptions(
                                    '-frames', '1'  // Capture just one frame of the video
                                )
                                .addOption('-vf', ffmpegThumbnailVFInstructions_temp) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                .on('error', function (err) {

                                    var msg = 'Error creating the thumbnail in ProcessFileAfterUpload_email.ffmpeg.on.error(): ' + err.message + ', ' + err.stack;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'In start.js./ProcessFileAfterUpload_email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        result: msg,
                                        message: msg
                                    }
                                    reject(result);

                                })
                                .on('end', function () {

                                    gm(thumbnailPath)
                                        .resize(320)
                                        //.font('Arial', 72)
                                        //.drawText(75, 200, 'PDF') 
                                        .write(thumbnailPath, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating thethumbnail in ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(): ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwDraftEmailId: bwDraftEmailId,
                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: pdfFilePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var msg = 'In ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(). Rescaled thumbnail at [' + thumbnailPath + '].';
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    //BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
                                                    //    try {
                                                    //        if (bruError) {

                                                    //            var msg = 'Error in ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(). Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                                    //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                    //            var source = 'start.js.ProcessFileAfterUpload_email()';
                                                    //            var errorCode = null;
                                                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    //            var result = {
                                                    //                status: 'ERROR',
                                                    //                result: msg,
                                                    //                message: msg
                                                    //            }
                                                    //            reject(result);

                                                    //        } else {

                                                    //            if (bruMod.modifiedCount == 0) {

                                                    //                //
                                                    //                // The request doesn't exist yet. We need to create it! // 9-8-2022
                                                    //                //
                                                    //                var msg = 'In _files/ProcessFileAfterUpload_email.BwBudgetRequest.update() xcx1423. Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                                    //                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    //                var source = 'start.js.ProcessFileAfterUpload_email()';
                                                    //                var errorCode = null;
                                                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    //                console.log(msg);

                                                    //                var result = {
                                                    //                    status: 'SUCCESS',
                                                    //                    result: 'NO_REQUEST_SAVED',
                                                    //                    message: msg
                                                    //                }
                                                    //                resolve(result);

                                                    //            } else {

                                                    // The request already exists, so just respond with SUCCESS.
                                                    var result = {
                                                        status: 'SUCCESS',
                                                        result: 'SUCCESS'
                                                    }
                                                    resolve(result);

                                                    //            }

                                                    //        }

                                                    //    } catch (e) {

                                                    //        var msg = 'Exception in POST _files/ProcessFileAfterUpload_email xcx4443-2:' + e.message + ', ' + e.stack;
                                                    //        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                    //        var source = 'start.js.ProcessFileAfterUpload_email()';
                                                    //        var errorCode = null;
                                                    //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    //        var result = {
                                                    //            status: 'EXCEPTION',
                                                    //            result: msg,
                                                    //            message: msg
                                                    //        }
                                                    //        reject(msg);

                                                    //    }
                                                    //});

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload_email()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwDraftEmailId: bwDraftEmailId,
                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: pdfFilePath
                                                }

                                                reject(result);

                                            }

                                        });

                                })
                                .run()

                        }
                    });

                } else {

                    //
                    // This is where the small image is created for display in the executive summaries. this approach speeds up the application immensly! 10-27-2022
                    //
                    // The thumbnail size is 320px wide, with constrained proportions. The name will be the filename, with _320px.jpg suffix.
                    //
                    //var promise = checkForUnknownFileNameExtensionsAndForMimeTypeMatch(bwWorkflowAppId, bwBudgetRequestId, filePath); // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
                    var promise = checkForUnknownFileNameExtensionsAndForMimeTypeMatch('bwWorkflowAppId', 'bwBudgetRequestId', filePath); // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
                    promise.then(function (results) {
                        try {

                            //var bwWorkflowAppId = results.bwWorkflowAppId;
                            //var bwBudgetRequestId = results.bwBudgetRequestId;

                            //var bwDraftEmailId = results.bwDraftEmailId;

                            var filePath = results.filePath;

                            if (results.status == 'ERROR') {

                                var msg = 'In ProcessFileAfterUpload_email(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():1-2: ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwDraftEmailId: bwDraftEmailId,
                                    //bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else if (results.status == 'EXCEPTION') {

                                var msg = 'In ProcessFileAfterUpload_email(). Exception returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch(): ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg,
                                    bwDraftEmailId: bwDraftEmailId,
                                    //bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else if (results.status != 'SUCCESS') {

                                var msg = 'In ProcessFileAfterUpload_email(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():2: ' + results.status + ', ' + results.message;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg,
                                    bwDraftEmailId: bwDraftEmailId,
                                    //bwBudgetRequestId: bwBudgetRequestId,
                                    filePath: filePath
                                }

                                reject(result);

                            } else { // SUCCESS

                                var msg = 'In Haraka.index.js.ProcessFileAfterUpload_email(). SUCCESS returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch().';
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'In Haraka.index.js.ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var extensionIndex = filePath.split('.').length - 1;
                                var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

                                var msg = 'In Haraka.index.js.ProcessFileAfterUpload_email().fileExtension: ' + fileExtension;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'In Haraka.index.js.ProcessFileAfterUpload_email()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                if ((fileExtension == 'pdf') || (fileExtension == 'doc') || (fileExtension == 'docx') || (fileExtension == 'odt')) {

                                    //var thumbnailPath = filePath + '_thumbnail_320px_pdf_' + '.png';
                                    var thumbnailPath = filePath + '_320px_.png'; // Changed 8-4-2024.

                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload_email(). Creating .pdf thumbnail at ' + thumbnailPath + '.';

                                    console.log('');
                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                    console.log('**************************************');
                                    console.log(msg);
                                    console.log('**************************************');
                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                    console.log('');

                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                    var source = 'In ProcessFileAfterUpload_email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    gm(filePath + '[0]')
                                        .resize(320)
                                        .font('Arial', 72)
                                        .drawText(75, 200, fileExtension.toUpperCase()) // 'PDF')
                                        .write(thumbnailPath, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwDraftEmailId: bwDraftEmailId,
                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: filePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var thumbnailPath = filePath + '_60px_.png'; // Added 8-4-2024.

                                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload_email(). Creating .pdf thumbnail at ' + thumbnailPath + '.';

                                                    console.log('');
                                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                                    console.log('**************************************');
                                                    console.log(msg);
                                                    console.log('**************************************');
                                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                                    console.log('');

                                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    gm(filePath + '[0]')
                                                        .resize(60)
                                                        .font('Arial', 72)
                                                        .drawText(75, 200, fileExtension.toUpperCase()) // 'PDF')
                                                        .write(thumbnailPath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload_email.imagemagick.write():2: ' + err;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In ProcessFileAfterUpload_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwDraftEmailId: bwDraftEmailId,
                                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: filePath
                                                                    }

                                                                    reject(result);

                                                                } else {

                                                                    var msg = 'In ProcessFileAfterUpload_email.imagemagick.write().:2: Created .' + fileExtension + ' thumbnail at [' + thumbnailPath + '].';
                                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In ProcessFileAfterUpload_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg,
                                                                        bwDraftEmailId: bwDraftEmailId,
                                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: filePath
                                                                    }

                                                                    resolve(result);

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write().:2: while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwDraftEmailId: bwDraftEmailId,
                                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: filePath
                                                                }

                                                                reject(result);

                                                            }

                                                        });

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwDraftEmailId: bwDraftEmailId,
                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: filePath
                                                }

                                                reject(result);

                                            }

                                        });

                                } else if ((fileExtension == 'png') || (fileExtension == 'jpg') || (fileExtension == 'jpeg') || (fileExtension == 'jfif') || (fileExtension == 'webp') || (fileExtension == 'gif')) {

                                    //
                                    //
                                    // ADDING 60px x 60px. This is imemdiately useful for the email attachment display. We need small images for that!!! 5-17-2024.
                                    //
                                    //

                                    if (fileExtension == 'jfif') {
                                        fileExtension = 'jpeg'; // This is also done the the email rendering code to acomodate. Perhaps not the final solution to the jfif not displaying in the browser problem. 5-17-2024.
                                    }

                                    var thumbnailPathSixtyPx = filePath + '_60px_.png'; // + fileExtension;

                                    var msg = '>>>>>>>>>>>>>> In Haraka.index.js.ProcessFileAfterUpload_email(). Creating 60px thumbnail at ' + thumbnailPathSixtyPx + '.';
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'In ProcessFileAfterUpload_email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    ////
                                    //// We make sure the thumbnail does not already exist, because if it does, it won't get overriden for some reason.
                                    ////
                                    //fs.unlink(thumbnailPathSixtyPx, function (deleteErr) {
                                    //// We don't want to catch the error if the file doesn't exist. Just carry on! :)



                                    //
                                    // The following was previously resized using ffmpeg. However, ffmpeg is meant for video and cannot detect EXIF tags (which indicate if the image should be rotated). In some cases, the resizing resulted in a rotated image.
                                    // So, using this Imagemagick code.
                                    //
                                    gm(filePath)
                                        .resize(60)
                                        .autoOrient()
                                        //.rotate("#545651", 78)
                                        // Draw Rectangle using drawRectangle function
                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
                                        .write(thumbnailPathSixtyPx, function (err) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error creating the 60px thumbnail in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg,
                                                        bwDraftEmailId: bwDraftEmailId,
                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                        filePath: filePath
                                                    }

                                                    reject(result);

                                                } else {

                                                    var msg = 'In Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). Created 60px thumbnail at [' + thumbnailPathSixtyPx + '].';
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);










                                                    var thumbnailPath = filePath + '_320px_.png'; // changed this 8-4-2024. // + fileExtension;

                                                    var msg = '>>>>>>>>>>>>>> In Haraks.index.js.ProcessFileAfterUpload_email(). Creating 320px thumbnail at ' + thumbnailPath + '.';
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'In ProcessFileAfterUpload_email()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    ////
                                                    //// We make sure the thumbnail does not already exist, because if it does, it won't get overriden for some reason.
                                                    ////
                                                    //fs.unlink(thumbnailPath, function (deleteErr) {
                                                    //// We don't want to catch the error if the file doesn't exist. Just carry on! :)



                                                    //
                                                    // The following was previously resized using ffmpeg. However, ffmpeg is meant for video and cannot detect EXIF tags (which indicate if the image should be rotated). In some cases, the resizing resulted in a rotated image.
                                                    // So, using this Imagemagick code.
                                                    //
                                                    gm(filePath)
                                                        .resize(320)
                                                        .autoOrient()
                                                        //.rotate("#545651", 78)
                                                        // Draw Rectangle using drawRectangle function
                                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
                                                        .write(thumbnailPath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error creating the 320px thumbnail in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwDraftEmailId: bwDraftEmailId,
                                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: filePath
                                                                    }

                                                                    reject(result);

                                                                } else {

                                                                    var msg = 'In Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). Created 320px thumbnail at [' + thumbnailPath + '].';
                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var printableImagePath = filePath + '_640x480px_.' + fileExtension;

                                                                    var msg = '>>>>>>>>>>>>>> In Haraks.index.js.ProcessFileAfterUpload_email(). Creating 640x480px printable image at ' + printableImagePath + '.';
                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    gm(filePath)
                                                                        .resize(640, 480, '^') // The '^' argument on the resize function will tell GraphicsMagick to use the height and width as a minimum instead of the default behavior, maximum. The resulting resized image will have either the width or height be your designated dimension, while the non-conforming dimension is larger than the specified size.
                                                                        .autoOrient()
                                                                        //.rotate("#545651", 78)
                                                                        // Draw Rectangle using drawRectangle function
                                                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
                                                                        .write(printableImagePath, function (err) {
                                                                            try {
                                                                                if (err) {

                                                                                    var msg = 'Error creating the 640x480px printable image in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: msg,
                                                                                        bwDraftEmailId: bwDraftEmailId,
                                                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                                                        filePath: filePath
                                                                                    }

                                                                                    reject(result);

                                                                                } else {

                                                                                    var msg = 'In Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). Created 640x480px printable image at [' + printableImagePath + ']. filePath: ' + filePath;
                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                    var result = {
                                                                                        status: 'SUCCESS',
                                                                                        message: msg,
                                                                                        bwDraftEmailId: bwDraftEmailId,
                                                                                        //bwBudgetRequestId: bwBudgetRequestId,
                                                                                        filePath: filePath
                                                                                    }

                                                                                    resolve(result);

                                                                                }

                                                                            } catch (e) {

                                                                                var msg = 'Exception in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
                                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                var source = 'Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                var result = {
                                                                                    status: 'EXCEPTION',
                                                                                    message: msg,
                                                                                    bwDraftEmailId: bwDraftEmailId,
                                                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                                                    filePath: filePath
                                                                                }

                                                                                reject(result);

                                                                            }

                                                                        });

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). xcx4443:' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                var source = 'Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwDraftEmailId: bwDraftEmailId,
                                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: filePath
                                                                }

                                                                reject(result);

                                                            }

                                                        });











                                                }

                                            } catch (e) {

                                                var msg = 'Exception in Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write(). 60px. xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'Haraks.index.js.ProcessFileAfterUpload_email.imagemagick.write()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg,
                                                    bwDraftEmailId: bwDraftEmailId,
                                                    //bwBudgetRequestId: bwBudgetRequestId,
                                                    filePath: filePath
                                                }

                                                reject(result);

                                            }

                                        });




















































                                } else {

                                    // fileExtension
                                    var msg = 'In Haraks.index.js.ProcessFileAfterUpload_email.xcx324234(). fileExtension: ' + fileExtension;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'In Haraks.index.js.ProcessFileAfterUpload_email()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'SUCCESS',
                                        message: msg,
                                        bwDraftEmailId: bwDraftEmailId,
                                        //bwBudgetRequestId: bwBudgetRequestId,
                                        filePath: filePath
                                    }

                                    resolve(result);

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in Haraks.index.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.then(). xcx4443:' + e.message + ', ' + e.stack;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'Haraks.index.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.then()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg,
                                bwDraftEmailId: bwDraftEmailId //,
                                //bwBudgetRequestId: bwBudgetRequestId
                            }

                            reject(result);

                        }

                    }).catch(function (e) {

                        var msg = 'Exception in Haraks.index.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.catch():' + e;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'Haraks.index.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.catch()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg,
                            bwDraftEmailId: bwDraftEmailId // ,
                            //bwBudgetRequestId: bwBudgetRequestId
                        }

                        reject(result);

                    });

                    //
                    // We don't bother doing these synchronously, just let 'er run! :)
                    //

                    //BwBudgetRequest.updateOne({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
                    //    try {
                    //        if (bruError) {

                    //            var msg = 'Error in _files/ProcessFileAfterUpload_email().xcx457 Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                    //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                    //            var source = 'start.js.PUT._files/ProcessFileAfterUpload_email()';
                    //            var errorCode = null;
                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    //            //var result = {
                    //            //    status: 'ERROR',
                    //            //    result: msg,
                    //            //    message: msg
                    //            //}
                    //            //response.send(result);

                    //        } else {

                    //            if (bruMod.modifiedCount == 0) {

                    //                // The request doesn't exist yet. We need to create it!
                    //                var msg = 'In _files/ProcessFileAfterUpload_email.BwBudgetRequest.update(). Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                    //                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                    //                var source = 'start.js.POST._files/ProcessFileAfterUpload_email()';
                    //                var errorCode = null;
                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    //                console.log(msg);

                    //                //var result = {
                    //                //    status: 'SUCCESS',
                    //                //    result: 'NO_REQUEST_SAVED',
                    //                //    message: msg
                    //                //}
                    //                //response.send(result);

                    //            } else {

                    //                // The request already exists, so just respond with SUCCESS.
                    //                //var result = {
                    //                //    status: 'SUCCESS',
                    //                //    result: 'SUCCESS'
                    //                //}
                    //                //response.send(result);

                    //            }

                    //        }

                    //    } catch (e) {

                    //        var msg = 'Exception in POST _files/ProcessFileAfterUpload_email xcx4443:' + e.message + ', ' + e.stack;
                    //        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                    //        var source = 'start.js.POST._files/ProcessFileAfterUpload_email()';
                    //        var errorCode = null;
                    //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    //        //var result = {
                    //        //    status: 'EXCEPTION',
                    //        //    result: msg,
                    //        //    message: msg
                    //        //}
                    //        //response.send(msg);

                    //    }
                    //});
                }

            }

        } catch (e) {

            var msg = 'Exception in start.js.ProcessFileAfterUpload_email():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.ProcessFileAfterUpload_email(). bwParticipantId: ' + bwParticipantId;
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            };
            reject(result);

        }
    });
}


//function ProcessFileAfterUpload_email(filePath, description, bwDraftEmailId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName, convertToAPdf) {
//    //
//    // ******************************************************************************************************************************
//    // *** THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. *** 4-23-2023.
//    // ******************************************************************************************************************************
//    //
//    console.log('');
//    console.log('>>> In ProcessFileAfterUpload_email(). THIS IS THE ONLY PLACE WHERE METADATA AND THUMBNAIL FILES ARE CREATED AFTER FILE UPLOAD. bwParticipantId: ' + bwParticipantId + ', bwDraftEmailId: ' + bwDraftEmailId + ', filePath: ' + filePath);
//    console.log('');
//    return new Promise(function (resolve, reject) {
//        try {

//            //
//            //
//            // First, we have to check if this is a .zip file, which we want to extract. 9-10-2023.
//            //
//            //

//            //
//            // This where we are creating the .metadata file.
//            //
//            var stats = fs.statSync(filePath);
//            var size = stats["size"];
//            var birthtime = stats["birthtime"].toISOString(); // UTC. Doing it this way because this is how MongoDb does it, using toISOString() with a new Date().

//            console.log('In start.js./ProcessFileAfterUpload_email(). This where we are creating the .metadata file. size: ' + size + ', birthtime: ' + birthtime + ', filePath: ' + filePath);

//            //var description = request.body.Description;

//            var metaFilePath = filePath + '.metadata';

//            var json = {};
//            json["description"] = description;
//            json["size"] = size;
//            json["birthtime"] = birthtime;
//            json["bwParticipantId"] = bwParticipantId;
//            json["bwParticipantEmail"] = bwParticipantEmail;
//            json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

//            var metaFileContent = JSON.stringify(json);

//            fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
//                try {
//                    if (metaErr) {

//                        var msg = 'Error in In _files/ProcessFileAfterUpload_email.fs.writeFile(). Error saving metadata file [' + metaFilePath + ']. ' + metaErr;
//                        console.log(msg);
//                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                        var source = '_files/ProcessFileAfterUpload_email().';
//                        var errorCode = null;
//                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                    } else {

//                        var msg = 'In _files/ProcessFileAfterUpload_email.fs.writeFile(). Successfully saved metadata file [' + metaFilePath + '].';
//                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                        var source = '_files/ProcessFileAfterUpload_email().';
//                        var errorCode = null;
//                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                    }
//                } catch (e) {

//                    var msg = 'Exception in _files/ProcessFileAfterUpload_email():2-2: ' + e.message + ', ' + e.stack;
//                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                    var source = '_files/ProcessFileAfterUpload_email().';
//                    var errorCode = null;
//                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                }
//            });

//            //
//            //
//            // THIS IS WHERE WE CHECK if we want this file to be converted to a pdf file.
//            //
//            //
//            if ((convertToAPdf == true) || (convertToAPdf == 'true')) {

//                var tempArray = filePath.split('.');
//                tempArray.splice(tempArray.length - 1); // remove the last one.
//                var filenameWithoutExtension = '';
//                for (var i = 0; i < tempArray.length; i++) {
//                    filenameWithoutExtension += tempArray[i];
//                }

//                var pdfFilePath = filenameWithoutExtension + '.pdf';

//                console.log('');
//                console.log('');
//                console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WE want this file to be converted to a pdf file. filePath: ' + filePath + ', filenameWithoutExtension: ' + filenameWithoutExtension + ', pdfFilePath: ' + pdfFilePath);
//                console.log('');
//                console.log('');
//                console.log('');

//                gm(filePath)
//                    .autoOrient()
//                    .write(pdfFilePath, function (err) {
//                        try {
//                            if (err) {

//                                var msg = 'Error creating the pdf in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
//                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                var source = 'In ProcessFileAfterUpload_email()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                var result = {
//                                    status: 'ERROR',
//                                    message: msg,
//                                    bwDraftEmailId: bwDraftEmailId,
//                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                    filePath: filePath
//                                }

//                                reject(result);

//                            } else {

//                                var thumbnailPath = pdfFilePath + '_thumbnail_320px_pdf_' + '.png';

//                                var msg = '>>>>>>>>>>>>>>xcx443 In ProcessFileAfterUpload_email(). Creating .pdf thumbnail at ' + pdfFilePath + '.';
//                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                                var source = 'In ProcessFileAfterUpload_email()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                gm(pdfFilePath + '[0]')
//                                    .resize(320)
//                                    .font('Arial', 72)
//                                    .drawText(75, 200, 'PDF') // 'PDF')
//                                    .write(thumbnailPath, function (err) {
//                                        try {
//                                            if (err) {

//                                                var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
//                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                var source = 'In ProcessFileAfterUpload_email()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                var result = {
//                                                    status: 'ERROR',
//                                                    message: msg,
//                                                    bwDraftEmailId: bwDraftEmailId,
//                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                    filePath: pdfFilePath
//                                                }

//                                                reject(result);

//                                            } else {

//                                                //
//                                                //
//                                                // NOW THAT WE HAVE our pdf files and thumbnail, we have to delete the original file, and it's .metadata file.
//                                                //
//                                                //

//                                                fs.unlink(filePath, function (deleteErr) {
//                                                    if (deleteErr) {
//                                                        console.log(deleteErr);
//                                                        response.send(deleteErr);
//                                                    } else {

//                                                        var metadataFilePath = filePath + '.metadata';

//                                                        fs.unlink(metadataFilePath, function (deleteErr) {
//                                                            if (deleteErr) {
//                                                                console.log(deleteErr);
//                                                                response.send(deleteErr);
//                                                            } else {

//                                                                console.log('The files ' + filePath + ' and ' + metadataFilePath + ' were deleted!');

//                                                                var msg = 'In ProcessFileAfterUpload_email.imagemagick.write(). Created .' + 'PDF' + ' thumbnail at [' + thumbnailPath + '].';
//                                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                                                var source = 'In ProcessFileAfterUpload_email()';
//                                                                var errorCode = null;
//                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                var result = {
//                                                                    status: 'SUCCESS',
//                                                                    message: msg,
//                                                                    bwDraftEmailId: bwDraftEmailId,
//                                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                                    filePath: pdfFilePath
//                                                                }

//                                                                resolve(result);

//                                                            }
//                                                        });

//                                                    }
//                                                });

//                                            }

//                                        } catch (e) {

//                                            var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
//                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                            var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
//                                            var errorCode = null;
//                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                            var result = {
//                                                status: 'EXCEPTION',
//                                                message: msg,
//                                                bwDraftEmailId: bwDraftEmailId,
//                                                //bwBudgetRequestId: bwBudgetRequestId,
//                                                filePath: pdfFilePath
//                                            }

//                                            reject(result);

//                                        }

//                                    });

//                            }

//                        } catch (e) {

//                            var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
//                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                            var result = {
//                                status: 'EXCEPTION',
//                                message: msg,
//                                bwDraftEmailId: bwDraftEmailId,
//                                //bwBudgetRequestId: bwBudgetRequestId,
//                                filePath: filePath
//                            }

//                            reject(result);

//                        }

//                    });

//            } else {

//                if ((filePath.toLowerCase().indexOf('.mp4') > 0) || (filePath.toLowerCase().indexOf('.avi') > 0)) { // Added .avi check here 8-14-2023.

//                    ffprobe(filePath, { path: ffprobePath }, function (err, info) {
//                        if (err) {

//                            var msg = 'Error in FFPROBE: ' + err;
//                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js._files/convertfile()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                        } else {

//                            var duration_seconds = info.streams[0].duration; // For example, duration: 651.151151

//                            var hoursLeft = Math.floor(duration_seconds / 3600);
//                            var min = Math.floor((duration_seconds - hoursLeft * 3600) / 60);
//                            var secondsLeft = duration_seconds - hoursLeft * 3600 - min * 60;
//                            //secondsLeft = Math.round(secondsLeft * 100) / 100;
//                            secondsLeft = Math.trunc(Math.round(secondsLeft * 100) / 100);
//                            var duration = hoursLeft < 10 ? "0" + hoursLeft : hoursLeft;
//                            duration += ":" + (min < 10 ? "0" + min : min);
//                            duration += ":" + (secondsLeft < 10 ? "0" + secondsLeft : secondsLeft);

//                            var msg = 'FFPROBE DETAILS FOR ' + filePath + ': duration: ' + duration; //  ' + JSON.stringify(info);
//                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.GET._files/convertfile()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                            // Create a thumbnail for this file.
//                            var thumbnailPath = filePath + '_thumbnail_' + '.jpg';

//                            // Replace with our duration.
//                            var duration_temp = duration.replaceAll(':', '\\\:'); // This is required for ffmpeg.
//                            var ffmpegThumbnailVFInstructions_timestamp_temp = ffmpegThumbnailVFInstructions_timestamp.replace('xcxdurationxcx', duration_temp);

//                            var ffmpegThumbnailVFInstructions_temp = '[in]' + ffmpegThumbnailVFInstructions_filetype + ',' + ffmpegThumbnailVFInstructions_timestamp_temp; // Use the [in] command to join together multiple drawtext commands.

//                            ffmpeg(filePath)
//                                .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
//                                .output(thumbnailPath)
//                                .outputOptions(
//                                    '-frames', '1'  // Capture just one frame of the video
//                                )
//                                .addOption('-vf', ffmpegThumbnailVFInstructions_temp) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
//                                .on('error', function (err) {

//                                    var msg = 'Error creating the thumbnail in ProcessFileAfterUpload_email.ffmpeg.on.error(): ' + err.message + ', ' + err.stack;
//                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                    var source = 'In start.js./ProcessFileAfterUpload_email()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                    var result = {
//                                        status: 'ERROR',
//                                        result: msg,
//                                        message: msg
//                                    }
//                                    reject(result);

//                                })
//                                .on('end', function () {

//                                    gm(thumbnailPath)
//                                        .resize(320)
//                                        //.font('Arial', 72)
//                                        //.drawText(75, 200, 'PDF') 
//                                        .write(thumbnailPath, function (err) {
//                                            try {
//                                                if (err) {

//                                                    var msg = 'Error creating thethumbnail in ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(): ' + err;
//                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                    var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    var result = {
//                                                        status: 'ERROR',
//                                                        message: msg,
//                                                        bwDraftEmailId: bwDraftEmailId,
//                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                        filePath: pdfFilePath
//                                                    }

//                                                    reject(result);

//                                                } else {

//                                                    var msg = 'In ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(). Rescaled thumbnail at [' + thumbnailPath + '].';
//                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                    var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    //BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
//                                                    //    try {
//                                                    //        if (bruError) {

//                                                    //            var msg = 'Error in ProcessFileAfterUpload_email.ffmpeg.on.end.gm.write(). Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
//                                                    //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//                                                    //            var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                    //            var errorCode = null;
//                                                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                                                    //            var result = {
//                                                    //                status: 'ERROR',
//                                                    //                result: msg,
//                                                    //                message: msg
//                                                    //            }
//                                                    //            reject(result);

//                                                    //        } else {

//                                                    //            if (bruMod.modifiedCount == 0) {

//                                                    //                //
//                                                    //                // The request doesn't exist yet. We need to create it! // 9-8-2022
//                                                    //                //
//                                                    //                var msg = 'In _files/ProcessFileAfterUpload_email.BwBudgetRequest.update() xcx1423. Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
//                                                    //                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                                                    //                var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                    //                var errorCode = null;
//                                                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                                                    //                console.log(msg);

//                                                    //                var result = {
//                                                    //                    status: 'SUCCESS',
//                                                    //                    result: 'NO_REQUEST_SAVED',
//                                                    //                    message: msg
//                                                    //                }
//                                                    //                resolve(result);

//                                                    //            } else {

//                                                    // The request already exists, so just respond with SUCCESS.
//                                                    var result = {
//                                                        status: 'SUCCESS',
//                                                        result: 'SUCCESS'
//                                                    }
//                                                    resolve(result);

//                                                    //            }

//                                                    //        }

//                                                    //    } catch (e) {

//                                                    //        var msg = 'Exception in POST _files/ProcessFileAfterUpload_email xcx4443-2:' + e.message + ', ' + e.stack;
//                                                    //        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//                                                    //        var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                    //        var errorCode = null;
//                                                    //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                                                    //        var result = {
//                                                    //            status: 'EXCEPTION',
//                                                    //            result: msg,
//                                                    //            message: msg
//                                                    //        }
//                                                    //        reject(msg);

//                                                    //    }
//                                                    //});

//                                                }

//                                            } catch (e) {

//                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
//                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                var source = 'start.js.ProcessFileAfterUpload_email()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                var result = {
//                                                    status: 'EXCEPTION',
//                                                    message: msg,
//                                                    bwDraftEmailId: bwDraftEmailId,
//                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                    filePath: pdfFilePath
//                                                }

//                                                reject(result);

//                                            }

//                                        });

//                                })
//                                .run()

//                        }
//                    });

//                } else {

//                    //
//                    // This is where the small image is created for display in the executive summaries. this approach speeds up the application immensly! 10-27-2022
//                    //
//                    // The thumbnail size is 320px wide, with constrained proportions. The name will be the filename, with _320px.jpg suffix.
//                    //
//                    //var promise = checkForUnknownFileNameExtensionsAndForMimeTypeMatch(bwWorkflowAppId, bwBudgetRequestId, filePath); // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
//                    var promise = checkForUnknownFileNameExtensionsAndForMimeTypeMatch('bwWorkflowAppId', 'bwBudgetRequestId', filePath); // If there is not a valid file extension, we check the mime type and will change the filename to match the mime type.
//                    promise.then(function (results) {
//                        try {

//                            //var bwWorkflowAppId = results.bwWorkflowAppId;
//                            //var bwBudgetRequestId = results.bwBudgetRequestId;

//                            //var bwDraftEmailId = results.bwDraftEmailId;

//                            var filePath = results.filePath;

//                            if (results.status == 'ERROR') {

//                                var msg = 'In ProcessFileAfterUpload_email(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():1: ' + results.status + ', ' + results.message;
//                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                var source = 'In ProcessFileAfterUpload_email()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                var result = {
//                                    status: 'ERROR',
//                                    message: msg,
//                                    bwDraftEmailId: bwDraftEmailId,
//                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                    filePath: filePath
//                                }

//                                reject(result);

//                            } else if (results.status == 'EXCEPTION') {

//                                var msg = 'In ProcessFileAfterUpload_email(). Exception returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch(): ' + results.status + ', ' + results.message;
//                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                var source = 'In ProcessFileAfterUpload_email()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                var result = {
//                                    status: 'EXCEPTION',
//                                    message: msg,
//                                    bwDraftEmailId: bwDraftEmailId,
//                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                    filePath: filePath
//                                }

//                                reject(result);

//                            } else if (results.status != 'SUCCESS') {

//                                var msg = 'In ProcessFileAfterUpload_email(). Error returning from checkForUnknownFileNameExtensionsAndForMimeTypeMatch():2: ' + results.status + ', ' + results.message;
//                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                var source = 'In ProcessFileAfterUpload_email()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                var result = {
//                                    status: 'ERROR',
//                                    message: msg,
//                                    bwDraftEmailId: bwDraftEmailId,
//                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                    filePath: filePath
//                                }

//                                reject(result);

//                            } else { // SUCCESS

//                                var extensionIndex = filePath.split('.').length - 1;
//                                var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

//                                if ((fileExtension == 'pdf') || (fileExtension == 'doc') || (fileExtension == 'docx') || (fileExtension == 'odt')) {

//                                    var thumbnailPath = filePath + '_thumbnail_320px_pdf_' + '.png';

//                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload_email(). Creating .pdf thumbnail at ' + thumbnailPath + '.';

//                                    console.log('');
//                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
//                                    console.log('**************************************');
//                                    console.log(msg);
//                                    console.log('**************************************');
//                                    console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
//                                    console.log('');

//                                    var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                                    var source = 'In ProcessFileAfterUpload_email()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                    gm(filePath + '[0]')
//                                        .resize(320)
//                                        .font('Arial', 72)
//                                        .drawText(75, 200, fileExtension.toUpperCase()) // 'PDF')
//                                        .write(thumbnailPath, function (err) {
//                                            try {
//                                                if (err) {

//                                                    var msg = 'Error creating the .pdf thumbnail in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
//                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    var result = {
//                                                        status: 'ERROR',
//                                                        message: msg,
//                                                        bwDraftEmailId: bwDraftEmailId,
//                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                        filePath: filePath
//                                                    }

//                                                    reject(result);

//                                                } else {

//                                                    var msg = 'In ProcessFileAfterUpload_email.imagemagick.write(). Created .' + fileExtension + ' thumbnail at [' + thumbnailPath + '].';
//                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    var result = {
//                                                        status: 'SUCCESS',
//                                                        message: msg,
//                                                        bwDraftEmailId: bwDraftEmailId,
//                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                        filePath: filePath
//                                                    }

//                                                    resolve(result);

//                                                }

//                                            } catch (e) {

//                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
//                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                var result = {
//                                                    status: 'EXCEPTION',
//                                                    message: msg,
//                                                    bwDraftEmailId: bwDraftEmailId,
//                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                    filePath: filePath
//                                                }

//                                                reject(result);

//                                            }

//                                        });

//                                } else if ((fileExtension == 'png') || (fileExtension == 'jpg') || (fileExtension == 'jpeg') || (fileExtension == 'jfif') || (fileExtension == 'webp') || (fileExtension == 'gif')) {

//                                    var thumbnailPath = filePath + '_320px_.' + fileExtension;

//                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload_email(). Creating 320px thumbnail at ' + thumbnailPath + '.';
//                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                    var source = 'In ProcessFileAfterUpload_email()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                    ////
//                                    //// We make sure the thumbnail does not already exist, because if it does, it won't get overriden for some reason.
//                                    ////
//                                    //fs.unlink(thumbnailPath, function (deleteErr) {
//                                    //// We don't want to catch the error if the file doesn't exist. Just carry on! :)



//                                    //
//                                    // The following was previously resized using ffmpeg. However, ffmpeg is meant for video and cannot detect EXIF tags (which indicate if the image should be rotated). In some cases, the resizing resulted in a rotated image.
//                                    // So, using this Imagemagick code.
//                                    //
//                                    gm(filePath)
//                                        .resize(320)
//                                        .autoOrient()
//                                        //.rotate("#545651", 78)
//                                        // Draw Rectangle using drawRectangle function
//                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
//                                        .write(thumbnailPath, function (err) {
//                                            try {
//                                                if (err) {

//                                                    var msg = 'Error creating the 320px thumbnail in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
//                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    var result = {
//                                                        status: 'ERROR',
//                                                        message: msg,
//                                                        bwDraftEmailId: bwDraftEmailId,
//                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                        filePath: filePath
//                                                    }

//                                                    reject(result);

//                                                } else {

//                                                    var msg = 'In ProcessFileAfterUpload_email.imagemagick.write(). Created 320px thumbnail at [' + thumbnailPath + '].';
//                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    var printableImagePath = filePath + '_640x480px_.' + fileExtension;

//                                                    var msg = '>>>>>>>>>>>>>> In ProcessFileAfterUpload_email(). Creating 640x480px printable image at ' + printableImagePath + '.';
//                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                    gm(filePath)
//                                                        .resize(640, 480, '^') // The '^' argument on the resize function will tell GraphicsMagick to use the height and width as a minimum instead of the default behavior, maximum. The resulting resized image will have either the width or height be your designated dimension, while the non-conforming dimension is larger than the specified size.
//                                                        .autoOrient()
//                                                        //.rotate("#545651", 78)
//                                                        // Draw Rectangle using drawRectangle function
//                                                        //.drawRectangle(10, 2, 130, 30, 1, 2)
//                                                        .write(printableImagePath, function (err) {
//                                                            try {
//                                                                if (err) {

//                                                                    var msg = 'Error creating the 640x480px printable image in ProcessFileAfterUpload_email.imagemagick.write(): ' + err;
//                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                                    var errorCode = null;
//                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                    var result = {
//                                                                        status: 'ERROR',
//                                                                        message: msg,
//                                                                        bwDraftEmailId: bwDraftEmailId,
//                                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                                        filePath: filePath
//                                                                    }

//                                                                    reject(result);

//                                                                } else {

//                                                                    var msg = 'In ProcessFileAfterUpload_email.imagemagick.write(). Created 640x480px printable image at [' + printableImagePath + '].';
//                                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                                                                    var source = 'In ProcessFileAfterUpload_email()';
//                                                                    var errorCode = null;
//                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                    var result = {
//                                                                        status: 'SUCCESS',
//                                                                        message: msg,
//                                                                        bwDraftEmailId: bwDraftEmailId,
//                                                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                                                        filePath: filePath
//                                                                    }

//                                                                    resolve(result);

//                                                                }

//                                                            } catch (e) {

//                                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). xcx4443-2:' + e.message + ', ' + e.stack;
//                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
//                                                                var errorCode = null;
//                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                var result = {
//                                                                    status: 'EXCEPTION',
//                                                                    message: msg,
//                                                                    bwDraftEmailId: bwDraftEmailId,
//                                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                                    filePath: filePath
//                                                                }

//                                                                reject(result);

//                                                            }

//                                                        });

//                                                }

//                                            } catch (e) {

//                                                var msg = 'Exception in ProcessFileAfterUpload_email.imagemagick.write(). xcx4443:' + e.message + ', ' + e.stack;
//                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                var source = 'start.js.ProcessFileAfterUpload_email.imagemagick.write()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                var result = {
//                                                    status: 'EXCEPTION',
//                                                    message: msg,
//                                                    bwDraftEmailId: bwDraftEmailId,
//                                                    //bwBudgetRequestId: bwBudgetRequestId,
//                                                    filePath: filePath
//                                                }

//                                                reject(result);

//                                            }

//                                        });

//                                } else {

//                                    // fileExtension
//                                    var msg = 'In ProcessFileAfterUpload_email.xcx324234(). fileExtension: ' + fileExtension;
//                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                    var source = 'In ProcessFileAfterUpload_email()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                    var result = {
//                                        status: 'SUCCESS',
//                                        message: msg,
//                                        bwDraftEmailId: bwDraftEmailId,
//                                        //bwBudgetRequestId: bwBudgetRequestId,
//                                        filePath: filePath
//                                    }

//                                    resolve(result);

//                                }

//                            }

//                        } catch (e) {

//                            var msg = 'Exception in ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.then(). xcx4443:' + e.message + ', ' + e.stack;
//                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.then()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                            var result = {
//                                status: 'EXCEPTION',
//                                message: msg,
//                                bwDraftEmailId: bwDraftEmailId //,
//                                //bwBudgetRequestId: bwBudgetRequestId
//                            }

//                            reject(result);

//                        }

//                    }).catch(function (e) {

//                        var msg = 'Exception in ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.catch():' + e;
//                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                        var source = 'start.js.ProcessFileAfterUpload_email.checkBadFileNameExtensionsForMimeTypeMatch.catch()';
//                        var errorCode = null;
//                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                        var result = {
//                            status: 'EXCEPTION',
//                            message: msg,
//                            bwDraftEmailId: bwDraftEmailId // ,
//                            //bwBudgetRequestId: bwBudgetRequestId
//                        }

//                        reject(result);

//                    });

//                    //
//                    // We don't bother doing these synchronously, just let 'er run! :)
//                    //

//                    //BwBudgetRequest.updateOne({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruMod) {
//                    //    try {
//                    //        if (bruError) {

//                    //            var msg = 'Error in _files/ProcessFileAfterUpload_email().xcx457 Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
//                    //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//                    //            var source = 'start.js.PUT._files/ProcessFileAfterUpload_email()';
//                    //            var errorCode = null;
//                    //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                    //            //var result = {
//                    //            //    status: 'ERROR',
//                    //            //    result: msg,
//                    //            //    message: msg
//                    //            //}
//                    //            //response.send(result);

//                    //        } else {

//                    //            if (bruMod.modifiedCount == 0) {

//                    //                // The request doesn't exist yet. We need to create it!
//                    //                var msg = 'In _files/ProcessFileAfterUpload_email.BwBudgetRequest.update(). Attempt to update the FileConversionQueued field, but the request doesn\'t exist yet. It must be a New Request... is this true? Returning NO_REQUEST_SAVED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
//                    //                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
//                    //                var source = 'start.js.POST._files/ProcessFileAfterUpload_email()';
//                    //                var errorCode = null;
//                    //                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                    //                console.log(msg);

//                    //                //var result = {
//                    //                //    status: 'SUCCESS',
//                    //                //    result: 'NO_REQUEST_SAVED',
//                    //                //    message: msg
//                    //                //}
//                    //                //response.send(result);

//                    //            } else {

//                    //                // The request already exists, so just respond with SUCCESS.
//                    //                //var result = {
//                    //                //    status: 'SUCCESS',
//                    //                //    result: 'SUCCESS'
//                    //                //}
//                    //                //response.send(result);

//                    //            }

//                    //        }

//                    //    } catch (e) {

//                    //        var msg = 'Exception in POST _files/ProcessFileAfterUpload_email xcx4443:' + e.message + ', ' + e.stack;
//                    //        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//                    //        var source = 'start.js.POST._files/ProcessFileAfterUpload_email()';
//                    //        var errorCode = null;
//                    //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

//                    //        //var result = {
//                    //        //    status: 'EXCEPTION',
//                    //        //    result: msg,
//                    //        //    message: msg
//                    //        //}
//                    //        //response.send(msg);

//                    //    }
//                    //});
//                }

//            }

//        } catch (e) {

//            var msg = 'Exception in start.js.ProcessFileAfterUpload_email():1: ' + e.message + ', ' + e.stack;
//            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//            var source = 'start.js.ProcessFileAfterUpload_email(). bwParticipantId: ' + bwParticipantId;
//            var errorCode = null;
//            WriteToErrorLog(threatLevel, source, errorCode, msg);

//            var result = {
//                message: msg,
//                status: 'EXCEPTION'
//            };
//            reject(result);

//        }
//    });
//}








/////////////////////////////////////////////////
/////////////////////////////////////////////////
// end: THESE ARE THE EMAIL ATTACHMENT FILE SERVICES
/////////////////////////////////////////////////
/////////////////////////////////////////////////






//
// This is where we upload the main slide (this functionality is duplicated and altered for the sub-slides).
//
const storage_slides = multer.diskStorage({
    destination: function (request, file, cb) {
        //try { // No try-catch here, we want the errors to bubble up from here to the .error() function.

        var elementIdSuffix = request.body.elementIdSuffix;

        var slideSetFolderPath = 'public/_slidesets/' + elementIdSuffix;

        console.log('');
        console.log('multer.diskStorage setting destination for the file to be written to xcx1-2: ' + slideSetFolderPath);
        console.log('');
        cb(null, slideSetFolderPath); // this sets the destination for the file to be written to.

        //} catch (e) {

        //    var msg = 'Exception in multer.diskStorage.destination(): ' + e.message + ', ' + e.stack;
        //    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //    var source = '_files/uploadhomepageslide()';
        //    var errorCode = null;
        //    WriteToErrorLog(threatLevel, source, errorCode, msg);

        //    console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        //    console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        //    console.log('Exception xcx213124 In storage_slides().destination: ' + e.message + ', ' + e.stack);
        //    console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        //    console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');

        //}
    },
    filename: function (request, file, cb) {
        //try { // No try-catch here, we want the errors to bubble up from here to the .error() function.
        ////var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var elementIdSuffix = request.body.elementIdSuffix;
        var bwParticipantId = request.body.bwParticipantId;
        var bwParticipantEmail = request.body.bwParticipantEmail;
        var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
        var _Filename = request.body.Filename;
        var headerText = request.body.HeaderText;
        var description = request.body.Description;
        var size = request.body.Size;

        // Changed this to a guid, so that we always have a unique filename.
        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });

        var filename = request.body.Filename;

        var extensionIndex = filename.lastIndexOf('.');
        var filenamePrefix = filename.substring(0, extensionIndex);
        var fileExtension = '.' + filename.substring(extensionIndex + 1, filename.length);

        var newFilename = guid + fileExtension;

        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('In storage_slides(). folderpath elementIdSuffix: ' + elementIdSuffix + ', newFilename: ' + newFilename);
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');

        // Check the "public/_slidesets" folder exists.
        var workflowFolderPath = 'public/_slidesets';
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }
        // Check the "elementIdSuffix" folder exists.
        var slideSetFolderPath = 'public/_slidesets' + '/' + elementIdSuffix;
        var mkdirBudgetRequestId = function (slideSetFolderPath) {
            try {
                fs.mkdirSync(slideSetFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirBudgetRequestId(slideSetFolderPath);



        //
        // Add this sub-slide to the slidesets.metadta file.
        //
        var filePath = 'public/_slidesets/slidesets.metadata';

        fs.open(filePath, 'a', function (foError, fileHandle) { // a - Open a file for reading and writing. If the file does not exist, it is created. Positions the stream at the end of the file.
            //try {
            if (foError) {

                console.log('');
                console.log('xcx1234234-2 error: ' + foError);
                console.log('');

            } else {

                var data1 = fs.readFileSync(filePath).toString().trim(); // storage_slides.filename().

                var json;

                json = JSON.parse(data1);

                //
                // Make sure that the master slide exists in the slidesets.metadata file.
                //
                var folderIndex;
                for (var i = 0; i < json.FilesAndFolders.length; i++) {
                    if (json.FilesAndFolders[i].folderName == elementIdSuffix) {
                        // This is the folder we are looking for.
                        folderIndex = i;
                    }
                }

                // Get the number of master slides.
                var masterSlidesCount = 0;
                for (var i = 0; i < json.FilesAndFolders[folderIndex].files.length; i++) {
                    if (!json.FilesAndFolders[folderIndex].files[i].MasterSlide_FileId) { // Master slides do not have the property "MasterSlide_FileId".
                        masterSlidesCount += 1;
                    }
                }

                var masterslide = {
                    fileName: newFilename,
                    FileId: guid,
                    SortOrder: masterSlidesCount,
                    headerText: headerText,
                    descriptionText: description,
                    size: size
                }

                json.FilesAndFolders[folderIndex].files.push(masterslide);

                console.log('##############################################################');
                console.log('##############################################################');
                console.log('This is not a valid sub slide, so we are storing it as a master slide... we need to remove the "MasterSlide_FileId" property and set the SortOrder. masterslide: ' + JSON.stringify(masterslide) + ', folderIndex: ' + folderIndex);
                console.log('##############################################################');
                console.log('##############################################################');

                // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
                var strTestJson = JSON.stringify(json);
                var validJson = JSON.parse(strTestJson);

                // If we made it here, we have valid JSON.
                var strJson = JSON.stringify(validJson);

                fs.writeFile(filePath, strJson, function (wfError) {

                    if (wfError) {

                        var msg = 'Error in slideshowslidesets(). wfError: ' + wfError;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'In GET /_files/slideshowslidesets()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        fs.close(fileHandle, function (err) {
                            if (err) {
                                console.error("Failed to close file", err);
                            } else {
                                console.log("File Closed successfully");
                            }
                        });

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        response.send(msg);

                    } else {

                        console.log('');
                        console.log('multer.diskStorage filename, newFilename: ' + newFilename);
                        console.log('');

                        fs.close(fileHandle, function (err) {
                            if (err) {
                                console.error("Failed to close file", err);
                            } else {
                                console.log("File Closed successfully");
                            }
                        });

                        cb(null, newFilename);

                    }
                });

            }

        });

    }
})

const upload_slides = multer({ storage: storage_slides }).single('multerFileUploadIdentifier');

router.post('/_files/uploadhomepageslide', function (request, response) {
    upload_slides(request, response, function (err) {
        try {

            if (err instanceof multer.MulterError) {
                // A Multer error occurred when uploading.
                var result = {
                    result: err
                }
                response.send(result);
            } else if (err) {
                // An unknown error occurred when uploading.
                var result = {
                    result: err
                }
                response.send(result);
            } else {

                // Everything went fine.
                var elementIdSuffix = request.body.elementIdSuffix;

                console.log('');
                console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>In POST /_files/uploadhomepageslide(). elementIdSuffix: ' + elementIdSuffix + '. YES, THE FILE HAS BEEN UPLOADED.');
                console.log('');

                //
                // We don't need to worry about the slidesets.metadata file here, it is always checked-out and fixed when /_files/slideshowslidesets is called. 
                // This makes sure that if anyone has been messing with the files on the server, it always gets fixed when the slides are requested.
                // Perhaps a bit counter-intuitive, but better in the long run. Self healing I suppose.
                //

                var result = {
                    result: 'SLIDE_SAVED'
                }
                response.send(result);

            }

        } catch (e) {

            var msg = 'Exception in POST uploadhomepageslide: ' + e.message + ', ' + e.stack;
            if (request) {
                msg += ', request.body: ' + JSON.stringify(request.body);
            }
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.POST.uploadhomepageslide()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                result: msg,
                message: msg
            }
            response.send(msg);

        }

    })

});



//
// This is where we upload the sub-slides.
//
const storage_subslides = multer.diskStorage({
    destination: function (request, file, cb) {
        //try { // No try-catch here, we want the errors to bubble up from here to the .error() function.

        var elementIdSuffix = request.body.elementIdSuffix;

        var slideSetFolderPath = 'public/_slidesets/' + elementIdSuffix;

        console.log('');
        console.log('multer.diskStorage setting destination for the file to be written to xcx1-2: ' + slideSetFolderPath);
        console.log('');
        cb(null, slideSetFolderPath); // this sets the destination for the file to be written to.

        //} catch (e) {

        //    var msg = 'Exception in multer.diskStorage.destination(): ' + e.message + ', ' + e.stack;
        //    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //    var source = '_files/uploadhomepageslide_subslide()';
        //    var errorCode = null;
        //    WriteToErrorLog(threatLevel, source, errorCode, msg);

        //}
    },
    filename: function (request, file, cb) {
        //try { // No try-catch here, we want the errors to bubble up from here to the .error() function.

        var elementIdSuffix = request.body.elementIdSuffix;
        var bwParticipantId = request.body.bwParticipantId;
        var bwParticipantEmail = request.body.bwParticipantEmail;
        var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
        var _Filename = request.body.Filename;
        var headerText = request.body.HeaderText;
        var description = request.body.Description;
        var size = request.body.Size;

        var MasterSlide_FileId = request.body.MasterSlide_FileId; // This is how we identify the master slide for sub-slides.

        var filename = request.body.Filename;

        var extensionIndex = filename.lastIndexOf('.');
        var filenamePrefix = filename.substring(0, extensionIndex);
        var fileExtension = '.' + filename.substring(extensionIndex + 1, filename.length);

        // Changed this to a guid, so that we always have a unique filename.
        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });

        var newFilename = guid + fileExtension;

        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('In storage_subslides.filename(). MasterSlide_FileId: ' + MasterSlide_FileId + ', elementIdSuffix (folderpath): ' + elementIdSuffix + ', newFilename: ' + newFilename);
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');
        console.log('QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ');

        // Check the "slidesets" folder exists.
        var workflowFolderPath = 'public/_slidesets';
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }
        // Check the "elementIdSuffix" folder exists.
        var slideSetFolderPath = 'public/_slidesets/' + elementIdSuffix;
        var mkdirBudgetRequestId = function (slideSetFolderPath) {
            try {
                fs.mkdirSync(slideSetFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirBudgetRequestId(slideSetFolderPath);

        var fileId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });

        //
        // Add this sub-slide to the slidesets.metadta file.
        //
        var filePath = 'public/_slidesets/slidesets.metadata';

        fs.open(filePath, 'a', function (foError, fileHandle) { // a - Open a file for reading and writing. If the file does not exist, it is created. Positions the stream at the end of the file.
            try {
                if (foError) {

                    console.log('');
                    console.log('xcx1234234-2 error: ' + foError);
                    console.log('');

                } else {

                    var data1 = fs.readFileSync(filePath).toString().trim(); // storage_subslides.filename().

                    var json;

                    json = JSON.parse(data1);

                    //
                    // Make sure that the master slide exists in the slidesets.metadata file.
                    //
                    var folderIndex;
                    for (var i = 0; i < json.FilesAndFolders.length; i++) {
                        if (json.FilesAndFolders[i].folderName == elementIdSuffix) {
                            // This is the folder we are looking for.
                            folderIndex = i;
                        }
                    }

                    // Find out if the master slide exists.
                    var masterSlideExists = false;
                    for (var i = 0; i < json.FilesAndFolders[folderIndex].files.length; i++) {
                        if (!json.FilesAndFolders[folderIndex].files[i].MasterSlide_FileId && (json.FilesAndFolders[folderIndex].files[i].FileId == MasterSlide_FileId)) {
                            masterSlideExists = true;
                        }
                    }

                    if (masterSlideExists == true) {
                        //
                        // This sub slide has a place to go... it has a valid master slide. Now we just need to set the SortOrder.
                        //
                        // Get the number of sub slides.
                        var subSlidesCount = 0;
                        for (var i = 0; i < json.FilesAndFolders[folderIndex].files.length; i++) {
                            if (json.FilesAndFolders[folderIndex].files[i].MasterSlide_FileId && (json.FilesAndFolders[folderIndex].files[i].MasterSlide_FileId == MasterSlide_FileId)) {
                                subSlidesCount += 1;
                            }
                        }

                        var subslide = {
                            fileName: newFilename,
                            FileId: fileId,
                            SortOrder: subSlidesCount,
                            headerText: headerText,
                            descriptionText: description,
                            size: size,
                            MasterSlide_FileId: MasterSlide_FileId
                        }

                        json.FilesAndFolders[folderIndex].files.push(subslide);

                        console.log('##############################################################');
                        console.log('##############################################################');
                        console.log('This sub slide has a place to go... it has a valid master slide. Now we just need to set the SortOrder. subslide: ' + JSON.stringify(subslide));
                        console.log('##############################################################');
                        console.log('##############################################################');

                    } else {
                        //
                        // This is not a valid sub slide, so we are storing it as a master slide... we need to remove the "MasterSlide_FileId" property and set the SortOrder.
                        //
                        // Get the number of master slides.
                        var masterSlidesCount = 0;
                        for (var i = 0; i < json.FilesAndFolders[folderIndex].files.length; i++) {
                            if (!json.FilesAndFolders[folderIndex].files[i].MasterSlide_FileId) { // Master slides do not have the property "MasterSlide_FileId".
                                masterSlidesCount += 1;
                            }
                        }

                        var masterslide = {
                            fileName: newFilename,
                            FileId: fileId,
                            SortOrder: masterSlidesCount,
                            headerText: headerText,
                            descriptionText: description,
                            size: size
                        }

                        json.FilesAndFolders[folderIndex].files.push(masterslide);

                        console.log('##############################################################');
                        console.log('##############################################################');
                        console.log('This is not a valid sub slide, so we are storing it as a master slide... we need to remove the "MasterSlide_FileId" property and set the SortOrder. masterslide: ' + JSON.stringify(masterslide) + ', folderIndex: ' + folderIndex + ', masterSlideExists: ' + masterSlideExists);
                        console.log('##############################################################');
                        console.log('##############################################################');

                    }

                    //var strJson = JSON.stringify(json);

                    // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
                    var strTestJson = JSON.stringify(json);
                    var validJson = JSON.parse(strTestJson);

                    // If we made it here, we have valid JSON.
                    var strJson = JSON.stringify(validJson);

                    fs.writeFile(filePath, strJson, function (wfError) {

                        if (wfError) {

                            var msg = 'Error in slideshowslidesets(). wfError: ' + wfError;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'In GET /_files/slideshowslidesets()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            fs.close(fileHandle, function (err) {
                                if (err) {
                                    console.error("Failed to close file", err);
                                } else {
                                    console.log("File Closed successfully");
                                }
                            });

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            response.send(msg);

                        } else {

                            console.log('');
                            console.log('multer.diskStorage filename, newFilename: ' + newFilename);
                            console.log('');

                            fs.close(fileHandle, function (err) {
                                if (err) {
                                    console.error("Failed to close file", err);
                                } else {
                                    console.log("File Closed successfully");
                                }
                            });

                            cb(null, newFilename);

                        }
                    });

                }

            } catch (e) {

                var msg = 'Exception in slideshowslidesets():5-1: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'In GET /_files/slideshowslidesets()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(msg);

            }
        });

    }
})

const upload_subslides = multer({ storage: storage_subslides }).single('multerFileUploadIdentifier');

router.post('/_files/uploadhomepageslide_subslide', function (request, response) {
    try {
        upload_subslides(request, response, function (err) {
            try {

                if (err instanceof multer.MulterError) {
                    // A Multer error occurred when uploading.
                    var result = {
                        result: err
                    }
                    response.send(result);
                } else if (err) {
                    // An unknown error occurred when uploading.
                    var result = {
                        result: err
                    }
                    response.send(result);
                } else {

                    // Everything went fine.
                    var elementIdSuffix = request.body.elementIdSuffix;

                    console.log('');
                    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>In POST /_files/uploadhomepageslide_subslide(). elementIdSuffix: ' + elementIdSuffix + '. YES, THE FILE HAS BEEN UPLOADED.');
                    console.log('');

                    //
                    // We don't need to worry about the slidesets.metadata file here, it is always checked-out and fixed when /_files/slideshowslidesets is called. 
                    // This makes sure that if anyone has been messing with the files on the server, it always gets fixed when the slides are requested.
                    // Perhaps a bit counter-intuitive, but better in the long run. Self healing I suppose.
                    //

                    var result = {
                        result: 'SLIDE_SAVED'
                    }
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in POST uploadhomepageslide_subslide: ' + e.message + ', ' + e.stack;
                if (request) {
                    msg += ', request.body: ' + JSON.stringify(request.body);
                }
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.POST.uploadhomepageslide_subslide()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                var result = {
                    result: msg,
                    message: msg
                }
                response.send(msg);

            }

        });

    } catch (e) {

        var msg = 'Exception in POST uploadhomepageslide_subslide: ' + e.message + ', ' + e.stack;
        if (request) {
            msg += ', request.body: ' + JSON.stringify(request.body);
        }
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.uploadhomepageslide_subslide()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            result: msg,
            message: msg
        }
        response.send(msg);

    }
});
//
// end: This is where we upload the main slide (this functionality is duplicated and altered for the sub-slides).
//









router.put('/_files/bwCopyAndPaste_Paste', function (request, response) { // bwCopyAndPaste_Paste(ActiveStateIdentifier, OriginFilePath, DestinationSlideSetGuid, DestinationSlideSetFilename)
    try {
        // This is for the slideshow copy and paste among slide sets.
        console.log('In PUT /_files/bwCopyAndPaste_Paste(). This is for the slideshow copy and paste among slide sets.');

        var ActiveStateIdentifier = request.body.ActiveStateIdentifier;
        var originFolderAndFile = request.body.OriginFolderAndFile;
        var originFolder = originFolderAndFile.split('/')[0];
        var destinationFolderName = request.body.DestinationFolderName;

        // Public url examples: originFilePath: https://www.budgetworkflow.com/_files/slidesets/15cc4ba7-d055-48a5-af27-f7d25e905f1a/slide30-2.png, destinationFilePath: https://www.budgetworkflow.com/_files/slidesets/acdb01bf-12ea-44f1-ba66-86054329fb12/newslide3.png

        var originFilePath = 'public/_slidesets/' + originFolderAndFile; // var rootFilePath = 'public/_files/';

        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        var extension = originFolderAndFile.split('.')[1];
        var destinationFilePath = 'public/_slidesets/' + destinationFolderName + '/' + guid + '.' + extension; // var rootFilePath = 'public/_files/';
        var destinationFileName = guid + '.' + extension;

        var originalFileName = originFolderAndFile.split('/')[1];

        console.log('');
        console.log('In bwCopyAndPaste_Paste(). COPY FILE FROM: ' + originFilePath);
        console.log('TO: ' + destinationFilePath);

        fs.copyFile(originFilePath, destinationFilePath, function (err) {
            if (err) {

                console.log(err);
                response.send(err);

            } else {

                var originFilePath_metadata = originFilePath + '.metadata';
                var destinationFilePath_metadata = destinationFilePath + '.metadata';

                fs.copyFile(originFilePath_metadata, destinationFilePath_metadata, function (err) {
                    if (err) {

                        console.log(err);
                        response.send(err);

                    } else {

                        // Now we have to re-write the slidesets.metadata file.

                        // Check if the _files/slidesets/slidesets.metadata file exists. If not, create and populate it.
                        // We will open the file, and check that it's contents have all the files which exist here. Just a double check to make sure the file is in sync with reality.
                        //
                        //var slideSetFolderPath2 = rootFilePath + 'slidesets';
                        var filePath = 'public/_slidesets/slidesets.metadata';
                        //console.log('');
                        //console.log('filePath: ' + filePath);
                        //console.log('');

                        fs.open(filePath, 'a', function (foError, fileHandle) { // a - Open a file for reading and writing. If the file does not exist, it is created. Positions the stream at the end of the file.
                            try {
                                if (foError) {

                                    console.log('');
                                    console.log('xcx1234234 error: ' + foError);
                                    console.log('');

                                } else {

                                    //console.log('In slideshowslidesets.fs.readFileSync().');

                                    var data1 = fs.readFileSync(filePath).toString().trim(); // bwCopyAndPaste_Paste

                                    //console.log('');
                                    //console.log('In slideshowslidesets.fs.readFileSync(). data1: ' + data1);
                                    //console.log('');

                                    var json;
                                    //if (!data1) {
                                    //    json = {
                                    //        PublishedSlideSet: null,
                                    //        FilesAndFolders: []
                                    //    }
                                    //} else {

                                    json = JSON.parse(data1);

                                    //}

                                    // slidesets.metadata JSON format:
                                    //  json = {
                                    //      PublishedSlideSet: null,
                                    //      FilesAndFolders: [
                                    //           {
                                    //               folderName: 'blahblah',
                                    //               files: [
                                    //                   { fileName: 'todd.jpg', sortOrder: 0 },
                                    //                   { fileName: 'todd2.jpg', sortOrder: 1 },
                                    //                   { fileName: 'todd3.jpg', sortOrder: 2 }
                                    //               ]
                                    //           },
                                    //           {
                                    //               folderName: 'blahblah2',
                                    //               files: [
                                    //                   { fileName: 'todd.jpg', sortOrder: 0 },
                                    //                   { fileName: 'todd2.jpg', sortOrder: 1 },
                                    //                   { fileName: 'todd3.jpg', sortOrder: 2 }
                                    //               ]
                                    //           }
                                    //      ]
                                    //  }

                                    var headerText;
                                    var descriptionText;
                                    for (var i = 0; i < json.FilesAndFolders.length; i++) {
                                        if (json.FilesAndFolders[i].folderName == originFolder) {
                                            for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
                                                if (json.FilesAndFolders[i].files[j].fileName == originalFileName) {
                                                    headerText = json.FilesAndFolders[i].files[j].headerText;
                                                    descriptionText = json.FilesAndFolders[i].files[j].descriptionText;
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    }

                                    //console.log('>>>>>>>>>>>>>>>>>>>>>>. destinationFolderName: ' + destinationFolderName + ', destinationFileName: ' + destinationFileName + ', headerText: ' + headerText + ', descriptionText: ' + descriptionText);

                                    for (var i = 0; i < json.FilesAndFolders.length; i++) {
                                        if (json.FilesAndFolders[i].folderName == destinationFolderName) {
                                            // We have found where we need to insert our new file.
                                            var sortOrder = 0;
                                            var newFileJson = {
                                                fileName: destinationFileName, sortOrder: sortOrder, headerText: headerText, descriptionText: descriptionText // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 8-16-2022 DONT FORGET JSON METADATA <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                            }
                                            json.FilesAndFolders[i].files.splice(j, 0, newFileJson); // fruits.splice(position, number deleted, the json, ... and more json if you wish, ...);

                                            // Now we need to renumber the sortOrder. Go through and renumber everything appropriately.
                                            for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
                                                json.FilesAndFolders[i].files[j].sortOrder = j;
                                            }
                                            break;
                                        }
                                    }

                                    // At this point the json should be Ok and up to date.
                                    //console.log('');
                                    //console.log('At this point the json should be Ok and up to date. json: ' + JSON.stringify(json));
                                    //console.log('');

                                    //var strJson = JSON.stringify(json);

                                    // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
                                    var strTestJson = JSON.stringify(json);
                                    var validJson = JSON.parse(strTestJson);

                                    // If we made it here, we have valid JSON.
                                    var strJson = JSON.stringify(validJson);

                                    fs.writeFile(filePath, strJson, function (wfError) {

                                        if (wfError) {

                                            console.log(wfError);

                                            fs.close(fileHandle, function (err) {
                                                if (err) {
                                                    console.error("Failed to close file", err);
                                                } else {
                                                    console.log("File Closed successfully");
                                                }
                                            });


                                            response.send(wfError);

                                        } else {

                                            fs.close(fileHandle, function (err) {
                                                if (err) {
                                                    console.error("Failed to close file", err);
                                                } else {
                                                    console.log("File Closed successfully");
                                                }
                                            });

                                            console.log('SUCCESS');

                                            response.send('SUCCESS');

                                        }
                                    });

                                }

                            } catch (e) {

                                var msg = 'Exception in slideshowslidesets():5-2: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In GET /_files/slideshowslidesets()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(msg);

                            }
                        });

                    }
                });

            }
        });

    } catch (e) {

        var msg = 'Exception in PUT bwCopyAndPaste_Paste: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.bwCopyAndPaste_Paste()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});


router.get('/_files/slideshowslidesets', function (request, response) {
    try {
        // This returns all the foldersand files at _files/slidesets/ in json format.
        var slideSetFolderPath = 'public/_slidesets';
        fs.readdir(slideSetFolderPath, function (err, folders) {
            try {
                console.log('In slideshowslidesets.fs.readdir().');
                if (err) {

                    var msg = 'Error in _files/slideshowslidesets.fs.readdir(). Error listing the slideshowslidesets slideSetFolderPath: ' + slideSetFolderPath + ': ' + err;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js._files/slideshowslidesets()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);
                    console.log(msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    response.send(msg);

                } else {

                    function bwGetFiles(folder) {
                        return new Promise(function (resolve, reject) {
                            try {
                                var folderPath = slideSetFolderPath + '/' + folder;
                                fs.readdir(folderPath, function (err, files) {
                                    try {
                                        console.log('In slideshowslidesets.bwGetFiles(). folderPath: ' + folderPath);
                                        if (err) {

                                            if (err.toString().indexOf('ENOTDIR') > -1) { // not a directory

                                                // Found a file. Add it to the array.
                                                var json = {
                                                    smbType: 'FILE',
                                                    file: folder
                                                }
                                                resolve(json);

                                            } else {

                                                var msg = 'Error in start.js.slideshowslidesets.bwGetFiles.readdir(): ' + err;
                                                var result = {
                                                    message: msg
                                                }
                                                reject(msg);

                                            }

                                        } else {

                                            // Found a folder. Add it to the array.
                                            var json = {
                                                smbType: 'FOLDER',
                                                folder: folder,
                                                files: files
                                            }
                                            resolve(json);

                                        }
                                    } catch (e) {

                                        var msg = 'Exception in start.js.slideshowslidesets.bwGetFiles():2: ' + e.message + ', ' + e.stack;
                                        console.log(msg);
                                        var result = {
                                            message: msg
                                        }
                                        reject(result);

                                    }
                                });



                            } catch (e) {

                                var msg = 'Exception in start.js.slideshowslidesets.bwGetFiles(): ' + e.message + ', ' + e.stack;
                                console.log(msg);
                                var result = {
                                    message: msg
                                }
                                return result;

                            }
                        });
                    }
                    var promiseArray = [];
                    for (var i = 0; i < folders.length; i++) {
                        // This is how we recursively get all the folders and files.
                        var x = bwGetFiles(folders[i]);
                        promiseArray.push(x);
                    }
                    Promise.all(promiseArray)
                        .then(function (values) {
                            try {

                                console.log('In slideshowslidesets.fs.Promise.all().');

                                // Check if the _files/slidesets/slidesets.metadata file exists. If not, create and populate it.
                                // We will open the file, and check that it's contents have all the files which exist here. Just a double check to make sure the file is in sync with reality.
                                //
                                //var slideSetFolderPath2 = rootFilePath + 'slidesets';
                                var filePath = slideSetFolderPath + '/' + 'slidesets.metadata';
                                console.log('');
                                console.log('filePath: ' + filePath);
                                console.log('');

                                console.log('888888888888888888888888888888888888888888888');
                                console.log('888888888888888888888888888888888888888888888');
                                console.log('In slideshowslidesets.fs.promises.open(). filePath: ' + filePath);
                                console.log('888888888888888888888888888888888888888888888');
                                console.log('888888888888888888888888888888888888888888888');

                                //
                                // THIS IS OUR NEW APPROACH USING fs.promises. 2-5-2023.
                                //
                                fs.promises.open(filePath, 'r')
                                    .then(function (results) {
                                        try {

                                            fs.promises.readFile(filePath)
                                                .then(function (results) { // Returns the file contents.
                                                    try {

                                                        var originalStrJson = results.toString().trim();

                                                        console.log('');
                                                        console.log('^^^^^^^^^^^^^^^^^');
                                                        console.log('xcx234 In slideshowslidesets.fs.readFileSync().'); // originalStrJson: ' + originalStrJson);
                                                        console.log('VVVVVVVVVVVVVVVVV');
                                                        console.log('');

                                                        var json;

                                                        try {
                                                            json = JSON.parse(originalStrJson);
                                                        } catch (e) {
                                                            throw new Error('xcx2134443 Exception: An exception parsing json from fs.readFileSync(). filePath: ' + filePath + '. WE NEED TO HANDLE "fs.readFileSync()" BETTER!!!!!!');
                                                        }

                                                        //
                                                        // See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
                                                        //
                                                        for (var i = 0; i < values.length; i++) { // Iterate through the server folders and files. Check that this listing in the slidesets.metadata exists as a file on the server.
                                                            if (values[i].smbType == 'FOLDER') {

                                                                // Check if the folder exists in the slidesets.metadata. If not, add it.
                                                                var theFolderExists = false;
                                                                for (var k = 0; k < json.FilesAndFolders.length; k++) {
                                                                    if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.
                                                                        theFolderExists = true;
                                                                    }
                                                                }
                                                                if (theFolderExists != true) {
                                                                    var folderJson = {
                                                                        folderName: values[i].folder,
                                                                        files: []
                                                                    }
                                                                    json.FilesAndFolders.push(folderJson);
                                                                }

                                                                for (var j = 0; j < values[i].files.length; j++) {

                                                                    var filename = values[i].files[j];
                                                                    if (filename.toString().indexOf('.metadata') > -1) {
                                                                        // Skip this file.
                                                                    } else {

                                                                        for (var k = 0; k < json.FilesAndFolders.length; k++) {
                                                                            if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.

                                                                                var foundTheFile = false;
                                                                                for (var l = 0; l < json.FilesAndFolders[k].files.length; l++) {
                                                                                    if (filename == json.FilesAndFolders[k].files[l].fileName) {
                                                                                        foundTheFile = true;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (foundTheFile != true) {
                                                                                    var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                                        return v.toString(16);
                                                                                    });
                                                                                    var file = {
                                                                                        fileName: filename,
                                                                                        FileId: guid,
                                                                                        headerText: 'xcx12234-1',
                                                                                        descriptionText: 'xcx12234-1',
                                                                                        SortOrder: json.FilesAndFolders[k].files.length
                                                                                    };
                                                                                    json.FilesAndFolders[k].files.push(file); // Add this entry to the slidesets.metadata file, because it exists on the server.
                                                                                }

                                                                            }

                                                                        }

                                                                    }

                                                                }
                                                            }
                                                        }
                                                        //
                                                        // end: See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
                                                        //

                                                        // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
                                                        var strTestJson = JSON.stringify(json);
                                                        var validJson = JSON.parse(strTestJson);

                                                        // If we made it here, we have valid JSON.
                                                        var strJson = JSON.stringify(validJson);

                                                        //var originalStrJson = JSON.stringify(data1);

                                                        if (strJson == originalStrJson) {

                                                            //
                                                            // Nothing changed, so we don't need to save it.
                                                            //
                                                            var result = {
                                                                status: 'SUCCESS',
                                                                message: 'PATH_EXISTS',
                                                                // SlideSets: json
                                                                filesandfolders: json
                                                            }
                                                            response.send(result);

                                                        } else {

                                                            fs.promises.writeFile(filePath, strJson)
                                                                .then(function (results) {
                                                                    try {

                                                                        var result = {
                                                                            status: 'SUCCESS',
                                                                            message: 'PATH_EXISTS',
                                                                            // SlideSets: json
                                                                            filesandfolders: json
                                                                        }
                                                                        response.send(result);

                                                                    } catch (e) {

                                                                        var msg = 'Exception in slideshowslidesets():4-3: ' + e.message + ', ' + e.stack;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In GET /_files/slideshowslidesets()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        var result = {
                                                                            status: 'EXCEPTION',
                                                                            message: msg
                                                                        }
                                                                        response.send(msg);

                                                                    }
                                                                })
                                                                .catch(function (e) {

                                                                    var msg = 'Exception in slideshowslidesets():4-3-2: ' + JSON.stringify(e);
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In GET /_files/slideshowslidesets()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'EXCEPTION',
                                                                        message: msg
                                                                    }
                                                                    response.send(msg);

                                                                });
                                                        }

                                                    } catch (e) {

                                                        var msg = 'Exception in slideshowslidesets():4-2: ' + e.message + ', ' + e.stack;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'In GET /_files/slideshowslidesets()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        response.send(msg);

                                                    }

                                                })
                                                .catch(function (e) {

                                                    var msg = 'Exception in slideshowslidesets():4-3-3: ' + JSON.stringify(e);
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'In GET /_files/slideshowslidesets()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    response.send(msg);

                                                });

                                        } catch (e) {

                                            var msg = 'Exception in slideshowslidesets():4-2-5: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'In GET /_files/slideshowslidesets()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(msg);


                                        }
                                    })
                                    .catch(function (e) {

                                        var msg = 'Exception in slideshowslidesets():4-3-4: ' + JSON.stringify(e);
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'In GET /_files/slideshowslidesets()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(msg);

                                    });

















                                // THIS IS THE OLD CODE which didn't use fs.promises. It had issues, hopefully we will delete this commented out code somday, but just not yet..... 3-5-2023.
                                //fs.readFile(filePath, 'utf8', function (readError, readData) {
                                //    try {
                                //        if (readError) {
                                //            console.log('readError: ' + readError);
                                //        } else {

                                //            var originalStrJson = readData.toString().trim();

                                //            console.log('');
                                //            console.log('^^^^^^^^^^^^^^^^^');
                                //            console.log('xcx234 In slideshowslidesets.fs.readFileSync(). originalStrJson: ' + originalStrJson);
                                //            console.log('VVVVVVVVVVVVVVVVV');
                                //            console.log('');

                                //            var json;

                                //            try {
                                //                json = JSON.parse(originalStrJson);
                                //            } catch(e) {
                                //                throw new Error('xcx2134443 Exception: An exception parsing json from fs.readFileSync(). filePath: ' + filePath + '. WE NEED TO HANDLE "fs.readFileSync()" BETTER!!!!!!');
                                //            }

                                //            //
                                //            // See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
                                //            //
                                //            for (var i = 0; i < values.length; i++) { // Iterate through the server folders and files. Check that this listing in the slidesets.metadata exists as a file on the server.
                                //                if (values[i].smbType == 'FOLDER') {

                                //                    // Check if the folder exists in the slidesets.metadata. If not, add it.
                                //                    var theFolderExists = false;
                                //                    for(var k=0;k<json.FilesAndFolders.length;k++) {
                                //                        if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.
                                //                            theFolderExists = true;
                                //                        }
                                //                    }
                                //                    if (theFolderExists != true) {
                                //                        var folderJson = {
                                //                            folderName: values[i].folder,
                                //                            files: []
                                //                        }
                                //                        json.FilesAndFolders.push(folderJson);
                                //                    }

                                //                    for (var j = 0; j < values[i].files.length; j++) {

                                //                        var filename = values[i].files[j];
                                //                        if (filename.toString().indexOf('.metadata') > -1) {
                                //                            // Skip this file.
                                //                        } else {

                                //                            for(var k=0;k<json.FilesAndFolders.length;k++) {
                                //                                if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.

                                //                                    var foundTheFile = false;
                                //                                    for (var l=0;l<json.FilesAndFolders[k].files.length;l++) {
                                //                                        if (filename == json.FilesAndFolders[k].files[l].fileName) {
                                //                                            foundTheFile = true;
                                //                                            break;
                                //                                        }
                                //                                    }
                                //                                    if (foundTheFile != true) {
                                //                                        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                //                                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                //                                            return v.toString(16);
                                //                                        });
                                //                                        var file = { 
                                //                                            fileName: filename, 
                                //                                            FileId: guid,
                                //                                            headerText: 'xcx12234-1',
                                //                                            descriptionText: 'xcx12234-1',
                                //                                            SortOrder: json.FilesAndFolders[k].files.length
                                //                                        };
                                //                                        json.FilesAndFolders[k].files.push(file); // Add this entry to the slidesets.metadata file, because it exists on the server.
                                //                                    }

                                //                                }

                                //                            }

                                //                        }

                                //                    }
                                //                }
                                //            }
                                //            //
                                //            // end: See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
                                //            //

                                //            // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
                                //            var strTestJson = JSON.stringify(json);
                                //            var validJson = JSON.parse(strTestJson);

                                //            // If we made it here, we have valid JSON.
                                //            var strJson = JSON.stringify(validJson);

                                //            //var originalStrJson = JSON.stringify(data1);

                                //            if (strJson == originalStrJson) {

                                //                // Nothing changed, so we don't need to save it.
                                //                var result = {
                                //                    status: 'SUCCESS',
                                //                    message: 'PATH_EXISTS',
                                //                    // SlideSets: json
                                //                    filesandfolders: json
                                //                }
                                //                response.send(result);

                                //            } else {

                                //                fs.writeFile(filePath, strJson, function(writeError, writeResult) {
                                //                    try {
                                //                        if(writeError) {

                                //                            //fs.close(fileHandle, function(err) {
                                //                            //    if (err) {
                                //                            //        console.error("Failed to close file", err);
                                //                            //    } else {
                                //                            //        console.log("File Closed successfully");
                                //                            //    }
                                //                            //});

                                //                            var msg = 'Error in slideshowslidesets(). writeError: ' + writeError;
                                //                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                //                            var source = 'In GET /_files/slideshowslidesets()';
                                //                            var errorCode = null;
                                //                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                //                            var result = {
                                //                                status: 'ERROR',
                                //                                message: msg
                                //                            }
                                //                            response.send(msg);

                                //                        } else {

                                //                            //fs.close(fileHandle, function(err) {
                                //                            //    if (err) {
                                //                            //        console.error("Failed to close file", err);
                                //                            //    } else {
                                //                            //        console.log("File Closed successfully");
                                //                            //    }
                                //                            //});

                                //                            var result = {
                                //                                status: 'SUCCESS',
                                //                                message: 'PATH_EXISTS',
                                //                                // SlideSets: json
                                //                                filesandfolders: json
                                //                            }
                                //                            response.send(result);

                                //                        }
                                //                    } catch(e) {

                                //                        var msg = 'Exception in slideshowslidesets():4-3: ' + e.message + ', ' + e.stack;
                                //                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                //                        var source = 'In GET /_files/slideshowslidesets()';
                                //                        var errorCode = null;
                                //                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                //                        var result = {
                                //                            status: 'EXCEPTION',
                                //                            message: msg
                                //                        }
                                //                        response.send(msg);

                                //                    }
                                //                });
                                //            }
                                //        }
                                //    } catch(e) {

                                //        var msg = 'Exception in slideshowslidesets():4-2: ' + e.message + ', ' + e.stack;
                                //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                //        var source = 'In GET /_files/slideshowslidesets()';
                                //        var errorCode = null;
                                //        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                //        var result = {
                                //            status: 'EXCEPTION',
                                //            message: msg
                                //        }
                                //        response.send(msg);

                                //    }
                                //});

                            } catch (e) {

                                var msg = 'Exception in slideshowslidesets():4: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'In GET /_files/slideshowslidesets()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(msg);

                            }
                        })
                        .catch(function (error) {

                            var msg = 'Exception in start.js.slideshowslidesets(): ' + error;
                            console.log(msg);
                            var result = {
                                message: msg
                            }
                            response.send(result);

                        });

                }

            } catch (e) {

                var msg = 'Exception in slideshowslidesets():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'In GET /_files/slideshowslidesets()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(msg);

            }
        });

    } catch (e) {

        var msg = 'Exception in slideshowslidesets():2: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'In GET /_files/slideshowslidesets()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(msg);
    }
});

//router.get('/_files/slideshowslidesets', function (request, response) {
//    try {
//        // This returns all the foldersand files at _files/slidesets/ in json format.
//        var slideSetFolderPath = rootFilePath + 'slidesets';
//        fs.readdir(slideSetFolderPath, function (err, folders) {
//            try {
//                console.log('In slideshowslidesets.fs.readdir().');
//                if (err) {

//                    var msg = 'Error in _files/slideshowslidesets.fs.readdir(). Error listing the slideshowslidesets slideSetFolderPath: ' + slideSetFolderPath + ': ' + err;
//                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                    var source = 'start.js._files/slideshowslidesets()';
//                    var errorCode = null;
//                    WriteToErrorLog(threatLevel, source, errorCode, msg);
//                    console.log(msg);

//                    var result = {
//                        status: 'ERROR',
//                        message: msg
//                    }
//                    response.send(msg);

//                } else {

//                    function bwGetFiles(folder) {
//                        return new Promise(function (resolve, reject) {
//                            try {
//                                var folderPath = slideSetFolderPath + '/' + folder;
//                                fs.readdir(folderPath, function (err, files) {
//                                    try {
//                                        console.log('In slideshowslidesets.bwGetFiles(). folderPath: ' + folderPath);
//                                        if (err) {

//                                            if (err.toString().indexOf('ENOTDIR') > -1) { // not a directory

//                                                // Found a file. Add it to the array.
//                                                var json = {
//                                                    smbType: 'FILE',
//                                                    file: folder
//                                                }
//                                                resolve(json);

//                                            } else {

//                                                var msg = 'Error in start.js.slideshowslidesets.bwGetFiles.readdir(): ' + err;
//                                                var result = {
//                                                    message: msg
//                                                }
//                                                reject(msg);

//                                            }

//                                        } else {

//                                            // Found a folder. Add it to the array.
//                                            var json = {
//                                                smbType: 'FOLDER',
//                                                folder: folder,
//                                                files: files
//                                            }
//                                            resolve(json);

//                                        }
//                                    } catch (e) {

//                                        var msg = 'Exception in start.js.slideshowslidesets.bwGetFiles():2: ' + e.message + ', ' + e.stack;
//                                        console.log(msg);
//                                        var result = {
//                                            message: msg
//                                        }
//                                        reject(result);

//                                    }
//                                });



//                            } catch (e) {

//                                var msg = 'Exception in start.js.slideshowslidesets.bwGetFiles(): ' + e.message + ', ' + e.stack;
//                                console.log(msg);
//                                var result = {
//                                    message: msg
//                                }
//                                return result;

//                            }
//                        });
//                    }
//                    var promiseArray = [];
//                    for (var i = 0; i < folders.length; i++) {
//                        // This is how we recursively get all the folders and files.
//                        var x = bwGetFiles(folders[i]);
//                        promiseArray.push(x);
//                    }
//                    Promise.all(promiseArray)
//                    .then(function (values) {
//                        try {

//                            console.log('In slideshowslidesets.fs.Promise.all().');

//                            // Check if the _files/slidesets/slidesets.metadata file exists. If not, create and populate it.
//                            // We will open the file, and check that it's contents have all the files which exist here. Just a double check to make sure the file is in sync with reality.
//                            //
//                            //var slideSetFolderPath2 = rootFilePath + 'slidesets';
//                            var filePath = slideSetFolderPath + '/' + 'slidesets.metadata';
//                            console.log('');
//                            console.log('filePath: ' + filePath);
//                            console.log('');

//                            fs.open(filePath, 'a', function (foError, fileHandle) { // a - Open a file for reading and writing. If the file does not exist, it is created. Positions the stream at the end of the file.
//                                try {
//                                    if (foError) {

//                                        console.log('');
//                                        console.log('xcx1234234 error: ' + foError);
//                                        console.log('');

//                                    } else {

//                                        console.log('In slideshowslidesets.fs.readFileSync().');



//                                        var data0 = fs.readFileSync(filePath); 

//                                        //var data1 = fs.readFileSync(filePath).toString().trim();
//                                        var data1 = data0.toString().trim();

//                                        console.log('');
//                                        console.log('^^^^^^^^^^^^^^^^^');
//                                        console.log('xcx234 In slideshowslidesets.fs.readFileSync(). data1: ' + data1);
//                                        console.log('VVVVVVVVVVVVVVVVV');
//                                        console.log('');

//                                        var json;

//                                        try {
//                                            json = JSON.parse(data1);
//                                        } catch(e) {
//                                            throw new Error('xcx2134443 Exception: An exception parsing json from fs.readFileSync(). filePath: ' + filePath + '. WE NEED TO HANDLE "fs.readFileSync()" BETTER!!!!!!');
//                                        }

//                                        //
//                                        // See if there are master slides in slidesets.metadata for which we have no actual files on the server. If so, remove them from slidesets.metadata.
//                                        //
//                                        //for (var i = 0; i < json.FilesAndFolders.length; i++) {
//                                        //    for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) { 
//                                        //        for (var k = 0; k < values.length; k++) { // Iterate through the server folders and files. Check that this listing in the slidesets.metadata exists as a file on the server.
//                                        //            if ((values[k].smbType == 'FOLDER') && (values[k].folder == json.FilesAndFolders[i].folderName)) { // Make sure we are in the correct slideset folder.

//                                        //                var foundTheFile = false;
//                                        //                var fileIndex = -1;
//                                        //                for (var l = 0; l < values[k].files.length; l++) {
//                                        //                    var filename = values[k].files[l];
//                                        //                    if (filename.toString().indexOf('.metadata') > -1) {
//                                        //                        // Skip this file.
//                                        //                    } else {
//                                        //                        if(filename == json.FilesAndFolders[i].files[j].fileName) {
//                                        //                            fileIndex = j;
//                                        //                            foundTheFile = true;
//                                        //                            break;
//                                        //                        }
//                                        //                    }
//                                        //                }
//                                        //                if (foundTheFile != true) {
//                                        //                    json.FilesAndFolders[i].files.splice(fileIndex, 1); // Remove this entry from the slidesets.metadata file, because it doesn't exist on the server.
//                                        //                }

//                                        //            }
//                                        //        }
//                                        //    }
//                                        //}
//                                        //
//                                        // end: See if there are master slides in slidesets.metadata for which we have no actual files on the server. If so, remove them from slidesets.metadata.
//                                        //

//                                        //
//                                        // See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
//                                        //
//                                        for (var i = 0; i < values.length; i++) { // Iterate through the server folders and files. Check that this listing in the slidesets.metadata exists as a file on the server.
//                                            if (values[i].smbType == 'FOLDER') {

//                                                // Check if the folder exists in the slidesets.metadata. If not, add it.
//                                                var theFolderExists = false;
//                                                for(var k=0;k<json.FilesAndFolders.length;k++) {
//                                                    if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.
//                                                        theFolderExists = true;
//                                                    }
//                                                }
//                                                if (theFolderExists != true) {
//                                                    var folderJson = {
//                                                        folderName: values[i].folder,
//                                                        files: []
//                                                    }
//                                                    json.FilesAndFolders.push(folderJson);
//                                                }

//                                                for (var j = 0; j < values[i].files.length; j++) {

//                                                    var filename = values[i].files[j];
//                                                    if (filename.toString().indexOf('.metadata') > -1) {
//                                                        // Skip this file.
//                                                    } else {

//                                                        for(var k=0;k<json.FilesAndFolders.length;k++) {
//                                                            if (values[i].folder == json.FilesAndFolders[k].folderName) { // Make sure we are in the correct slideset folder.

//                                                                var foundTheFile = false;
//                                                                for (var l=0;l<json.FilesAndFolders[k].files.length;l++) {
//                                                                    if (filename == json.FilesAndFolders[k].files[l].fileName) {
//                                                                        foundTheFile = true;
//                                                                        break;
//                                                                    }
//                                                                }
//                                                                if (foundTheFile != true) {
//                                                                    var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
//                                                                        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
//                                                                        return v.toString(16);
//                                                                    });
//                                                                    var file = { 
//                                                                        fileName: filename, 
//                                                                        FileId: guid,
//                                                                        headerText: 'xcx12234-1',
//                                                                        descriptionText: 'xcx12234-1',
//                                                                        SortOrder: json.FilesAndFolders[k].files.length
//                                                                    };
//                                                                    json.FilesAndFolders[k].files.push(file); // Add this entry to the slidesets.metadata file, because it exists on the server.
//                                                                }

//                                                            }

//                                                        }

//                                                    }

//                                                }
//                                            }
//                                        }
//                                        //
//                                        // end: See if there are slides on the server which aren't in the slidesets.metadata. If not, add them as master slides.
//                                        //

//                                        console.log('end: See if there are slides on the server which aren\'t in the slidesets.metadata. If not, add them as master slides.' + '\n' + JSON.stringify(json));

//                                        //
//                                        // Now that everything is there, we have to go through and make sure the SortOrder is correct for all of the master slides in the slidesets.metadata.
//                                        //
//                                        //for (var i = 0; i < json.FilesAndFolders.length; i++) {
//                                        //    var masterslides = [];
//                                        //    //    for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
//                                        //    //        if (!json.FilesAndFolders[i].files[j].MasterSlide_FileId) {
//                                        //    //            masterslides.push(json.FilesAndFolders[i].files[j]);
//                                        //    //        }
//                                        //    //    }
//                                        //    //    // Now that we have the masterslides, lets make sure they are in order etc. Sort the files in this folder by sortOrder.
//                                        //    //    masterslides = masterslides.sort(function (a, b) {
//                                        //    //        var nameA = a.SortOrder;
//                                        //    //        var nameB = b.SortOrder;
//                                        //    //        if (nameA < nameB) {
//                                        //    //            return -1; //nameA comes first
//                                        //    //        }
//                                        //    //        if (nameA > nameB) {
//                                        //    //            return 1; // nameB comes first
//                                        //    //        }
//                                        //    //        return 0;  // names must be equal
//                                        //    //    });

//                                        //    //    // Now that it is sorted, lets re-number to make sure it is Ok.
//                                        //    //    for (var j = 0; j < masterslides.length; j++) {
//                                        //    //        masterslides[j].SortOrder = j;
//                                        //    //    }

//                                        //    //    // Remove them from the original list, then put them back in the correct order.
//                                        //    //    for (var j = 0; j < json.FilesAndFolders[i].files.length - 1; j++) {
//                                        //    //        for (var k = 0; k < masterslides.length - 1; k++) {
//                                        //    //            if (masterslides[k].FileId == json.FilesAndFolders[i].files[j].FileId) {
//                                        //    //                json.FilesAndFolders[i].files[j].SortOrder = masterslides[k].SortOrder;
//                                        //    //            }
//                                        //    //        }
//                                        //    //    }

//                                        //    //
//                                        //    // Go through and make sure the SortOrder is correct for all of the sub-slides in the slidesets.metadata.
//                                        //    //
//                                        //    //    var subslides = [];
//                                        //    //    for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
//                                        //    //        if (json.FilesAndFolders[i].files[j].MasterSlide_FileId) {
//                                        //    //            subslides.push(json.FilesAndFolders[i].files[j]);
//                                        //    //        }
//                                        //    //    }

//                                        //    //    // Now that we have the subslides, lets make sure they are in order etc.
//                                        //    //    // Sort the files in this folder by sortOrder.
//                                        //    //    subslides = subslides.sort(function (a, b) {
//                                        //    //        var nameA = a.SortOrder;
//                                        //    //        var nameB = b.SortOrder;
//                                        //    //        if (nameA < nameB) {
//                                        //    //            return -1; //nameA comes first
//                                        //    //        }
//                                        //    //        if (nameA > nameB) {
//                                        //    //            return 1; // nameB comes first
//                                        //    //        }
//                                        //    //        return 0;  // names must be equal
//                                        //    //    });

//                                        //    //    // Now that it is sorted, lets re-number to make sure it is Ok.
//                                        //    //    for (var i = 0; i < subslides.length; i++) {
//                                        //    //        subslides[i].SortOrder = i;
//                                        //    //    }

//                                        //    //    // Reload these back into the original list. Now they are sorted!
//                                        //    //    for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
//                                        //    //        for (var k = 0; k < subslides.length; k++) {
//                                        //    //            if (subslides[k].FileId == json.FilesAndFolders[i].files[j].FileId) {
//                                        //    //                json.FilesAndFolders[i].files[j].SortOrder = subslides[k].SortOrder;
//                                        //    //            }
//                                        //    //        }
//                                        //    //    }
//                                        //    //
//                                        //    // end: Go through and make sure the SortOrder is correct for all of the sub-slides in the slidesets.metadata.
//                                        //    //

//                                        //}
//                                        //
//                                        // end: Now that everything is there, we have to go through and make sure the SortOrder is correct for all of the master slides in the slidesets.metadata.
//                                        //

//                                        console.log('end: Now that everything is there, we have to go through and make sure the SortOrder is correct for all of the master slides in the slidesets.metadata.' + '\n' + JSON.stringify(json));


//                                        // At this point the json should be Ok and up to date.
//                                        //console.log('');
//                                        //console.log('At this point the json should be Ok and up to date. json: ' + JSON.stringify(json));
//                                        //console.log('');

//                                        // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
//                                        var strTestJson = JSON.stringify(json);
//                                        var validJson = JSON.parse(strTestJson);

//                                        // If we made it here, we have valid JSON.
//                                        var strJson = JSON.stringify(validJson);

//                                        fs.writeFile(filePath, strJson, function (wfError) {
//                                            try {

//                                                if (wfError) {
//                                                    console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> XCX76986907079' + wfError);

//                                                    fs.close(fileHandle, function(err) {
//                                                        if (err) {
//                                                            console.error("Failed to close file", err);
//                                                        } else {
//                                                            console.log("File Closed successfully");
//                                                        }
//                                                    });

//                                                } else {

//                                                    console.log('File written successfully. filePath: ' + filePath + '\n' + strJson);

//                                                    fs.close(fileHandle, function(err) {
//                                                        if (err) {
//                                                            console.error("Failed to close file", err);
//                                                        } else {
//                                                            console.log("File Closed successfully");
//                                                        }
//                                                    });

//                                                    var result = {
//                                                        message: 'PATH_EXISTS',
//                                                        // SlideSets: json
//                                                        filesandfolders: json
//                                                    }
//                                                    response.send(result);

//                                                }

//                                            } catch(e) {

//                                                var msg = 'Exception in slideshowslidesets():5-2: ' + e.message + ', ' + e.stack;
//                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                var source = 'In GET /_files/slideshowslidesets()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                var result = {
//                                                    status: 'EXCEPTION',
//                                                    message: msg
//                                                }
//                                                response.send(msg);

//                                            }
//                                        });

//                                    }

//                                } catch (e) {

//                                    var msg = 'Exception in slideshowslidesets():5-3: ' + e.message + ', ' + e.stack;
//                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                    var source = 'In GET /_files/slideshowslidesets()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                    var result = {
//                                        status: 'EXCEPTION',
//                                        message: msg
//                                    }
//                                    response.send(msg);

//                                }
//                            });

//                        } catch (e) {

//                            var msg = 'Exception in slideshowslidesets():4: ' + e.message + ', ' + e.stack;
//                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                            var source = 'In GET /_files/slideshowslidesets()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                            var result = {
//                                status: 'EXCEPTION',
//                                message: msg
//                            }
//                            response.send(msg);

//                        }
//                    })
//                    .catch(function (error) {

//                        var msg = 'Exception in start.js.slideshowslidesets(): ' + error;
//                        console.log(msg);
//                        var result = {
//                            message: msg
//                        }
//                        response.send(result);

//                    });

//                }

//            } catch (e) {

//                var msg = 'Exception in slideshowslidesets():3: ' + e.message + ', ' + e.stack;
//                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                var source = 'In GET /_files/slideshowslidesets()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg);
//                console.log(msg);

//                var result = {
//                    status: 'EXCEPTION',
//                    message: msg
//                }
//                response.send(msg);

//            }
//        });

//    } catch (e) {

//        var msg = 'Exception in slideshowslidesets():2: ' + e.message + ', ' + e.stack;
//        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//        var source = 'In GET /_files/slideshowslidesets()';
//        var errorCode = null;
//        WriteToErrorLog(threatLevel, source, errorCode, msg);

//        var result = {
//            status: 'EXCEPTION',
//            message: msg
//        }
//        response.send(msg);
//    }
//});

router.post('/_files/publishslidesets', function (request, response) {
    try {
        var CurrentSlidesJson = request.body.CurrentSlidesJson;
        console.log('In publishslidesets(). CurrentSlidesJson: ' + JSON.stringify(CurrentSlidesJson));

        // slidesets.metadata JSON format:
        //  json = {
        //      PublishedSlideSet: null,
        //      FilesAndFolders: [
        //           {
        //               folderName: 'blahblah',
        //               files: [
        //                   { fileName: 'todd.jpg', sortOrder: 0 },
        //                   { fileName: 'todd2.jpg', sortOrder: 1 },
        //                   { fileName: 'todd3.jpg', sortOrder: 2 }
        //               ]
        //           },
        //           {
        //               folderName: 'blahblah2',
        //               files: [
        //                   { fileName: 'todd.jpg', sortOrder: 0 },
        //                   { fileName: 'todd2.jpg', sortOrder: 1 },
        //                   { fileName: 'todd3.jpg', sortOrder: 2 }
        //               ]
        //           }
        //      ]
        //  }





        //var strJson = JSON.stringify(CurrentSlidesJson);

        // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
        var strTestJson = JSON.stringify(CurrentSlidesJson);
        var validJson = JSON.parse(strTestJson);

        // If we made it here, we have valid JSON.
        var strJson = JSON.stringify(validJson);

        var filePath = 'public/_slidesets/' + 'slidesets.metadata';
        fs.writeFile(filePath, strJson, function (wfError) {

            if (wfError) {

                var msg = 'Error in publishslidesets(): ' + wfError;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.POST.publishslidesets()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);
                console.log(msg);

                var result = {
                    message: msg
                }
                response.send(result);

            } else {

                var msg = 'SUCCESS';

                var result = {
                    message: msg
                }
                response.send(result);

            }
        });

    } catch (e) {

        var msg = 'Exception in POST publishslidesets: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.publishslidesets()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            message: msg
        }
        response.send(result);
    }
});

router.post('/_files/createnewslideshowslideset', function (request, response) {
    try {
        var slideSetGuid = request.body.SlideSetGuid;
        console.log('In createnewslideshowslideset(). slideSetGuid: ' + slideSetGuid);

        var folderPath = 'public/_slidesets/' + slideSetGuid;
        var mkdir = function (folderPath) {
            try {
                fs.mkdirSync(folderPath);

                var results = {
                    message: 'SUCCESS'
                };
                response.send(results);

            } catch (e) {
                //if (e.code != 'EEXIST') throw e;
                var msg = 'Exception in _files/createnewslideshowslideset(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js._files/createnewslideshowslideset()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                var results = {
                    message: msg
                };
                response.send(results);

            }
        }
        mkdir(folderPath);

    } catch (e) {

        var msg = 'Exception in POST createnewslideshowslideset: ' + e.message + ', ' + e.stack;
        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.createnewslideshowslideset()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            message: msg
        }
        response.send(result);
    }
});

router.post('/_files/deleteaslide', function (request, response) {
    try {
        var folderName = request.body.FolderName;
        var filename = request.body.FileName;
        console.log('In POST /_files/deleteaslide(). folderName: ' + folderName + ', filename: ' + filename);

        //
        // First, we have to remove it from the slidesets.metadata file.
        //
        var deletedSortOrder = -1;
        var filePath = 'public/_slidesets/' + 'slidesets.metadata';
        var json = JSON.parse(fs.readFileSync(filePath));

        for (var i = 0; i < json.FilesAndFolders.length; i++) {
            if (folderName == json.FilesAndFolders[i].folderName) {
                for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
                    if (filename == json.FilesAndFolders[i].files[j].fileName) {

                        console.log('');
                        console.log('In deleteaslide(). REMOVING FILE: ' + j + ', filename: ' + filename);
                        console.log('');

                        deletedSortOrder = json.FilesAndFolders[i].files[j].sortOrder;
                        var fileId = json.FilesAndFolders[i].files[j].FileId;

                        // We found the file. Remove it.
                        json.FilesAndFolders[i].files.splice(j, 1); // Remove this file.

                        // Remove any subslides. Actually we will leave them, but now they will be master slides.
                        for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
                            if (json.FilesAndFolders[i].files[j].MasterSlide_FileId == fileId) {

                                // This is a subslide. Delete the "MasterSlide_FileId" property. Not it will be a master slide.
                                delete json.FilesAndFolders[i].files[j].MasterSlide_FileId;

                            }
                        }

                    }
                }
            }
        }
        console.log('');
        console.log('In deleteaslide(). We removed the file from the json. json: ' + JSON.stringify(json));
        console.log('');


        // Now we need to re-do the sort order.
        if (deletedSortOrder > -1) {
            for (var i = 0; i < json.FilesAndFolders.length; i++) {
                if (folderName == json.FilesAndFolders[i].folderName) {
                    for (var j = 0; j < json.FilesAndFolders[i].files.length; j++) {
                        if (json.FilesAndFolders[i].files[j].sortOrder > deletedSortOrder) {
                            json.FilesAndFolders[i].files[j].sortOrder = json.FilesAndFolders[i].files[j].sortOrder - 1;
                        }
                    }
                }
            }
        }






        // Now we need to save this to the file.
        //var strJson = JSON.stringify(json);

        // Validate that this is valide JSON before we decide to save it. We don't want to save crap. :)
        var strTestJson = JSON.stringify(json);
        var validJson = JSON.parse(strTestJson);

        // If we made it here, we have valid JSON.
        var strJson = JSON.stringify(validJson);


        fs.writeFile(filePath, strJson, function (wfError) {

            if (wfError)
                console.log(wfError);
            else {

                console.log("File written successfully xcx234456");

            }
        });


        //
        // Now we need to delete the actual files.
        var _filePath = 'public/_slidesets/' + folderName + '/' + filename;
        fs.unlink(_filePath, function (err) {
            if (err) {

                console.log(err);

                var msg = 'The file was not deleted xcx23123-1: ' + _filePath + '. Error: ' + err;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.deleteaslide().unlink';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                response.send(msg);

            } else {

                // Also get rid of the .metadata file.
                var _filePath2 = 'public/_slidesets/' + folderName + '/' + filename + '.metadata';
                fs.unlink(_filePath2, function (err2) {
                    if (err2) {

                        console.log(err2);

                        var msg = 'The file was not deleted xcx23123-2: ' + _filePath2 + '. Error: ' + err2;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.deleteaslide().unlink';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        response.send(msg);

                    } else {

                        console.log('This slide was deleted: ' + _filePath2);
                        response.send('The slide was deleted.');

                    }
                });

            }
        });

    } catch (e) {

        var msg = 'Exception in deleteaslide(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.deleteaslide()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        response.send(msg);

    }
});















router.post('/_files/SaveExternallyFacingUrl', function (request, response) {
    try {
        console.log('In SaveExternallyFacingUrl().');

        var ip = request.headers['x-forwarded-for'] ||
            request.connection.remoteAddress ||
            request.socket.remoteAddress ||
            (request.connection.socket ? request.connection.socket.remoteAddress : null
            );
        var ips = [];
        for (var x = 0; x < ip.split(',').length; x++) {
            if (ip.split(',')[x].trim() == '127.0.0.1') {
                // do nothing
            } else {
                // add to array
                ips.push(ip.split(',')[x].trim());
            }
        }

        console.log('In /_files/SaveExternallyFacingUrl: Checking from (' + ips + ')');

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwParticipantId = request.body.bwParticipantId;
        var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
        var bwParticipantEmail = request.body.bwParticipantEmail;
        var url = request.body.url;

        if (!(bwWorkflowAppId && bwParticipantId && bwParticipantFriendlyName && bwParticipantEmail && url)) {
            console.log('Parameters are missing from the web service call.');
        } else {


            //
            // Save this setting for the BwWorkflowApp in the database.
            //
            var timestamp = new Date();

            BwWorkflowApp.update({ bwWorkflowAppId: bwWorkflowAppId }, { bwExternallyFacingUrlForAttachments: url, Modified: timestamp }, function (error, mod) {
                if (!error) {

                    var result = {
                        message: 'SUCCESS'
                    }
                    response.send(result);

                } else {

                    var msg = 'Error updating the bwExternallyFacingUrlForAttachments in organization ' + bwWorkflowAppId + ': ' + error;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js._files/SaveExternallyFacingUrl()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var results = {
                        message: msg
                    };
                    response.send(results);

                }
            });

        }

    } catch (e) {

        var msg = 'Exception in POST SaveExternallyFacingUrl: ' + e.message + ', ' + e.stack;
        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.SaveExternallyFacingUrl()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            message: msg
        }
        response.send(result);
    }
});

router.post('/_files/SaveExternallyFacingUrlSourceFolder', function (request, response) {
    try {
        console.log('In SaveExternallyFacingUrlSourceFolder().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /SaveExternallyFacingUrlSourceFolder()().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwParticipantId = request.body.bwParticipantId;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var bwExternallyFacingUrlForAttachmentsSourceFolder = request.body.bwExternallyFacingUrlForAttachmentsSourceFolder;

                    CheckIfSambaShareExistsAndIsAccesible(bwExternallyFacingUrlForAttachmentsSourceFolder, 2000).then(function (results) {

                        if (results.status != 'SUCCESS') {

                            results.smb2Client.close(); // Make sure we close the connection.

                            var msg = 'Error in start.js.SaveExternallyFacingUrlSourceFolder(). Unexpected response from CheckIfSambaShareExistsAndIsAccesible(): ' + JSON.stringify(results);
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.SaveExternallyFacingUrlSourceFolder()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            };
                            response.send(result);

                        } else {

                            results.smb2Client.close(); // Make sure we close the connection.

                            //
                            // Ok it works! Now we need to save this setting for the BwWorkflowApp in the database.
                            //

                            BwWorkflowApp.updateOne({ bwWorkflowAppId: bwWorkflowAppId }, { bwExternallyFacingUrlForAttachmentsSourceFolder: bwExternallyFacingUrlForAttachmentsSourceFolder, Modified: new Date() }, function (waError, waMod) {
                                if (waError) {

                                    var msg = 'Error updating the bwExternallyFacingUrlForAttachmentsSourceFolder in organization ' + bwWorkflowAppId + ': ' + waError;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js._files/SaveExternallyFacingUrlSourceFolder()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    };
                                    response.send(result);

                                } else {

                                    if (waMod.modifiedCount != 1) {

                                        var msg = 'Error updating the bwExternallyFacingUrlForAttachmentsSourceFolder in organization ' + bwWorkflowAppId + '. Unexpected database response: ' + JSON.stringify(waMod);
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.SaveExternallyFacingUrlSourceFolder()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        };
                                        response.send(result);

                                    } else {

                                        var result = {
                                            status: 'SUCCESS',
                                            message: 'PATH_EXISTS_WITH_READ_WRITE_PERMISSIONS_AND_BWWORKFLOWAPP_UPDATED'
                                            //message: 'Updated for bwWorkflowAppId: ' + bwWorkflowAppId + ', mod: ' + JSON.stringify(waMod) + ', bwExternallyFacingUrlForAttachmentsSourceFolder: ' + bwExternallyFacingUrlForAttachmentsSourceFolder
                                        }
                                        response.send(result);

                                    }

                                }
                            });

                        }

                    }).catch(function (e) {

                        var msg = e.message;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.SaveExternallyFacingUrlSourceFolder()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg
                        }
                        response.send(result);

                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /SaveExternallyFacingUrlSourceFolder().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.SaveExternallyFacingUrlSourceFolder():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.SaveExternallyFacingUrlSourceFolder()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.SaveExternallyFacingUrlSourceFolder():2: ' + JSON.stringify(e);
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.SaveExternallyFacingUrlSourceFolder()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });


        //if (!(bwWorkflowAppId && bwParticipantId && bwParticipantFriendlyName && bwParticipantEmail && sourceFolder)) {
        //    console.log('Parameters are missing from the web service call.');
        //} else {


        //    var path = sourceFolder; // '\\192.168.1.2\huntleysdiving';
        //    var smb2Client = new SMB2({
        //        share: path,
        //        domain: 'WORKGROUP',
        //        username: '',
        //        password: '',
        //        //debug: true,
        //        autoCloseTimeout: 10000
        //    });

        //    smb2Client.exists('', function (error, exists) {
        //        if (error) {

        //            var msg = 'Error in SaveExternallyFacingUrlSourceFolder.smb2Client.exists(' + path + '): ' + error;
        //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //            var source = 'start.js.POST.EmailAttachmentsExternally()';
        //            var errorCode = null;
        //            WriteToErrorLog(threatLevel, source, errorCode, msg);
        //            console.log(msg);

        //            var result = {
        //                message: msg
        //            }
        //            response.send(result);

        //        } else {
        //            if (exists == true) {

        //                // Now that we know the path/share exists, we need to check if we can write to it. We will create a unique folder, write to it, then delete it when done.
        //                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        //                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        //                    return v.toString(16);
        //                });
        //                var testFolderName = 'TESTING_PERMS_' + guid;
        //                var testFolderPath = path + '\\' + testFolderName;

        //                var smb2Client = new SMB2({
        //                    share: path,
        //                    domain: 'WORKGROUP',
        //                    username: '',
        //                    password: '',
        //                    //debug: true,
        //                    autoCloseTimeout: 10000
        //                });

        //                smb2Client.mkdir(testFolderName, function (error) {
        //                    if (error) {

        //                        var msg = 'Error in SaveExternallyFacingUrlSourceFolder.smb2Client.mkdir(' + testFolderPath + '): ' + error;
        //                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //                        var source = 'start.js.POST.EmailAttachmentsExternally()';
        //                        var errorCode = null;
        //                        WriteToErrorLog(threatLevel, source, errorCode, msg);
        //                        console.log(msg);

        //                        var result = {
        //                            message: msg
        //                        }
        //                        response.send(result);

        //                    } else {

        //                        //
        //                        // Ok it works! Now we need to save this setting for the BwWorkflowApp in the database.
        //                        //
        //                        var timestamp = new Date();

        //                        BwWorkflowApp.update({ bwWorkflowAppId: bwWorkflowAppId }, { bwExternallyFacingUrlForAttachmentsSourceFolder: sourceFolder, Modified: timestamp }, function (error, mod) {
        //                            if (!error) {

        //                                var result = {
        //                                    message: 'PATH_EXISTS_WITH_READ_WRITE_PERMISSIONS_AND_BWWORKFLOWAPP_UPDATED'
        //                                }
        //                                response.send(result);

        //                            } else {

        //                                var msg = 'Error updating the bwExternallyFacingUrlForAttachmentsSourceFolder in organization ' + bwWorkflowAppId + ': ' + error;
        //                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //                                var source = 'start.js._files/SaveExternallyFacingUrlSourceFolder()';
        //                                var errorCode = null;
        //                                WriteToErrorLog(threatLevel, source, errorCode, msg);

        //                                var results = {
        //                                    message: msg
        //                                };
        //                                response.send(results);

        //                            }
        //                        });

        //                    }
        //                });

        //            } else if (exists == false) {

        //                var result = {
        //                    message: 'PATH_DOES_NOT_EXIST'
        //                }
        //                response.send(result);

        //            } else {

        //                var result = {
        //                    message: 'In SaveExternallyFacingUrlSourceFolder(). Unexpected response for exists: ' + exists
        //                }
        //                response.send(result);

        //            }
        //            smb2Client.close();
        //        }
        //    });

        //}

    } catch (e) {

        var msg = 'Exception in POST SaveExternallyFacingUrlSourceFolder: ' + e.message + ', ' + e.stack;
        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.SaveExternallyFacingUrlSourceFolder()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            message: msg
        }
        response.send(result);
    }
});

router.post('/_files/emailattachmentsexternally', function (request, response) {
    try {
        console.log('In start.js.emailattachmentsexternally().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'customer');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /emailattachmentsexternally().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = bwWorkflowAppId_LoggedIn;
                    var bwParticipantId = bwParticipantId_LoggedIn;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var attachments = JSON.parse(request.body.attachments);

                    if (!(attachments && attachments.length > 0)) {

                        var result = {
                            status: 'ERROR',
                            message: 'There are no attachments.'
                        }
                        response.send(result);

                    } else {
                        //
                        // This is how the attachments are defined. These need to get copied to the "external attachments url", which is set in the "Organization settings". 
                        //
                        //var attachment = {
                        //    bwWorkflowAppId: bwWorkflowAppId,
                        //    subfolder: subfolder,
                        //    filename: filename
                        //}
                        //attachments.push(attachment);

                        BwWorkflowApp.find({ bwWorkflowAppId: bwWorkflowAppId }, function (wafError, wafResult) {
                            try {
                                if (wafError) {

                                    var msg = 'Error in _files/EmailAttachmentsExternally(): ' + wafError;
                                    var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.EmailAttachmentsExternally()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    var bwExternallyFacingUrlForAttachmentsSourceFolder = wafResult[0].bwExternallyFacingUrlForAttachmentsSourceFolder; // var path = '\\\\192.168.0.2\\huntleysdiving';
                                    var bwExternallyFacingUrlForAttachments = wafResult[0].bwExternallyFacingUrlForAttachments;

                                    // Example attachments: [
                                    //{"bwWorkflowAppId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","subfolder":"xx","bwBudgetRequestId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","filename":"Todd Hiltz Resume 2022.pdf"},
                                    //{"bwWorkflowAppId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","subfolder":"xx","bwBudgetRequestId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","filename":"VTS_03_1.mp4"}]

                                    // 1: Make sure a TEMP folder exists at public/tempemailattachmentsexternally
                                    var tempFolderPath = 'public/tempemailattachmentsexternally/';
                                    var mkdirWorkflowAppId1 = function (tempFolderPath) {
                                        try {
                                            fs.mkdirSync(tempFolderPath);
                                        } catch (e) {
                                            if (e.code != 'EEXIST') throw e;
                                        }
                                    }
                                    mkdirWorkflowAppId1(tempFolderPath);

                                    // 2: Make sure a BwWorkflowAppId folder exists at public/tempemailattachmentsexternally/bwWorkflowAppId
                                    var tempFolderPath2 = 'public/tempemailattachmentsexternally/' + bwWorkflowAppId;
                                    var mkdirWorkflowAppId2 = function (tempFolderPath2) {
                                        try {
                                            fs.mkdirSync(tempFolderPath2);
                                        } catch (e) {
                                            if (e.code != 'EEXIST') throw e;
                                        }
                                    }
                                    mkdirWorkflowAppId2(tempFolderPath2);

                                    // 3: Make sure the subfolder exists at public/tempemailattachmentsexternally/bwWorkflowAppId/subfolder
                                    var subfolder = attachments[0].subfolder;
                                    var tempFolderPath3 = 'public/tempemailattachmentsexternally/' + bwWorkflowAppId + '/' + subfolder;
                                    var mkdirWorkflowAppId3 = function (tempFolderPath3) {
                                        try {
                                            fs.mkdirSync(tempFolderPath3);
                                        } catch (e) {
                                            if (e.code != 'EEXIST') throw e;
                                        }
                                    }
                                    mkdirWorkflowAppId3(tempFolderPath3);

                                    // 4: Copy the attachments to the subfolder. destination file will be created or overwritten by default.
                                    var sourcePath = 'public/_files/' + attachments[0].bwWorkflowAppId + '/' + attachments[0].bwBudgetRequestId;
                                    var destinationPath = 'public/tempemailattachmentsexternally/' + bwWorkflowAppId + '/' + subfolder;
                                    var filenameArray = [];
                                    for (var i = 0; i < attachments.length; i++) {
                                        filenameArray.push(attachments[i].Filename);

                                        //var thumbnailFilename = attachments[i].Filename + '_320px_.jpg';
                                        //filenameArray.push(thumbnailFilename);
                                    }

                                    var filenameArray_thumbnails = [];
                                    for (var i = 0; i < attachments.length; i++) {
                                        //filenameArray_thumbnails.push(attachments[i].Filename);

                                        //var thumbnailFilename = attachments[i].Filename + '_320px_.jpg';
                                        var thumbnailFilename = attachments[i].Filename + '_thumbnail_.png'; // Changed 5-9-2024. // 8-4-2024.
                                        filenameArray_thumbnails.push(thumbnailFilename);
                                    }

                                    var msg = 'Instart.js.EmailAttachmentsExternally(). xcx2131232534667. Calling bwCopyFiles(). sourcePath: ' + sourcePath + ', destinationPath: ' + destinationPath + ', filenameArray: ' + JSON.stringify(filenameArray) + ', filenameArray_thumbnails: ' + JSON.stringify(filenameArray_thumbnails);
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.EmailAttachmentsExternally()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    bwCopyFiles(sourcePath, destinationPath, filenameArray).then(function () {
                                        try {

                                            bwCopyFiles(sourcePath, destinationPath, filenameArray_thumbnails).then(function () {
                                                try {
                                                    //console.log('');
                                                    //console.log('Completed bwCopyFiles() successfully. Files: ' + JSON.stringify(filenameArray));
                                                    //console.log('');




                                                    console.log('');
                                                    console.log('Completed bwCopyFiles() successfully. Files: ' + JSON.stringify(filenameArray) + ', Thumbnails: ' + JSON.stringify(filenameArray_thumbnails));
                                                    console.log('');

                                                    // 5: Use SCP to move this folder to it's destination. SCP will create the folder at the destination and copy all the files in it.
                                                    var sourceFolder = 'public/tempemailattachmentsexternally/' + bwWorkflowAppId + '/' + subfolder;
                                                    var destinationFolder = 'www/huntleysdivingandmarine.video/' + subfolder;

                                                    console.log('');
                                                    console.log('FILES HAVE BEEN COPIED..... STARTING SCP.....');
                                                    console.log('');

                                                    var msg = 'DEV NOTE in _files/EmailAttachmentsExternally(). 8-1-2022 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW xcx1242512 right now it is 192.168.0.14.';
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.EmailAttachmentsExternally()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    Scp({
                                                        host: '192.168.1.14', // 8-1-2022 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                        port: 22,
                                                        username: 'todd',
                                                        password: 'AmyTahiti1',
                                                        // privateKey: fs.readFileSync('./key.pem'),
                                                        // passphrase: 'your key passphrase',
                                                    }).then(function (client) {
                                                        client.uploadDir(sourceFolder, destinationFolder)
                                                            .then(function (results1) {
                                                                console.log('SCP SUCCESSFUL. response: ' + JSON.stringify(results1));

                                                                client.close(); // remember to close connection after you finish

                                                                try {
                                                                    // Clean up.
                                                                    fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                                        if (err) {
                                                                            //
                                                                        } else {
                                                                            //
                                                                        }
                                                                    });
                                                                } catch (e) {
                                                                    //
                                                                }

                                                                //
                                                                // Send this in an email to the user, just in case they close the browser and lost the links.
                                                                //
                                                                var subject = 'You have copied file(s) to the external location and created links to these file(s).';
                                                                var body = 'You have copied file(s) to the external location and created links to these file(s).<br /><br /><br />';

                                                                for (var i = 0; i < attachments.length; i++) {

                                                                    var filename = attachments[i].Filename;
                                                                    if (filename.indexOf('_thumbnail_') > -1) {
                                                                        //
                                                                        // This is a thumbnail. Do not display as an attachment.
                                                                        //
                                                                    } else {

                                                                        console.log('xcx66654 description');
                                                                        //
                                                                        // This is an actual attachment. Display it!
                                                                        //
                                                                        var description = attachments[i].Description;
                                                                        var size = attachments[i].Size;
                                                                        if (size.toLowerCase() != 'na') {
                                                                            size = (Number(size) / 1000000).toFixed(1);
                                                                        }

                                                                        var fileUrl = bwExternallyFacingUrlForAttachments + "/" + encodeURIComponent(attachments[i].subfolder) + "/" + encodeURIComponent(filename);

                                                                        var html = '';
                                                                        html += '<div style="white-space:nowrap;">';
                                                                        html += '   <a href="' + fileUrl + '" target="_blank" style="cursor:pointer;">';

                                                                        //
                                                                        //
                                                                        // The following is where I tried to embed a [attachments[i].File64bit]. This does not work!! In order to insert an inline image, the emal spec requires that is is an attachment (which can be 64bit characters), with a reference to it, as an attachment. 4-16-2024.
                                                                        //
                                                                        //

                                                                        html += '       <img src="' + attachments[i].File64bit + '" xcx="xcx1232567-22" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';
                                                                        //html += '       <img xcx="xcx1232567" src="' + fileUrl + '" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';

                                                                        //var fileUrl_thumbnail = fileUrl + '_thumbnail_.jpg';
                                                                        //html += '       <img xcx="xcx1232567-22" crossorigin="anonymous" src="' + fileUrl_thumbnail + '" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';


                                                                        html += '   </a>';
                                                                        html += '   <br />';
                                                                        html += '   <a href="' + fileUrl + '" target="_blank" style="cursor:pointer;">' + fileUrl + '</a>';
                                                                        html += '</div>';
                                                                        html += '<br />';

                                                                        body += html;

                                                                    }
                                                                }

                                                                //
                                                                // https://github.com/sendgrid/sendgrid-nodejs/blob/master/packages/mail/USE_CASES.md#attachments
                                                                //
                                                                // fs.readFile('public_html/img/Report.pdf', function(err, data) {
                                                                //     sendxgrid.send({
                                                                //         to          : hexDecode(_.e),
                                                                //         from        : 'xxxxxxxxx@gmail.com',
                                                                //         subject     : 'Report',
                                                                //         attachments : [{filename: 'Report.pdf',
                                                                //                        content: data
                                                                //                        type: 'application/pdf',
                                                                //                        disposition: 'attachment',
                                                                //                        contentId: 'myId'
                                                                //         }],
                                                                //         html        : 'bla bla'
                                                                //
                                                                //

                                                                sendgrid.bwSend({
                                                                    to: bwParticipantEmail,
                                                                    from: fromEmailAddress,
                                                                    subject: subject,
                                                                    html: body,
                                                                    bwWorkflowAppId_LoggedIn: bwWorkflowAppId_LoggedIn,
                                                                    bwParticipantId_LoggedIn: bwParticipantId_LoggedIn
                                                                }).then(function (result) {
                                                                    try {

                                                                        var msg = 'The file(s) have been successfully uploaded to the external location, and an email has been sent to you including the links.';
                                                                        if (results1) {
                                                                            msg += ' ' + JSON.stringify(results1);
                                                                        }

                                                                        var result = {
                                                                            status: 'SUCCESS',
                                                                            message: msg
                                                                        }
                                                                        response.send(result);

                                                                    } catch (e) {

                                                                        var msg = 'Exception in start.js.EmailAttachmentsExternally():6: ' + e.message + ', ' + e.stack;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.EmailAttachmentsExternally()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        var result = {
                                                                            status: 'EXCEPTION',
                                                                            message: msg
                                                                        }
                                                                        response.send(result);

                                                                    }

                                                                }).catch(function (e) {

                                                                    var msg = 'Exception in start.js.EmailAttachmentsExternally():5: body: ' + body + ', ' + e.message + ', ' + e.stack;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.EmailAttachmentsExternally()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'EXCEPTION',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                });

                                                            })
                                                            .catch(function (error) {
                                                                console.log('Exception in SCP:2: ' + error);

                                                                try {
                                                                    // Clean up.
                                                                    fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                                        if (err) {
                                                                            //
                                                                        } else {
                                                                            //
                                                                        }
                                                                    });
                                                                } catch (e) {
                                                                    //
                                                                }

                                                                var msg = '2: Unable to share these files at the moment. There is an issue uploading to the external location. Try a different name for your subfolder. A more detailed description of the error: "' + error + '".';
                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            })
                                                    }).catch(function (e) {

                                                        var msg = '1: Unable to share these files at the moment. The external location may not be reachable. Possible remedy "sudo ufw allow from 203.0.113.4 to any port 22". Change ip of course. A more detailed description of the error: "' + e + '".';
                                                        console.log(msg); // Timed out while waiting for handshake

                                                        try {
                                                            // Clean up.
                                                            fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                                if (err) {
                                                                    //
                                                                } else {
                                                                    //
                                                                }
                                                            });
                                                        } catch (e) {
                                                            //
                                                        }

                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.EmailAttachmentsExternally()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    });





                                                } catch (e) {

                                                    var msg = 'Exception in _files/EmailAttachmentsExternally():4: ' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.EmailAttachmentsExternally()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                }

                                            }).catch(function (err) {

                                                //var msg = 'Exception in start.js.mailAttachmentsExternally():3-1: ' + err;
                                                //var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                //var source = 'start.js.EmailAttachmentsExternally()';
                                                //var errorCode = null;
                                                //WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                //var result = {
                                                //    status: 'EXCEPTION',
                                                //    message: msg
                                                //}
                                                //response.send(result);

                                                // 5: Use SCP to move this folder to it's destination. SCP will create the folder at the destination and copy all the files in it.
                                                var sourceFolder = 'public/tempemailattachmentsexternally/' + bwWorkflowAppId + '/' + subfolder;
                                                var destinationFolder = 'www/huntleysdivingandmarine.video/' + subfolder;

                                                console.log('');
                                                console.log('FILES HAVE BEEN COPIED..... STARTING SCP.....');
                                                console.log('');

                                                var msg = 'DEV NOTE in _files/EmailAttachmentsExternally(). 8-1-2022 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW xcx1242512 right now it is 192.168.0.14.';
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.EmailAttachmentsExternally()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                Scp({
                                                    host: '192.168.1.14', // 8-1-2022 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                    port: 22,
                                                    username: 'todd',
                                                    password: 'AmyTahiti1',
                                                    // privateKey: fs.readFileSync('./key.pem'),
                                                    // passphrase: 'your key passphrase',
                                                }).then(function (client) {
                                                    client.uploadDir(sourceFolder, destinationFolder)
                                                        .then(function (results1) {
                                                            console.log('SCP SUCCESSFUL. response: ' + JSON.stringify(results1));

                                                            client.close(); // remember to close connection after you finish

                                                            try {
                                                                // Clean up.
                                                                fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                                    if (err) {
                                                                        //
                                                                    } else {
                                                                        //
                                                                    }
                                                                });
                                                            } catch (e) {
                                                                //
                                                            }

                                                            //
                                                            // Send this in an email to the user, just in case they close the browser and lost the links.
                                                            //
                                                            var subject = 'You have copied file(s) to the external location and created links to these file(s).';
                                                            var body = 'You have copied file(s) to the external location and created links to these file(s).<br /><br /><br />';

                                                            for (var i = 0; i < attachments.length; i++) {

                                                                var filename = attachments[i].Filename;
                                                                if (filename.indexOf('_thumbnail_') > -1) {
                                                                    //
                                                                    // This is a thumbnail. Do not display as an attachment.
                                                                    //
                                                                } else {

                                                                    console.log('xcx66654 description');
                                                                    //
                                                                    // This is an actual attachment. Display it!
                                                                    //
                                                                    var description = attachments[i].Description;
                                                                    var size = attachments[i].Size;
                                                                    if (size.toLowerCase() != 'na') {
                                                                        size = (Number(size) / 1000000).toFixed(1);
                                                                    }

                                                                    var fileUrl = bwExternallyFacingUrlForAttachments + "/" + encodeURIComponent(attachments[i].subfolder) + "/" + encodeURIComponent(filename);

                                                                    var html = '';
                                                                    html += '<div style="white-space:nowrap;">';
                                                                    html += '   <a href="' + fileUrl + '" target="_blank" style="cursor:pointer;">';

                                                                    //
                                                                    //
                                                                    // The following is where I tried to embed a [attachments[i].File64bit]. This does not work!! In order to insert an inline image, the emal spec requires that is is an attachment (which can be 64bit characters), with a reference to it, as an attachment. 4-16-2024.
                                                                    //
                                                                    //

                                                                    html += '       <img src="' + attachments[i].File64bit + '" xcx="xcx1232567-22" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';
                                                                    //html += '       <img xcx="xcx1232567" src="' + fileUrl + '" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';

                                                                    //var fileUrl_thumbnail = fileUrl + '_thumbnail_.jpg';
                                                                    //html += '       <img xcx="xcx1232567-22" crossorigin="anonymous" src="' + fileUrl_thumbnail + '" alt="' + description + '" title="' + description + '" style="height:120px;display:block;cursor:pointer;max-width:250px;border:1px solid gray;" />';


                                                                    html += '   </a>';
                                                                    html += '   <br />';
                                                                    html += '   <a href="' + fileUrl + '" target="_blank" style="cursor:pointer;">' + fileUrl + '</a>';
                                                                    html += '</div>';
                                                                    html += '<br />';

                                                                    body += html;

                                                                }
                                                            }

                                                            //
                                                            // https://github.com/sendgrid/sendgrid-nodejs/blob/master/packages/mail/USE_CASES.md#attachments
                                                            //
                                                            // fs.readFile('public_html/img/Report.pdf', function(err, data) {
                                                            //     sendxgrid.send({
                                                            //         to          : hexDecode(_.e),
                                                            //         from        : 'xxxxxxxxx@gmail.com',
                                                            //         subject     : 'Report',
                                                            //         attachments : [{filename: 'Report.pdf',
                                                            //                        content: data
                                                            //                        type: 'application/pdf',
                                                            //                        disposition: 'attachment',
                                                            //                        contentId: 'myId'
                                                            //         }],
                                                            //         html        : 'bla bla'
                                                            //
                                                            //

                                                            sendgrid.bwSend({
                                                                to: bwParticipantEmail,
                                                                from: fromEmailAddress,
                                                                subject: subject,
                                                                html: body,
                                                                bwWorkflowAppId_LoggedIn: bwWorkflowAppId_LoggedIn,
                                                                bwParticipantId_LoggedIn: bwParticipantId_LoggedIn
                                                            }).then(function (result) {
                                                                try {

                                                                    var msg = 'The file(s) have been successfully uploaded to the external location, and an email has been sent to you including the links.';
                                                                    if (results1) {
                                                                        msg += ' ' + JSON.stringify(results1);
                                                                    }

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                } catch (e) {

                                                                    var msg = 'Exception in start.js.EmailAttachmentsExternally():6: ' + e.message + ', ' + e.stack;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.EmailAttachmentsExternally()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'EXCEPTION',
                                                                        message: msg
                                                                    }
                                                                    response.send(result);

                                                                }

                                                            }).catch(function (e) {

                                                                var msg = 'Exception in start.js.EmailAttachmentsExternally():5: body: ' + body + ', ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.EmailAttachmentsExternally()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            });

                                                        })
                                                        .catch(function (error) {
                                                            console.log('Exception in SCP:2: ' + error);

                                                            try {
                                                                // Clean up.
                                                                fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                                    if (err) {
                                                                        //
                                                                    } else {
                                                                        //
                                                                    }
                                                                });
                                                            } catch (e) {
                                                                //
                                                            }

                                                            var msg = '2: Unable to share these files at the moment. There is an issue uploading to the external location. Try a different name for your subfolder. A more detailed description of the error: "' + error + '".';
                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        })
                                                }).catch(function (e) {

                                                    var msg = '1: Unable to share these files at the moment. The external location may not be reachable. Possible remedy "sudo ufw allow from 203.0.113.4 to any port 22". Change ip of course. A more detailed description of the error: "' + e + '".';
                                                    console.log(msg); // Timed out while waiting for handshake

                                                    try {
                                                        // Clean up.
                                                        fs.rmdir(sourceFolder, { recursive: true }, function (err) {
                                                            if (err) {
                                                                //
                                                            } else {
                                                                //
                                                            }
                                                        });
                                                    } catch (e) {
                                                        //
                                                    }

                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.EmailAttachmentsExternally()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                });

                                            });




                                        } catch (e) {

                                            var msg = 'Exception in _files/EmailAttachmentsExternally():4: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.EmailAttachmentsExternally()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    }).catch(function (err) {

                                        var msg = 'Exception in start.js.mailAttachmentsExternally():3-2: ' + err;
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.EmailAttachmentsExternally()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    });

                                }
                            } catch (e) {

                                var msg = 'Exception in _files/EmailAttachmentsExternally():2: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.EmailAttachmentsExternally()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }
                        });







                        //var toParticipantIds = [];
                        //var toParticipantEmails = [];
                        //var toParticipantFriendlyNames = [];
                        //for (var i = 0; i < recipients.length; i++) {
                        //    toParticipantIds.push(recipients[i].ParticipantId);
                        //    toParticipantEmails.push(recipients[i].ParticipantEmail);
                        //    toParticipantFriendlyNames.push(recipients[i].ParticipantFriendlyName);
                        //}

                        //var timestamp = new Date();

                        ////console.log('toParticipantEmails: ' + JSON.stringify(toParticipantEmails));

                        //BwForestConfiguration.find({
                        //    bwForestConfigurationId: 1
                        //}, {
                        //}, {
                        //}, function (fcError, fcResult) {
                        //    try {
                        //        if (fcError) {
                        //            // Exception section:
                        //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                        //            var source = 'start.js.EmailAttachmentsExternally:1';
                        //            var errorCode = null;
                        //            var message = fcError;
                        //            WriteToErrorLog(threatLevel, source, errorCode, message);
                        //            //
                        //            response.send('Error in EmailAttachmentsExternally.find:1x:' + fcError);
                        //        } else {
                        //            var ForestAdministratorToReviewEmailsBeforeSending = true;
                        //            console.log('fcResult[0].ForestAdministratorToReviewEmailsBeforeSending: ' + fcResult[0].ForestAdministratorToReviewEmailsBeforeSending);
                        //            if (fcResult && fcResult[0] && fcResult[0].ForestAdministratorToReviewEmailsBeforeSending == false) {
                        //                ForestAdministratorToReviewEmailsBeforeSending = false;
                        //            }
                        //            console.log('In bwworkflowdataservice.js.sendgrid.bwSend(). !params.bwWorkflowAppId.');
                        //            if (ForestAdministratorToReviewEmailsBeforeSending == true) {

                        //                //if (fcResult && fcResult[0] && fcResult[0].NotifyForestAdministratorToReviewEmailsViaSms && fcResult[0].NotifyForestAdministratorToReviewEmailsViaSms == true) {
                        //                const from = "15194881754";
                        //                const to = "19023851968";
                        //                const text = 'FOREST ADMIN please review EmailAttachmentsExternally to ' + bwParticipantEmail + '. This email has not been sent yet, you must do it. The user sending the email has been been given the message that the email will be sent when email services are "turned back on", which isnt quite correct in this case.. bwPendingEmailId: ' + bwPendingEmailId;

                        //                vonage.message.sendSms(from, to, text, function (err, responseData) {
                        //                    if (err) {
                        //                        console.log(err);
                        //                    } else {
                        //                        if (responseData.messages[0]['status'] === "0") {
                        //                            console.log("Message sent successfully.");
                        //                        } else {
                        //                            console.log("SMS message failed with error: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
                        //                        }
                        //                    }
                        //                });
                        //                //}


                        //                sendxgrid.send({
                        //                    to: 'forestadministrator@budgetworkflow.com',
                        //                    from: 'webservices@budgetworkflow.com',
                        //                    subject: 'review email',
                        //                    html: 'FOREST ADMIN please review EmailAttachmentsExternally to ' + bwParticipantEmail + '. This email has not been sent yet, you must do it. The user sending the email has been been given the message that the email will be sent when email services are "turned back on", which isnt quite correct in this case.. bwPendingEmailId: ' + bwPendingEmailId
                        //                }, function (sgError, sgResponse) {
                        //                    if (sgError) {

                        //                    } else {

                        //                    }
                        //                });


                        //                // Save so that the Forest Administrator can "actually" send this email when they decide to do so. 8-31-2021
                        //                var bwPendingEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        //                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        //                    return v.toString(16);
                        //                });

                        //                var bwForestPendingEmail = new BwForestPendingEmail({
                        //                    bwPendingEmailId: bwPendingEmailId,
                        //                    Timestamp: timestamp,
                        //                    //bwTenantId: pefResult[0].bwTenantId,
                        //                    bwWorkflowAppId: bwWorkflowAppId,
                        //                    //RelatedRequestId: pefResult[0].RelatedRequestId,
                        //                    FromEmailAddress: bwParticipantEmail,
                        //                    ToParticipantId: JSON.stringify(toParticipantIds),
                        //                    ToParticipantFriendlyName: JSON.stringify(toParticipantFriendlyNames),
                        //                    ToParticipantEmail: JSON.stringify(toParticipantEmails),
                        //                    //CcAddress: pefResult[0].CcAddress,
                        //                    //BccAddress: pefResult[0].BccAddress,
                        //                    Subject: subject,
                        //                    Body: body//,
                        //                    //Result: mull
                        //                }
                        //                        );
                        //                bwForestPendingEmail.save(function (seError) {
                        //                    if (!seError) {
                        //                        // Saved!

                        //                        // Activity log section:
                        //                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                        //                        var source = 'Webservices: start.js.EmailAttachmentsExternally';
                        //                        var errorCode = null;
                        //                        var message = 'In EmailAttachmentsExternally(). The Forest Administrator has temporarily turned off email services. This email will be sent when it is turned back on.';
                        //                        WriteToErrorLog(threatLevel, source, errorCode, message);
                        //                        //

                        //                        var result = {
                        //                            message: 'The Forest Administrator has temporarily turned off email services. This email will be sent when it is turned back on.'
                        //                        }
                        //                        response.send(result);

                        //                    } else {

                        //                        var msg = 'Error saving to bwForestPendingEmail table. email to ' + params.to + '. error: ' + JSON.stringify(seError);
                        //                        // Exception section:
                        //                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        //                        var source = 'start.js.EmailAttachmentsExternally()';
                        //                        var errorCode = null;
                        //                        var message = msg;
                        //                        WriteToErrorLog(threatLevel, source, errorCode, message);

                        //                        var result = {
                        //                            message: 'In EmailAttachmentsExternally(). ERROR2: ' + msg
                        //                        }
                        //                        response.send(result);
                        //                    }
                        //                });

                        //            } else {

                        //                // We found the email. Now lets send it!
                        //                sendxgrid.send({
                        //                    to: toParticipantEmails, //params.to,
                        //                    from: bwParticipantEmail, //params.from,
                        //                    subject: subject, //params.subject,
                        //                    html: body, //params.html
                        //                }, function (sgError, sgResponse) {
                        //                    if (sgError) {
                        //                        console.log('In start.EmailAttachmentsExternally.sendgrid.bwSend(). sgError: ' + sgError);
                        //                        var msg = 'In EmailAttachmentsExternally.bwSend(). sgError: ' + sgError;
                        //                        // Exception section:
                        //                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        //                        var source = 'start.EmailAttachmentsExternally.sendgrid.bwSend()';
                        //                        var errorCode = null;
                        //                        var message = msg;
                        //                        WriteToErrorLog(threatLevel, source, errorCode, message);

                        //                        var result = {
                        //                            message: 'In EmailAttachmentsExternally(). ERROR1-3: ' + sgError
                        //                        }
                        //                        response.send(result);
                        //                    } else {
                        //                        // EMAIL WAS SENT SUCCESSFULLY.



                        //                        const from = "15194881754";
                        //                        const to = "19023851968";
                        //                        const text = 'xcx3BudgetWorkflow.com sent email to ' + toParticipantEmails;

                        //                        vonage.message.sendSms(from, to, text, function (err, responseData) {
                        //                            if (err) {
                        //                                console.log(err);
                        //                            } else {
                        //                                if (responseData.messages[0]['status'] === "0") {
                        //                                    console.log("Message sent successfully.");
                        //                                } else {
                        //                                    console.log("SMS message failed with error: ${responseData.messages[0]['error-text']}: " + responseData.messages[0]['error-text']);
                        //                                }
                        //                            }
                        //                        });


                        //                        sendxgrid.send({
                        //                            to: 'forestadministrator@budgetworkflow.com',
                        //                            from: 'webservices@budgetworkflow.com',
                        //                            subject: 'xcx3BudgetWorkflow.com sent email to ' + toParticipantEmails,
                        //                            html: 'xcx3BudgetWorkflow.com sent email to ' + toParticipantEmails
                        //                        }, function (sgError, sgResponse) {
                        //                            if (sgError) {

                        //                            } else {

                        //                            }
                        //                        });



                        //                        if (sgResponse) {
                        //                            console.log('sgResponse: ' + sgResponse);
                        //                        }
                        //                        // Save to the BwSentEmail table.
                        //                        console.log('In EmailAttachmentsExternally. Save to the BwSentEmail table.');
                        //                        var bwSentEmailId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                        //                            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                        //                            return v.toString(16);
                        //                        });
                        //                        var timestamp = new Date();
                        //                        var bwSentEmail = new BwSentEmail(
                        //                            {
                        //                                bwSentEmailId: bwSentEmailId,
                        //                                Timestamp: timestamp,
                        //                                //bwTenantId: pefResult[0].bwTenantId,
                        //                                bwWorkflowAppId: bwWorkflowAppId,
                        //                                //RelatedRequestId: pefResult[0].RelatedRequestId,
                        //                                FromEmailAddress: bwParticipantEmail,
                        //                                ToParticipantId: JSON.stringify(toParticipantIds),
                        //                                ToParticipantFriendlyName: JSON.stringify(toParticipantFriendlyNames),
                        //                                ToParticipantEmail: JSON.stringify(toParticipantEmails),
                        //                                //CcAddress: pefResult[0].CcAddress,
                        //                                //BccAddress: pefResult[0].BccAddress,
                        //                                Subject: subject,
                        //                                Body: body,
                        //                                Result: sgResponse.message
                        //                            }
                        //                                                );
                        //                        bwSentEmail.save(function (seError) {
                        //                            if (!seError) {
                        //                                // Saved!

                        //                                //console.log('In deleteTheForm. SUCCESS for bwFormId: ' + bwFormId + '. result: ' + JSON.stringify(result));
                        //                                var result = {
                        //                                    message: 'SUCCESS'
                        //                                }

                        //                                // Activity log section:
                        //                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                        //                                var source = 'Webservices: start.js.EmailAttachmentsExternally';
                        //                                var errorCode = null;
                        //                                var message = 'In EmailAttachmentsExternally(). Email sent succesfully to ' + toParticipantEmails + ', "' + subject + '"';
                        //                                WriteToErrorLog(threatLevel, source, errorCode, message);
                        //                                //

                        //                                response.send(result);

                        //                            } else {

                        //                                var msg = 'Error saving to sent emails table, but delivered email to ' + toParticipantEmails + '. error: ' + JSON.stringify(seError);
                        //                                // Exception section:
                        //                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        //                                var source = 'start.js.sendgrid.bwSend()';
                        //                                var errorCode = null;
                        //                                var message = msg;
                        //                                WriteToErrorLog(threatLevel, source, errorCode, message);

                        //                                var result = {
                        //                                    message: 'In EmailAttachmentsExternally(). ERROR2: ' + msg
                        //                                }
                        //                                response.send(result);
                        //                            }
                        //                        });
                        //                    }
                        //                });

                        //            }
                        //        }
                        //    } catch (e) {
                        //        console.log('Exception in GET EmailAttachmentsExternally /odata/Checklist/:bwTenantId/:bwWorkflowAppId(). ' + e.message + ', ' + e.stack);
                        //        response.send('Exception in GET EmailAttachmentsExternally /odata/Checklist/:bwTenantId/:bwWorkflowAppId(). ' + e.message + ', ' + e.stack);
                        //    }
                        //});
                    }


                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /emailattachmentsexternally().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.emailattachmentsexternally(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.emailattachmentsexternally()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.emailattachmentsexternally(): ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.emailattachmentsexternally()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in POST emailattachmentsexternally:1: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.emailattachmentsexternally()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

router.post('/_files/permanentlyDeleteThisRequestFromTheTrashbin_deletefiles', function (request, response) {
    try {
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('In permanentlyDeleteThisRequestFromTheTrashbin_deletefiles().');
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId;

        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('In permanentlyDeleteThisRequestFromTheTrashbin_deletefiles(). bwWorkflowAppId_LoggedIn: ' + bwWorkflowAppId_LoggedIn + ', bwParticipantId_LoggedIn: ' + bwParticipantId_LoggedIn + ', bwActiveStateIdentifier: ' + bwActiveStateIdentifier);
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        console.log('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'server'); // This file service will only ever be called from web services.
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /permanentlyDeleteThisRequestFromTheTrashbin_deletefiles().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    //var bwParticipantId = request.body.bwParticipantId;

                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;

                    fs.rmdir(budgetRequestFolderPath, { recursive: true, force: true }, function (err) {
                        try {
                            if (err) {

                                var msg = 'Error deleting the attached files for bwBudgetRequestId ' + bwBudgetRequestId + ', bwWorkflowAppId: ' + bwWorkflowAppId + ': ' + err;

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                var msg = 'Successfully deleted the attached files for bwBudgetRequestId ' + bwBudgetRequestId + ', bwWorkflowAppId: ' + bwWorkflowAppId;

                                console.log('');
                                console.log('######################');
                                console.log(msg);
                                console.log('######################');
                                console.log('');

                                var result = {
                                    status: 'SUCCESS',
                                    message: msg
                                }
                                response.send(result);

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles:4: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /permanentlyDeleteThisRequestFromTheTrashbin_deletefiles().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in permanentlyDeleteThisRequestFromTheTrashbin_deletefiles: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.permanentlyDeleteThisRequestFromTheTrashbin_deletefiles()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            tatus: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

router.post('/_files/DownloadAllFilesZippedForBudgetRequest', function (request, response) {
    try {
        console.log('In DownloadAllFilesZippedForBudgetRequest().');

        // var AdmZip = require("adm-zip"); // https://www.npmjs.com/package/adm-zip

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /DownloadAllFilesZippedForBudgetRequest().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    var bwRequestTitle = request.body.bwRequestTitle;

                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

                    fs.readdir(budgetRequestFolderPath, function (err, files) {
                        try {
                            if (err) {

                                var msg = 'Error in start.js.DownloadAllFilesZippedForBudgetRequest.fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.DownloadAllFilesZippedForBudgetRequest()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                console.log('******************');
                                console.log('In start.js.DownloadAllFilesZippedForBudgetRequest.fs.readdir(). files: ' + JSON.stringify(files));
                                console.log('******************');

                                if (!(files && files.length && (files.length > 0))) {

                                    //
                                    // There are no files.
                                    //
                                    var msg = 'There are no files attached to this request.';

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                } else {

                                    var now = new Date();
                                    var month = now.getMonth() + 1;
                                    var day = now.getDate();
                                    var year = now.getFullYear();
                                    var hour = now.getHours();
                                    var minutes = now.getMinutes();
                                    var ampm = (hour >= 12) ? "pm" : "am";

                                    var userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone; // For example, it returns for me: 'America/Halifax'
                                    var userLocale = Intl.DateTimeFormat().resolvedOptions().locale; // For example, it returns for me: 'en-US'
                                    // Specifying timeZone is what causes the conversion, the rest is just formatting.
                                    var options = {
                                        year: '2-digit', month: '2-digit', day: '2-digit',
                                        hour: '2-digit', minute: '2-digit', // second: '2-digit', // If we want seconds, just add this back.
                                        timeZone: userTimezone,
                                        timeZoneName: 'short' // 'long' // For example, 'short' = 'AST', 'long' = 'Atlantic Standard Time', 'longGeneric' = 'Atlantic Time'. NOTE: 'longGeneric' is not supported in Safari on Mac OS.
                                    }

                                    var formatter = new Intl.DateTimeFormat(userLocale, options); // For example, Intl.DateTimeFormat('en-US', options); 

                                    var timestampInNewTimezone = formatter.format(now);

                                    var tmpZipFilename = bwRequestTitle + '_' + 'attachments' + '_' + timestampInNewTimezone + '.zip';
                                    var zipFilename = tmpZipFilename.replace(/[/]/g, '-').replace(/[,]/g, '').replace(/[:]/g, '-').replace(/[ ]/g, '_');
                                    var zipPath = budgetRequestFolderPath + '/' + zipFilename;

                                    console.log('******************');
                                    console.log('In start.js.DownloadAllFilesZippedForBudgetRequest.fs.readdir(). Adding the folder and zipping... budgetRequestFolderPath: ' + budgetRequestFolderPath + ', zipPath: ' + zipPath);
                                    console.log('******************');

                                    // Create a file to stream archive data to.
                                    const output = fs.createWriteStream(zipPath, {
                                        flags: 'w'
                                    });
                                    const archive = Archiver('zip', {
                                        zlib: { level: 9 } // Sets the compression level.
                                    });

                                    output.on('close', function () {
                                        try {

                                            console.log('In output.close(). ' + archive.pointer() + ' total bytes. archiver has been finalized and the output file descriptor has closed.');

                                            var msg = 'The zip archive has been created successfully. zipFilename: ' + zipFilename;
                                            console.log(msg);

                                            var downloadUrl = 'https://' + prettyGlobalUrl + '/files/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + zipFilename;

                                            var result = {
                                                status: 'SUCCESS',
                                                message: msg,
                                                Url: downloadUrl,
                                                Filename: zipFilename
                                            }
                                            response.send(result);

                                        } catch (e) {

                                            var msg = 'Exception in start.js.DownloadAllFilesZippedForBudgetRequest.fs.readdir():2-xcx667: ' + e.message + ', ' + e.stack;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js._files/uploadattachment().';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                            console.log(msg);

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    });

                                    output.on('end', function () {
                                        console.log('In output.end(). Data has been drained');
                                    });

                                    output.on('finish', function () {
                                        console.log('In output.finish(). Data has finished.');
                                    });

                                    archive.on('warning', function (err) {
                                        console.log('In output.warning(). err: ' + err);
                                        if (err.code === 'ENOENT') {
                                            // log warning
                                        } else {
                                            // throw error
                                            throw err;
                                        }
                                    });

                                    archive.on('error', function (err) {
                                        console.log('In output.error(). err: ' + err);
                                        throw err;
                                    });

                                    // Pipe archive data to the file.
                                    archive.pipe(output);

                                    for (var i = 0; i < files.length; i++) {

                                        var filePath = budgetRequestFolderPath + '/' + files[i];

                                        console.log('');
                                        console.log('###################');
                                        console.log('filePath: ' + filePath);
                                        console.log('###################');
                                        console.log('');

                                        archive.append(fs.createReadStream(filePath), { name: files[i] });

                                    }

                                    // finalize the archive (ie we are done appending files but streams have to finish yet)
                                    // 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand
                                    archive.finalize().then(function () {

                                        console.log('The archive has been finalized.');

                                    });

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.DownloadAllFilesZippedForBudgetRequest.fs.readdir():2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js._files/uploadattachment().';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                            console.log(msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /DownloadAllFilesZippedForBudgetRequest().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.DownloadAllFilesZippedForBudgetRequest():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.DownloadAllFilesZippedForBudgetRequest()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.DownloadAllFilesZippedForBudgetRequest():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.DownloadAllFilesZippedForBudgetRequest()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in DownloadAllFilesZippedForBudgetRequest: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.DownloadAllFilesZippedForBudgetRequest()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});










function CheckIfSambaShareExistsAndIsAccesible(externallyFacingUrlForAttachmentsSourceFolder, timeout) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.CheckIfSambaShareExistsAndIsAccesible().');
            // This method times-out the Samba "exists", so that the user gets a somewhat immediate response.
            // The share will be on the same network as the file services server, so should respond very quickly.

            var smb2Client = new SMB2({
                share: externallyFacingUrlForAttachmentsSourceFolder,
                domain: 'WORKGROUP',
                username: '',
                password: '',
                //debug: true,
                autoCloseTimeout: 10000
            });

            var sambaConnectionTimeout = setTimeout(function () {
                try {
                    // Our timeout notifies the user that the share could not be accesed in a timely fashion.

                    smb2Client.close(); // Make sure we close the connection.

                    //var msg = 'Error in start.js.CheckIfSambaShareExistsAndIsAccesible(' + externallyFacingUrlForAttachmentsSourceFolder + '). The share did not respond in a timely fashion. It may not exist, or may not be accessible.';
                    var msg = 'The Samba share did not respond in a timely fashion. It may not exist, or may not be accessible [' + externallyFacingUrlForAttachmentsSourceFolder + '].';
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    reject(result);

                } catch (e) {

                    smb2Client.close(); // Make sure we close the connection.

                    var msg = 'Exception in start.js.CheckIfSambaShareExistsAndIsAccesible.setTimeout(' + externallyFacingUrlForAttachmentsSourceFolder + '): ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }
            }, timeout);

            smb2Client.exists('', function (error, exists) {
                try {

                    clearTimeout(sambaConnectionTimeout);

                    if (error) {

                        smb2Client.close(); // Make sure we close the connection.

                        var msg = 'Error in start.js.CheckIfSambaShareExistsAndIsAccesible.smb2Client.exists(' + externallyFacingUrlForAttachmentsSourceFolder + '):1: error: ' + error;
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);
                        console.log(msg);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        reject(result);

                    } else {

                        if (exists == true) {

                            // Now that we know the path/share exists, we need to check if we can write to it. We will create a unique folder, write to it, then delete it when done.
                            var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                return v.toString(16);
                            });
                            var testFolderName = 'TESTING_PERMS_' + guid;
                            var testFolderPath = path + '\\' + testFolderName;

                            smb2Client.mkdir(testFolderName, function (error) {
                                if (error) {

                                    smb2Client.close(); // Make sure we close the connection.

                                    var msg = 'Error in CheckIfSambaShareExistsAndIsAccesible.smb2Client.mkdir(' + testFolderPath + '): ' + error;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    reject(result);

                                } else {

                                    // Now we have to delete the folder we just made.
                                    smb2Client.rmdir(testFolderName, function (error) {
                                        if (error) {

                                            var result = {
                                                status: 'SUCCESS',
                                                message: 'PATH_EXISTS_WITH_READ_WRITE_PERMISSIONS', // NO DELETE PERMISSION
                                                smb2Client: smb2Client
                                            }
                                            resolve(result);

                                        } else {

                                            var result = {
                                                status: 'SUCCESS',
                                                message: 'PATH_EXISTS_WITH_READ_WRITE_DELETE_PERMISSIONS',
                                                smb2Client: smb2Client
                                            }
                                            resolve(result);

                                        }

                                    });

                                }

                            });

                        } else if (exists == false) {

                            smb2Client.close(); // Make sure we close the connection.

                            var result = {
                                status: 'PATH_DOES_NOT_EXIST',
                                message: 'PATH_DOES_NOT_EXIST'
                            }
                            reject(result);

                        } else {

                            smb2Client.close(); // Make sure we close the connection.

                            var msg = 'Error in start.js.CheckIfSambaShareExistsAndIsAccesible.smb2Client.exists(' + externallyFacingUrlForAttachmentsSourceFolder + '). Unexpected response for exists: ' + exists;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                            console.log(msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            reject(result);

                        }

                    }

                } catch (e) {

                    smb2Client.close(); // Make sure we close the connection.

                    var msg = 'Exception in start.js.CheckIfSambaShareExistsAndIsAccesible.smb2Client.exists(' + externallyFacingUrlForAttachmentsSourceFolder + '): ' + e.message + ', ' + e.stack;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                }

            });

        } catch (e) {

            var msg = 'Exception in start.js.CheckIfSambaShareExistsAndIsAccesible(' + externallyFacingUrlForAttachmentsSourceFolder + '): ' + e.message + ', ' + e.stack;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.CheckIfSambaShareExistsAndIsAccesible()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}

router.post('/_files/GetExternallySharedFiles', function (request, response) {
    try {
        console.log('In start.js.GetExternallySharedFiles().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /GetExternallySharedFiles()().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwParticipantId = request.body.bwParticipantId;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var externallyFacingUrlForAttachmentsSourceFolder = request.body.externallyFacingUrlForAttachmentsSourceFolder; // '\\192.168.0.2\huntleysdiving';
                    //var sourceFolder = '\\\\192.168.0.2\\huntleysdiving';

                    if (!(bwWorkflowAppId && bwParticipantId && bwParticipantFriendlyName && bwParticipantEmail && externallyFacingUrlForAttachmentsSourceFolder)) {

                        if (!externallyFacingUrlForAttachmentsSourceFolder) {

                            var msg = 'This user does not have a location configured for externally shared files.';
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GetExternallySharedFiles()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            response.send(result);

                        } else {

                            var msg = 'Error in start.js.GetExternallySharedFiles(): Parameters are missing from the web service call.';
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GetExternallySharedFiles()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                            console.log(msg);

                            var result = {
                                status: 'ERROR',
                                message: msg
                            }
                            response.send(result);

                        }

                    } else {

                        CheckIfSambaShareExistsAndIsAccesible(externallyFacingUrlForAttachmentsSourceFolder, 2000).then(function (results) {

                            results.smb2Client.readdir('', function (error, foldersandfiles) {
                                try {
                                    if (error) {

                                        results.smb2Client.close(); // Make sure we close the connection.

                                        var msg = 'Error in start.js.GetExternallySharedFiles().smb2Client.exists(' + externallyFacingUrlForAttachmentsSourceFolder + '):2: error: ' + error;
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.GetExternallySharedFiles()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }
                                        response.send(result);

                                    } else {

                                        function bwGetFiles(folder, smb2Client) {
                                            return new Promise(function (resolve, reject) {
                                                try {

                                                    smb2Client.readdir(folder, function (error, files) {
                                                        try {

                                                            if (error) {

                                                                if (error.toString().indexOf('STATUS_NOT_A_DIRECTORY') > -1) {

                                                                    // Found a file. Add it to the array.
                                                                    var json = {
                                                                        smbType: 'FILE',
                                                                        file: folder
                                                                    }
                                                                    resolve(json);

                                                                } else {

                                                                    var msg = 'Error in start.js.GetExternallySharedFiles.bwGetFiles.smb2Client.readdir(). error: ' + error;
                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }
                                                                    reject(msg);

                                                                }

                                                            } else {

                                                                // Found a folder. Add it to the array.
                                                                var json = {
                                                                    smbType: 'FOLDER',
                                                                    folder: folder,
                                                                    files: files
                                                                }
                                                                resolve(json);

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.GetExternallySharedFiles.bwGetFiles():2: ' + e.message + ', ' + e.stack;
                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            reject(result);

                                                        }
                                                    })

                                                } catch (e) {

                                                    var msg = 'Exception in start.js.GetExternallySharedFiles.bwGetFiles(): ' + e.message + ', ' + e.stack;
                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                }
                                            });
                                        }

                                        var promiseArray = [];
                                        for (var i = 0; i < foldersandfiles.length; i++) {
                                            var x = bwGetFiles(foldersandfiles[i], results.smb2Client);
                                            promiseArray.push(x);
                                        }
                                        Promise.all(promiseArray)
                                            .then(function (values) {

                                                results.smb2Client.close(); // Make sure we close the connection.

                                                // Leave this section for troubleshooting.
                                                //for (var i = 0; i < values.length; i++) {
                                                //    if (values[i]) {
                                                //        console.log('XXXXX:' + JSON.stringify(values[i]));
                                                //    }
                                                //}

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: 'PATH_EXISTS',
                                                    externallyFacingUrlForAttachmentsSourceFolder: externallyFacingUrlForAttachmentsSourceFolder,
                                                    filesandfolders: values
                                                }
                                                response.send(result);

                                            })
                                            .catch(function (error) {

                                                results.smb2Client.close(); // Make sure we close the connection.

                                                var msg = 'Exception in start.js.GetExternallySharedFiles(): error: ' + error;
                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);

                                            });

                                    }

                                } catch (e) {

                                    results.smb2Client.close(); // Make sure we close the connection.

                                    var msg = 'Exception in start.js.GetExternallySharedFiles().smb2Client.readdir(): ' + e.message + ', ' + e.stack;
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.GetExternallySharedFiles()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'EXCEPTION',
                                        message: msg
                                    }
                                    response.send(result);

                                }
                            });

                        }).catch(function (e) {

                            var msg = e.message;
                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GetExternallySharedFiles()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        });

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /GetExternallySharedFiles().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.GetExternallySharedFiles():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.GetExternallySharedFiles()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.GetExternallySharedFiles():2: ' + JSON.stringify(e);
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.GetExternallySharedFiles()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.GetExternallySharedFiles: ' + e.message + ', ' + e.stack;
        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
        var source = 'start.js.GetExternallySharedFiles()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);
    }
});









router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
    try {
        console.log('');
        console.log('In GET /_files/convertfile(). params: ' + JSON.stringify(request.params));
        console.log('');

        //var bwWorkflowAppId = request.params.bwWorkflowAppId;
        //var bwBudgetRequestId = request.params.bwBudgetRequestId;


        var bwWorkflowAppId = '6e650ae7-81d0-48ab-86d1-1183d3126a18';
        var bwBudgetRequestId = 'f4ec8da9-4e62-4838-9e60-f50333a0b48c';


        if (!(bwWorkflowAppId && bwBudgetRequestId)) {

            var msg = 'Error in convertfile(). Invalid value(s): bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js._files/convertfile()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
            console.log(msg);

            response.send(msg);

        } else {

            var msg = 'In _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
            var source = 'start.js._files/convertfile()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

            BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
                try {
                    if (brfError) {

                        var msg = 'Error in _files/convertfile():2. Error updating the budget request ' + bwBudgetRequestId + ': ' + brfError;
                        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                        var source = 'start.js._files/convertfile()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        response.send(msg);

                    } else {

                        if (brfResult[0].FileConversionQueued == false) {

                            // Do nothing, exit.
                            response.send('In _files/convertfile(). NO FILE QUEUED FOR THIS REQUEST');

                        } else {

                            //var msg = 'PROCESSING A FILE on fileservices at _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                            //var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                            //var source = 'start.js._files/convertfile()';
                            //var errorCode = null;
                            //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                            //
                            // This checks the file system, compares it with the json, and picks up any missed .vob files.
                            //
                            var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;

                            fs.readdir(budgetRequestFolderPath, function (err, files) {
                                //console.log('In convertfile.fs.readdir().');
                                if (err) {

                                    if (err.toString().indexOf('no such file or directory') > -1) {

                                        // There are no files, so mark queued as false.
                                        BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruResult) {
                                            try {
                                                if (bruError) {

                                                    var msg = 'Error in _files/convertfile():2. Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                                    var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js._files/convertfile()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    response.send(msg);

                                                } else {

                                                    var msg = 'xcx1232567 In convertfile():2. Found no .vob, .amr, or .m4a files, so updated the request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ' as FileConversionQueued = false.';
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js._files/convertfile()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    response.send(msg);

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in _files/convertfile:2 xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                response.send(msg);

                                            }
                                        });

                                    } else {

                                        var msg = 'Error in _files/convertfile.fs.readdir(). Error updating the budget request ' + bwBudgetRequestId + ': ' + err;
                                        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js._files/convertfile()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                        response.send(msg);

                                    }

                                } else {

                                    //console.log('In convertfile.fs.readdir().2.');
                                    var vobFiles = [];
                                    var movFiles = [];
                                    var mp4Files = [];

                                    var amrFiles = [];
                                    var m4aFiles = [];
                                    var mp3Files = [];

                                    var msg = 'AUDIT in convertfile() xcx34536788. files.length: ' + files.length + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js._files/convertfile()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    if (files.length > 0) {

                                        var msg = 'PROCESSING A FILE on fileservices at _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', files: ' + JSON.stringify(files);
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js._files/convertfile()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                        for (var i = 0; i < files.length; i++) {
                                            if ((files[i].toLowerCase().indexOf('.vob') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) { // .vob, .mov, .mp4, .amr, .m4a, .mp3
                                                vobFiles.push(files[i]);
                                            }

                                            // Added .avi support. 8-14-2023.
                                            if ((files[i].toLowerCase().indexOf('.avi') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) { // .vob, .mov, .mp4, .amr, .m4a, .mp3, .avi
                                                vobFiles.push(files[i]);
                                            }

                                            if ((files[i].toLowerCase().indexOf('.mov') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) {
                                                movFiles.push(files[i]);
                                            }
                                            if (files[i].toLowerCase().indexOf('.mp4') > 0) {
                                                mp4Files.push(files[i]);
                                            }
                                            if (files[i].toLowerCase().indexOf('.amr') > 0) {
                                                amrFiles.push(files[i]);
                                            }
                                            if (files[i].toLowerCase().indexOf('.m4a') > 0) {
                                                m4aFiles.push(files[i]);


                                                var msg = 'PROCESSING A FILE on fileservices at _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + '. ADDED ' + files[i] + ' to m4aFiles: ' + JSON.stringify(m4aFiles);
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);


                                            }
                                            if (files[i].toLowerCase().indexOf('.mp3') > 0) {
                                                mp3Files.push(files[i]);
                                            }
                                        }

                                        //console.log('');
                                        //console.log('>>>>>>>>> bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', files.length: ' + files.length + ', vobFiles: ' + JSON.stringify(vobFiles) + ', movFiles: ' + JSON.stringify(movFiles) + ', amrFiles: ' + JSON.stringify(amrFiles) + ', m4aFiles: ' + JSON.stringify(m4aFiles));
                                        //console.log('');

                                    }

                                    if ((vobFiles.length == 0) && (movFiles.length == 0) && (amrFiles.length == 0) && (m4aFiles.length == 0) && (mp4Files.length == 0)) {
                                        // There are no files, so mark queued as false.
                                        BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruResult) {
                                            try {
                                                if (bruError) {

                                                    var msg = 'Error in _files/convertfile(). Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                                    var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js._files/convertfile()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    response.send(msg);

                                                } else {

                                                    var msg = 'UNEXPECTED RESULT in convertfile(). No file found for some reason... Found no .vob, .mov, .mp4, .amr, .m4a, .mp3 files, so updated the request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ' as FileConversionQueued = false.';
                                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js._files/convertfile()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    response.send(msg);

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in _files/convertfile xcx4443:' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                response.send(msg);

                                            }
                                        });

                                    } else {

                                        //console.log('In convertfile(). Check if there is an .mp4 file already created for this conversion. This is a safety check so that we don\'t launch ffmpeg too many times!! Although it seems to be a bit smart that way, better safe than sorry.');

                                        console.log('');
                                        console.log('In convertfile(). vobFiles.length: ' + vobFiles.length + ', movFiles.length: ' + movFiles.length + ', amrFiles.length: ' + amrFiles.length + ', m4aFiles.length: ' + m4aFiles.length);
                                        console.log('');

                                        // Check if there is an .mp4 file already created for this conversion. This is a safety check so that we don't launch ffmpeg too many times!! Although it seems to be a bit smart that way, better safe than sorry.
                                        var vobFileNameCheck, amrFileNameCheck, m4aFileNameCheck;
                                        if (vobFiles[0]) vobFileNameCheck = vobFiles[0].split('.')[0] + '.mp4';
                                        if (movFiles[0]) vobFileNameCheck = movFiles[0].split('.')[0] + '.mp4';
                                        if (amrFiles[0]) amrFileNameCheck = amrFiles[0].split('.')[0] + '.mp3';
                                        if (m4aFiles[0]) m4aFileNameCheck = m4aFiles[0].split('.')[0] + '.mp3';

                                        // Ok, here we go. We got an item to convert. 
                                        var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                        var _filePath, sourceFileExtention, destinationFileExtension, destinationFileType;

                                        console.log('');
                                        console.log('In convertfile(). vobFileNameCheck: ' + vobFileNameCheck + ', mp4Files: ' + mp4Files);
                                        console.log('');

                                        var proceedToConversion = true;

                                        if (vobFiles[0] && !(mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                            _filePath = budgetRequestFolderPath + '/' + vobFiles[0]; // Doing the first one in the list.

                                            // Added .avi capability 8-14-2023.
                                            var sourceFileExtention;
                                            if (vobFiles[0].indexOf('.vob') > -1) {
                                                sourceFileExtention = '.vob';
                                            } else if (vobFiles[0].indexOf('.avi') > -1) {
                                                sourceFileExtention = '.avi';
                                            }

                                            //sourceFileExtention = '.vob';
                                            destinationFileExtension = '.mp4';
                                            destinationFileType = 'mp4';
                                        } else if (mp4Files[0]) {
                                            _filePath = budgetRequestFolderPath + '/' + mp4Files[0]; // Doing the first one in the list. 
                                            sourceFileExtention = '.mp4';
                                            destinationFileExtension = '.mp4';
                                            destinationFileType = 'mp4';
                                        } else if (movFiles[0] && !(mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                            _filePath = budgetRequestFolderPath + '/' + movFiles[0]; // Doing the first one in the list. 
                                            sourceFileExtention = '.mov';
                                            destinationFileExtension = '.mp4';
                                            destinationFileType = 'mp4';
                                        } else if (amrFiles[0] && !(mp3Files.indexOf(amrFileNameCheck) > -1)) {
                                            _filePath = budgetRequestFolderPath + '/' + amrFiles[0]; // Doing the first one in the list. 
                                            sourceFileExtention = '.amr';
                                            destinationFileExtension = '.mp3';
                                            destinationFileType = 'mp3';
                                        } else if (m4aFiles[0] && !(mp3Files.indexOf(m4aFileNameCheck) > -1)) {
                                            _filePath = budgetRequestFolderPath + '/' + m4aFiles[0]; // Doing the first one in the list. 
                                            sourceFileExtention = '.m4a';
                                            destinationFileExtension = '.mp3';
                                            destinationFileType = 'mp3';
                                        } else {

                                            proceedToConversion = false;

                                            var msg = 'FILE_NOT_FOUND or perhaps the FILE HAS ALREADY BEEN CONVERTED but not deleted the vob/mov/amr/m4a??? in _files/convertfile(). vobFileNameCheck: ' + vobFileNameCheck + ', sourceFileExtention: ' + sourceFileExtention + ' file not found. budgetRequestFolderPath: ' + budgetRequestFolderPath + ', _filePath: ' + _filePath + ', vobFiles[0]: ' + vobFiles[0] + ', movFiles[0]: ' + movFiles[0] + ', amrFiles[0]: ' + amrFiles[0] + ', m4aFiles[0]: ' + m4aFiles[0] + ', mp4Files: ' + mp4Files + ', ';
                                            msg += '. vobFiles.length: ' + vobFiles.length + ', movFiles.length: ' + movFiles.length + ', amrFiles.length: ' + amrFiles.length + ', m4aFiles.length: ' + m4aFiles.length;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.GET._files/convertfile()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                            console.log(msg);

                                            //
                                            // Check if it has a thumbnail. This will indicate that the file was converted Ok, so we can delete the file now. 1-12-2023
                                            //
                                            var tmpThumbnailPath = vobFileNameCheck + '_thumbnail_.png';
                                            if (mp4Files.indexOf(tmpThumbnailPath) > -1) {

                                                //
                                                // The thumbnail exists, so the file must have been converted. Not sure why this file got missed, but now it should be deleted. 1-12-2023
                                                //

                                                if (vobFiles[0] && (mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                                    _filePath = budgetRequestFolderPath + '/' + vobFiles[0];
                                                    sourceFileExtention = '.vob';
                                                    destinationFileExtension = '.mp4';
                                                    destinationFileType = 'mp4';
                                                } else if (movFiles[0] && (mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                                    _filePath = budgetRequestFolderPath + '/' + movFiles[0];
                                                    sourceFileExtention = '.vob';
                                                    destinationFileExtension = '.mp4';
                                                    destinationFileType = 'mp4';
                                                } else if (amrFiles[0] && (mp3Files.indexOf(amrFileNameCheck) > -1)) {
                                                    _filePath = budgetRequestFolderPath + '/' + amrFiles[0];
                                                    sourceFileExtention = '.amr';
                                                    destinationFileExtension = '.mp3';
                                                    destinationFileType = 'mp3';
                                                } else if (m4aFiles[0] && (mp3Files.indexOf(m4aFileNameCheck) > -1)) {
                                                    _filePath = budgetRequestFolderPath + '/' + m4aFiles[0];
                                                    sourceFileExtention = '.m4a';
                                                    destinationFileExtension = '.mp3';
                                                    destinationFileType = 'mp3';
                                                }

                                                //
                                                //
                                                // AS OF 7-31-2023 WE ARE NO LONGER DELETING THESE FILES.
                                                //
                                                //
                                                //
                                                // 9-8-2022 COMMENTED THIS OUT BECAUSE THE FILE IS GETTING DELETED BEFORE THE FFMPEG CONVERSION HAS COMPLETED.
                                                //
                                                //// 9-6-2022 Adding a timeout here to decrease the likelihood of a race condition...
                                                //setTimeout(function () {
                                                //    var fileToDeletePath = _filePath;
                                                //    fs.unlink(fileToDeletePath, function (deleteErr) {
                                                //        if (deleteErr) {

                                                //            var msg = 'xcx3432 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath;
                                                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                //            var source = 'In /_files/convertfile()';
                                                //            var errorCode = null;
                                                //            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                //        } else {

                                                //            var msg = 'xcx3432 Deleted ' + sourceFileExtention + ' file: ' + fileToDeletePath;
                                                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                //            var source = 'In /_files/convertfile()';
                                                //            var errorCode = null;
                                                //            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                                //            console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                //        }
                                                //    });
                                                //}, 2000); // 2 seconds should help out a lot! 1-12-2023 not sure this is necessary but leaving it.


                                            }

                                        }


                                        if (proceedToConversion != true) {

                                            var msg = 'In _files/convertfile(). proceedToConversion was set to false, so must have had a previous file to cleanup. Look at previous or subsequent log entry to explain this.';
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.GET._files/convertfile()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                            console.log(msg);

                                            response.send(msg);


                                        } else {

                                            //console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

                                            if (!(_filePath && (_filePath.toLowerCase().indexOf(sourceFileExtention) > -1) && !(_filePath.toLowerCase().indexOf('.metadata') > -1))) {

                                                var msg = 'UNEXPECTED RESPONSE 2 in _files/convertfile(). ' + sourceFileExtention + ' file not found. budgetRequestFolderPath: ' + budgetRequestFolderPath + ', _filePath: ' + _filePath;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.GET._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                console.log(msg);

                                                response.send(msg);

                                            } else {


                                                // 9-8-2022
                                                // Set the FileConversionInProgress flag.
                                                BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionInProgress: true }, function (bruError, bruResult) {
                                                    try {
                                                        if (bruError) {

                                                            var msg = 'Error in _files/convertfile():2-1. Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js._files/convertfile()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            response.send(msg);

                                                        } else {


                                                            //console.log(msg);

                                                            response.send('WORKING ON IT'); // We just return a response, and this will continue on by itself for now... :)

                                                            //console.log('Preparing to convert ' + sourceFileExtention + ' to ' + destinationFileExtension + ': ' + _filePath);
                                                            var amrIndex = _filePath.toLowerCase().indexOf(sourceFileExtention);
                                                            var filePath = _filePath.substring(0, amrIndex) + destinationFileExtension;

                                                            //
                                                            //
                                                            // The following IF statement handles each file conversion differently.
                                                            //
                                                            //


                                                            var msg = 'In _files/convertfile(). xcx2312312. DECIDING HOW TO CONVERT BASED ON THE FILE EXTENSION. sourceFileExtention: ' + sourceFileExtention;
                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js._files/convertfile()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            if (sourceFileExtention == '.m4a') {

                                                                console.log('Preparing to convert .m4a to .mp3: ' + _filePath);
                                                                var amrIndex = _filePath.toUpperCase().indexOf('.M4A');
                                                                var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                                                                console.log(mp3FilePath);
                                                                ffmpeg(_filePath)
                                                                    .toFormat('mp3')
                                                                    .on('error', function (err) {

                                                                        var msg = 'The .M4A file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                                                                        console.log(msg);
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                                                        var errorCode = null;
                                                                        var message = msg;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, message);

                                                                    })
                                                                    .on('progress', function (progress) {
                                                                        // console.log(JSON.stringify(progress));
                                                                        console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                                    })
                                                                    .on('end', function () {
                                                                        console.log('FFMPEG: Processing finished !');

                                                                        // Now that we have our .mp3 file, delete the .m4a file.
                                                                        //var fileToDeletePath = inventoryImageFolderPath + '/' + _Filename;
                                                                        fs.unlink(_filePath, function (deleteErr) {
                                                                            if (deleteErr) {
                                                                                console.log(deleteErr);
                                                                                response.send(deleteErr);
                                                                            } else {

                                                                                console.log('The file ' + fileToDeletePath + ' was deleted!');

                                                                                var msg = 'The .M4A file was converted successfully to a .mp3 file.';
                                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                                var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                                                                // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                                                                                if (description != '') {
                                                                                    var amrIndex = _Filename.toUpperCase().indexOf('.M4A');
                                                                                    var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                                                                                    var metaFilePath = inventoryImageFolderPath + '/' + mp3Filename + '.metadata';
                                                                                    var metaFileContent = '';
                                                                                    metaFileContent += '<description>';
                                                                                    metaFileContent += description;
                                                                                    metaFileContent += '</description>';
                                                                                    fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                                                                                        if (metaErr) {
                                                                                            console.log(metaErr);
                                                                                            response.send(metaErr);
                                                                                        } else {
                                                                                            console.log('The file ' + metaFilePath + ' was saved!');
                                                                                            response.send('The file ' + metaFilePath + ' was saved!');
                                                                                        }
                                                                                    });
                                                                                } else {
                                                                                    console.log('The file was saved!');
                                                                                    response.send('The file was saved!');
                                                                                }
                                                                            }
                                                                        });
                                                                    })
                                                                    .save(mp3FilePath); //path where you want to save your file



                                                            } else if (sourceFileExtention == '.mp4') { // THIS IS THE ONLY PLACE WHERE A .mp4 GETS CONVERTED. 7-31-2023.

                                                                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                    return v.toString(16);
                                                                });

                                                                var filePath2 = budgetRequestFolderPath + '/' + guid + destinationFileExtension;
                                                                //var filePath2 = guid + destinationFileExtension;

                                                                var msg = 'LAUNCHING THE FFMPEG CONVERSION in _files/convertfile(). Set FileConversionInProgress = true, and launching FFMPEG to convert ' + _filePath + ' to ' + filePath2 + ' for bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.GET._files/convertfile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);








                                                                //ffprobe(_filePath, { path: ffprobeStatic.path }, function (err, info) {
                                                                ffprobe(_filePath, { path: ffprobePath }, function (err, info) {
                                                                    //ffprobe(_filePath, function (err, info) {
                                                                    if (err) {

                                                                        var msg = 'Error in FFPROBE: ' + err;
                                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js._files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    } else {

                                                                        var msg = 'FFPROBE DETAILS FOR ' + _filePath + ': ' + JSON.stringify(info);
                                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.GET._files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    }
                                                                });








                                                                //var stream = fs.createWriteStream(filePath2);
                                                                //fs.closeSync(fs.openSync(filePath2, 'w'));


                                                                // ffmpeg -i in.mp4 -c copy -map 0 -movflags +faststart out.mp4

                                                                //var outputOptions = '"-c" "copy" "-map" "0" "-movflags" "faststart"';
                                                                //var outputOptions = '-c copy -map 0 -movflags faststart';
                                                                //var outputOptions = '-movflags faststart';

                                                                //var file = fs.createReadStream(_filePath);
                                                                const input = fs.createReadStream(path.resolve(_filePath))
                                                                const output = fs.createWriteStream(path.resolve(filePath2))

                                                                //const inputForFFMPEG = new stream.PassThrough()

                                                                ffmpeg(input) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                                    //.toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg
                                                                    //.output(stream)
                                                                    //.output(filePath2)
                                                                    //.outputOptions('-movflags faststart') // 7-31-2023. // -preset ultrafast -c:v libx264 -crf 36 -r 10 -vf scale=640:480 -movflags faststart -b:a 8k
                                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "36", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart", "-b:a", "8k") //, filePath2)


                                                                    // -c:v libx264 -preset slow -crf 20 -c:a aac -b:a 160k -vf format=yuv420p -movflags +faststart
                                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart", "-b:a", "8k") //, filePath2)

                                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart")

                                                                    .outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-movflags", "faststart", "-an") // -an removes audio.

                                                                    //.outputOptions('-movflags empty_moov')

                                                                    .toFormat('mp4')
                                                                    //.videoCodec('libx264')
                                                                    //.format('mp4')

                                                                    //.outputOptions('-movflags frag_keyframe+empty_moov')
                                                                    //.outputOptions('-movflags faststart')
                                                                    //.outputOptions('-c:v copy')

                                                                    //.addOption('-preset ultrafast')

                                                                    //.addOption('-vf', "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")

                                                                    .output(output)



                                                                    .on('error', function (err, stdout, stderr) {

                                                                        var msg = 'ERROR ERROR in ffmpeg.error() xcx9898-2-1: File ' + filePath + ' file was not converted successfully: message: ' + err.message + ', err: ' + err + ', stderr: ' + stderr + ', stack: ' + err.stack;
                                                                        console.log(msg);
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In /_files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    })
                                                                    .on('progress', function (progress) {
                                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + 'to ' + filePath2);
                                                                    })
                                                                    .on('end', function () {

                                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                        //console.log(msg);
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In GET /_files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        //
                                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                                        //
                                                                        // Create a thumbnail for this file.
                                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                                        ffmpeg(filePath)
                                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                                            .output(thumbnailPath)
                                                                            .outputOptions(
                                                                                '-frames', '1'  // Capture just one frame of the video
                                                                            )
                                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                                            .on('error', function (err) {

                                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                //console.log(msg);
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'In /_files/convertfile()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            })
                                                                            .on('end', function () {

                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                var newMetaFilePath = filePath + '.metadata';

                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                    if (rError) {

                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = '_files/uploadattachment_large()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    } else {

                                                                                        var msg = 'CONVERSION COMPLETE ' + filePath + ' file xcx243235: ' + filePath2;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'In /_files/convertfile()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    }

                                                                                });

                                                                            })
                                                                            .run()

                                                                    })
                                                                    .save(filePath); //path where you want to save your file



                                                            } else if ((sourceFileExtention == '.vob') || (sourceFileExtention == '.avi')) { // Added avi 8-14-2023. // THIS IS THE ONLY PLACE WHERE A .vob GETS CONVERTED. 7-31-2023.

                                                                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                                    return v.toString(16);
                                                                });

                                                                var filePath2 = guid + destinationFileExtension; // Using this one as an intermediate file name since we have to run ffmpeg a couple of times.

                                                                console.log('filePath: ' + filePath);








                                                                if (sourceFileExtention == '.vob') {








                                                                    ffmpeg(_filePath) // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
                                                                        //ffmpeg() // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {

                                                                        //.input(_filePath)
                                                                        //.input(orgImageFolderPath)

                                                                        //.complexFilter([
                                                                        //    {
                                                                        //        filter: "format",
                                                                        //        options: { pix_fmts: "yuva444p" },
                                                                        //        inputs: "[1]",
                                                                        //    },

                                                                        //    {
                                                                        //        filter: "colorchannelmixer",
                                                                        //        options: { aa: 0.5 },
                                                                        //    },

                                                                        //    {
                                                                        //        filter: "overlay",
                                                                        //        options: { [0]: "H-h" }
                                                                        //    }

                                                                        //])

                                                                        .toFormat(destinationFileType)

                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')


                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5;[0]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')
                                                                        //.outputOptions('-movflags faststart')
                                                                        //.outputOptions('-movflags faststart')



                                                                        //.outputOptions(executionString)

                                                                        //.addOption('-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[orgimage.png];[0][orgimage.png]overlay=0:H-h')


                                                                        // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                        //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 6-14-2023.

                                                                        .on('error', function (err) {

                                                                            var msg = 'In ffmpeg.error() xcx9898: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                            console.log(msg);
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In /_files/convertfile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        })
                                                                        .on('progress', function (progress) {
                                                                            console.log('FFMPEG:1: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + ' to ' + filePath2); // sourceFileExtention + ' to ' + filePath2); // destinationFileExtension);
                                                                        })
                                                                        .on('end', function () {

                                                                            var msg = 'xcx232384 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                            //console.log(msg);
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In GET /_files/convertfile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            if (destinationFileExtension == '.mp3') {

                                                                                //
                                                                                // This does not get a thumbnail... it is an audio file! :) 12-1-2022
                                                                                //
                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                var newMetaFilePath = filePath + '.metadata';
                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) { 
                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                    if (rError) {

                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = '_files/uploadattachment_large()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    } else {

                                                                                        //
                                                                                        //
                                                                                        // As of 7-31-2023 we are no longer deleting the .vob file.
                                                                                        //
                                                                                        //

                                                                                        //// Now that we have our .mp4 file, delete the .vob file.
                                                                                        //var fileToDeletePath = _filePath;
                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                        //    if (deleteErr) {

                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //    } else {

                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //var source = 'In /_files/convertfile()';
                                                                                        //var errorCode = null;
                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                        //    }
                                                                                        //});

                                                                                    }

                                                                                });


                                                                            } else if (destinationFileExtension == '.mp4') {

                                                                                //
                                                                                //
                                                                                //
                                                                                // Now that we have our .mp4 file, we have to run it through ffmpeg with these flags set to make it stream properly, 
                                                                                // so the user doesn't have to wait and download the entire file.
                                                                                // THIS HAS NOT BEEN TESTED AND MAY NOT WORK!! 6-14-2023.
                                                                                //
                                                                                //
                                                                                //


                                                                                ffmpeg(filePath2) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                                                    .toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                                    .outputOptions('-movflags faststart') // 6-14-2023.

                                                                                    .on('error', function (err) {

                                                                                        var msg = 'In ffmpeg.error() xcx9898-2-2: File ' + filePath + ' file was not converted successfully: ' + err.message + ', ' + err.stack;
                                                                                        console.log(msg);
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'In /_files/convertfile()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    })
                                                                                    .on('progress', function (progress) {
                                                                                        //console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + sourceFileExtention + 'to ' + destinationFileExtension);
                                                                                    })
                                                                                    .on('end', function () {

                                                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                                        //console.log(msg);
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'In GET /_files/convertfile()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //
                                                                                        //
                                                                                        // As of 7-31-2023 we no longer delete the file.
                                                                                        //
                                                                                        //

                                                                                        // Now that we have our .mp4 file, delete the intermediate .mp4 file.
                                                                                        //var fileToDeletePath = filePath2;
                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                        //    if (deleteErr) {

                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //    } else {

                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //var source = 'In /_files/convertfile()';
                                                                                        //var errorCode = null;
                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //
                                                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                                                        //
                                                                                        // Create a thumbnail for this file.
                                                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                                                        ffmpeg(filePath)
                                                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                                                            .output(thumbnailPath)
                                                                                            .outputOptions(
                                                                                                '-frames', '1'  // Capture just one frame of the video
                                                                                            )
                                                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                                                            .on('error', function (err) {

                                                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                                //console.log(msg);
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'In /_files/convertfile()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            })
                                                                                            .on('end', function () {
                                                                                                //console.log('');
                                                                                                //console.log('Thumbnail saved: ' + thumbnailPath);
                                                                                                //console.log('');





                                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                                var newMetaFilePath = filePath + '.metadata';





                                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                    if (rError) {

                                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = '_files/uploadattachment_large()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                    } else {

                                                                                                        //
                                                                                                        //
                                                                                                        // As of 7-31-2023 we are no longer deleting the file.
                                                                                                        //
                                                                                                        //

                                                                                                        // Now that we have our .mp4 file, delete the .vob file.
                                                                                                        //var fileToDeletePath = _filePath;
                                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                                        //    if (deleteErr) {

                                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //    } else {

                                                                                                        //        var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                                        //        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                                        //    }
                                                                                                        //});

                                                                                                    }

                                                                                                });

                                                                                            })
                                                                                            .run()





                                                                                        //    }
                                                                                        //});




                                                                                    })
                                                                                    .save(filePath); //path where you want to save your file






                                                                            } else {

                                                                                //
                                                                                // UNEXPECTED FILE EXTENSION.
                                                                                //

                                                                                var msg = 'Error in _files/convertfile(). UNEXPECTED FILE EXTENSION: ' + destinationFileExtension;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js._files/convertfile()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                response.send(msg);

                                                                            }
                                                                        })
                                                                        .save(filePath2); //path where you want to save your file




























                                                                } else if (sourceFileExtention == '.avi') {







                                                                    // var executionString = ['-i', 'input.avi', '-i', 'image.png', '-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];
                                                                    // await ffmpeg.exec(executionString);

                                                                    //var file5 = rootFilePath + 'images/corporeal.png'; // rootFilePath + bwWorkflowAppId + '/orgimages';

                                                                    var orgImageFolderPath = rootFilePath + bwWorkflowAppId + '/orgimages/root/orgimage.png'; // + bwOrgId;

                                                                    var smallerOrgImagePath = orgImageFolderPath + '_overlay.png';

                                                                    // 8-14-2023.

                                                                    gm(orgImageFolderPath)
                                                                        .resize(80)
                                                                        //.font('Arial', 72)
                                                                        //.drawText(75, 200, 'PDF') // 'PDF')
                                                                        .write(smallerOrgImagePath, function (err) {
                                                                            try {
                                                                                if (err) {

                                                                                    var msg = 'Error creating the .pdfxcx21314124124 thumbnail in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'In ProcessFileAfterUpload()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    var result = {
                                                                                        status: 'ERROR',
                                                                                        message: msg,
                                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                                        filePath: pdfFilePath
                                                                                    }

                                                                                    reject(result);

                                                                                } else {







                                                                                    //await ffmpeg.writeFile(
                                                                                    //    "image.png",
                                                                                    //    await fetchFile(file5) //  'https://shareandcollaborate.com/images/corporeal.png')
                                                                                    //);



                                                                                    //ffmpeg()
                                                                                    //    .input('input.mp4')
                                                                                    //    .input('input.mp3')
                                                                                    //    .outputOptions('-c copy -map 0:v:0 -map 1:a:0')
                                                                                    //    .save('output.mp4');




                                                                                    //ffmpeg.writeFile(
                                                                                    //    "input.avi",
                                                                                    //    fetchFile(_filePath) //  'https://shareandcollaborate.com/images/corporeal.png')
                                                                                    //);

                                                                                    //var executionString = ['-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];
                                                                                    var executionString = ['-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];


                                                                                    //ffmpeg(_filePath) // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
                                                                                    ffmpeg() // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {

                                                                                        .input(_filePath)
                                                                                        //.input(orgImageFolderPath)

                                                                                        //.complexFilter([
                                                                                        //    {
                                                                                        //        filter: "format",
                                                                                        //        options: { pix_fmts: "yuva444p" },
                                                                                        //        inputs: "[1]",
                                                                                        //    },

                                                                                        //    {
                                                                                        //        filter: "colorchannelmixer",
                                                                                        //        options: { aa: 0.5 },
                                                                                        //    },

                                                                                        //    {
                                                                                        //        filter: "overlay",
                                                                                        //        options: { [0]: "H-h" }
                                                                                        //    }

                                                                                        //])

                                                                                        .toFormat(destinationFileType)

                                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')


                                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5;[0]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')
                                                                                        //.outputOptions('-movflags faststart')
                                                                                        //.outputOptions('-movflags faststart')



                                                                                        .outputOptions(executionString)








                                                                                        //.addOption('-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[orgimage.png];[0][orgimage.png]overlay=0:H-h')
















                                                                                        // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                                        //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 6-14-2023.

                                                                                        .on('error', function (err) {

                                                                                            var msg = 'In ffmpeg.error() xcx9898: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                            console.log(msg);
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In /_files/convertfile()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        })
                                                                                        .on('progress', function (progress) {
                                                                                            console.log('FFMPEG:1: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + ' to ' + filePath2); // sourceFileExtention + ' to ' + filePath2); // destinationFileExtension);
                                                                                        })
                                                                                        .on('end', function () {

                                                                                            var msg = 'xcx232384 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                                            //console.log(msg);
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In GET /_files/convertfile()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            if (destinationFileExtension == '.mp3') {

                                                                                                //
                                                                                                // This does not get a thumbnail... it is an audio file! :) 12-1-2022
                                                                                                //
                                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                                var newMetaFilePath = filePath + '.metadata';
                                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) { 
                                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                    if (rError) {

                                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = '_files/uploadattachment_large()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                    } else {

                                                                                                        //
                                                                                                        //
                                                                                                        // As of 7-31-2023 we are no longer deleting the .vob file.
                                                                                                        //
                                                                                                        //

                                                                                                        //// Now that we have our .mp4 file, delete the .vob file.
                                                                                                        //var fileToDeletePath = _filePath;
                                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                                        //    if (deleteErr) {

                                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //    } else {

                                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //var source = 'In /_files/convertfile()';
                                                                                                        //var errorCode = null;
                                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                                        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                                        //    }
                                                                                                        //});

                                                                                                    }

                                                                                                });


                                                                                            } else if (destinationFileExtension == '.mp4') {

                                                                                                //
                                                                                                //
                                                                                                //
                                                                                                // Now that we have our .mp4 file, we have to run it through ffmpeg with these flags set to make it stream properly, 
                                                                                                // so the user doesn't have to wait and download the entire file.
                                                                                                // THIS HAS NOT BEEN TESTED AND MAY NOT WORK!! 6-14-2023.
                                                                                                //
                                                                                                //
                                                                                                //


                                                                                                ffmpeg(filePath2) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                                                                    .toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                                                    .outputOptions('-movflags faststart') // 6-14-2023.

                                                                                                    .on('error', function (err) {

                                                                                                        var msg = 'In ffmpeg.error() xcx9898-2-2: File ' + filePath + ' file was not converted successfully: ' + err.message + ', ' + err.stack;
                                                                                                        console.log(msg);
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'In /_files/convertfile()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                    })
                                                                                                    .on('progress', function (progress) {
                                                                                                        //console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + sourceFileExtention + 'to ' + destinationFileExtension);
                                                                                                    })
                                                                                                    .on('end', function () {

                                                                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                                                        //console.log(msg);
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'In GET /_files/convertfile()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //
                                                                                                        //
                                                                                                        // As of 7-31-2023 we no longer delete the file.
                                                                                                        //
                                                                                                        //

                                                                                                        // Now that we have our .mp4 file, delete the intermediate .mp4 file.
                                                                                                        //var fileToDeletePath = filePath2;
                                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                                        //    if (deleteErr) {

                                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //    } else {

                                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //var source = 'In /_files/convertfile()';
                                                                                                        //var errorCode = null;
                                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //
                                                                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                                                                        //
                                                                                                        // Create a thumbnail for this file.
                                                                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                                                                        ffmpeg(filePath)
                                                                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                                                                            .output(thumbnailPath)
                                                                                                            .outputOptions(
                                                                                                                '-frames', '1'  // Capture just one frame of the video
                                                                                                            )
                                                                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                                                                            .on('error', function (err) {

                                                                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                                                //console.log(msg);
                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'In /_files/convertfile()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                            })
                                                                                                            .on('end', function () {
                                                                                                                //console.log('');
                                                                                                                //console.log('Thumbnail saved: ' + thumbnailPath);
                                                                                                                //console.log('');





                                                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                                                var newMetaFilePath = filePath + '.metadata';





                                                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                                    if (rError) {

                                                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = '_files/uploadattachment_large()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                                    } else {

                                                                                                                        //
                                                                                                                        //
                                                                                                                        // As of 7-31-2023 we are no longer deleting the file.
                                                                                                                        //
                                                                                                                        //

                                                                                                                        // Now that we have our .mp4 file, delete the .vob file.
                                                                                                                        //var fileToDeletePath = _filePath;
                                                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                                                        //    if (deleteErr) {

                                                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                                        //        var errorCode = null;
                                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                                        //    } else {

                                                                                                                        //        var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                                        //        var errorCode = null;
                                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                                                        //        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                                                        //    }
                                                                                                                        //});

                                                                                                                    }

                                                                                                                });

                                                                                                            })
                                                                                                            .run()





                                                                                                        //    }
                                                                                                        //});




                                                                                                    })
                                                                                                    .save(filePath); //path where you want to save your file






                                                                                            } else {

                                                                                                //
                                                                                                // UNEXPECTED FILE EXTENSION.
                                                                                                //

                                                                                                var msg = 'Error in _files/convertfile(). UNEXPECTED FILE EXTENSION: ' + destinationFileExtension;
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js._files/convertfile()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                response.send(msg);

                                                                                            }
                                                                                        })
                                                                                        .save(filePath2); //path where you want to save your file




























                                                                                }

                                                                            } catch (e) {

                                                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). xcx2134253466667 while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                var result = {
                                                                                    status: 'EXCEPTION',
                                                                                    message: msg,
                                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                                                    filePath: pdfFilePath
                                                                                }

                                                                                reject(result);

                                                                            }

                                                                        });



                                                                }












                                                            } else {


                                                                var msg = 'Error in _files/convertfile(). xcx123123. Unexpected value for sourceFileExtention: ' + sourceFileExtention;
                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js._files/convertfile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                //response.send(msg);


                                                            }

                                                        }

                                                    } catch (e) {

                                                        var msg = 'Exception in _files/convertfile:2 xcx4443-2:' + e.message + ', ' + e.stack;
                                                        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js._files/convertfile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                        response.send(msg);

                                                    }
                                                });

                                            }
                                        }

                                    }
                                }

                            });

                        }

                    }
                } catch (e) {

                }
            });
        }

    } catch (e) {

        var msg = 'Exception in convertfile(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.GET.convertfile()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});

router.put('/_files/uploaderrororsuggestionscreenshot', function (request, response) {
    try {
        console.log('In PUT /_files/uploaderrororsuggestionscreenshot()');
        //var bwTenantId = request.body.bwTenantId;
        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwErrorOrSuggestionId = request.body.bwErrorOrSuggestionId;
        var _Filename = request.body.Filename;
        var _FileContent = request.body.FileContent;

        // This metadata is going to be stored in a file named [filename].metadata which will exist in the same folder as the file(s).
        // This means anytime we rename, we have to also rename the .metadata file.
        // The format of the metadata file will be in XML. So far we have only one element, but as we start to leverage .docx and other files, 
        // we will scrape the metadata from them, and allow the user to add stuff as well.
        // file.metadata file XML format:
        // - <description></description>
        var description = request.body.Description;

        console.log('bwWorkflowAppId: ' + bwWorkflowAppId);
        console.log('bwErrorOrSuggestionId: ' + bwErrorOrSuggestionId);
        console.log('_Filename: ' + _Filename);
        //console.log('_FileContent: ' + _FileContent);
        console.log('description: ' + description);

        // Check the WorkflowAppId folder exists.
        var workflowFolderPath = rootFilePath + bwWorkflowAppId; //'public/_files/' + bwWorkflowAppId;
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        // Check the ReportAnErrorOrMakeASuggestion folder exists.
        var reportAnErrorOrMakeASuggestionFolderPath = rootFilePath + bwWorkflowAppId + '/' + 'ReportAnErrorOrMakeASuggestion'; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirReportAnErrorOrMakeASuggestionFolderPath = function (reportAnErrorOrMakeASuggestionFolderPath) {
            try {
                fs.mkdirSync(reportAnErrorOrMakeASuggestionFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        // Check the BudgetRequestId folder exists.
        var budgetRequestFolderPath = reportAnErrorOrMakeASuggestionFolderPath + '/' + bwErrorOrSuggestionId; //'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
            try {
                fs.mkdirSync(budgetRequestFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        mkdirWorkflowAppId(workflowFolderPath);
        mkdirReportAnErrorOrMakeASuggestionFolderPath(reportAnErrorOrMakeASuggestionFolderPath);
        mkdirBudgetRequestId(budgetRequestFolderPath);

        // Now we know we have the folder, save the file in it!
        var _filePath = budgetRequestFolderPath + '/' + _Filename;
        console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
            if (err) {

                var result = {
                    status: 'ERROR',
                    message: err
                }
                response.send(result);

            } else {

                // This section deals with files that don't need to be converted to another type of file.

                // Todd: New 8-21-18
                // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                if (description != '') {
                    var metaFilePath = budgetRequestFolderPath + '/' + _Filename + '.metadata';
                    var metaFileContent = '';
                    metaFileContent += '<description>';
                    metaFileContent += description;
                    metaFileContent += '</description>';
                    fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                        if (metaErr) {

                            var result = {
                                status: 'ERROR',
                                message: metaErr
                            }
                            response.send(result);

                        } else {

                            var result = {
                                status: 'SUCCESS',
                                message: 'The file was saved! _filePath: ' + _filePath
                            }
                            response.send(result);

                        }
                    });
                } else {

                    var result = {
                        status: 'SUCCESS',
                        message: 'The file was saved! _filePath: ' + _filePath
                    }
                    response.send(result);

                }

            }
        });

    } catch (e) {

        var msg = 'Exception in PUT uploaderrororsuggestionscreenshot: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploaderrororsuggestionscreenshot()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

//
// Updated 11-6-2022.
//
router.post('/_files/getlistoferrororsuggestionscreenshots', function (request, response) { // /:bwWorkflowAppId/:bwErrorOrSuggestionId', function (request, response) {
    try {
        console.log('In /getlistoferrororsuggestionscreenshots()');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /getlistoferrororsuggestionscreenshots().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId; // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< WE HAVE TO HIT THE DATABASE TO FIND THIS VALUE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    var bwErrorOrSuggestionId = request.body.bwErrorOrSuggestionId;

                    // Reach out to the file system and find them!
                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/ReportAnErrorOrMakeASuggestion/' + bwErrorOrSuggestionId; //'public/_files/ReportAnErrorOrMakeASuggestion/' + bwErrorOrSuggestionId;
                    fs.readdir(budgetRequestFolderPath, function (err, files) {
                        try {
                            if (err) {

                                if (String(err).indexOf('ENOENT: no such file or directory') > -1) {

                                    //{"status":"ERROR","message":"Error in /_files/getlistoferrororsuggestionscreenshots. err: Error: ENOENT: no such file or directory, scandir 'public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/711acdab-f23e-414d-94b8-c3806657f314'"}

                                    var result = {
                                        status: 'SUCCESS',
                                        message: 'There is no directory and hence, no files.',
                                        verboseMessage: 'There is no directory and hence, no files: ' + budgetRequestFolderPath,
                                        data: []
                                    }
                                    response.send(result);

                                } else {

                                    var msg = 'Error in /_files/getlistoferrororsuggestionscreenshots. err: ' + err;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js./getlistoferrororsuggestionscreenshots()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }
                                    response.send(result);

                                }

                            } else {

                                // Formulate the result. We want to include the .metadata if it is present.
                                if (files.length <= 0) {

                                    var result = {
                                        status: 'SUCCESS',
                                        message: 'There are no files in this directory.',
                                        verboseMessage: 'There are no files in this directory: ' + budgetRequestFolderPath,
                                        data: []
                                    }
                                    response.send(result);

                                } else if (files.length > 0) {

                                    var data = [];
                                    var metadataFileCounter = 0;
                                    for (var i = 0; i < files.length; i++) {

                                        // Make sure we filter out the .metadata files!!! We don't want these returned to the user.


                                        //
                                        // Now check if this is a _320px_ file or not... only display 320px ones.
                                        //
                                        var extensionIndex = files[i].split('.').length - 1;
                                        var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];

                                        //
                                        // FileType is one of: METADATA, THUMBNAIL, FILE.
                                        //
                                        var fileType = 'FILE';
                                        if (fileExtension == 'metadata') {
                                            fileType = 'METADATA';
                                        }
                                        //
                                        //


                                        if (fileType == 'METADATA') {

                                            // This is a .metadata file.
                                            var metadataFilePath = budgetRequestFolderPath + '/' + files[i];

                                            var description = '';
                                            var metaData = fs.readFileSync(metadataFilePath).toString();
                                            if (metaData && metaData.split('<description>') && metaData.split('<description>')[1]) {
                                                var firstPass = metaData.split('<description>')[1];
                                                description = firstPass.split('</description>')[0];
                                            }

                                            var size = '';
                                            if (metaData && metaData.split('<size>') && metaData.split('<size>')[1]) {
                                                var firstPass2 = metaData.split('<size>')[1];
                                                size = firstPass2.split('</size>')[0];
                                            }

                                            var birthtime = '';
                                            if (metaData && metaData.split('<birthtime>') && metaData.split('<birthtime>')[1]) {
                                                var firstPass3 = metaData.split('<birthtime>')[1];
                                                birthtime = firstPass3.split('</birthtime>')[0];
                                            }

                                            var fileEntry_Filename = files[i].split('.metadata')[0];

                                            var fileEntryAlreadyExists = false;
                                            var fileEntryIndex;
                                            for (var j = 0; j < data.length; j++) {
                                                if (data[j].Display_Filename == fileEntry_Filename) {
                                                    fileEntryAlreadyExists = true;
                                                    fileEntryIndex = j;
                                                    break;
                                                }
                                            }
                                            if (fileEntryAlreadyExists == true) {

                                                data[fileEntryIndex].Description = description;
                                                data[fileEntryIndex].Size = size;
                                                data[fileEntryIndex].Birthtime = birthtime;
                                                data[fileEntryIndex].tracking = 'changed xcx21342-1 METADATA, added metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath;

                                            } else {

                                                var fileData = {
                                                    Display_Filename: fileEntry_Filename,
                                                    Actual_Filename: fileEntry_Filename,
                                                    Description: description,
                                                    Size: size,
                                                    Birthtime: birthtime,
                                                    tracking: 'added xcx21342-1 METADATA with its metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                                    FoundSourceFile: false
                                                };
                                                data.push(fileData);

                                            }

                                        } else if (fileType == 'FILE') {

                                            // This is not a .metadata file.
                                            var fileEntry_Filename = files[i];

                                            //
                                            // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                            //
                                            var fileEntryAlreadyExists = false;
                                            var fileEntryIndex;
                                            for (var j = 0; j < data.length; j++) {

                                                if (data[j].Display_Filename == fileEntry_Filename) {
                                                    fileEntryAlreadyExists = true;
                                                    fileEntryIndex = j;
                                                    break;
                                                }
                                            }

                                            if (fileEntryAlreadyExists == true) {

                                                data[fileEntryIndex].tracking = 'changed xcx21342-4 FILE fileExtension: ' + fileExtension;
                                                data[fileEntryIndex].FoundSourceFile = true;

                                            } else {

                                                var fileData = {
                                                    Display_Filename: files[i],
                                                    Actual_Filename: files[i],
                                                    Description: '',
                                                    Size: '',
                                                    Birthtime: '',
                                                    tracking: 'added xcx21342-4-2 FILE fileExtension: ' + fileExtension,
                                                    FoundSourceFile: true
                                                };
                                                data.push(fileData);

                                            }

                                        } else {

                                            var msg = 'Error in /_files/getlistoferrororsuggestionscreenshots. Unexpected value for fileType: ' + fileType;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js./getlistoferrororsuggestionscreenshots()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'ERROR',
                                                message: msg
                                            }
                                            response.send(result);

                                        }

                                    }

                                    // Now we iterate through the data json and get rid of entries with FoundSourceFile = true.
                                    var validFiles = [];
                                    for (var i = 0; i < data.length; i++) {
                                        if (data[i].FoundSourceFile == true) {
                                            validFiles.push(data[i]);
                                        }
                                    }

                                    // We have iterated through all of the files, so now send the response.
                                    var result = {
                                        status: 'SUCCESS',
                                        message: 'We have iterated through all of the files, so now send the response. xcx23124-1 budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                        data: validFiles
                                    }
                                    response.send(result);

                                }
                            }
                        } catch (e) {

                            var msg = 'Exception in start.js./getlistoferrororsuggestionscreenshots:4: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js./getlistoferrororsuggestionscreenshots()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            }
                            response.send(result);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /getlistoferrororsuggestionscreenshots().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./getlistoferrororsuggestionscreenshots:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./getlistoferrororsuggestionscreenshots()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/getlistoferrororsuggestionscreenshots:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./getlistoferrororsuggestionscreenshots()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js/getlistoferrororsuggestionscreenshots: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js./getlistoferrororsuggestionscreenshots()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

        var result = {
            message: msg,
            status: 'EXCEPTION'
        }
        response.send(result);

    }
});


router.put('/_files/uploadbarcodeattachment', function (request, response) {
    try {
        console.log('In PUT /_files/uploadbarcodeattachment()');
        //var bwTenantId = request.body.bwTenantId;
        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwBudgetRequestId = request.body.bwBudgetRequestId;
        var _Filename = request.body.Filename;
        var _FileContent = request.body.FileContent;

        //console.log(_FileContent);

        //// Check the bwTenantId folder exists.
        //var tenantFolderPath = 'public/_files/_barcodes/' + bwTenantId;
        //var mkdirTenantId = function (tenantFolderPath) {
        //    try {
        //        fs.mkdirSync(tenantFolderPath);
        //    } catch (e) {
        //        if (e.code != 'EEXIST') throw e;
        //    }
        //}
        // Check the WorkflowAppId folder exists.
        var workflowFolderPath = rootFilePath + '_barcodes/' + bwWorkflowAppId; //'public/_files/_barcodes/' + bwWorkflowAppId;
        var mkdirWorkflowAppId = function (workflowFolderPath) {
            try {
                fs.mkdirSync(workflowFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }
        // Check the BudgetRequestId folder exists.
        var budgetRequestFolderPath = rootFilePath + '_barcodes/' + bwWorkflowAppId + '/' + bwBudgetRequestId;//'public/_files/_barcodes/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var mkdirBudgetRequestId = function (budgetRequestFolderPath) {
            try {
                fs.mkdirSync(budgetRequestFolderPath);
            } catch (e) {
                if (e.code != 'EEXIST') throw e;
            }
        }

        //mkdirTenantId(tenantFolderPath);
        mkdirWorkflowAppId(workflowFolderPath);
        mkdirBudgetRequestId(budgetRequestFolderPath);

        //var saveFile = function (path, response, request) {
        //    var outStream = fs.createWriteStream(path);
        //    outStream.on("error", function (error) {
        //        console.log(error);
        //        response.send(500, error.toString());
        //    });
        //    outStream.on("finish", function () {
        //        console.log('upload of file completed successfully with code 204');
        //        response.send(204);
        //    });
        //    _FileContent.pipe(outStream);
        //};

        //var _filePath = budgetRequestFolderPath + '/' + _Filename;


        //saveFile(_filePath, response, request);


        //methods.PUT = function (path, respond, request) {
        //    var outStream = fs.createWriteStream(path);
        //    outStream.on("error", function (error) {
        //        respond(500, error.toString());
        //    });
        //    outStream.on("finish", function () {
        //        respond(204);
        //    });
        //    request.pipe(outStream);
        //};



        // Now we know we have the folder, save the file in it!
        var _filePath = budgetRequestFolderPath + '/' + _Filename;
        console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

        fs.writeFile(_filePath, _FileContent, 'binary', function (err) {
            if (err) {
                console.log(err);
                response.send(err);
            } else {
                console.log('The file was saved!');
                response.send('The file was saved!');
            }
        });

    } catch (e) {
        // Exception section:
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.PUT.uploadbarcodeattachment()';
        var errorCode = null;
        var message = e.message;
        //WriteToErrorLog(threatLevel, source, errorCode, message);
        //
        response.send('Error in PUT uploadbarcodeattachment: ' + e.message);
    }
});



// function AuthorizeWebServiceCall(request, bwParticipantId, bwActiveStateIdentifier, bwWorkflowAppId, minimumSecurityRole) { // REPLACED BY THE ONE ON webservices.start.js. 9-2-2024.


function AuthorizeWebServiceCall(request, bwParticipantId, bwActiveStateIdentifier, bwWorkflowAppId, minimumSecurityRole) {
    //
    // ******************************************************************************************************************************
    // *** THIS IS THE ONLY PLACE WHERE WEB SERVICE CALLS ARE AUTHORIZED. ***
    // ******************************************************************************************************************************
    //

    // NEW CODE!!!!!!!!! 11-9-2022
    // bwActiveStateIdentifier is no coming from: var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
    //
    // EXPECT THIS:
    //if (urlParams["ActiveStateIdentifier"]) {

    //    activeStateIdentifierJson = {
    //        status: 'SUCCESS',
    //        message: 'Found a value for ActiveStateIdentifier.',
    //        ActiveStateIdentifier: urlParams["ActiveStateIdentifier"].toString().split('#')[0],
    //        ActiveStateIdentifier_FromLocalStorage: localStorage
    //    }

    //} else if (urlParams["ForestAdministratorLoginToTenant_ActiveStateIdentifier"]) {

    //    activeStateIdentifierJson = {
    //        status: 'SUCCESS',
    //        message: 'Found a value for ForestAdministratorLoginToTenant_ActiveStateIdentifier.',
    //        ForestAdministratorLoginToTenant_ActiveStateIdentifier: urlParams["ForestAdministratorLoginToTenant_ActiveStateIdentifier"].toString().split('#')[0]
    //    }

    //} else {

    //    activeStateIdentifierJson = {
    //        status: 'ERROR',
    //        message: 'Did not find a value for ActiveStateIdentifier or ForestAdministratorLoginToTenant_ActiveStateIdentifier.'
    //    }

    //}

    //console.log('');
    //console.log('>>> In AuthorizeWebServiceCall(). THIS IS THE ONLY PLACE WHERE WEB SERVICE CALLS ARE AUTHORIZED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', minimumSecurityRole: ' + minimumSecurityRole + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
    //console.log('');
    return new Promise(function (resolve, reject) {
        try {
            //
            // Added the ability for the Forest Administrator to login/spoof in order to login to all sites. 11-9-2022
            //
            var activeStateIdentifier
            if (!bwActiveStateIdentifier) {

                var msg = 'Error in AuthorizeWebServiceCall(). Invalid value for bwActiveStateIdentifier: ' + bwActiveStateIdentifier;
                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.AuthorizeWebServiceCall()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                var result = {
                    message: msg,
                    status: 'ERROR'
                };
                resolve(result);

            } else {

                var path = request.path.split('/')[0] + '/' + request.path.split('/')[1] + '/' + request.path.split('/')[2] + '/';
                var msg = 'INCOMING CALL TO WEB SERVICE [' + path + '] REQUESTING ACCESS FOR [' + minimumSecurityRole + ']. bwActiveStateIdentifier: ' + bwActiveStateIdentifier; // bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId; // + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier);
                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                var source = 'start.js.AuthorizeWebServiceCall()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);
                console.log(msg);

                bwActiveStateIdentifier = JSON.parse(bwActiveStateIdentifier); // It gets passed stringified because it gets passed into another JSON object and this makes it work ok.
                debugger;
                if (bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier) {

                    var msg = 'In start.js.AuthorizeWebServiceCall(). A value was found for bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier.';
                    console.log(msg);

                    //
                    // "Forest Administrator" authorization includes a combination of ActiveStateIdentifier and ip address. The ActiveStateIdentifier and the ip address must match.
                    //
                    BwForestAdministratorLoginToTenant.find({ bwWorkflowAppId: bwWorkflowAppId }, function (bfalttfError, bfalttfResult) {
                        try {
                            if (bfalttfError) {

                                var msg = 'Error in AuthorizeWebServiceCall(): ' + bfalttfError;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.AuthorizeWebServiceCall()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                var result = {
                                    message: msg,
                                    status: 'ERROR'
                                };
                                resolve(result);

                            } else {

                                if (bfalttfResult.length != 1) {

                                    var msg = 'UNAUTHORIZED. Unexpected result when looking up this ForestAdministratorLoginToTenant. bwWorkflowAppId: ' + bwWorkflowAppId;
                                    console.log(msg);
                                    var result = {
                                        message: msg,
                                        status: 'UNAUTHORIZED'
                                    }
                                    resolve(result);

                                } else {

                                    // We got 1 bwParticipant record, which is what we are expecting.
                                    var ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress ||
                                        (request.connection.socket ? request.connection.socket.remoteAddress : null);

                                    console.log('');
                                    console.log('>>> In AuthorizeWebServiceCall(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bfalttfResult.length: ' + bfalttfResult.length + ', ip: ' + ip + ', bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress + ', bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
                                    console.log('');

                                    var ip_current = ip.split(',')[0];
                                    var ip_stored = bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress.split(',')[0];

                                    if ((bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier == bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier) && (ip_current == ip_stored)) {

                                        //
                                        // Now we have to check that their security role lets them access this functionality. 
                                        //
                                        // Options include 'Forest Administrator', 'owner', 'configurationmanager', 'archiveviewer', 'reportviewer', 'participant', 'customer', 'vendor', and 'emailrecipient'. 
                                        //

                                        var msg = 'A FOREST ADMINISTRATOR HAS REQUESTED AUTHORIZATION TO ORGANIZATION bwWorkflowAppId: ' + bwWorkflowAppId + '. bwParticipantId: ' + bwParticipantId + '. Their ip address has been matched (' + ip_current + '), and their ActiveStateIdentifier matches. bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier: ' + bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier + '. minimumSecurityRole: ' + minimumSecurityRole;
                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.AuthorizeWebServiceCall()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                        BwWorkflowUser.find({ bwWorkflowAppId: bwWorkflowAppId, bwParticipantId: bwParticipantId }, function (wuError, wuResult) {
                                            if (wuError) {

                                                var msg = 'Error in AuthorizeWebServiceCall():2: ' + wuError;
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.AuthorizeWebServiceCall()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                                var result = {
                                                    message: msg,
                                                    status: 'ERROR'
                                                };
                                                resolve(result);

                                            } else {

                                                if (wuResult.length != 1) {

                                                    var msg = 'UNAUTHORIZED. Unexpected result when looking up this user, wuResult.length: ' + wuResult.length + '. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '.';
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.AuthorizeWebServiceCall()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                                    var result = {
                                                        message: msg,
                                                        status: 'UNAUTHORIZED'
                                                    }
                                                    resolve(result);

                                                } else {

                                                    // Currently there is only 1 "Forest Administrator".
                                                    if ((minimumSecurityRole == 'Forest Administrator') && ((forestAdministrators.indexOf(bwParticipantId) > -1) || (wuResult[0].bwParticipantRole == 'Forest Administrator'))) {

                                                        // All functionality is authorized for the "Forest Administrator".
                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'configurationmanager') && ((wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'reportviewer') && ((wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'archiveviewer') && ((wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'participant') && ((wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'vendor') && ((wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'customer') && ((wuResult[0].bwParticipantRole == 'customer') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'emailrecipient') && ((wuResult[0].bwParticipantRole == 'emailrecipient') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else {

                                                        var msg = 'UNAUTHORIZED. xcx2355-1. The user does not have the minimum security role of "' + minimumSecurityRole + '". wuResult[0].bwParticipantRole: ' + wuResult[0].bwParticipantRole + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.AuthorizeWebServiceCall()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                                        var result = {
                                                            message: msg,
                                                            status: 'UNAUTHORIZED'
                                                        }
                                                        resolve(result);

                                                    }

                                                }
                                            }
                                        }).lean();

                                    } else {

                                        var msg = 'UNAUTHORIZED.';
                                        if (bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress) {
                                            //
                                        } else {
                                            msg += ' Your Node may have changed due to a redirection to a new Node. Unexpected value for user value bwForestAdministratorLoginToTenant_ActiveStateIPAddress: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress;
                                        }
                                        console.log(msg);
                                        var result = {
                                            message: msg,
                                            status: 'UNAUTHORIZED'
                                        }
                                        resolve(result);

                                    }
                                }
                            }
                        } catch (e) {

                            var msg = 'Exception in AuthorizeWebServiceCall():2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.AuthorizeWebServiceCall()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            };
                            resolve(result);

                        }
                    }).lean();

                } else if (bwActiveStateIdentifier.ActiveStateIdentifier || bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage) { // localStorage added 12-7-2022

                    var msg = 'In start.js.AuthorizeWebServiceCall(). A value was found for bwActiveStateIdentifier.ActiveStateIdentifier || bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage.';
                    console.log(msg);

                    //
                    // Authorization includes a combination of ActiveStateIdentifier and ip address. The ActiveStateIdentifier and the ip address must match.
                    //
                    BwParticipant.find({ bwParticipantId: bwParticipantId }, function (bpfError, bpfResult) {
                        try {
                            if (bpfError) {

                                var msg = 'Error in start.js.AuthorizeWebServiceCall(). bpfError: ' + bpfError;
                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.AuthorizeWebServiceCall()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);
                                console.log(msg);

                                var result = {
                                    message: msg,
                                    status: 'ERROR'
                                };
                                resolve(result);

                            } else {

                                if (bpfResult.length != 1) {

                                    var msg = 'Error in start.js.AuthorizeWebServiceCall(). UNAUTHORIZED. Unexpected result when looking up this user. bpfResult.length != 1. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', bpfResult: ' + JSON.stringify(bpfResult);
                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.AuthorizeWebServiceCall()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);
                                    console.log(msg);

                                    var result = {
                                        message: msg,
                                        status: 'UNAUTHORIZED'
                                    }
                                    resolve(result);

                                } else {

                                    // We got 1 bwParticipant record, which is what we are expecting.
                                    var ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress ||
                                        (request.connection.socket ? request.connection.socket.remoteAddress : null);

                                    console.log('');
                                    console.log('>>> In AuthorizeWebServiceCall(). bwParticipantId: ' + bwParticipantId + ', bpfResult.length: ' + bpfResult.length + ', ip: ' + ip + ', bpfResult[0].activeStateIPAddress: ' + bpfResult[0].activeStateIPAddress + ', bpfResult[0].bwActiveStateIdentifier: ' + bpfResult[0].bwActiveStateIdentifier + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
                                    console.log('');

                                    var ip_current = ip.split(',')[0];
                                    var ip_stored = bpfResult[0].activeStateIPAddress.split(',')[0];


                                    //if (((bpfResult[0].bwActiveStateIdentifier == bwActiveStateIdentifier.ActiveStateIdentifier) || (bpfResult[0].bwActiveStateIdentifier == bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage)) && (ip_current == ip_stored)) {



                                    // NEW CHECK NEW FIELDS 9-2-2024.
                                    if (((bpfResult[0].bwActiveStateIdentifierArray.indexOf(bwActiveStateIdentifier.ActiveStateIdentifier) > -1) || (bpfResult[0].bwActiveStateIdentifierArray.indexOf(bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage) > -1)) && (ip_current == ip_stored)) {

                                        //
                                        // Now we have to check that their security role lets them access this functionality. 
                                        //
                                        // Options include 'Forest Administrator', 'owner', 'configurationmanager', 'archiveviewer', 'reportviewer', 'participant', 'customer', 'vendor', and 'emailrecipient'. 
                                        //

                                        BwWorkflowUser.find({ bwWorkflowAppId: bwWorkflowAppId, bwParticipantId: bwParticipantId }, function (wuError, wuResult) {
                                            if (wuError) {

                                                var msg = 'Error in AuthorizeWebServiceCall():2: bwParticipantId: ' + bwParticipantId + ', wuError: ' + wuError;
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.AuthorizeWebServiceCall()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);
                                                console.log(msg);

                                                var result = {
                                                    message: msg,
                                                    status: 'ERROR'
                                                };
                                                resolve(result);

                                            } else {

                                                if (wuResult.length != 1) {

                                                    var msg = 'Error in AuthorizeWebServiceCall(). UNAUTHORIZED. Unexpected result when looking up this user. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '.';
                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.AuthorizeWebServiceCall()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);
                                                    console.log(msg);

                                                    var result = {
                                                        message: msg,
                                                        status: 'UNAUTHORIZED'
                                                    }
                                                    resolve(result);

                                                } else {

                                                    // Currently there is only 1 "Forest Administrator".
                                                    if ((minimumSecurityRole == 'Forest Administrator') && ((forestAdministrators.indexOf(bwParticipantId) > -1) || (wuResult[0].bwParticipantRole == 'Forest Administrator'))) {

                                                        // All functionality is authorized for the "Forest Administrator".
                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'configurationmanager') && ((wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'reportviewer') && ((wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'archiveviewer') && ((wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'participant') && ((wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'vendor') && ((wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'customer') && ((wuResult[0].bwParticipantRole == 'customer') || (wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail,
                                                                bwParticipantRole: wuResult[0].bwParticipantRole // We return the bwParticipantRole, because, for instance, /getsinglebudgetrequest may need to know this when returning a request for a [customer], which gets treated differently that a [participant]. 3-12-2024.
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else if ((minimumSecurityRole == 'emailrecipient') && (wuResult[0].bwParticipantRole == 'emailrecipient')) {

                                                        var result = {
                                                            message: 'AUTHORIZED',
                                                            status: 'AUTHORIZED',
                                                            participant: {
                                                                bwParticipantId: wuResult[0].bwParticipantId,
                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
                                                            }
                                                        }
                                                        resolve(result);

                                                    } else {

                                                        var msg = 'UNAUTHORIZED. xcx2355-2. The user does not have the minimum security role of "' + minimumSecurityRole + '". wuResult[0].bwParticipantRole: ' + wuResult[0].bwParticipantRole + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '. REQUEST PATH: ' + path;
                                                        console.log(msg);
                                                        var result = {
                                                            message: msg,
                                                            status: 'UNAUTHORIZED'
                                                        }
                                                        resolve(result);

                                                    }

                                                }

                                            }

                                        }).lean();

                                    } else {

                                        var msg = 'UNAUTHORIZED.';
                                        if (bpfResult[0].activeStateIPAddress) {
                                            //
                                        } else {
                                            msg += ' Your Node may have changed due to a redirection to a new Node. Unexpected value for user value activeStateIPAddress: ' + bpfResult[0].activeStateIPAddress;
                                        }
                                        console.log(msg);
                                        var result = {
                                            message: msg,
                                            status: 'UNAUTHORIZED'
                                        }
                                        resolve(result);

                                    }

                                }

                            }

                        } catch (e) {

                            var msg = 'Exception in AuthorizeWebServiceCall():2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.AuthorizeWebServiceCall()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            };
                            resolve(result);

                        }

                    }).lean();

                } else {

                    // Unexpected value for bwActiveStateIdentifier. Exit with an error.
                    var msg = 'Error in start.js.AuthorizeWebServiceCall(). Unexpected value for bwActiveStateIdentifier.ActiveStateIdentifier or bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier. This process cannot continue. bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier);
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.AuthorizeWebServiceCall()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                    var result = {
                        message: msg,
                        status: 'ERROR'
                    };
                    resolve(result);

                }
            }

        } catch (e) {

            var msg = 'Exception in start.js.AuthorizeWebServiceCall():1: ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.AuthorizeWebServiceCall()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            };
            resolve(result);

        }
    });
}




//function AuthorizeWebServiceCall(request, bwParticipantId, bwActiveStateIdentifier, bwWorkflowAppId, minimumSecurityRole) {
//    //
//    // ******************************************************************************************************************************
//    // *** THIS IS THE ONLY PLACE WHERE WEB SERVICE CALLS ARE AUTHORIZED. ***
//    // ******************************************************************************************************************************
//    //

//    // NEW CODE!!!!!!!!! 11-9-2022
//    // bwActiveStateIdentifier is no coming from: var activeStateIdentifier = $('.bwAuthentication:first').bwAuthentication('getActiveStateIdentifier');
//    //
//    // EXPECT THIS:
//    //if (urlParams["ActiveStateIdentifier"]) {

//    //    activeStateIdentifierJson = {
//    //        status: 'SUCCESS',
//    //        message: 'Found a value for ActiveStateIdentifier.',
//    //        ActiveStateIdentifier: urlParams["ActiveStateIdentifier"].toString().split('#')[0],
//    //        ActiveStateIdentifier_FromLocalStorage: localStorage
//    //    }

//    //} else if (urlParams["ForestAdministratorLoginToTenant_ActiveStateIdentifier"]) {

//    //    activeStateIdentifierJson = {
//    //        status: 'SUCCESS',
//    //        message: 'Found a value for ForestAdministratorLoginToTenant_ActiveStateIdentifier.',
//    //        ForestAdministratorLoginToTenant_ActiveStateIdentifier: urlParams["ForestAdministratorLoginToTenant_ActiveStateIdentifier"].toString().split('#')[0]
//    //    }

//    //} else {

//    //    activeStateIdentifierJson = {
//    //        status: 'ERROR',
//    //        message: 'Did not find a value for ActiveStateIdentifier or ForestAdministratorLoginToTenant_ActiveStateIdentifier.'
//    //    }

//    //}

//    //console.log('');
//    //console.log('>>> In AuthorizeWebServiceCall(). THIS IS THE ONLY PLACE WHERE WEB SERVICE CALLS ARE AUTHORIZED. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', minimumSecurityRole: ' + minimumSecurityRole + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
//    //console.log('');
//    return new Promise(function (resolve, reject) {
//        try {
//            //
//            // Added the ability for the Forest Administrator to login/spoof in order to login to all sites. 11-9-2022
//            //
//            var activeStateIdentifier
//            if (!bwActiveStateIdentifier) {

//                var msg = 'Error in AuthorizeWebServiceCall(). Invalid value for bwActiveStateIdentifier: ' + bwActiveStateIdentifier;
//                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                var source = 'start.js.AuthorizeWebServiceCall()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                var result = {
//                    message: msg,
//                    status: 'ERROR'
//                };
//                resolve(result);

//            } else {

//                var path = request.path.split('/')[0] + '/' + request.path.split('/')[1] + '/' + request.path.split('/')[2] + '/';
//                var msg = 'INCOMING CALL TO WEB SERVICE [' + path + '] REQUESTING ACCESS FOR [' + minimumSecurityRole + '].'; // bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId; // + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier);
//                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
//                var source = 'start.js.AuthorizeWebServiceCall()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                bwActiveStateIdentifier = JSON.parse(bwActiveStateIdentifier); // It gets passed stringified because it gets passed into another JSON object and this makes it work ok.
//                debugger;
//                if (bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier) {

//                    //
//                    // "Forest Administrator" authorization includes a combination of ActiveStateIdentifier and ip address. The ActiveStateIdentifier and the ip address must match.
//                    //
//                    BwForestAdministratorLoginToTenant.find({ bwWorkflowAppId: bwWorkflowAppId }, function (bfalttfError, bfalttfResult) {
//                        try {
//                            if (bfalttfError) {

//                                var msg = 'Error in AuthorizeWebServiceCall(): ' + bfalttfError;
//                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                var source = 'start.js.AuthorizeWebServiceCall()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                var result = {
//                                    message: msg,
//                                    status: 'ERROR'
//                                };
//                                resolve(result);

//                            } else {

//                                if (bfalttfResult.length != 1) {

//                                    var msg = 'UNAUTHORIZED. Unexpected result when looking up this ForestAdministratorLoginToTenant. bwWorkflowAppId: ' + bwWorkflowAppId;
//                                    console.log(msg);
//                                    var result = {
//                                        message: msg,
//                                        status: 'UNAUTHORIZED'
//                                    }
//                                    resolve(result);

//                                } else {

//                                    // We got 1 bwParticipant record, which is what we are expecting.
//                                    var ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress ||
//                                        (request.connection.socket ? request.connection.socket.remoteAddress : null);

//                                    console.log('');
//                                    console.log('>>> In AuthorizeWebServiceCall(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bfalttfResult.length: ' + bfalttfResult.length + ', ip: ' + ip + ', bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress + ', bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
//                                    console.log('');

//                                    var ip_current = ip.split(',')[0];
//                                    var ip_stored = bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress.split(',')[0];

//                                    if ((bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIdentifier == bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier) && (ip_current == ip_stored)) {

//                                        //
//                                        // Now we have to check that their security role lets them access this functionality. 
//                                        //
//                                        // Options include 'Forest Administrator', 'owner', 'configurationmanager', 'archiveviewer', 'reportviewer', 'participant', 'customer', 'vendor', and 'emailrecipient'. 
//                                        //

//                                        var msg = 'A FOREST ADMINISTRATOR HAS REQUESTED AUTHORIZATION TO ORGANIZATION bwWorkflowAppId: ' + bwWorkflowAppId + '. bwParticipantId: ' + bwParticipantId + '. Their ip address has been matched (' + ip_current + '), and their ActiveStateIdentifier matches. bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier: ' + bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier + '. minimumSecurityRole: ' + minimumSecurityRole;
//                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                        var source = 'start.js.AuthorizeWebServiceCall()';
//                                        var errorCode = null;
//                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                        BwWorkflowUser.find({ bwWorkflowAppId: bwWorkflowAppId, bwParticipantId: bwParticipantId }, function (wuError, wuResult) {
//                                            if (wuError) {

//                                                var msg = 'Error in AuthorizeWebServiceCall():2: ' + wuError;
//                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                                var source = 'start.js.AuthorizeWebServiceCall()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                                var result = {
//                                                    message: msg,
//                                                    status: 'ERROR'
//                                                };
//                                                resolve(result);

//                                            } else {

//                                                if (wuResult.length != 1) {

//                                                    var msg = 'UNAUTHORIZED. Unexpected result when looking up this user, wuResult.length: ' + wuResult.length + '. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '.';
//                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                                    var source = 'start.js.AuthorizeWebServiceCall()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                                    var result = {
//                                                        message: msg,
//                                                        status: 'UNAUTHORIZED'
//                                                    }
//                                                    resolve(result);

//                                                } else {

//                                                    // Currently there is only 1 "Forest Administrator".
//                                                    if ((minimumSecurityRole == 'Forest Administrator') && ((forestAdministrators.indexOf(bwParticipantId) > -1) || (wuResult[0].bwParticipantRole == 'Forest Administrator'))) {

//                                                        // All functionality is authorized for the "Forest Administrator".
//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'configurationmanager') && ((wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'reportviewer') && ((wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'archiveviewer') && ((wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'participant') && ((wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'vendor') && ((wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'customer') && ((wuResult[0].bwParticipantRole == 'customer') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'emailrecipient') && ((wuResult[0].bwParticipantRole == 'emailrecipient') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else {

//                                                        var msg = 'UNAUTHORIZED. xcx2355-1. The user does not have the minimum security role of "' + minimumSecurityRole + '". wuResult[0].bwParticipantRole: ' + wuResult[0].bwParticipantRole + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId;
//                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                                        var source = 'start.js.AuthorizeWebServiceCall()';
//                                                        var errorCode = null;
//                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                                        var result = {
//                                                            message: msg,
//                                                            status: 'UNAUTHORIZED'
//                                                        }
//                                                        resolve(result);

//                                                    }

//                                                }
//                                            }
//                                        }).lean();

//                                    } else {

//                                        var msg = 'UNAUTHORIZED.';
//                                        if (bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress) {
//                                            //
//                                        } else {
//                                            msg += ' Your Node may have changed due to a redirection to a new Node. Unexpected value for user value bwForestAdministratorLoginToTenant_ActiveStateIPAddress: ' + bfalttfResult[0].bwForestAdministratorLoginToTenant_ActiveStateIPAddress;
//                                        }
//                                        console.log(msg);
//                                        var result = {
//                                            message: msg,
//                                            status: 'UNAUTHORIZED'
//                                        }
//                                        resolve(result);

//                                    }
//                                }
//                            }
//                        } catch (e) {

//                            var msg = 'Exception in AuthorizeWebServiceCall():2: ' + e.message + ', ' + e.stack;
//                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.AuthorizeWebServiceCall()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                            var result = {
//                                message: msg,
//                                status: 'EXCEPTION'
//                            };
//                            resolve(result);

//                        }
//                    }).lean();

//                } else if (bwActiveStateIdentifier.ActiveStateIdentifier || bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage) { // localStorage added 12-7-2022

//                    //
//                    // Authorization includes a combination of ActiveStateIdentifier and ip address. The ActiveStateIdentifier and the ip address must match.
//                    //
//                    BwParticipant.find({ bwParticipantId: bwParticipantId }, function (bpfError, bpfResult) {
//                        try {
//                            if (bpfError) {

//                                var msg = 'Error in AuthorizeWebServiceCall(). bpfError: ' + bpfError;
//                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                var source = 'start.js.AuthorizeWebServiceCall()';
//                                var errorCode = null;
//                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                var result = {
//                                    message: msg,
//                                    status: 'ERROR'
//                                };
//                                resolve(result);

//                            } else {

//                                if (bpfResult.length != 1) {

//                                    var msg = 'Error in AuthorizeWebServiceCall(). UNAUTHORIZED. Unexpected result when looking up this user. xcx2314321-13. bpfResult.length != 1. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', bpfResult: ' + JSON.stringify(bpfResult);
//                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                    var source = 'start.js.AuthorizeWebServiceCall()';
//                                    var errorCode = null;
//                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                    var result = {
//                                        message: msg,
//                                        status: 'UNAUTHORIZED'
//                                    }
//                                    resolve(result);

//                                } else {

//                                    // We got 1 bwParticipant record, which is what we are expecting.
//                                    var ip = request.headers['x-forwarded-for'] || request.connection.remoteAddress || request.socket.remoteAddress ||
//                                        (request.connection.socket ? request.connection.socket.remoteAddress : null);

//                                    console.log('');
//                                    console.log('>>> In AuthorizeWebServiceCall(). bwParticipantId: ' + bwParticipantId + ', bpfResult.length: ' + bpfResult.length + ', ip: ' + ip + ', bpfResult[0].activeStateIPAddress: ' + bpfResult[0].activeStateIPAddress + ', bpfResult[0].bwActiveStateIdentifier: ' + bpfResult[0].bwActiveStateIdentifier + ', bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier));
//                                    console.log('');

//                                    var ip_current = ip.split(',')[0];
//                                    var ip_stored = bpfResult[0].activeStateIPAddress.split(',')[0];

//                                    //if ((bpfResult[0].bwActiveStateIdentifier == bwActiveStateIdentifier.ActiveStateIdentifier) && (ip_current == ip_stored)) { 
//                                    if (((bpfResult[0].bwActiveStateIdentifier == bwActiveStateIdentifier.ActiveStateIdentifier) || (bpfResult[0].bwActiveStateIdentifier == bwActiveStateIdentifier.ActiveStateIdentifier_FromLocalStorage)) && (ip_current == ip_stored)) {

//                                        //
//                                        // Now we have to check that their security role lets them access this functionality. 
//                                        //
//                                        // Options include 'Forest Administrator', 'owner', 'configurationmanager', 'archiveviewer', 'reportviewer', 'participant', 'customer', 'vendor', and 'emailrecipient'. 
//                                        //

//                                        BwWorkflowUser.find({ bwWorkflowAppId: bwWorkflowAppId, bwParticipantId: bwParticipantId }, function (wuError, wuResult) {
//                                            if (wuError) {

//                                                var msg = 'Error in AuthorizeWebServiceCall():2: bwParticipantId: ' + bwParticipantId + ', wuError: ' + wuError;
//                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                                var source = 'start.js.AuthorizeWebServiceCall()';
//                                                var errorCode = null;
//                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                                var result = {
//                                                    message: msg,
//                                                    status: 'ERROR'
//                                                };
//                                                resolve(result);

//                                            } else {

//                                                if (wuResult.length != 1) {

//                                                    var msg = 'Error in AuthorizeWebServiceCall(). UNAUTHORIZED. Unexpected result when looking up this user. xcx2314321-14. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '.';
//                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
//                                                    var source = 'start.js.AuthorizeWebServiceCall()';
//                                                    var errorCode = null;
//                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                                                    console.log(msg);
//                                                    var result = {
//                                                        message: msg,
//                                                        status: 'UNAUTHORIZED'
//                                                    }
//                                                    resolve(result);

//                                                } else {

//                                                    // Currently there is only 1 "Forest Administrator".
//                                                    if ((minimumSecurityRole == 'Forest Administrator') && ((forestAdministrators.indexOf(bwParticipantId) > -1) || (wuResult[0].bwParticipantRole == 'Forest Administrator'))) {

//                                                        // All functionality is authorized for the "Forest Administrator".
//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'configurationmanager') && ((wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'reportviewer') && ((wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'archiveviewer') && ((wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'participant') && ((wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'vendor') && ((wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'customer') && ((wuResult[0].bwParticipantRole == 'customer') || (wuResult[0].bwParticipantRole == 'vendor') || (wuResult[0].bwParticipantRole == 'participant') || (wuResult[0].bwParticipantRole == 'archiveviewer') || (wuResult[0].bwParticipantRole == 'reportviewer') || (wuResult[0].bwParticipantRole == 'configurationmanager') || (wuResult[0].bwParticipantRole == 'owner'))) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail,
//                                                                bwParticipantRole: wuResult[0].bwParticipantRole // We return the bwParticipantRole, because, for instance, /getsinglebudgetrequest may need to know this when returning a request for a [customer], which gets treated differently that a [participant]. 3-12-2024.
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else if ((minimumSecurityRole == 'emailrecipient') && (wuResult[0].bwParticipantRole == 'emailrecipient')) {

//                                                        var result = {
//                                                            message: 'AUTHORIZED',
//                                                            status: 'AUTHORIZED',
//                                                            participant: {
//                                                                bwParticipantId: wuResult[0].bwParticipantId,
//                                                                bwParticipantFriendlyName: wuResult[0].bwParticipantFriendlyName,
//                                                                bwParticipantEmail: wuResult[0].bwParticipantEmail
//                                                            }
//                                                        }
//                                                        resolve(result);

//                                                    } else {

//                                                        var msg = 'UNAUTHORIZED. xcx2355-2. The user does not have the minimum security role of "' + minimumSecurityRole + '". wuResult[0].bwParticipantRole: ' + wuResult[0].bwParticipantRole + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + '. REQUEST PATH: ' + path;
//                                                        console.log(msg);
//                                                        var result = {
//                                                            message: msg,
//                                                            status: 'UNAUTHORIZED'
//                                                        }
//                                                        resolve(result);

//                                                    }

//                                                }

//                                            }

//                                        }).lean();

//                                    } else {

//                                        var msg = 'UNAUTHORIZED.';
//                                        if (bpfResult[0].activeStateIPAddress) {
//                                            //
//                                        } else {
//                                            msg += ' Your Node may have changed due to a redirection to a new Node. Unexpected value for user value activeStateIPAddress: ' + bpfResult[0].activeStateIPAddress;
//                                        }
//                                        console.log(msg);
//                                        var result = {
//                                            message: msg,
//                                            status: 'UNAUTHORIZED'
//                                        }
//                                        resolve(result);

//                                    }

//                                }

//                            }

//                        } catch (e) {

//                            var msg = 'Exception in AuthorizeWebServiceCall():2: ' + e.message + ', ' + e.stack;
//                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.AuthorizeWebServiceCall()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                            var result = {
//                                message: msg,
//                                status: 'EXCEPTION'
//                            };
//                            resolve(result);

//                        }

//                    }).lean();

//                } else {

//                    // Unexpected value for bwActiveStateIdentifier. Exit with an error.
//                    var msg = 'Error in AuthorizeWebServiceCall(). Unexpected value for bwActiveStateIdentifier.ActiveStateIdentifier or bwActiveStateIdentifier.ForestAdministratorLoginToTenant_ActiveStateIdentifier. This process cannot continue. bwActiveStateIdentifier: ' + JSON.stringify(bwActiveStateIdentifier);
//                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                    var source = 'start.js.AuthorizeWebServiceCall()';
//                    var errorCode = null;
//                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//                    var result = {
//                        message: msg,
//                        status: 'ERROR'
//                    };
//                    resolve(result);

//                }
//            }

//        } catch (e) {

//            var msg = 'Exception in start.js.AuthorizeWebServiceCall():1: ' + e.message + ', ' + e.stack;
//            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//            var source = 'start.js.AuthorizeWebServiceCall()';
//            var errorCode = null;
//            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

//            var result = {
//                message: msg,
//                status: 'EXCEPTION'
//            };
//            resolve(result);

//        }
//    });
//}





router.post('/_files/getlistofattachmentsforbudgetrequest', function (request, response) {
    try {
        console.log('In start.js.getlistofattachmentsforbudgetrequest().');

        //
        // When a request is displayed, bwAttachments.js.populateAttachments() calls this web service in order to display the attachments.
        // Adding support for displaying the status/progress of a video file conversion here as well. // 11-30-2023.
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var msg = 'In /_files/getlistofattachmentsforbudgetrequest. Security risk? Keep an eye on this one. This is [customer] related. 3-12-2024. xcx88888347.';
        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getlistofattachmentsforbudgetrequest()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'customer'); // Security risk? Keep an eye on this one. 3-12-2024. 
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /getlistofattachmentsforbudgetrequest(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId);
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
                        try {

                            if (brfError) {

                                var msg = 'Error in /_files/getlistofattachmentsforbudgetrequest. Error finding the budget request ' + bwBudgetRequestId + ': ' + brfError;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js./getlistofattachmentsforbudgetrequest()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                console.log(msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                // If the bwBudgetRequestId exists in the database, use the bwWorkflowAppId that is found there. Otherwise use the 
                                // one that was passed to this method.
                                if (brfResult.length > 0) {
                                    bwWorkflowAppId = brfResult[0].bwWorkflowAppId;
                                }

                                // Reach out to the file system and find them!
                                var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                fs.readdir(budgetRequestFolderPath, function (err, files) {
                                    try {
                                        if (err) {

                                            if (String(err).indexOf('ENOENT: no such file or directory') > -1) {

                                                //{"status":"ERROR","message":"Error in /_files/getlistofattachmentsforbudgetrequest. err: Error: ENOENT: no such file or directory, scandir 'public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/711acdab-f23e-414d-94b8-c3806657f314'"}

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: 'There are no files and no directory.',
                                                    verboseMessage: 'There are no files and no directory: ' + budgetRequestFolderPath,
                                                    data: []
                                                }
                                                response.send(result);

                                            } else {

                                                var msg = 'Error in /_files/getlistofattachmentsforbudgetrequest. err: ' + err;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js./getlistofattachmentsforbudgetrequest()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                                console.log(msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                response.send(result);

                                            }

                                        } else {

                                            // Formulate the result. We want to include the .metadata if it is present.
                                            if (files.length <= 0) {

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: 'There are no files in this directory.',
                                                    verboseMessage: 'There are no files in this directory: ' + budgetRequestFolderPath,
                                                    data: []
                                                }
                                                response.send(result);

                                            } else if (files.length > 0) {

                                                var data = [];
                                                var metadataFileCounter = 0;
                                                for (var i = 0; i < files.length; i++) {

                                                    //
                                                    // Make sure we filter out the .metadata files!!! We don't want these returned to the user.
                                                    //
                                                    // Note that this is a flat file system. We don't want subfolders, there are too many disadvantages to that approach.
                                                    //
                                                    //
                                                    // Now check if this is a _320px_ file or not... only display 320px ones.
                                                    //
                                                    var extensionIndex = files[i].split('.').length - 1;
                                                    var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];

                                                    //
                                                    // FileType is one of: METADATA, THUMBNAIL, FILE.
                                                    //
                                                    var fileType = 'FILE';
                                                    if (fileExtension == 'metadata') {
                                                        fileType = 'METADATA';
                                                    }
                                                    var thumbnailSearchTextForImage = '_320px_.' + fileExtension;
                                                    if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                                        fileType = 'THUMBNAIL_320px';
                                                    }
                                                    if (files[i].indexOf('_thumbnail_.png') > -1) { // 8-4-2024.
                                                        fileType = 'THUMBNAIL_video';
                                                    }
                                                    var thumbnailSearchTextForPdf = '_thumbnail_320px_pdf_.' + fileExtension;
                                                    if (files[i].indexOf(thumbnailSearchTextForPdf) > -1) {
                                                        fileType = 'THUMBNAIL_320px_PDF';
                                                    }

                                                    var printableImageSearchTextForImage = '_640x480px_.' + fileExtension;
                                                    if (files[i].indexOf(printableImageSearchTextForImage) > -1) {
                                                        fileType = 'PRINTABLE_640x480px';
                                                    }
                                                    //
                                                    //

                                                    if (fileType == 'METADATA') {

                                                        // This is a .metadata file.
                                                        var metadataFilePath = budgetRequestFolderPath + '/' + files[i];

                                                        var metaData = fs.readFileSync(metadataFilePath).toString();

                                                        var description = '';
                                                        var size = '';
                                                        var birthtime = '';
                                                        var bwParticipantId = '';
                                                        var bwParticipantEmail = '';
                                                        var bwParticipantFriendlyName = '';
                                                        var FileConversionStatus = '';

                                                        try {
                                                            var json = JSON.parse(metaData);

                                                            description = json.description;
                                                            size = json.size;
                                                            birthtime = json.birthtime;
                                                            bwParticipantId = json.bwParticipantId;
                                                            bwParticipantEmail = json.bwParticipantEmail;
                                                            bwParticipantFriendlyName = json.bwParticipantFriendlyName;
                                                            FileConversionStatus = json.FileConversionStatus;

                                                        } catch (e) { }

                                                        var fileEntry_Filename = files[i].split('.metadata')[0];

                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {
                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }
                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].Description = description;
                                                            data[fileEntryIndex].Size = size;
                                                            data[fileEntryIndex].Birthtime = birthtime;
                                                            data[fileEntryIndex].bwParticipantId = bwParticipantId;
                                                            data[fileEntryIndex].bwParticipantEmail = bwParticipantEmail;
                                                            data[fileEntryIndex].bwParticipantFriendlyName = bwParticipantFriendlyName;
                                                            data[fileEntryIndex].tracking = 'changed xcx21342-1 METADATA, added metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath;
                                                            data[fileEntryIndex].FileConversionStatus = FileConversionStatus;

                                                        } else {

                                                            var fileData = {
                                                                Display_Filename: fileEntry_Filename,
                                                                Actual_Filename: fileEntry_Filename,
                                                                Description: description,
                                                                Size: size,
                                                                Birthtime: birthtime,
                                                                bwParticipantId: bwParticipantId,
                                                                bwParticipantEmail: bwParticipantEmail,
                                                                bwParticipantFriendlyName: bwParticipantFriendlyName,
                                                                tracking: 'added xcx21342-1 METADATA with its metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                                                FoundSourceFile: false
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else if (fileType == 'PRINTABLE_640x480px') { // This is our printable size. For instance, when creating a PDF of receipts.

                                                        // This is not a .metadata file.
                                                        var fileEntry_Filename = files[i];

                                                        // Formulate the filename we are searching for.
                                                        var thumbnailSearchText = '_640x480px_.' + fileExtension;
                                                        //var thisIsAThumbnailFile = false;
                                                        if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                            // This file is a 320px thumbnail. 
                                                            //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                            //   - The user can click on the thumbnail to see the larger resolution image.
                                                            fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                            //thisIsAThumbnailFile = true;
                                                        }

                                                        //
                                                        // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                        //
                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {

                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }

                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].Printable_Filename = files[i];
                                                            data[fileEntryIndex].tracking = 'changed xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension;
                                                            //data[fileEntryIndex].Thumbnail = true;

                                                        } else {

                                                            var fileData = {
                                                                Printable_Filename: files[i],
                                                                //Display_Filename: files[i],
                                                                //Actual_Filename: files[i],
                                                                Description: '',
                                                                Size: '',
                                                                Birthtime: '',
                                                                tracking: 'added xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension,
                                                                FoundSourceFile: false//,
                                                                //Thumbnail: true
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else if (fileType == 'THUMBNAIL_320px') {

                                                        // This is not a .metadata file.
                                                        var fileEntry_Filename = files[i];

                                                        // Formulate the filename we are searching for.
                                                        var thumbnailSearchText = '_320px_.' + fileExtension;
                                                        var thisIsAThumbnailFile = false;
                                                        if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                            // This file is a 320px thumbnail. 
                                                            //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                            //   - The user can click on the thumbnail to see the larger resolution image.
                                                            fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                            thisIsAThumbnailFile = true;
                                                        }

                                                        //
                                                        // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                        //
                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {

                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }

                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].Actual_Filename = files[i];
                                                            data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                                            data[fileEntryIndex].Thumbnail = true;

                                                        } else {

                                                            var fileData = {
                                                                Display_Filename: files[i],
                                                                Actual_Filename: files[i],
                                                                Description: '',
                                                                Size: '',
                                                                Birthtime: '',
                                                                tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                                                FoundSourceFile: false,
                                                                Thumbnail: true
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else if (fileType == 'THUMBNAIL_320px_PDF') {

                                                        // This is not a .metadata file.
                                                        var fileEntry_Filename = files[i];

                                                        // Formulate the filename we are searching for.
                                                        var thumbnailSearchText = '_thumbnail_320px_pdf_' + '.png';
                                                        var thisIsAThumbnailFile = false;
                                                        if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                            // This file is a 320px thumbnail. 
                                                            //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                            //   - The user can click on the thumbnail to see the larger resolution image.
                                                            fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                            thisIsAThumbnailFile = true;
                                                        }

                                                        //
                                                        // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                        //
                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {

                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }

                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].Actual_Filename = files[i];
                                                            data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                                            data[fileEntryIndex].Thumbnail = true;

                                                        } else {

                                                            var fileData = {
                                                                Display_Filename: files[i],
                                                                Actual_Filename: files[i],
                                                                Description: '',
                                                                Size: '',
                                                                Birthtime: '',
                                                                tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                                                FoundSourceFile: false,
                                                                Thumbnail: true
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else if (fileType == 'THUMBNAIL_video') {

                                                        // This is not a .metadata file.
                                                        var fileEntry_Filename = files[i];

                                                        // Formulate the filename we are searching for.
                                                        var thumbnailSearchText = '_thumbnail_.png'; // 8-4-2024
                                                        var thisIsAThumbnailFile = false;
                                                        if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                            // This file is a 320px thumbnail. 
                                                            //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                            //   - The user can click on the thumbnail to see the larger resolution image.
                                                            fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                            thisIsAThumbnailFile = true;
                                                        }

                                                        //
                                                        // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                        //
                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {

                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }

                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].Actual_Filename = files[i];
                                                            data[fileEntryIndex].tracking = 'changed xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension;
                                                            data[fileEntryIndex].Thumbnail = true;

                                                        } else {

                                                            var fileData = {
                                                                Display_Filename: files[i],
                                                                Actual_Filename: files[i],
                                                                Description: '',
                                                                Size: '',
                                                                Birthtime: '',
                                                                tracking: 'added xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension,
                                                                FoundSourceFile: false,
                                                                Thumbnail: true
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else if (fileType == 'FILE') {

                                                        //
                                                        //
                                                        // WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023.
                                                        //
                                                        //

                                                        var msg = 'In /_files/getlistofattachmentsforbudgetrequest. fileType: ' + fileType + '. THIS IS A WORK IN PROGRESS. WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023. xcx3994582.';
                                                        var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.getlistofattachmentsforbudgetrequest()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        console.log('');
                                                        console.log('****************************');
                                                        console.log('****************************');
                                                        console.log(msg);
                                                        console.log('****************************');
                                                        console.log('****************************');
                                                        console.log('');

                                                        // This is not a .metadata file.
                                                        var fileEntry_Filename = files[i];

                                                        //
                                                        // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                        //
                                                        var fileEntryAlreadyExists = false;
                                                        var fileEntryIndex;
                                                        for (var j = 0; j < data.length; j++) {

                                                            if (data[j].Display_Filename == fileEntry_Filename) {
                                                                fileEntryAlreadyExists = true;
                                                                fileEntryIndex = j;
                                                                break;
                                                            }
                                                        }

                                                        if (fileEntryAlreadyExists == true) {

                                                            data[fileEntryIndex].tracking = 'changed xcx21342-4 FILE fileExtension: ' + fileExtension;
                                                            data[fileEntryIndex].FoundSourceFile = true;

                                                        } else {

                                                            var fileData = {
                                                                Display_Filename: files[i],
                                                                Actual_Filename: files[i],
                                                                Description: '',
                                                                Size: '',
                                                                Birthtime: '',
                                                                tracking: 'added xcx21342-4-3 FILE fileExtension: ' + fileExtension,
                                                                FoundSourceFile: true
                                                            };
                                                            data.push(fileData);

                                                        }

                                                    } else {

                                                        var msg = 'Error in /_files/getlistofattachmentsforbudgetrequest. Unexpected value for fileType: ' + fileType;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.getlistofattachmentsforbudgetrequest()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);
                                                        console.log(msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    }

                                                }

                                                // Now we iterate through the data json and got rid of entries with FoundSourceFile = true.
                                                var validFiles = [];
                                                for (var i = 0; i < data.length; i++) {
                                                    if (data[i].FoundSourceFile == true) {
                                                        validFiles.push(data[i]);
                                                    }
                                                }

                                                //
                                                // We are going to add a json property which is in lowercase, in order for us to do a proper alphabetical search.
                                                //
                                                for (var i = 0; i < validFiles.length; i++) {
                                                    var x = validFiles[i].Display_Filename.toLowerCase();
                                                    validFiles[i]["sortable_filename"] = x;
                                                }

                                                validFiles.sort(function (a, b) {
                                                    if (a.sortable_filename < b.sortable_filename) { return -1; }
                                                    if (a.sortable_filename > b.sortable_filename) { return 1; }
                                                    return 0;
                                                });

                                                // This is just for the returned message in case we nee some troubleshooting data on the client side.
                                                var allActualFiles = [];
                                                for (var j = 0; j < files.length; j++) {
                                                    allActualFiles.push(files[j]);
                                                }

                                                // We have iterated through all of the files, so now send the response.
                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: 'We have iterated through all of the files, so now send the response. xcx23124-2 budgetRequestFolderPath: ' + budgetRequestFolderPath + ', allActualFiles: ' + JSON.stringify(allActualFiles),
                                                    data: validFiles
                                                }
                                                response.send(result);

                                            }

                                        }

                                    } catch (e) {

                                        var msg = 'Exception in /_files/getlistofattachmentsforbudgetrequest:3: ' + e.message + ', ' + e.stack;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.getlistofattachmentsforbudgetrequest()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        console.log(msg);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    }
                                });
                            }
                        } catch (e) {

                            var msg = 'Exception in /_files/getlistofattachmentsforbudgetrequest:2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.getlistofattachmentsforbudgetrequest()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                            console.log(msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }

                    }).lean();

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /getlistofattachmentsforbudgetrequest().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./getlistofattachmentsforbudgetrequest: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getlistofattachmentsforbudgetrequest()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/getlistofattachmentsforbudgetrequest: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getlistofattachmentsforbudgetrequest()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in /_files/getlistofattachmentsforbudgetrequest: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getlistofattachmentsforbudgetrequest()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }

});



router.post('/_files/getlistofattachments_foremail', function (request, response) {
    try {
        console.log('In start.js.getlistofattachments_foremail().');

        //
        // When a request is displayed, bwAttachments.js.populateAttachments() calls this web service in order to display the attachments.
        // Adding support for displaying the status/progress of a video file conversion here as well. // 11-30-2023.
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var msg = 'In /_files/getlistofattachments_foremail. Security risk? Keep an eye on this one. This is [customer] related. 3-12-2024. xcx88888347.';
        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getlistofattachments_foremail()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'customer'); // Security risk? Keep an eye on this one. 3-12-2024. 
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    var msg = 'AUTHORIZED in /_files/getlistofattachments_foremail. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', _id: ' + _id;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getlistofattachments_foremail()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /getlistofattachments_foremail(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwParticipantId: ' + bwParticipantId + ', _id: ' + _id);
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwParticipantId = bwParticipantId_LoggedIn;
                    var _id = request.body._id;
                    var attachmentOrInline = request.body.bwAttachmentOrInline;

                    if (!((attachmentOrInline == 'ATTACHMENTS') || (attachmentOrInline == 'INLINE'))) {

                        var msg = 'Error in start.js.getlistofattachments_foremail(). INVALID VALUE FOR attachmentOrInline: ' + attachmentOrInline + '. THIS PROCESS CANNOT PROCEED.';
                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.getlistofattachments_foremail()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }
                        response.send(result);

                    } else {

                        //BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
                        //    try {

                        //        if (brfError) {

                        //            var msg = 'Error in /_files/getlistofattachments_foremail. Error finding the budget request ' + bwBudgetRequestId + ': ' + brfError;
                        //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        //            var source = 'start.js./getlistofattachments_foremail()';
                        //            var errorCode = null;
                        //            WriteToErrorLog(threatLevel, source, errorCode, msg);
                        //            console.log(msg);

                        //            var result = {
                        //                status: 'ERROR',
                        //                message: msg
                        //            }
                        //            response.send(result);

                        //        } else {

                        //            // If the bwBudgetRequestId exists in the database, use the bwWorkflowAppId that is found there. Otherwise use the 
                        //            // one that was passed to this method.
                        //            if (brfResult.length > 0) {
                        //                bwWorkflowAppId = brfResult[0].bwWorkflowAppId;
                        //            }

                        // Reach out to the file system and find them!
                        var budgetRequestFolderPath = rootFilePath_email + bwParticipantId + '/' + _id + '/' + attachmentOrInline;
                        fs.readdir(budgetRequestFolderPath, function (err, files) {
                            try {
                                if (err) {

                                    if (String(err).indexOf('ENOENT: no such file or directory') > -1) {

                                        //{"status":"ERROR","message":"Error in /_files/getlistofattachments_foremail. err: Error: ENOENT: no such file or directory, scandir 'public/_files/c48535a4-9a6b-4b95-9d67-c6569e9695d8/711acdab-f23e-414d-94b8-c3806657f314'"}

                                        var result = {
                                            status: 'SUCCESS',
                                            message: 'There are no files and no directory.',
                                            verboseMessage: 'There are no files and no directory: ' + budgetRequestFolderPath,
                                            data: []
                                        }
                                        response.send(result);

                                    } else {

                                        var msg = 'Error in /_files/getlistofattachments_foremail. err: ' + err;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js./getlistofattachments_foremail()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        console.log(msg);

                                        var result = {
                                            status: 'ERROR',
                                            message: msg
                                        }
                                        response.send(result);

                                    }

                                } else {

                                    // Formulate the result. We want to include the .metadata if it is present.
                                    if (files.length <= 0) {

                                        var result = {
                                            status: 'SUCCESS',
                                            message: 'There are no files in this directory.',
                                            verboseMessage: 'There are no files in this directory: ' + budgetRequestFolderPath,
                                            data: []
                                        }
                                        response.send(result);

                                    } else if (files.length > 0) {

                                        var data = [];
                                        var metadataFileCounter = 0;
                                        for (var i = 0; i < files.length; i++) {

                                            //
                                            // Make sure we filter out the .metadata files!!! We don't want these returned to the user.
                                            //
                                            // Note that this is a flat file system. We don't want subfolders, there are too many disadvantages to that approach.
                                            //
                                            //
                                            // Now check if this is a _320px_ file or not... only display 320px ones.
                                            //
                                            var extensionIndex = files[i].split('.').length - 1;
                                            var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];

                                            //
                                            // FileType is one of: METADATA, THUMBNAIL, FILE.
                                            //
                                            var fileType = 'FILE';
                                            if (fileExtension == 'metadata') {
                                                fileType = 'METADATA';
                                            }
                                            var thumbnailSearchTextForImage = '_60px_.png'; // + fileExtension;
                                            if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                                fileType = 'THUMBNAIL_60px';
                                            }
                                            var thumbnailSearchTextForImage = '_320px_.' + fileExtension;
                                            if (files[i].indexOf(thumbnailSearchTextForImage) > -1) {
                                                fileType = 'THUMBNAIL_320px';
                                            }
                                            if (files[i].indexOf('_thumbnail_.png') > -1) { // 8-4-2024.
                                                fileType = 'THUMBNAIL_video';
                                            }
                                            var thumbnailSearchTextForPdf = '_thumbnail_320px_pdf_.' + fileExtension;
                                            if (files[i].indexOf(thumbnailSearchTextForPdf) > -1) {
                                                fileType = 'THUMBNAIL_320px_PDF';
                                            }

                                            var printableImageSearchTextForImage = '_640x480px_.' + fileExtension;
                                            if (files[i].indexOf(printableImageSearchTextForImage) > -1) {
                                                fileType = 'PRINTABLE_640x480px';
                                            }
                                            //
                                            //

                                            if (fileType == 'METADATA') {

                                                // This is a .metadata file.
                                                var metadataFilePath = budgetRequestFolderPath + '/' + files[i];

                                                var metaData = fs.readFileSync(metadataFilePath).toString();

                                                var description = '';
                                                var size = '';
                                                var birthtime = '';
                                                var bwParticipantId = '';
                                                var bwParticipantEmail = '';
                                                var bwParticipantFriendlyName = '';
                                                var FileConversionStatus = '';

                                                try {
                                                    var json = JSON.parse(metaData);

                                                    description = json.description;
                                                    size = json.size;
                                                    birthtime = json.birthtime;
                                                    bwParticipantId = json.bwParticipantId;
                                                    bwParticipantEmail = json.bwParticipantEmail;
                                                    bwParticipantFriendlyName = json.bwParticipantFriendlyName;
                                                    FileConversionStatus = json.FileConversionStatus;

                                                } catch (e) { }

                                                var fileEntry_Filename = files[i].split('.metadata')[0];

                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {
                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }
                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Description = description;
                                                    data[fileEntryIndex].Size = size;
                                                    data[fileEntryIndex].Birthtime = birthtime;
                                                    data[fileEntryIndex].bwParticipantId = bwParticipantId;
                                                    data[fileEntryIndex].bwParticipantEmail = bwParticipantEmail;
                                                    data[fileEntryIndex].bwParticipantFriendlyName = bwParticipantFriendlyName;
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-1 METADATA, added metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath;
                                                    data[fileEntryIndex].FileConversionStatus = FileConversionStatus;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: fileEntry_Filename,
                                                        Actual_Filename: fileEntry_Filename,
                                                        Description: description,
                                                        Size: size,
                                                        Birthtime: birthtime,
                                                        bwParticipantId: bwParticipantId,
                                                        bwParticipantEmail: bwParticipantEmail,
                                                        bwParticipantFriendlyName: bwParticipantFriendlyName,
                                                        tracking: 'added xcx21342-1 METADATA with its metadata. budgetRequestFolderPath: ' + budgetRequestFolderPath,
                                                        FoundSourceFile: false
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'PRINTABLE_640x480px') { // This is our printable size. For instance, when creating a PDF of receipts.

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                // Formulate the filename we are searching for.
                                                var thumbnailSearchText = '_640x480px_.' + fileExtension;
                                                //var thisIsAThumbnailFile = false;
                                                if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                    // This file is a 320px thumbnail. 
                                                    //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                    //   - The user can click on the thumbnail to see the larger resolution image.
                                                    fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                    //thisIsAThumbnailFile = true;
                                                }

                                                //
                                                // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Printable_Filename = files[i];
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension;
                                                    //data[fileEntryIndex].Thumbnail = true;

                                                } else {

                                                    var fileData = {
                                                        Printable_Filename: files[i],
                                                        //Display_Filename: files[i],
                                                        //Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-2-2 PRINTABLE_640x480px fileExtension: ' + fileExtension,
                                                        FoundSourceFile: false//,
                                                        //Thumbnail: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'THUMBNAIL_60px') {

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                // Formulate the filename we are searching for.
                                                var thumbnailSearchText = '_60px_.png'; // + fileExtension;
                                                var thisIsAThumbnailFile = false;
                                                if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                    // This file is a 320px thumbnail. 
                                                    //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                    //   - The user can click on the thumbnail to see the larger resolution image.
                                                    fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                    thisIsAThumbnailFile = true;
                                                }

                                                //
                                                // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Actual_Filename = files[i];
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_60px fileExtension: ' + fileExtension;
                                                    data[fileEntryIndex].Thumbnail = true;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: files[i],
                                                        Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-2 THUMBNAIL_60px fileExtension: ' + fileExtension,
                                                        FoundSourceFile: false,
                                                        Thumbnail: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'THUMBNAIL_320px') {

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                // Formulate the filename we are searching for.
                                                var thumbnailSearchText = '_320px_.' + fileExtension;
                                                var thisIsAThumbnailFile = false;
                                                if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                    // This file is a 320px thumbnail. 
                                                    //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                    //   - The user can click on the thumbnail to see the larger resolution image.
                                                    fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                    thisIsAThumbnailFile = true;
                                                }

                                                //
                                                // Now we go through all the files we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Actual_Filename = files[i];
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                                    data[fileEntryIndex].Thumbnail = true;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: files[i],
                                                        Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                                        FoundSourceFile: false,
                                                        Thumbnail: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'THUMBNAIL_320px_PDF') {

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                // Formulate the filename we are searching for.
                                                var thumbnailSearchText = '_thumbnail_320px_pdf_' + '.png';
                                                var thisIsAThumbnailFile = false;
                                                if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                    // This file is a 320px thumbnail. 
                                                    //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                    //   - The user can click on the thumbnail to see the larger resolution image.
                                                    fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                    thisIsAThumbnailFile = true;
                                                }

                                                //
                                                // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Actual_Filename = files[i];
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension;
                                                    data[fileEntryIndex].Thumbnail = true;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: files[i],
                                                        Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-2 THUMBNAIL_320px fileExtension: ' + fileExtension,
                                                        FoundSourceFile: false,
                                                        Thumbnail: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'THUMBNAIL_video') {

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                // Formulate the filename we are searching for.
                                                var thumbnailSearchText = '_thumbnail_.png'; // 8-4-2024.
                                                var thisIsAThumbnailFile = false;
                                                if (files[i].indexOf(thumbnailSearchText) > -1) {
                                                    // This file is a 320px thumbnail. 
                                                    //   - This is the file we want to return... we always want to return the thumbnail, because it is small and this speeds up the system immenly. 
                                                    //   - The user can click on the thumbnail to see the larger resolution image.
                                                    fileEntry_Filename = files[i].split(thumbnailSearchText)[0];
                                                    thisIsAThumbnailFile = true;
                                                }

                                                //
                                                // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].Actual_Filename = files[i];
                                                    data[fileEntryIndex].tracking = 'changed xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension;
                                                    data[fileEntryIndex].Thumbnail = true;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: files[i],
                                                        Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-3 THUMBNAIL_video fileExtension: ' + fileExtension,
                                                        FoundSourceFile: false,
                                                        Thumbnail: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else if (fileType == 'FILE') {

                                                //
                                                //
                                                // WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023.
                                                //
                                                //

                                                var msg = 'In /_files/getlistofattachments_foremail. fileType: ' + fileType + '. THIS IS A WORK IN PROGRESS. WE DO NOT WANT TO BE RETURNING LARGE FILES, ONLY THUMBNAILS. 9-23-2023. xcx3994582.';
                                                var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.getlistofattachments_foremail()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                console.log('');
                                                console.log('****************************');
                                                console.log('****************************');
                                                console.log(msg);
                                                console.log('****************************');
                                                console.log('****************************');
                                                console.log('');

                                                // This is not a .metadata file.
                                                var fileEntry_Filename = files[i];

                                                //
                                                // Now we go through all the file we have to return to the user, and see if this entry exists already. If it does, update it, otherwise, add it.
                                                //
                                                var fileEntryAlreadyExists = false;
                                                var fileEntryIndex;
                                                for (var j = 0; j < data.length; j++) {

                                                    if (data[j].Display_Filename == fileEntry_Filename) {
                                                        fileEntryAlreadyExists = true;
                                                        fileEntryIndex = j;
                                                        break;
                                                    }
                                                }

                                                if (fileEntryAlreadyExists == true) {

                                                    data[fileEntryIndex].tracking = 'changed xcx21342-4 FILE fileExtension: ' + fileExtension;
                                                    data[fileEntryIndex].FoundSourceFile = true;

                                                } else {

                                                    var fileData = {
                                                        Display_Filename: files[i],
                                                        Actual_Filename: files[i],
                                                        Description: '',
                                                        Size: '',
                                                        Birthtime: '',
                                                        tracking: 'added xcx21342-4-4 FILE fileExtension: ' + fileExtension,
                                                        FoundSourceFile: true
                                                    };
                                                    data.push(fileData);

                                                }

                                            } else {

                                                var msg = 'Error in /_files/getlistofattachments_foremail. Unexpected value for fileType: ' + fileType;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.getlistofattachments_foremail()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                                console.log(msg);

                                                var result = {
                                                    status: 'ERROR',
                                                    message: msg
                                                }
                                                response.send(result);

                                            }

                                        }

                                        // Now we iterate through the data json and got rid of entries with FoundSourceFile = true.
                                        var validFiles = [];
                                        for (var i = 0; i < data.length; i++) {
                                            if (data[i].FoundSourceFile == true) {
                                                validFiles.push(data[i]);
                                            }
                                        }

                                        //
                                        // We are going to add a json property which is in lowercase, in order for us to do a proper alphabetical search.
                                        //
                                        for (var i = 0; i < validFiles.length; i++) {
                                            var x = validFiles[i].Display_Filename.toLowerCase();
                                            validFiles[i]["sortable_filename"] = x;
                                        }

                                        validFiles.sort(function (a, b) {
                                            if (a.sortable_filename < b.sortable_filename) { return -1; }
                                            if (a.sortable_filename > b.sortable_filename) { return 1; }
                                            return 0;
                                        });

                                        // This is just for the returned message in case we nee some troubleshooting data on the client side.
                                        var allActualFiles = [];
                                        for (var j = 0; j < files.length; j++) {
                                            allActualFiles.push(files[j]);
                                        }

                                        // We have iterated through all of the files, so now send the response.
                                        var result = {
                                            status: 'SUCCESS',
                                            message: 'We have iterated through all of the files, so now send the response. xcx23124-2 budgetRequestFolderPath: ' + budgetRequestFolderPath + ', allActualFiles: ' + JSON.stringify(allActualFiles),
                                            data: validFiles
                                        }
                                        response.send(result);

                                    }

                                }

                            } catch (e) {

                                var msg = 'Exception in /_files/getlistofattachments_foremail:3: ' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.getlistofattachments_foremail()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                console.log(msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                response.send(result);

                            }
                        });
                        //        }
                        //    } catch (e) {

                        //        var msg = 'Exception in /_files/getlistofattachments_foremail:2: ' + e.message + ', ' + e.stack;
                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        //        var source = 'start.js.getlistofattachments_foremail()';
                        //        var errorCode = null;
                        //        WriteToErrorLog(threatLevel, source, errorCode, msg);
                        //        console.log(msg);

                        //        var result = {
                        //            status: 'EXCEPTION',
                        //            message: msg
                        //        }
                        //        response.send(result);

                        //    }

                        //}).lean();

                    }

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /getlistofattachments_foremail().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./getlistofattachments_foremail: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getlistofattachments_foremail()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/getlistofattachments_foremail: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getlistofattachments_foremail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in /_files/getlistofattachments_foremail: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getlistofattachments_foremail()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);
        console.log(msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }

});





// NEW >>>>>>>>>>> 5-21-2023 <<<<<<<<<<<<<.
//
// Commented this out 11-3-2022 and replaced with /getlistofattachmentsforbudgetrequest(). NEW >>>>>>>>>>> 5-21-2023 <<<<<<<<<<<<<.
//
// NEW >>>>>>>>>>> 5-21-2023 <<<<<<<<<<<<<.
router.get('/_files/getprimaryimageforbudgetrequest_64bitString/:bwWorkflowAppId/:bwBudgetRequestId/:bwAuthorizationPasscode', function (request, response) {
    try {

        //var ip = request.headers['x-forwarded-for'] ||
        //    request.connection.remoteAddress ||
        //    request.socket.remoteAddress ||
        //    (request.connection.socket ? request.connection.socket.remoteAddress : null);
        //var ips = [];
        //for (var x = 0; x < ip.split(',').length; x++) {
        //    if (ip.split(',')[x].trim() == '127.0.0.1') {
        //        // do nothing
        //    } else {
        //        // add to array
        //        ips.push(ip.split(',')[x].trim());
        //    }
        //}
        //console.log('');
        //console.log('');
        //console.log('In /_files/getprimaryimageforbudgetrequest_64bitString(). ips: ' + ips);
        //console.log('');
        //console.log('');

        var passcode = 'dsaffsdhg980023497235kjl;gdfs98g734985ytgadfhjfgjkgdhkdgf3e5346t356j'; // This is an internally used code. The file services will only respond to this code from /_files/getprimaryimageforbudgetrequest_64bitString().
        var bwAuthorizationPasscode = request.params.bwAuthorizationPasscode;

        if (bwAuthorizationPasscode != passcode) {

            var result = {
                status: 'ERROR',
                message: 'The authorization passcode does not match. The code must match for the images to be generated.'
            }
            response.send(result);

        } else {

            var bwWorkflowAppId = request.params.bwWorkflowAppId;
            var bwBudgetRequestId = request.params.bwBudgetRequestId;

            console.log('In GET /_files/getprimaryimageforbudgetrequest_64bitString(' + bwBudgetRequestId + ').');

            // Reach out to the file system and find them!
            var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
            fs.readdir(budgetRequestFolderPath, function (err, files) {
                if (err) {

                    var result = {
                        status: 'ERROR',
                        message: err
                    }
                    response.send(result);

                } else {
                    // Formulate the result. We want to include the .metadata if it is present.
                    if (files.length > 0) {

                        console.log('In GET /getprimaryimageforbudgetrequest_64bitString(). files.length: ' + files.length);

                        var result = [];
                        //result = new Array();


                        for (var i = 0; i < files.length; i++) {



                            var extensionIndex = files[i].split('.').length - 1;
                            var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];
                            //var searchText = '_320px_.' + fileExtension;
                            var searchText = '_320px_.'; //jpg'; // + fileExtension;

                            console.log('In GET /getprimaryimageforbudgetrequest_64bitString(). files[' + i + ']: ' + files[i] + ', searchText: ' + searchText);

                            if (files[i].indexOf(searchText) > -1) { // This means it's a thumbnail. We only want to return thumbnails.

                                console.log('In GET /getprimaryimageforbudgetrequest_64bitString(). files[' + i + '] IS A THUMBNAIL, so send it!!!');

                                // 5-21-2023
                                var contents = fs.readFileSync(budgetRequestFolderPath + '/' + files[i], { encoding: 'base64' });

                                if (contents) {

                                    var fileData = {
                                        bwBudgetRequestId: bwBudgetRequestId,
                                        Filename: files[i],
                                        File64bit: 'data:image/png;base64,' + contents,
                                        Description: 'xcx21323423' //description
                                    };
                                    result.push(fileData);

                                }

                            }

                        }

                        // We have iterated through all of the files, so now send the response.
                        response.send(result);

                    } else {

                        var result = {
                            status: 'ERROR',
                            message: 'Error in /_files/getprimaryimageforbudgetrequest_64bitString(): no files'
                        }
                        response.send(result);

                    }
                }
            });
        }
    } catch (e) {

        var msg = 'Exception in /_files/getprimaryimageforbudgetrequest_64bitString: ' + e.message + ', ' + e.stack;
        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        var source = 'start.js.GET.getprimaryimageforbudgetrequest_64bitString/:budgetRequestId()';
        var errorCode = null;

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});






//
// Commented this out 11-3-2022 and replaced with /getlistofattachmentsforbudgetrequest().
//
//router.get('/_files/getprimaryimageforbudgetrequest/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
//    try {
//        var bwWorkflowAppId = request.params.bwWorkflowAppId;
//        var bwBudgetRequestId = request.params.bwBudgetRequestId;

//        console.log('In GET /_files/getprimaryimageforbudgetrequest(' + bwBudgetRequestId + ').');

//        BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
//            if (brfError) {

//                var msg = 'Error in GET /getprimaryimageforbudgetrequest. Error finding the budget request ' + bwBudgetRequestId + ': ' + brfError;
//                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                var source = 'start.js.GET.getprimaryimageforbudgetrequest()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg);

//                response.send(msg);

//            } else {

//                console.log('In GET /getprimaryimageforbudgetrequest:3');

//                // If the bwBudgetRequestId exists in the database, use the bwWorkflowAppId that is found there. Otherwise use the 
//                // one that was passes to this method.
//                if (brfResult.length > 0) {
//                    bwWorkflowAppId = brfResult[0].bwWorkflowAppId;
//                }

//                // Reach out to the file system and find them!
//                //var budgetRequestFolderPath = 'public/_files/' + bwTenantId + '/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
//                var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
//                fs.readdir(budgetRequestFolderPath, function (err, files) {
//                    if (err) {
//                        response.send(err);
//                    } else {
//                        // Formulate the result. We want to include the .metadata if it is present.
//                        if (files.length > 0) {
//                            var result = [];
//                            //result = new Array();
//                            var metadataFileCounter = 0;
//                            for (var i = 0; i < files.length; i++) {

//                                // Make sure we filter out the .metadata files!!! We don't want these returned to the user.
//                                // Also, we want to filter out the large files, we only want to send the _320px_ ones. 10-27-2022.
//                                if (files[i].indexOf('.metadata') > 0) {

//                                    // This file is a file.metadata file.
//                                    console.log('This file is a file.metadata file: ' + files[i]);
//                                    metadataFileCounter += 1;

//                                } else {

//                                    //
//                                    // Now check if this is a _320px_ file or not... only display 320px ones.
//                                    //
//                                    var extensionIndex = files[i].split('.').length - 1;
//                                    var fileExtension = files[i].toLowerCase().split('.')[extensionIndex];
//                                    var displayThisImage = true;
//                                    if (fileExtension == 'png' || fileExtension == 'jpg' || fileExtension == 'jpeg' || fileExtension == 'jfif' || fileExtension == 'webp' || fileExtension == 'gif') {
//                                        var searchText = '_320px_.' + fileExtension;
//                                        if (!(files[i].indexOf(searchText) > -1)) {
//                                            displayThisImage = false;
//                                        }
//                                    }
//                                    //
//                                    //

//                                    if (displayThisImage == true) {
//                                        // This file is one we want to allow the user to acess.
//                                        //var filename = files[i];

//                                        // Check if there is a .metadata file that exists.
//                                        var metadata_filename = files[i] + '.metadata'
//                                        if (files.indexOf(metadata_filename) > -1) {
//                                            console.log('a metadata file exists');
//                                            // Check if the file.metadata file is present. If so, get the description from it!
//                                            var metadataFilename = budgetRequestFolderPath + '/' + files[i] + '.metadata';
//                                            console.log('ATTEMPTING TO READ METADATA FROM: ' + metadataFilename);

//                                            var description = '';
//                                            var data = fs.readFileSync(metadataFilename).toString();

//                                            console.log('data: ' + data);

//                                            var firstPass = data.split('<description>')[1];

//                                            console.log('firstPass: ' + firstPass);

//                                            description = firstPass.split('</description>')[0];

//                                            console.log('filename (test location 1): ' + files[i]);
//                                            console.log('description (test location 1): ' + description);
//                                            // Add the file name and description to the result array! 
//                                            var fileData = {
//                                                bwBudgetRequestId: bwBudgetRequestId,
//                                                Filename: files[i],
//                                                Description: description
//                                            };
//                                            result.push(fileData);

//                                            // Check if we are ready to send the results! Note how we accomodate the .metadata files by using the counter variable.
//                                            if ((result.length + metadataFileCounter) == files.length) {
//                                                response.send(result);
//                                            }

//                                            // ASYNC and doesn't pass the filename properly...not sure how to fix this. Need to pass the filename in the callback. It may be better to use the Synchronous approach above actually, for the reason async may launch too many processes.
//                                            //fs.readFile(metadataFilename, function read(readErr, readData) {
//                                            //    // We have to pull the filename out here because the fs.readFile goes out of scope and we can't pass a variable past it due to the async nature of it.
//                                            //    //var tmpStart = Number(metadataFilename.lastIndexOf('/')) + 1;
//                                            //    //var tmpEnd = metadataFilename.indexOf('.metadata');
//                                            //    //var filename = metadataFilename; //metadataFilename.substring(tmpStart, tmpEnd);
//                                            //    //
//                                            //    var description = '';
//                                            //    if (readErr) {
//                                            //        response.send('Read error in /_files/getprimaryimageforbudgetrequest(): ' + readErr);
//                                            //    } else {
//                                            //        var data = readData.toString();
//                                            //        var firstPass = data.split('<description>')[1];
//                                            //        description = firstPass.split('</description>')[0];
//                                            //    }
//                                            //    console.log('filename (test location 1): ' + filename);
//                                            //    console.log('description (test location 1): ' + description);
//                                            //    // Add the file name and description to the result array! 
//                                            //    var fileData = {
//                                            //        Filename: filename,
//                                            //        Description: description
//                                            //    };
//                                            //    result.push(fileData);

//                                            //    // Check if we are ready to send the results! Note how we accomodate the .metadata files by using the counter variable.
//                                            //    if ((result.length + metadataFileCounter) == files.length) {
//                                            //        response.send(result);
//                                            //    }

//                                            //});
//                                        } else {
//                                            console.log('There is no .metadata file for this file.');
//                                            // Add the file name and description to the result array! 
//                                            var fileData = {
//                                                bwBudgetRequestId: bwBudgetRequestId,
//                                                Filename: files[i],
//                                                Description: ''
//                                            };
//                                            result.push(fileData);

//                                            console.log('result.length: ' + result.length + ' metadataFileCounter: ' + metadataFileCounter + ' files.length: ' + files.length);
//                                            // Check if we are ready to send the results! Note how we accomodate the .metadata files by using the counter variable.
//                                            //if ((result.length + metadataFileCounter) == files.length) {
//                                            //    response.send(result);
//                                            //}

//                                        }
//                                    }

//                                }
//                            }


//                            // We have iterated through all of the files, so now send the response.
//                            response.send(result);


//                        } else {
//                            response.send('Error in /_files/getprimaryimageforbudgetrequest(): no files');
//                        }
//                    }
//                });
//            }
//        });
//    } catch (e) {
//        var msg = 'Error in /_files/getprimaryimageforbudgetrequest: ' + e.message;
//        // Exception section:
//        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//        var source = 'start.js.GET.getprimaryimageforbudgetrequest/:budgetRequestId()';
//        var errorCode = null;
//        var message = msg;
//        //WriteToErrorLog(threatLevel, source, errorCode, message);
//        //
//        //var results = { message: msg };
//        response.send(msg);
//    }
//});







// This method is only called from the New Request screen. The reason being that the bwBudgetRequestId does not yet exist in the database, so we accept what has been 
// passed from the client side without looking it up in the database.
//
//router.get('/_files/getlistofattachmentsfornewbudgetrequest/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {

//    try {
//        console.log('In GET /_files/getlistofattachmentsfornewbudgetrequest()');

//        var bwWorkflowAppId = request.params.bwWorkflowAppId;
//        var bwBudgetRequestId = request.params.bwBudgetRequestId;

//        // Reach out to the file system and find them!
//        var budgetRequestFolderPath = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
//        fs.readdir(budgetRequestFolderPath, function (err, files) {
//            if (err) {
//                response.send(err);
//            } else {
//                // Formulate the result. We want to include the .metadata if it is present.
//                if (files.length > 0) {
//                    var result = [];
//                    result = new Array();
//                    var metadataFileCounter = 0;
//                    for (var i = 0; i < files.length; i++) {
//                        // Make sure we filter out the .metadata files!!! We don't want these returned to the user.

//                        console.log('file: ' + files[i] + '  indexOf: ' + files[i].indexOf('.metadata'));

//                        if (files[i].indexOf('.metadata') > 0) {
//                            // This file is a file.metadata file.
//                            console.log('This file is a file.metadata file: ' + files[i]);
//                            metadataFileCounter += 1;
//                        } else {
//                            // This file is one we want to allow the user to acess.
//                            //var filename = files[i];

//                            // Check if there is a .metadata file that exists.
//                            var metadata_filename = files[i] + '.metadata'
//                            if (files.indexOf(metadata_filename) > -1) {
//                                console.log('a metadata file exists');
//                                // Check if the file.metadata file is present. If so, get the description from it!
//                                var metadataFilename = budgetRequestFolderPath + '/' + files[i] + '.metadata';
//                                console.log('ATTEMPTING TO READ METADATA FROM: ' + metadataFilename);

//                                var description = '';
//                                var data = fs.readFileSync(metadataFilename).toString();

//                                console.log('data: ' + data);

//                                var firstPass = data.split('<description>')[1];

//                                console.log('firstPass: ' + firstPass);

//                                description = firstPass.split('</description>')[0];

//                                console.log('filename (test location 1): ' + files[i]);
//                                console.log('description (test location 1): ' + description);
//                                // Add the file name and description to the result array! 
//                                var fileData = {
//                                    Filename: files[i],
//                                    Description: description
//                                };
//                                result.push(fileData);

//                                // Check if we are ready to send the results! Note how we accomodate the .metadata files by using the counter variable.
//                                if ((result.length + metadataFileCounter) == files.length) {
//                                    response.send(result);
//                                }

//                            } else {
//                                console.log('There is no .metadata file for this file.');
//                                // Add the file name and description to the result array! 
//                                var fileData = {
//                                    Filename: files[i],
//                                    Description: ''
//                                };
//                                result.push(fileData);

//                                console.log('result.length: ' + result.length + ' metadataFileCounter: ' + metadataFileCounter + ' files.length: ' + files.length);
//                            }
//                        }
//                    }

//                    // We have iterated through all of the files, so now send the response.
//                    response.send(result);

//                } else {
//                    response.send('Error in /_files/getlistofattachmentsfornewbudgetrequest(): no files');
//                }
//            }
//        });
//    } catch (e) {
//        var msg = 'Error in /_files/getlistofattachmentsfornewbudgetrequest: ' + e.message;
//        // Exception section:
//        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//        var source = 'start.js.GET.getlistofattachmentsfornewbudgetrequest/:budgetRequestId()';
//        var errorCode = null;
//        var message = msg;
//        //WriteToErrorLog(threatLevel, source, errorCode, message);
//        //
//        //var results = { message: msg };
//        response.send(msg);
//    }
//});

router.get('/_files/getlistofbarcodeattachmentsforbudgetrequest/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
    // Return the logonProvider: facebook, google, microsoft, linkedin.
    try {
        console.log('In GET /_files/getlistofbarcodeattachmentsforbudgetrequest()');
        //var bwTenantId = request.params.bwTenantId;
        var bwWorkflowAppId = request.params.bwWorkflowAppId;
        var bwBudgetRequestId = request.params.bwBudgetRequestId;
        // Reach out to the file system and find them!
        //var budgetRequestFolderPath = 'public/_files/_barcodes/' + bwTenantId + '/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        var budgetRequestFolderPath = rootFilePath + '_barcodes/' + bwWorkflowAppId + '/' + bwBudgetRequestId; //'public/_files/_barcodes/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
        fs.readdir(budgetRequestFolderPath, function (err, files) {
            if (err) {
                response.send(err);
            } else {
                response.send(files);
            }
        });
    } catch (e) {
        var msg = 'Error in /getlistofbarcodeattachmentsforbudgetrequest: ' + e.message;
        // Exception section:
        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        var source = 'start.js.GET.getlistofbarcodeattachmentsforbudgetrequest/:budgetRequestId()';
        var errorCode = null;
        var message = msg;
        //WriteToErrorLog(threatLevel, source, errorCode, message);
        //
        //var results = { message: msg };
        response.send(msg);
    }
});

router.post('/_files/removeattachment', function (request, response) {
    try {
        console.log('In start.js./removeattachment().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /removeattachment().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    //var bwTenantId = request.body.bwTenantId;
                    //var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    var _Filename = request.body.Filename;


                    console.log('');
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('>>>>>>>>>>>>>>>>> deleting _Filename: ' + _Filename);
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('');


                    BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
                        if (brfError) {

                            var msg = 'Error in POST /removeattachment. Error finding the budget request ' + bwBudgetRequestId + ': ' + brfError;
                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST.removeattachment()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            response.send(msg);

                        } else {

                            console.log('In POST /removeattachment:3');
                            if (!(brfResult && brfResult[0] && brfResult[0].bwWorkflowAppId)) {

                                // 1-11-2022
                                //
                                // This means we couldn't find the budget request. This may mean it is a new request which hasn't been submitted yet?.. hmmmm.. In any case, returning an intelligent message here.
                                //
                                var msg = 'Could not find this request in BwBudgetRequest. bwBudgetRequestId: ' + bwBudgetRequestId;
                                console.log(msg);
                                response.send(msg);

                            } else {

                                var bwWorkflowAppId = brfResult[0].bwWorkflowAppId;

                                var _filePath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + _Filename;


                                console.log('');
                                console.log('>>>>>>>>>>>>>>>>>');
                                console.log('>>>>>>>>>>>>>>>>> deleting file: ' + _filePath);
                                console.log('>>>>>>>>>>>>>>>>>');
                                console.log('');


                                fs.unlink(_filePath, function (err) {
                                    if (err) {

                                        if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                            var msg = 'Error deleting file xcx11223-1: ' + _filePath + '. Error: ' + err;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        }

                                    } else {

                                        var msg = 'Deleted file xcx11223-1: ' + _filePath + '.';
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.POST.removeattachment().unlink';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    }
                                });

                                var _filePath2 = _filePath + '.metadata';

                                fs.unlink(_filePath2, function (err) {
                                    if (err) {

                                        if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                            var msg = 'Error deleting file xcx11223-2: ' + _filePath2 + '. Error: ' + err;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        }

                                    } else {

                                        var msg = 'Deleted file xcx11223-2: ' + _filePath2 + '.';
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.POST.removeattachment().unlink';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    }
                                });

                                var _filePath3 = _filePath + '_thumbnail_.png'; // 8-4-2024.

                                fs.unlink(_filePath3, function (err) {
                                    if (err) {

                                        if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                            var msg = 'Error deleting file xcx11223-3: ' + _filePath3 + '. Error: ' + err;
                                            console.log(msg);
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        }

                                    } else {

                                        var msg = 'Deleted file xcx11223-2-22: ' + _filePath3 + '.';
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.POST.removeattachment().unlink';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    }
                                });

                                //
                                // Now check if there is a _320px_ and _640x480px_ file or not. // 11-28-2023.
                                //
                                var _filePath4, _filePath5;
                                var extensionIndex = _Filename.split('.').length - 1;
                                var fileExtension = _Filename.toLowerCase().split('.')[extensionIndex];
                                var deleteThisFile = false;
                                if (fileExtension == 'png' || fileExtension == 'jpg' || fileExtension == 'jpeg' || fileExtension == 'jfif' || fileExtension == 'webp' || fileExtension == 'gif') {
                                    _filePath4 = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + _Filename + '_320px_.' + fileExtension;
                                    _filePath5 = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + _Filename + '_640x480px_.' + fileExtension;
                                    deleteThisFile = true;
                                }
                                //
                                //

                                if (deleteThisFile == true) {
                                    fs.unlink(_filePath4, function (err) {
                                        if (err) {

                                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                                var msg = 'Error deleting file xcx11223-4: ' + _filePath4 + '. Error: ' + err;
                                                console.log(msg);
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.POST.removeattachment().unlink';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                            }

                                        } else {

                                            var msg = 'Deleted file xcx11223-2-223: ' + _filePath4 + '.';
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        }
                                    });

                                    fs.unlink(_filePath5, function (err) {
                                        if (err) {

                                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                                var msg = 'Error deleting file xcx11223-4-2: ' + _filePath5 + '. Error: ' + err;
                                                console.log(msg);
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.POST.removeattachment().unlink';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                                            }

                                        } else {

                                            var msg = 'Deleted file xcx11223-2-2234: ' + _filePath5 + '.';
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        }
                                    });
                                }


                                //
                                // Now check if there is a "_thumbnail_320px_pdf_.png" file or not. <<<< PDF file thumbnail
                                //
                                var _filePath6 = _filePath + '_thumbnail_320px_pdf_.png';

                                fs.unlink(_filePath6, function (err) {
                                    if (err) {

                                        if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                            var msg = 'Error deleting file xcx11223-5: ' + _filePath6 + '. Error: ' + err;
                                            console.log(msg);
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.POST.removeattachment().unlink';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                        }

                                    } else {

                                        var msg = 'Deleted file xcx11223-2-22345: ' + _filePath6 + '.';
                                        var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.POST.removeattachment().unlink';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    }
                                });

                                console.log('This file was deleted: ' + _filePath);
                                response.send('The file was deleted.');

                            }
                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /removeattachment().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./removeattachment:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./removeattachment()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/removeattachment:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./removeattachment()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.removeattachment(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.removeattachment()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});




router.post('/_files/removeattachment_foremail', function (request, response) {
    try {
        console.log('In start.js./removeattachment_foremail().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /removeattachment_foremail().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    //var bwTenantId = request.body.bwTenantId;
                    //var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    //var bwBudgetRequestId = request.body.bwBudgetRequestId;

                    //var bwWorkflowAppId = bwWorkflowAppId_LoggedIn;
                    var bwParticipantId = request.body.bwParticipantId;
                    var bwDraftEmailId = request.body.bwDraftEmailId;

                    var _Filename = request.body.Filename;

                    var msg = 'In removeattachment_foremail(). bwParticipantId: ' + bwParticipantId + ', bwDraftEmailId: ' + bwDraftEmailId + ', _Filename: ' + _Filename;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.removeattachment_foremail()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    console.log('');
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('>>>>>>>>>>>>>>>>> deleting _Filename: ' + _Filename);
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('');

                    var _filePath = rootFilePath_email + bwParticipantId + '/' + bwDraftEmailId + '/' + _Filename;


                    console.log('');
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('>>>>>>>>>>>>>>>>> deleting file: ' + _filePath);
                    console.log('>>>>>>>>>>>>>>>>>');
                    console.log('');


                    fs.unlink(_filePath, function (err) {
                        if (err) {

                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                var msg = 'Error deleting file xcx11223-1: ' + _filePath + '. Error: ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                            }

                        } else {

                            var msg = 'Deleted file xcx11223-1: ' + _filePath + '.';
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST.removeattachment().unlink';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        }
                    });

                    var _filePath2 = _filePath + '.metadata';

                    fs.unlink(_filePath2, function (err) {
                        if (err) {

                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                var msg = 'Error deleting file xcx11223-2: ' + _filePath2 + '. Error: ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                            }

                        } else {

                            var msg = 'Deleted file xcx11223-2: ' + _filePath2 + '.';
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST.removeattachment().unlink';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        }
                    });

                    var _filePath3 = _filePath + '_thumbnail_.png'; // 8-4-2024.

                    fs.unlink(_filePath3, function (err) {
                        if (err) {

                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                var msg = 'Error deleting file xcx11223-3: ' + _filePath3 + '. Error: ' + err;
                                console.log(msg);
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                            }

                        } else {

                            var msg = 'Deleted file xcx11223-2-22: ' + _filePath3 + '.';
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST.removeattachment().unlink';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        }
                    });

                    //
                    // Now check if there is a _320px_ and _640x480px_ file or not. // 11-28-2023.
                    //
                    var _filePath4, _filePath5;
                    var extensionIndex = _Filename.split('.').length - 1;
                    var fileExtension = _Filename.toLowerCase().split('.')[extensionIndex];
                    var deleteThisFile = false;
                    if (fileExtension == 'png' || fileExtension == 'jpg' || fileExtension == 'jpeg' || fileExtension == 'jfif' || fileExtension == 'webp' || fileExtension == 'gif') {
                        _filePath4 = rootFilePath_email + bwParticipantId + '/' + bwDraftEmailId + '/' + _Filename + '_320px_.' + fileExtension;
                        _filePath5 = rootFilePath_email + bwParticipantId + '/' + bwDraftEmailId + '/' + _Filename + '_640x480px_.' + fileExtension;
                        deleteThisFile = true;
                    }
                    //
                    //

                    if (deleteThisFile == true) {
                        fs.unlink(_filePath4, function (err) {
                            if (err) {

                                if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                    var msg = 'Error deleting file xcx11223-4: ' + _filePath4 + '. Error: ' + err;
                                    console.log(msg);
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.POST.removeattachment().unlink';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);
                                }

                            } else {

                                var msg = 'Deleted file xcx11223-2-223: ' + _filePath4 + '.';
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                            }
                        });

                        fs.unlink(_filePath5, function (err) {
                            if (err) {

                                if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                    var msg = 'Error deleting file xcx11223-4-2: ' + _filePath5 + '. Error: ' + err;
                                    console.log(msg);
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.POST.removeattachment().unlink';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);
                                }

                            } else {

                                var msg = 'Deleted file xcx11223-2-2234: ' + _filePath5 + '.';
                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                            }
                        });
                    }


                    //
                    // Now check if there is a "_thumbnail_320px_pdf_.png" file or not. <<<< PDF file thumbnail
                    //
                    var _filePath6 = _filePath + '_thumbnail_320px_pdf_.png';

                    fs.unlink(_filePath6, function (err) {
                        if (err) {

                            if (!(String(err).indexOf('ENOENT: no such file or directory') > -1)) {
                                var msg = 'Error deleting file xcx11223-5: ' + _filePath6 + '. Error: ' + err;
                                console.log(msg);
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.POST.removeattachment().unlink';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);
                            }

                        } else {

                            var msg = 'Deleted file xcx11223-2-22345: ' + _filePath6 + '.';
                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.POST.removeattachment().unlink';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                        }
                    });

                    console.log('This file was deleted: ' + _filePath);
                    response.send('The file was deleted.');

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /removeattachment_foremail().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./removeattachment_foremail:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./removeattachment_foremail()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/removeattachment_foremail:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./removeattachment_foremail()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.removeattachment_foremail(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.removeattachment_foremail()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});




router.get('/_files/download/:bwParticipantId_LoggedIn/:bwActiveStateIdentifier/:bwWorkflowAppId_LoggedIn/:bwWorkflowAppId/:bwBudgetRequestId/:filename', function (request, response) { // 12-26-2023.
    try {
        console.log('In start.js.download().');
        // how to trigger a file download in javascript

        var bwParticipantId_LoggedIn = request.params.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.params.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.params.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /download().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.params.bwWorkflowAppId;
                    var bwBudgetRequestId = request.params.bwBudgetRequestId;
                    var filename = request.params.filename;

                    var customFilename = filename;
                    var filePath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename; //'public/_files/' + bwWorkflowAppId;

                    var msg = 'In start.js.download(). Preparing to call response.download(). customFilename: ' + customFilename + ', filePath: ' + filePath;
                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.download()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                    response.download(filePath, customFilename, function (err) {

                        var result = {
                            status: 'ERROR',
                            message: 'ERROR'
                        }
                        response.send(result);

                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /download().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.download():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                var source = 'start.js.download()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.download():2: ' + e;
            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
            var source = 'start.js.download()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.download(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
        var source = 'start.js.download()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});





function SCP_EnsureThatMediaFileConversionFoldersExist(client, serverIp, bwWorkflowAppId, bwBudgetRequestId) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.SCP_EnsureThatMediaFileConversionFoldersExist().');

            //
            // Using SCP, make sure all of the folders have been created: /home/todd/mediafileconversions, /home/todd/mediafileconversions/bwWorkflowAppId, /home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId
            //

            client.exists('documents/__bwFFMPEG/public/mediafileconversions')
                .then(results => {
                    if (!results) {

                        // The "mediafileconversions" folder does not exist, so creating it.
                        var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions';
                        client.mkdir(mkdirFolder)
                            .then(response => {

                                client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId)
                                    .then(results => {
                                        if (!results) {

                                            // The "mediafileconversions/bwWorkflowAppId" folder does not exist, so creating it.
                                            var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId;
                                            client.mkdir(mkdirFolder)
                                                .then(response => {

                                                    client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId)
                                                        .then(results => {
                                                            if (!results) {

                                                                // The "mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder does not exist, so creating it.
                                                                var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                                client.mkdir(mkdirFolder)
                                                                    .then(response => {

                                                                        var result = {
                                                                            status: 'SUCCESS',
                                                                            message: 'SUCCESS',
                                                                            client: client
                                                                        }

                                                                        resolve(result);

                                                                    })
                                                                    .catch(error => {

                                                                        var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                                        console.log(msg)

                                                                        var result = {
                                                                            status: 'EXCEPTION',
                                                                            message: msg
                                                                        }
                                                                        reject(result);

                                                                    });

                                                            } else {

                                                                // The "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder already exists. 
                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: 'SUCCESS',
                                                                    client: client
                                                                }

                                                                resolve(result);

                                                            }

                                                        })
                                                        .catch(error => {

                                                            var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                            console.log(msg)

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            reject(result);

                                                        })

                                                })
                                                .catch(error => {

                                                    var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId" on server ' + serverIp + ': ' + error;
                                                    console.log(msg)

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                });

                                        } else {

                                            // The "/home/todd/mediafileconversions/bwWorkflowAppId" folder already exists. Now check for the bwWorkflowAppId/bwBudgetRequestId folder.
                                            client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId)
                                                .then(results => {
                                                    if (!results) {

                                                        // The "mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder does not exist, so creating it.
                                                        var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                        client.mkdir(mkdirFolder)
                                                            .then(response => {

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: 'SUCCESS',
                                                                    client: client
                                                                }

                                                                resolve(result);

                                                            })
                                                            .catch(error => {

                                                                var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                                console.log(msg)

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                reject(result);

                                                            });

                                                    } else {

                                                        // The "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder already exists. 
                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: 'SUCCESS',
                                                            client: client
                                                        }

                                                        resolve(result);

                                                    }

                                                })
                                                .catch(error => {

                                                    var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                    console.log(msg)

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                })

                                        }

                                    })
                                    .catch(error => {

                                        var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId" on server ' + serverIp + ': ' + error;
                                        console.log(msg)

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        reject(result);

                                    })

                            })
                            .catch(error => {

                                var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions" on server ' + serverIp + ': ' + error;
                                console.log(msg)

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            });

                    } else {

                        // The "/home/todd/mediafileconversions" folder already exists. Now check for the bwWorkflowAppId folder.

                        client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId)
                            .then(results => {
                                if (!results) {

                                    // The "mediafileconversions/bwWorkflowAppId" folder does not exist, so creating it.
                                    var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId;
                                    client.mkdir(mkdirFolder)
                                        .then(response => {

                                            client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId)
                                                .then(results => {
                                                    if (!results) {

                                                        // The "mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder does not exist, so creating it.
                                                        var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                        client.mkdir(mkdirFolder)
                                                            .then(response => {

                                                                var result = {
                                                                    status: 'SUCCESS',
                                                                    message: 'SUCCESS',
                                                                    client: client
                                                                }

                                                                resolve(result);

                                                            })
                                                            .catch(error => {

                                                                var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                                console.log(msg)

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg
                                                                }
                                                                reject(result);

                                                            });

                                                    } else {

                                                        // The "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder already exists. 
                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: 'SUCCESS',
                                                            client: client
                                                        }

                                                        resolve(result);

                                                    }

                                                })
                                                .catch(error => {

                                                    var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                    console.log(msg)

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    reject(result);

                                                })

                                        })
                                        .catch(error => {

                                            var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId" on server ' + serverIp + ': ' + error;
                                            console.log(msg)

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        });

                                } else {

                                    // The "/home/todd/mediafileconversions/bwWorkflowAppId" folder already exists. Now check for the bwWorkflowAppId/bwBudgetRequestId folder.

                                    client.exists('documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId)
                                        .then(results => {
                                            if (!results) {

                                                // The "mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder does not exist, so creating it.
                                                var mkdirFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                client.mkdir(mkdirFolder)
                                                    .then(response => {

                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: 'SUCCESS',
                                                            client: client
                                                        }

                                                        resolve(result);

                                                    })
                                                    .catch(error => {

                                                        var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.mkdir for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                                        console.log(msg)

                                                        var result = {
                                                            status: 'EXCEPTION',
                                                            message: msg
                                                        }
                                                        reject(result);

                                                    });

                                            } else {

                                                // The "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" folder already exists.

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: 'SUCCESS',
                                                    client: client
                                                }

                                                resolve(result);

                                            }

                                        })
                                        .catch(error => {

                                            var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId" on server ' + serverIp + ': ' + error;
                                            console.log(msg)

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        })

                                }

                            })
                            .catch(error => {

                                var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions/bwWorkflowAppId" on server ' + serverIp + ': ' + error;
                                console.log(msg)

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            })

                    }

                })
                .catch(error => {

                    var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions" on server ' + serverIp + ': ' + error;
                    console.log(msg)

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                });

        } catch (e) {

            var msg = 'Exception in start.js.SCP_EnsureThatMediaFileConversionFoldersExist(). Error calling SCP.exists for folder "/home/todd/mediafileconversions" on server ' + serverIp + ': ' + error;
            console.log(msg)

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}

function SCP_GetTheMediaFileConversionMetadata(client, serverIp, bwWorkflowAppId, bwBudgetRequestId, filename) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('In start.js.SCP_GetTheMediaFileConversionMetadata().');

            //
            // Using SCP, make sure all of the folders have been created: /home/todd/mediafileconversions, /home/todd/mediafileconversions/bwWorkflowAppId, /home/todd/mediafileconversions/bwWorkflowAppId/bwBudgetRequestId
            //

            var folder1 = 'documents/__bwFFMPEG/public/mediafileconversions';
            var folder2 = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId;
            var folder3 = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

            client.exists(folder1)
                .then(results => {
                    if (!results) {

                        var result = {
                            status: 'SUCCESS',
                            message: 'FOLDER_NOT_FOUND',
                            Folder: folder1
                        }

                        resolve(result);

                    } else {

                        client.exists(folder2)
                            .then(results => {
                                if (!results) {

                                    var result = {
                                        status: 'SUCCESS',
                                        message: 'FOLDER_NOT_FOUND',
                                        Folder: folder2
                                    }

                                    resolve(result);

                                } else {

                                    client.exists(folder3)
                                        .then(results => {
                                            try {
                                                if (!results) {

                                                    var result = {
                                                        status: 'SUCCESS',
                                                        message: 'FOLDER_NOT_FOUND',
                                                        Folder: folder3
                                                    }

                                                    resolve(result);

                                                } else {

                                                    var tempFolderPath1 = 'public/tempmediafileconversions';
                                                    var tempFolderPath2 = 'public/tempmediafileconversions/' + bwWorkflowAppId;
                                                    var tempFolderPath3 = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

                                                    fs.mkdir(tempFolderPath1, function (err) {
                                                        try {
                                                            if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                                                var msg = 'Error creating folder ' + tempFolderPath1 + ': ' + err;

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                fs.mkdir(tempFolderPath2, function (err) {
                                                                    try {
                                                                        if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                                                            var msg = 'Error creating folder ' + tempFolderPath2 + ': ' + err;

                                                                            var result = {
                                                                                status: 'ERROR',
                                                                                message: msg
                                                                            }
                                                                            response.send(result);

                                                                        } else {

                                                                            fs.mkdir(tempFolderPath3, function (err) {
                                                                                try {
                                                                                    if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                                                                        var msg = 'Error creating folder ' + tempFolderPath3 + ': ' + err;

                                                                                        var result = {
                                                                                            status: 'ERROR',
                                                                                            message: msg
                                                                                        }
                                                                                        response.send(result);

                                                                                    } else {

                                                                                        //
                                                                                        // NOW WE ARE CERTAIN THE FOLDER EXISTS. CONTINUE...
                                                                                        //

                                                                                        var metadataFilePath = folder3 + '/' + filename + '.metadata';

                                                                                        var msg = 'In start.js.SCP_GetTheMediaFileConversionMetadata(). STARTING TO DOWNLOAD FILE "' + metadataFilePath + '" from server ' + serverIp;
                                                                                        console.log('');
                                                                                        console.log('***************');
                                                                                        console.log(msg)
                                                                                        console.log('***************');
                                                                                        console.log('');

                                                                                        // LOCAL>> var rootFilePath = 'public/_files/';

                                                                                        // PUT THE .metadata FILE HERE UNTIL WE CAN PARSE IT INTO THE OTHER ONE FOR bwAttachments.js widget to read...
                                                                                        var destinationFolder = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename + '.metadata';

                                                                                        client.downloadFile(metadataFilePath, destinationFolder)
                                                                                            .then((results) => {

                                                                                                var result = {
                                                                                                    status: 'SUCCESS',
                                                                                                    message: 'SUCCESS',
                                                                                                    MetadataFilePath: destinationFolder,
                                                                                                    results: results
                                                                                                }

                                                                                                resolve(result);

                                                                                            })
                                                                                            .catch(error => {

                                                                                                var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():5. Error reading file "' + metadataFilePath + '" on server ' + serverIp + ': ' + error;
                                                                                                console.log(msg)

                                                                                                var result = {
                                                                                                    status: 'EXCEPTION',
                                                                                                    message: msg
                                                                                                }
                                                                                                reject(result);

                                                                                            })

                                                                                    }

                                                                                } catch (e) {

                                                                                    var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata(): ' + e.message + ', ' + e.stack;
                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.SCP_GetTheMediaFileConversionMetadata()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                                                    var result = {
                                                                                        status: 'EXCEPTION',
                                                                                        message: msg
                                                                                    }
                                                                                    response.send(result);

                                                                                }
                                                                            });

                                                                        }

                                                                    } catch (e) {

                                                                        var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata(): ' + e.message + ', ' + e.stack;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.SCP_GetTheMediaFileConversionMetadata()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                                        var result = {
                                                                            status: 'EXCEPTION',
                                                                            message: msg
                                                                        }
                                                                        response.send(result);

                                                                    }
                                                                });

                                                            }

                                                        } catch (e) {

                                                            var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata(): ' + e.message + ', ' + e.stack;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.SCP_GetTheMediaFileConversionMetadata()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                            var result = {
                                                                status: 'EXCEPTION',
                                                                message: msg
                                                            }
                                                            response.send(result);

                                                        }
                                                    });

                                                }
                                            } catch (e) {

                                                var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():5. Error calling SCP.downloadFile for file "' + metadataFilePath + '" on server ' + serverIp + ': ' + error;
                                                console.log(msg)

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                reject(result);

                                            }
                                        })
                                        .catch(error => {

                                            var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():4. Error calling SCP.exists for folder "' + folder3 + '" on server ' + serverIp + ': ' + error;
                                            console.log(msg)

                                            var result = {
                                                status: 'EXCEPTION',
                                                message: msg
                                            }
                                            reject(result);

                                        })

                                }

                            })
                            .catch(error => {

                                var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():3. Error calling SCP.exists for folder "' + folder2 + '" on server ' + serverIp + ': ' + error;
                                console.log(msg)

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }
                                reject(result);

                            })

                    }

                })
                .catch(error => {

                    var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():2. Error calling SCP.exists for folder "' + folder1 + '" on server ' + serverIp + ': ' + error;
                    console.log(msg)

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }
                    reject(result);

                });

        } catch (e) {

            var msg = 'Exception in start.js.SCP_GetTheMediaFileConversionMetadata():1. Server ' + serverIp + ': ' + error;
            console.log(msg)

            var result = {
                status: 'EXCEPTION',
                message: msg
            }
            reject(result);

        }
    });
}



router.post('/_files/ConvertMediaFileToBaselineShareable', function (request, response) {
    try {
        console.log('In start.js.ConvertMediaFileToBaselineShareable().');

        //      - this copies the file using Samba, to the FFMPEG /_fileconversion server.
        //      - when the file copy has been completed, it calls a web service on the FFMPEG server to launch the conversion process.
        //      - subsequently, the bwAttachments.js widget gets progress/status updates by calling /_fileconversion/GetMediaFileConversionProgress.

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /ConvertMediaFileToBaselineShareable(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId);
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var filename = request.body.Filename;

                    //var attachments = [{
                    //    Filename: filename
                    //}];

                    // Example attachments: [
                    //{"bwWorkflowAppId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","subfolder":"xx","bwBudgetRequestId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","filename":"Todd Hiltz Resume 2022.pdf"},
                    //{"bwWorkflowAppId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","subfolder":"xx","bwBudgetRequestId":"6e650ae7-81d0-48ab-86d1-1183d3126a18","filename":"VTS_03_1.mp4"}]

                    //
                    // Expect this data:
                    //var data = {
                    //    bwParticipantId_LoggedIn: participantId,
                    //    bwActiveStateIdentifier: activeStateIdentifier,
                    //    bwWorkflowAppId_LoggedIn: workflowAppId,

                    //    bwWorkflowAppId: workflowAppId,
                    //    bwBudgetRequestId: bwBudgetRequestId,
                    //    attachments: [{
                    //        Filename: 'xx'
                    //    }],

                    //    bwParticipantId: participantId,
                    //    bwParticipantFriendlyName: participantFriendlyName,
                    //    bwParticipantEmail: participantEmail
                    //};
                    //

                    // Step 1: Find the file.

                    // Step 2: Copy the file to the FFMPEG server.

                    // Note: Failures, etc. to be saved in the new "budgetrequest.metadata" file, which is stored on _files, in the folder for the related budget request.
                    //      - This is how bwAttachments.js will know what has happened. The message will be displayed in the widget, and remain until the user clicks the "x" to
                    //        acknowledge that they read the message, and want to delete it.

                    //var budgetrequest_metadata = {
                    //    FileConversions: [{
                    //        Status: [{
                    //            Timestamp: 23425326, // Javascript Date().
                    //            LastStatusCode: 'COPYING_FILE_TO_CONVERSION_SERVER', // 'COPYING_FILE_TO_CONVERSION_SERVER', 'SUCCESSFULLY_COPIED_FILE_TO_CONVERSION_SERVER', 'CONVERSION_IN_PROGRESS', 'CONVERSION_AND_FILE_COPY_TO_ORIGIN_COMPLETED'
                    //            Status: 'IN_PROGRESS', // IN_PROGRESS, SUCCESS, ERROR.
                    //            Progress: -1, // This is a number between 0 and 100. 100 means it is 100% complete. -1 means it doesn't apply/NA.
                    //            UserAcknowledgement: {
                    //                UserHasAcknowledged: false,
                    //                AcknowledgedBy_ParticipantId: xx,
                    //                AcknowledgedBy_ParticipantEmail: xx,
                    //                AcknowledgedBy_ParticipantFriendlyName: xx,
                    //            }
                    //        }]
                    //    }]
                    //}

                    // Step 3: Subsequently, the bwAttachments.js widget gets progress/status updates by calling /_fileconversion/GetMediaFileConversionProgress.
                    //      - If it gets a failure or an error making this web service call, it falls back to calling /_files/GetMediaFileConversionStatus in order to check the
                    //        status messages in budgetrequest.metadata file.
                    //


                    var tempFolderPath1 = 'public/tempmediafileconversions';
                    var tempFolderPath2 = 'public/tempmediafileconversions/' + bwWorkflowAppId;
                    var tempFolderPath3 = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

                    fs.mkdir(tempFolderPath1, function (err) {
                        try {
                            if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                var msg = 'Error creating folder ' + tempFolderPath1 + ': ' + err;

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                fs.mkdir(tempFolderPath2, function (err) {
                                    try {
                                        if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                            var msg = 'Error creating folder ' + tempFolderPath2 + ': ' + err;

                                            var result = {
                                                status: 'ERROR',
                                                message: msg
                                            }
                                            response.send(result);

                                        } else {

                                            fs.mkdir(tempFolderPath3, function (err) {
                                                try {
                                                    if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                                        var msg = 'Error creating folder ' + tempFolderPath3 + ': ' + err;

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    } else {

                                                        //
                                                        // Now we are certain that the folder exists. Now we need to delete it's contents and start fresh. this just ensures that nothing was left behind from last time.
                                                        //

                                                        fs.rmdir(tempFolderPath3, { recursive: true }, function (err) {
                                                            if (err) {

                                                                var msg = 'Error removing folder ' + tempFolderPath3 + ': ' + err;

                                                                var result = {
                                                                    status: 'ERROR',
                                                                    message: msg
                                                                }
                                                                response.send(result);

                                                            } else {

                                                                fs.mkdir(tempFolderPath3, function (err) {
                                                                    try {
                                                                        if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                                                            var msg = 'Error creating folder ' + tempFolderPath3 + ': ' + err;

                                                                            var result = {
                                                                                status: 'ERROR',
                                                                                message: msg
                                                                            }
                                                                            response.send(result);

                                                                        } else {

                                                                            // 4: Copy the attachments to the subfolder. destination file will be created or overwritten by default.
                                                                            var sourcePath = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                                            var destinationPath = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                                            var filenameArray = [];
                                                                            filenameArray.push(filename);
                                                                            filenameArray.push(filename + '.metadata');

                                                                            var msg = 'In start.js.ConvertMediaFileToBaselineShareable(). Copying these files to ' + destinationPath + ': filenameArray: ' + JSON.stringify(filenameArray);
                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                            bwCopyFiles(sourcePath, destinationPath, filenameArray).then(function () {
                                                                                console.log('');
                                                                                console.log('Completed bwCopyFiles() successfully. sourcePath: ' + sourcePath + ', destinationPath: ' + destinationPath + ', Files: ' + JSON.stringify(filenameArray));
                                                                                console.log('');

                                                                                //var serverIp = '192.168.1.19'; // .19 is the dell latitude..
                                                                                var serverIp = '192.168.1.8'; // .8 is the macbook.
                                                                                Scp({
                                                                                    host: serverIp, // 11-30-2023 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                                                    port: 22,
                                                                                    username: 'toddhiltz',
                                                                                    password: 'AmyTahiti1', // This folder is set to anonymous. UFW is configured to only allow this server access via SSH.
                                                                                    // privateKey: fs.readFileSync('./key.pem'),
                                                                                    // passphrase: 'your key passphrase',
                                                                                }).then(function (client) {

                                                                                    SCP_EnsureThatMediaFileConversionFoldersExist(client, serverIp, bwWorkflowAppId, bwBudgetRequestId).then(function (results) {
                                                                                        try {
                                                                                            //
                                                                                            // NOW THAT WE HAVE GOOD CONNECTIONS, Update the file .metadata file to include the status of the conversion process.
                                                                                            //
                                                                                            var fileConversionStatus = [{
                                                                                                status: 'UPLOADING_FILE_TO_CONVERSION_SERVER',
                                                                                                timestamp: new Date(),
                                                                                                message: 'The file is being uploaded to the media conversion server.'
                                                                                            }]

                                                                                            var metadataFilePath = sourcePath + '/' + filename + '.metadata';
                                                                                            var data = fs.readFileSync(metadataFilePath).toString();
                                                                                            var json = JSON.parse(data);
                                                                                            json["FileConversionStatus"] = fileConversionStatus;
                                                                                            var newMetaFileContent = JSON.stringify(json);

                                                                                            fs.writeFile(metadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                                                try {
                                                                                                    if (metaErr) {

                                                                                                        var msg = 'Error in start.js.ConvertMediaFileToBaselineShareable.fs.writeFile(): metadataFilePath: ' + metadataFilePath + ', error: ' + metaErr;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                        var result = {
                                                                                                            status: 'ERROR',
                                                                                                            message: msg
                                                                                                        }

                                                                                                        response.send(result);

                                                                                                    } else {

                                                                                                        var sourceFolder = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                                                                        var destinationFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId; // This is the share name.

                                                                                                        console.log('');
                                                                                                        console.log('USING SCP TO UPLOAD. sourceFolder: ' + sourceFolder + ', destinationFolder: ' + destinationFolder);
                                                                                                        console.log('');

                                                                                                        //
                                                                                                        // WE RESPOND TO THE CLIENT HERE BECAUSE IT MAY TAKE AWHILE AND WHY MAKE THEM WAIT. They can view the status in the request bwAttachments form widget.
                                                                                                        //
                                                                                                        var msg = 'In start.js.ConvertMediaFileToBaselineShareable.scp.uploadDir(). The file is being copied to server ' + serverIp + '.';
                                                                                                        console.log(msg);

                                                                                                        var result = {
                                                                                                            status: 'SUCCESS',
                                                                                                            message: msg
                                                                                                        }

                                                                                                        response.send(result);

                                                                                                        //
                                                                                                        // To the client this appears to be happening in the background.
                                                                                                        //
                                                                                                        client.uploadDir(sourceFolder, destinationFolder).then(function (results) {
                                                                                                            try {

                                                                                                                //
                                                                                                                // THE FILE HAS BEEN UPLOADED. Update the file .metadata file to include the status of the conversion process.
                                                                                                                //
                                                                                                                var fileConversionStatus = {
                                                                                                                    status: 'UPLOADED_FILE_TO_CONVERSION_SERVER',
                                                                                                                    timestamp: new Date(),
                                                                                                                    message: 'The file has been uploaded to the media conversion server. Conversion should begin shortly...'
                                                                                                                }

                                                                                                                var data = fs.readFileSync(metadataFilePath).toString();
                                                                                                                var json = JSON.parse(data);
                                                                                                                json["FileConversionStatus"] = fileConversionStatus;
                                                                                                                var newMetaFileContent = JSON.stringify(json);

                                                                                                                fs.writeFile(metadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                                                                    try {
                                                                                                                        if (metaErr) {

                                                                                                                            var msg = 'Error in start.js.ConvertMediaFileToBaselineShareable.fs.writeFile(): metadataFilePath: ' + metadataFilePath + ', error: ' + metaErr;
                                                                                                                            console.log(msg);

                                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                            var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                            var errorCode = null;
                                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        } else {

                                                                                                                            var msg = 'In start.js.ConvertMediaFileToBaselineShareable.scp.uploadDir(). File(s) were copied to media conversion server ' + serverIp + ' successfully.';
                                                                                                                            console.log(msg);

                                                                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                                            var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                            var errorCode = null;
                                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                            // Clean up.
                                                                                                                            try {
                                                                                                                                fs.rmdir(sourceFolder, { recursive: true }, function (err) { });
                                                                                                                            } catch (e) { }

                                                                                                                            client.close(); // Close the SCP connection.

                                                                                                                        }
                                                                                                                    } catch (e) {

                                                                                                                        var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable():9: ' + e.message + ', ' + e.stack;
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    }
                                                                                                                });

                                                                                                            } catch (e) {

                                                                                                                var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable.scp.uploadDir(): ' + e.status + ', ' + e.message;
                                                                                                                console.log(msg);

                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            }
                                                                                                        }).catch(function (e) {
                                                                                                            try {

                                                                                                                var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable(). Exception copying files to the server ' + serverIp + ': ' + JSON.stringify(e);
                                                                                                                console.log(msg);

                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                // Clean up.
                                                                                                                try {
                                                                                                                    fs.rmdir(sourceFolder, { recursive: true }, function (err) { });
                                                                                                                } catch (e) { }

                                                                                                                client.close(); // Close the SCP connection.

                                                                                                            } catch (e) {

                                                                                                                var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable.scp.uploadDir.catch(): ' + e.status + ', ' + e.message;
                                                                                                                console.log(msg);

                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            }
                                                                                                        });

                                                                                                    }
                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable():9: ' + e.message + ', ' + e.stack;
                                                                                                    console.log(msg);

                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        message: msg,
                                                                                                        status: 'EXCEPTION'
                                                                                                    }

                                                                                                    response.send(result);

                                                                                                }
                                                                                            });

                                                                                        } catch (e) {

                                                                                            var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable():9-2: ' + e.message + ', ' + e.stack;
                                                                                            console.log(msg);

                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                            var result = {
                                                                                                message: msg,
                                                                                                status: 'EXCEPTION'
                                                                                            }

                                                                                            response.send(result);

                                                                                        }

                                                                                    }).catch(function (results) {

                                                                                        client.close();

                                                                                        var msg = 'Exception in ConvertMediaFileToBaselineShareable(). Returned from SCP_EnsureThatMediaFileConversionFoldersExist():xcx2131234-1: ' + results.status + ', ' + results.message;
                                                                                        console.log(msg);

                                                                                        var result = {
                                                                                            status: 'EXCEPTION',
                                                                                            message: msg
                                                                                        }

                                                                                        response.send(result);

                                                                                    });

                                                                                }).catch(function (e) {

                                                                                    var msg = 'Exception in ConvertMediaFileToBaselineShareable(). Returned from SCP_EnsureThatMediaFileConversionFoldersExist(). FOLDERS EXIST..: ' + JSON.stringify(e);
                                                                                    console.log(msg);

                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                    var result = {
                                                                                        status: 'EXCEPTION',
                                                                                        message: msg
                                                                                    }
                                                                                    response.send(result);


                                                                                    client.close();

                                                                                });

                                                                            }).catch(function (e) {

                                                                                var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable.bwCopyFiles(): ' + JSON.stringify(e);
                                                                                console.log(msg);

                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                var result = {
                                                                                    status: 'EXCEPTION',
                                                                                    message: msg
                                                                                }
                                                                                response.send(result);

                                                                            });

                                                                        }

                                                                    } catch (e) {

                                                                        var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable():xcx5543: ' + e.message + ', ' + e.stack;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                                        var result = {
                                                                            status: 'EXCEPTION',
                                                                            message: msg
                                                                        }
                                                                        response.send(result);

                                                                    }

                                                                });

                                                            }
                                                        });

                                                    }

                                                } catch (e) {

                                                    var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable(): ' + e.message + ', ' + e.stack;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                                    var result = {
                                                        status: 'EXCEPTION',
                                                        message: msg
                                                    }
                                                    response.send(result);

                                                }
                                            });

                                        }

                                    } catch (e) {

                                        var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable(): ' + e.message + ', ' + e.stack;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    }
                                });

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable(): ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.ConvertMediaFileToBaselineShareable()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }
                    });















                    //// 1: Make sure a TEMP folder exists at public/tempemailattachmentsexternally
                    //var tempFolderPath = 'public/tempmediafileconversions/';
                    //var mkdirWorkflowAppId1 = function (tempFolderPath) {
                    //    try {
                    //        fs.mkdirSync(tempFolderPath);
                    //    } catch (e) {
                    //        if (e.code != 'EEXIST') throw e;
                    //    }
                    //}
                    //mkdirWorkflowAppId1(tempFolderPath);

                    //// 2: Make sure a BwWorkflowAppId folder exists at public/tempemailattachmentsexternally/bwWorkflowAppId
                    //var tempFolderPath2 = 'public/tempmediafileconversions/' + bwWorkflowAppId;
                    //var mkdirWorkflowAppId2 = function (tempFolderPath2) {
                    //    try {
                    //        fs.mkdirSync(tempFolderPath2);
                    //    } catch (e) {
                    //        if (e.code != 'EEXIST') throw e;
                    //    }
                    //}
                    //mkdirWorkflowAppId2(tempFolderPath2);

                    //// 3: Make sure the subfolder exists at public/tempemailattachmentsexternally/bwWorkflowAppId/bwBudgetRequestId
                    ////var subfolder = attachments[0].subfolder;
                    //var tempFolderPath3 = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                    //var mkdirWorkflowAppId3 = function (tempFolderPath3) {
                    //    try {
                    //        fs.mkdirSync(tempFolderPath3);
                    //    } catch (e) {
                    //        if (e.code != 'EEXIST') throw e;
                    //    }
                    //}
                    //mkdirWorkflowAppId3(tempFolderPath3);












                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /ConvertMediaFileToBaselineShareable().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./ConvertMediaFileToBaselineShareable: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./ConvertMediaFileToBaselineShareable()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/ConvertMediaFileToBaselineShareable: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./ConvertMediaFileToBaselineShareable()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.ConvertMediaFileToBaselineShareable(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.ConvertMediaFileToBaselineShareable()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});

router.post('/_files/GetStatusUpdateForMediaFileConversion', function (request, response) {
    try {
        console.log('In start.js.GetStatusUpdateForMediaFileConversion().');

        //
        // Currently this process is launched when a user requests it.
        //      - this uses SCP to get the .metadata file from the conversion server. // the bwAttachments.js widget gets progress/status updates by calling /_fileconversion/GetMediaFileConversionProgress.
        //

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /GetStatusUpdateForMediaFileConversion(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId);
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var filename = request.body.Filename;

                    var serverIp = '192.168.1.8'; // .8 is the macbook.
                    Scp({
                        host: serverIp, // 11-30-2023 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                        port: 22,
                        username: 'toddhiltz',
                        password: 'AmyTahiti1', // This folder is set to anonymous. UFW is configured to only allow this server access via SSH.
                        // privateKey: fs.readFileSync('./key.pem'),
                        // passphrase: 'your key passphrase',
                    }).then(function (client) {

                        SCP_GetTheMediaFileConversionMetadata(client, serverIp, bwWorkflowAppId, bwBudgetRequestId, filename).then(function (results) {
                            try {

                                //
                                // We have the .metadata file from the remote server. Now we have to parse it and include the latest status in the ACTUAL files' .metadata file.
                                //
                                // results = {
                                //    status: 'SUCCESS',
                                //    message: 'SUCCESS',
                                //    MetadataFilePath: destinationFolder, // 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename + '.metadata'
                                //    results: results
                                // }

                                client.close(); // Close SCP.

                                var metadataFilePath_Remote = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename + '.metadata';
                                var data = fs.readFileSync(metadataFilePath_Remote).toString();
                                var remoteServerJson;
                                try {
                                    remoteServerJson = JSON.parse(data);
                                } catch (e) {
                                    remoteServerJson = []; // This should only happen with old data.
                                }

                                var metadataFilePath_Local = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename + '.metadata';
                                var data2 = fs.readFileSync(metadataFilePath_Local).toString();
                                var localServerJson = JSON.parse(data2);

                                localServerJson["FileConversionStatus"] = remoteServerJson;

                                var metaFileContent = JSON.stringify(localServerJson);

                                fs.writeFile(metadataFilePath_Local, metaFileContent, 'binary', function (metaErr) {
                                    try {
                                        if (metaErr) {

                                            var msg = 'Error in start.js.GetStatusUpdateForMediaFileConversion.fs.writeFile(): metadataFilePath_Local: ' + metadataFilePath_Local + ', error: ' + metaErr;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'ERROR',
                                                message: msg,
                                                bwWorkflowAppId: bwWorkflowAppId,
                                                bwBudgetRequestId: bwBudgetRequestId
                                            }

                                            response.send(result);

                                        } else {

                                            var msg = 'In start.js.GetStatusUpdateForMediaFileConversion(). The metadata file was saved with update from remote media file conversions server. metadataFilePath_Local: ' + metadataFilePath_Local + ', remoteServerJson: ' + remoteServerJson + ', metaFileContent: ' + metaFileContent;
                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'SUCCESS',
                                                message: msg,
                                                bwWorkflowAppId: bwWorkflowAppId,
                                                bwBudgetRequestId: bwBudgetRequestId
                                            }

                                            response.send(result);

                                        }
                                    } catch (e) {

                                        var msg = 'Exception in start.js.GetStatusUpdateForMediaFileConversion(): ' + e.message + ', ' + e.stack;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg,
                                            bwWorkflowAppId: bwWorkflowAppId,
                                            bwBudgetRequestId: bwBudgetRequestId
                                        }

                                        response.send(result);

                                    }
                                });

                            } catch (e) {

                                var msg = 'Exception in start.js.GetStatusUpdateForMediaFileConversion():9-2: ' + e.message + ', ' + e.stack;
                                console.log(msg);

                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'EXCEPTION',
                                    message: msg
                                }

                                response.send(result);

                                client.close();

                            }

                        }).catch(function (results) {

                            var msg = 'Exception in GetStatusUpdateForMediaFileConversion(). Returned from SCP_GetTheMediaFileConversionMetadata():2: ' + results.status + ', ' + results.message;
                            console.log(msg);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }

                            response.send(result);

                            client.close();

                        });

                    }).catch(function (e) {

                        var msg = 'Exception in GetStatusUpdateForMediaFileConversion(). Returned from SCP_GetTheMediaFileConversionMetadata():1: ' + JSON.stringify(e);
                        console.log(msg);

                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg
                        }
                        response.send(result);

                        client.close();

                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /GetStatusUpdateForMediaFileConversion().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.GetStatusUpdateForMediaFileConversion: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./GetStatusUpdateForMediaFileConversion()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
                console.log(msg);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.GetStatusUpdateForMediaFileConversion: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./GetStatusUpdateForMediaFileConversion()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);
            console.log(msg);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.GetStatusUpdateForMediaFileConversion(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.GetStatusUpdateForMediaFileConversion()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});


router.post('/_files/CheckForConvertedFile', function (request, response) {
    try {
        console.log('In start.js.CheckForConvertedFile().');

        //      - this copies the file using SCP, from the FFMPEG /_fileconversion server.

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwBudgetRequestId = request.body.bwBudgetRequestId;
        var originalFilename = request.body.OriginalFilename;
        var thumbnailFilename = request.body.ThumbnailFilename;
        var filename = request.body.Filename; // This is our new .mp4 file.

        var tempFolderPath1 = 'public/tempmediafileconversions';
        var tempFolderPath2 = 'public/tempmediafileconversions/' + bwWorkflowAppId;
        var tempFolderPath3 = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

        var msg = 'In start.js.CheckForConvertedFile(). The media conversion server has notified that there is a file ready. bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', filename: ' + filename;
        console.log(msg);
        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
        var source = 'start.js.CheckForConvertedFile()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        fs.mkdir(tempFolderPath1, function (err) {
            try {
                if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                    var msg = 'Error creating folder ' + tempFolderPath1 + ': ' + err;

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }
                    response.send(result);

                } else {

                    fs.mkdir(tempFolderPath2, function (err) {
                        try {
                            if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                var msg = 'Error creating folder ' + tempFolderPath2 + ': ' + err;

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }
                                response.send(result);

                            } else {

                                fs.mkdir(tempFolderPath3, function (err) {
                                    try {
                                        if (err && !(String(err).indexOf('EEXIST:') > -1)) {

                                            var msg = 'Error creating folder ' + tempFolderPath3 + ': ' + err;

                                            var result = {
                                                status: 'ERROR',
                                                message: msg
                                            }
                                            response.send(result);

                                        } else {

                                            //
                                            // NOW WE ARE CERTAIN THE FOLDER EXISTS. CONTINUE...
                                            //

                                            //var serverIp = '192.168.1.19'; // .19 is the dell latitude..
                                            var serverIp = '192.168.1.8'; // .8 is the macbook.
                                            Scp({
                                                host: serverIp, // 11-30-2023 TODD THIS NEEDS NOT TO BE HARDCODED SOMEHOW <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                                port: 22,
                                                username: 'toddhiltz',
                                                password: 'AmyTahiti1', // This folder is set to anonymous. UFW is configured to only allow this server access via SSH.
                                                // privateKey: fs.readFileSync('./key.pem'),
                                                // passphrase: 'your key passphrase',
                                            }).then(function (client) {

                                                var sourceFolder = 'documents/__bwFFMPEG/public/mediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                var destinationFolder = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

                                                console.log('');
                                                console.log('USING SCP TO DOWNLOAD. sourceFolder: ' + sourceFolder + ', destinationFolder: ' + destinationFolder);
                                                console.log('');

                                                //
                                                // WE RESPOND TO THE CLIENT HERE BECAUSE IT MAY TAKE AWHILE AND WHY MAKE THEM WAIT. They can view the status in the request bwAttachments form widget.
                                                //
                                                var msg = 'In start.js.CheckForConvertedFile.scp.downloadDir(). The file(s) are being copied from the media conversion server ' + serverIp + '.';
                                                console.log(msg);
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.CheckForConvertedFile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'SUCCESS',
                                                    message: msg
                                                }

                                                response.send(result);

                                                //
                                                // To the client this appears to be happening in the background.
                                                //
                                                client.downloadDir(sourceFolder, destinationFolder).then(function (results) {
                                                    try {

                                                        client.rmdir(sourceFolder).then(function (results) {
                                                            try {

                                                                client.close();

                                                                //
                                                                // THE FILE HAS BEEN DOWNLOADED. Updating the file .metadata file to include the status of the conversion process.
                                                                //

                                                                var metadataFilePath = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + originalFilename + '.metadata';

                                                                var msg = 'In start.js.CheckForConvertedFile. THE FILES HAVE BEEN DOWNLOADED. Updating the file .metadata file to include the status of the conversion process. metadataFilePath: ' + metadataFilePath;
                                                                console.log(msg);
                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.CheckForConvertedFile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var fileConversionStatus = {
                                                                    status: 'CONVERSION_COMPLETED_DOWNLOADED_FILE_FROM_CONVERSION_SERVER',
                                                                    timestamp: new Date(),
                                                                    message: 'The file has been downloaded from the media conversion server to file services. results: ' + JSON.stringify(results)
                                                                }


                                                                var data = fs.readFileSync(metadataFilePath).toString();
                                                                var json;
                                                                try {
                                                                    json = JSON.parse(data);
                                                                } catch (e) {

                                                                    // This should never happen.
                                                                    json = {
                                                                        FileConversionStatus: []
                                                                    };

                                                                    var msg = 'Exception in start.js.CheckForConvertedFile():xcx213123: metadataFilePath: ' + metadataFilePath + ': ' + e.message + ', ' + e.stack;
                                                                    console.log(msg);
                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.CheckForConvertedFile()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                }

                                                                if (!json.FileConversionStatus) {
                                                                    json["FileConversionStatus"] = [];
                                                                }
                                                                json.FileConversionStatus.push(fileConversionStatus);
                                                                var newMetaFileContent = JSON.stringify(json);

                                                                fs.writeFile(metadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                    try {
                                                                        if (metaErr) {

                                                                            var msg = 'Error in start.js.CheckForConvertedFile.fs.writeFile(): metadataFilePath: ' + metadataFilePath + ', error: ' + metaErr;
                                                                            console.log(msg);

                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.CheckForConvertedFile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                        } else {

                                                                            var msg = 'In start.js.CheckForConvertedFile.fs.writeFile(). File(s) were successfully copied from server ' + serverIp + ' to file services. NOW WE WILL LOCALLY COPY THE FILE TO THE _files FOLDER. results: ' + JSON.stringify(results) + ', sourceFolder: ' + sourceFolder + ', destinationFolder: ' + destinationFolder;
                                                                            console.log(msg);

                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                            var source = 'start.js.CheckForConvertedFile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                            //
                                                                            // Copy the file locally from the /tempmediafileconversions folder to the /_files folder.
                                                                            //

                                                                            var sourceFolder = 'public/tempmediafileconversions/' + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                                                            var destinationFolder = 'public/_files/' + bwWorkflowAppId + '/' + bwBudgetRequestId;

                                                                            var sourceFilePath1 = sourceFolder + '/' + filename;
                                                                            var destinationFilePath1 = destinationFolder + '/' + filename;


                                                                            //
                                                                            //
                                                                            // CHANGE THIS CODE!!!!!!!!!!! THE METADATA FILE MAY NOT EXIST!! In this case, the mov file conversion had no thumbnail file.
                                                                            //
                                                                            //



                                                                            fs.copyFile(sourceFilePath1, destinationFilePath1, function (rError) {
                                                                                if (rError) {

                                                                                    var msg = 'Error copying metadata file from "' + sourceFilePath1 + '" to "' + destinationFilePath1 + '": ' + rError;
                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    var source = '_files/uploadattachment_large()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                } else {

                                                                                    var msg = 'In start.js.CheckForConvertedFile.fs.copyFile(). File(s) were successfully copied from sourceFilePath1: ' + sourceFilePath1 + ', destinationFilePath1: ' + destinationFilePath1;
                                                                                    console.log(msg);

                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                    var source = 'start.js.CheckForConvertedFile()';
                                                                                    var errorCode = null;
                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                    var sourceFilePath2 = sourceFolder + '/' + thumbnailFilename;
                                                                                    var destinationFilePath2 = destinationFolder + '/' + thumbnailFilename;

                                                                                    //
                                                                                    //
                                                                                    // CHANGE THIS CODE!!!!!!!!!!! THE THUMBNAIL FILE MAY NOT EXIST!! In this case, the mov file conversion had no thumbnail file.
                                                                                    //
                                                                                    //





                                                                                    fs.copyFile(sourceFilePath2, destinationFilePath2, function (rError) {
                                                                                        if (rError) {

                                                                                            //
                                                                                            // If we get here, most likely this means that there is no thumbnail file. This happens, for instance, when a .mov file has gotten converted.
                                                                                            // Therefore, we have to generate the thumbnail here by calling ProcessFileAfterUpload().
                                                                                            //

                                                                                            var msg = 'Error copying thumbnail file. It oprobably didnt exist, so creating a new one. >> from "' + sourceFilePath2 + '" to "' + destinationFilePath2 + '": ' + rError;
                                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                            var source = '_files/uploadattachment_large()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            ProcessFileAfterUpload(destinationFilePath1, '', bwWorkflowAppId, bwBudgetRequestId, bwParticipantId, bwParticipantEmail, bwParticipantFriendlyName).then(function (results) {
                                                                                                try {

                                                                                                    var msg = 'In start.js.CheckForConvertedFile.fs.copyFile.ProcessFileAfterUpload(). File(s) were successfully copied. There was no thumbnail so we made that. >> from sourceFilePath1: ' + sourceFilePath1 + ' to destinationFilePath1: ' + destinationFilePath1;
                                                                                                    console.log(msg);

                                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.CheckForConvertedFile()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    // Clean up.
                                                                                                    fs.rmdir(sourceFolder, { recursive: true }, function (err) {

                                                                                                        if (err) {

                                                                                                            var msg = 'Error calling fs.rmdir for "' + sourceFilePath + '. err: ' + err;
                                                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                            var source = '_files/uploadattachment_large()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        } else {

                                                                                                            var msg = 'In start.js.CheckForConvertedFile.fs.rmdir. Successfully removed: ' + sourceFolder;
                                                                                                            console.log(msg);

                                                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.CheckForConvertedFile()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                        }

                                                                                                    });

                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.CheckForConvertedFile():11: ' + e.message + ', ' + e.stack;
                                                                                                    console.log(msg);
                                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.CheckForConvertedFile()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                }

                                                                                            }).catch(function (e) {

                                                                                                var msg = 'Exception in start.js.CheckForConvertedFile():10: ' + JSON.stringify(e);
                                                                                                console.log(msg);
                                                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.CheckForConvertedFile()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                            });

                                                                                        } else {

                                                                                            var msg = 'In start.js.CheckForConvertedFile.fs.copyFile(). File(s) were successfully copied from sourceFilePath2: ' + sourceFilePath2 + ', destinationFilePath2: ' + destinationFilePath2;
                                                                                            console.log(msg);

                                                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.CheckForConvertedFile()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                            // Clean up.
                                                                                            fs.rmdir(sourceFolder, { recursive: true }, function (err) {

                                                                                                if (err) {

                                                                                                    var msg = 'Error calling fs.rmdir for "' + sourceFilePath + '. err: ' + err;
                                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                    var source = '_files/uploadattachment_large()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                } else {

                                                                                                    var msg = 'In start.js.CheckForConvertedFile.fs.rmdir. Successfully removed: ' + sourceFolder;
                                                                                                    console.log(msg);

                                                                                                    var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.CheckForConvertedFile()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                }

                                                                                            });

                                                                                        }

                                                                                    });

                                                                                }

                                                                            });

                                                                        }
                                                                    } catch (e) {

                                                                        var msg = 'Exception in start.js.CheckForConvertedFile():9: ' + e.message + ', ' + e.stack;
                                                                        console.log(msg);
                                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                        var source = 'start.js.CheckForConvertedFile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);
                                                                    }

                                                                });

                                                            } catch (e) {

                                                                // SCP rmdir returned an exception.
                                                                var msg = 'Exception in start.js.CheckForConvertedFile.scp.rmdir():2: ' + e.status + ', ' + e.message;
                                                                console.log(msg);

                                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.CheckForConvertedFile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                client.close(); // Close the SCP connection.

                                                            }

                                                        }).catch(function (e) {

                                                            // SCP rmdir returned an exception.
                                                            var msg = 'Exception in start.js.CheckForConvertedFile.scp.rmdir(): ' + JSON.stringify(e);
                                                            console.log(msg);

                                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.CheckForConvertedFile()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            client.close(); // Close the SCP connection.

                                                        });

                                                    } catch (e) {

                                                        var msg = 'Exception in start.js.CheckForConvertedFile.scp.uploadDir(): ' + e.status + ', ' + e.message;
                                                        console.log(msg);

                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.CheckForConvertedFile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        client.close(); // Close the SCP connection.

                                                    }
                                                }).catch(function (e) {
                                                    try {

                                                        var msg = 'Exception in start.js.CheckForConvertedFile(). Exception copying files to the server ' + serverIp + ': ' + JSON.stringify(e);
                                                        console.log(msg);

                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.CheckForConvertedFile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        //// Clean up.
                                                        //try {
                                                        //    fs.rmdir(sourceFolder, { recursive: true }, function (err) { });
                                                        //} catch (e) { }

                                                        client.close(); // Close the SCP connection.

                                                    } catch (e) {

                                                        var msg = 'Exception in start.js.CheckForConvertedFile.scp.uploadDir.catch(): ' + e.status + ', ' + e.message;
                                                        console.log(msg);

                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.CheckForConvertedFile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    }
                                                });

                                            }).catch(function (e) {

                                                var msg = 'Exception in CheckForConvertedFile(). Returned from SCP_EnsureThatMediaFileConversionFoldersExist(). FOLDERS EXIST..: ' + JSON.stringify(e);
                                                console.log(msg);

                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.CheckForConvertedFile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    status: 'EXCEPTION',
                                                    message: msg
                                                }
                                                response.send(result);


                                                client.close();

                                            });

                                        }

                                    } catch (e) {

                                        var msg = 'Exception in start.js.CheckForConvertedFile(): ' + e.message + ', ' + e.stack;
                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js.CheckForConvertedFile()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                                        var result = {
                                            status: 'EXCEPTION',
                                            message: msg
                                        }
                                        response.send(result);

                                    }
                                });

                            }

                        } catch (e) {

                            var msg = 'Exception in start.js.CheckForConvertedFile(): ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.CheckForConvertedFile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                            var result = {
                                status: 'EXCEPTION',
                                message: msg
                            }
                            response.send(result);

                        }
                    });

                }

            } catch (e) {

                var msg = 'Exception in start.js.CheckForConvertedFile(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.CheckForConvertedFile()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }
                response.send(result);

            }
        });

    } catch (e) {

        var msg = 'Exception in start.js.CheckForConvertedFile(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.CheckForConvertedFile()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }
        response.send(result);

    }
});




router.post('/_files/launchFileConversion', function (request, response) {
    try {
        console.log('In POST /_files/launchFileConversion().');

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwBudgetRequestId = request.body.bwBudgetRequestId;



        //BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: true, FileConversionInProgress: false }, function (bruError, bruResult) {
        //    try {
        //        if (bruError) {

        //            var msg = 'Error in _files/launchFileConversion():2. Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
        //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        //            var source = 'start.js._files/launchFileConversion()';
        //            var errorCode = null;
        //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

        //            response.send(msg);

        //        } else {

        //            var msg = 'SUCCESS updating the FileConversionQueued flag in _files/launchFileConversion(). ' + bwBudgetRequestId + ': ' + bruError;
        //            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
        //            var source = 'start.js._files/launchFileConversion()';
        //            var errorCode = null;
        //            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

        //            response.send('SUCCESS');

        //        }

        //    } catch (e) {

        //        var msg = 'Exception in launchFileConversion:xcx55: ' + e.message + ', ' + e.stack;
        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        //        var source = 'start.js.launchFileConversion()';
        //        var errorCode = null;
        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

        //        response.send(msg);

        //    }
        //});




        if (!(bwWorkflowAppId && bwBudgetRequestId)) {

            var msg = 'Error in convertfilexxxcvbfgh(). Invalid value(s): bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js._files/convertfile()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
            console.log(msg);

            response.send(msg);

        } else {

            var msg = 'In _files/convertfile(). sdadasdd bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
            var source = 'start.js._files/convertfile()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);


            //
            // This checks the file system, compares it with the json, and picks up any missed .vob files.
            //
            var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;

            fs.readdir(budgetRequestFolderPath, function (err, files) {
                //console.log('In convertfile.fs.readdir().');
                if (err) {

                    if (err.toString().indexOf('no such file or directory') > -1) {



                    } else {

                        var msg = 'Error in _files/convertfile.fs.readdir(). Error updating the budget request ' + bwBudgetRequestId + ': ' + err;
                        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                        var source = 'start.js._files/convertfile()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        response.send(msg);

                    }

                } else {

                    //console.log('In convertfile.fs.readdir().2.');
                    var vobFiles = [];
                    var movFiles = [];
                    var mp4Files = [];

                    var amrFiles = [];
                    var m4aFiles = [];
                    var mp3Files = [];

                    var msg = 'AUDIT in convertfile() xcx34536788. files.length: ' + files.length + ', bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                    var source = 'start.js._files/convertfile()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    if (files.length > 0) {

                        var msg = 'PROCESSING A FILE on fileservices at _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', files: ' + JSON.stringify(files);
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js._files/convertfile()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        for (var i = 0; i < files.length; i++) {
                            if ((files[i].toLowerCase().indexOf('.vob') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) { // .vob, .mov, .mp4, .amr, .m4a, .mp3
                                vobFiles.push(files[i]);
                            }

                            // Added .avi support. 8-14-2023.
                            if ((files[i].toLowerCase().indexOf('.avi') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) { // .vob, .mov, .mp4, .amr, .m4a, .mp3, .avi
                                vobFiles.push(files[i]);
                            }

                            if ((files[i].toLowerCase().indexOf('.mov') > 0) && !(files[i].toLowerCase().indexOf('.metadata') > 0)) {
                                movFiles.push(files[i]);
                            }
                            if (files[i].toLowerCase().indexOf('.mp4') > 0) {
                                mp4Files.push(files[i]);
                            }
                            if (files[i].toLowerCase().indexOf('.amr') > 0) {
                                amrFiles.push(files[i]);
                            }
                            if (files[i].toLowerCase().indexOf('.m4a') > 0) {
                                m4aFiles.push(files[i]);


                                var msg = 'PROCESSING A FILE on fileservices at _files/convertfile(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + '. ADDED ' + files[i] + ' to m4aFiles: ' + JSON.stringify(m4aFiles);
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js._files/convertfile()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);


                            }
                            if (files[i].toLowerCase().indexOf('.mp3') > 0) {
                                mp3Files.push(files[i]);
                            }
                        }

                        //console.log('');
                        //console.log('>>>>>>>>> bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', files.length: ' + files.length + ', vobFiles: ' + JSON.stringify(vobFiles) + ', movFiles: ' + JSON.stringify(movFiles) + ', amrFiles: ' + JSON.stringify(amrFiles) + ', m4aFiles: ' + JSON.stringify(m4aFiles));
                        //console.log('');

                    }

                    if ((vobFiles.length == 0) && (movFiles.length == 0) && (amrFiles.length == 0) && (m4aFiles.length == 0) && (mp4Files.length == 0)) {
                        // There are no files, so mark queued as false.
                        BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionQueued: false, FileConversionInProgress: false }, function (bruError, bruResult) {
                            try {
                                if (bruError) {

                                    var msg = 'Error in _files/convertfile(). Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                    var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js._files/convertfile()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    response.send(msg);

                                } else {

                                    var msg = 'UNEXPECTED RESULT in convertfile(). No file found for some reason... Found no .vob, .mov, .mp4, .amr, .m4a, .mp3 files, so updated the request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ' as FileConversionQueued = false.';
                                    var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js._files/convertfile()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                    response.send(msg);

                                }

                            } catch (e) {

                                var msg = 'Exception in _files/convertfile xcx4443:' + e.message + ', ' + e.stack;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js._files/convertfile()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                response.send(msg);

                            }
                        });

                    } else {

                        //console.log('In convertfile(). Check if there is an .mp4 file already created for this conversion. This is a safety check so that we don\'t launch ffmpeg too many times!! Although it seems to be a bit smart that way, better safe than sorry.');

                        console.log('');
                        console.log('In convertfile(). vobFiles.length: ' + vobFiles.length + ', movFiles.length: ' + movFiles.length + ', amrFiles.length: ' + amrFiles.length + ', m4aFiles.length: ' + m4aFiles.length);
                        console.log('');

                        // Check if there is an .mp4 file already created for this conversion. This is a safety check so that we don't launch ffmpeg too many times!! Although it seems to be a bit smart that way, better safe than sorry.
                        var vobFileNameCheck, amrFileNameCheck, m4aFileNameCheck;
                        if (vobFiles[0]) vobFileNameCheck = vobFiles[0].split('.')[0] + '.mp4';
                        if (movFiles[0]) vobFileNameCheck = movFiles[0].split('.')[0] + '.mp4';
                        if (amrFiles[0]) amrFileNameCheck = amrFiles[0].split('.')[0] + '.mp3';
                        if (m4aFiles[0]) m4aFileNameCheck = m4aFiles[0].split('.')[0] + '.mp3';

                        // Ok, here we go. We got an item to convert. 
                        var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
                        var _filePath, sourceFileExtention, destinationFileExtension, destinationFileType;

                        console.log('');
                        console.log('In convertfile(). vobFileNameCheck: ' + vobFileNameCheck + ', mp4Files: ' + mp4Files);
                        console.log('');

                        var proceedToConversion = true;

                        if (vobFiles[0] && !(mp4Files.indexOf(vobFileNameCheck) > -1)) {
                            _filePath = budgetRequestFolderPath + '/' + vobFiles[0]; // Doing the first one in the list.

                            // Added .avi capability 8-14-2023.
                            var sourceFileExtention;
                            if (vobFiles[0].indexOf('.vob') > -1) {
                                sourceFileExtention = '.vob';
                            } else if (vobFiles[0].indexOf('.avi') > -1) {
                                sourceFileExtention = '.avi';
                            }

                            //sourceFileExtention = '.vob';
                            destinationFileExtension = '.mp4';
                            destinationFileType = 'mp4';
                        } else if (mp4Files[0]) {
                            _filePath = budgetRequestFolderPath + '/' + mp4Files[0]; // Doing the first one in the list. 
                            sourceFileExtention = '.mp4';
                            destinationFileExtension = '.mp4';
                            destinationFileType = 'mp4';
                        } else if (movFiles[0] && !(mp4Files.indexOf(vobFileNameCheck) > -1)) {
                            _filePath = budgetRequestFolderPath + '/' + movFiles[0]; // Doing the first one in the list. 
                            sourceFileExtention = '.mov';
                            destinationFileExtension = '.mp4';
                            destinationFileType = 'mp4';
                        } else if (amrFiles[0] && !(mp3Files.indexOf(amrFileNameCheck) > -1)) {
                            _filePath = budgetRequestFolderPath + '/' + amrFiles[0]; // Doing the first one in the list. 
                            sourceFileExtention = '.amr';
                            destinationFileExtension = '.mp3';
                            destinationFileType = 'mp3';
                        } else if (m4aFiles[0] && !(mp3Files.indexOf(m4aFileNameCheck) > -1)) {
                            _filePath = budgetRequestFolderPath + '/' + m4aFiles[0]; // Doing the first one in the list. 
                            sourceFileExtention = '.m4a';
                            destinationFileExtension = '.mp3';
                            destinationFileType = 'mp3';
                        } else {

                            proceedToConversion = false;

                            var msg = 'FILE_NOT_FOUND or perhaps the FILE HAS ALREADY BEEN CONVERTED but not deleted the vob/mov/amr/m4a??? in _files/convertfile(). vobFileNameCheck: ' + vobFileNameCheck + ', sourceFileExtention: ' + sourceFileExtention + ' file not found. budgetRequestFolderPath: ' + budgetRequestFolderPath + ', _filePath: ' + _filePath + ', vobFiles[0]: ' + vobFiles[0] + ', movFiles[0]: ' + movFiles[0] + ', amrFiles[0]: ' + amrFiles[0] + ', m4aFiles[0]: ' + m4aFiles[0] + ', mp4Files: ' + mp4Files + ', ';
                            msg += '. vobFiles.length: ' + vobFiles.length + ', movFiles.length: ' + movFiles.length + ', amrFiles.length: ' + amrFiles.length + ', m4aFiles.length: ' + m4aFiles.length;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GET._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);
                            console.log(msg);

                            //
                            // Check if it has a thumbnail. This will indicate that the file was converted Ok, so we can delete the file now. 1-12-2023
                            //
                            var tmpThumbnailPath = vobFileNameCheck + '_thumbnail_.png'; // 8-4-2024.
                            if (mp4Files.indexOf(tmpThumbnailPath) > -1) {

                                //
                                // The thumbnail exists, so the file must have been converted. Not sure why this file got missed, but now it should be deleted. 1-12-2023
                                //

                                if (vobFiles[0] && (mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                    _filePath = budgetRequestFolderPath + '/' + vobFiles[0];
                                    sourceFileExtention = '.vob';
                                    destinationFileExtension = '.mp4';
                                    destinationFileType = 'mp4';
                                } else if (movFiles[0] && (mp4Files.indexOf(vobFileNameCheck) > -1)) {
                                    _filePath = budgetRequestFolderPath + '/' + movFiles[0];
                                    sourceFileExtention = '.vob';
                                    destinationFileExtension = '.mp4';
                                    destinationFileType = 'mp4';
                                } else if (amrFiles[0] && (mp3Files.indexOf(amrFileNameCheck) > -1)) {
                                    _filePath = budgetRequestFolderPath + '/' + amrFiles[0];
                                    sourceFileExtention = '.amr';
                                    destinationFileExtension = '.mp3';
                                    destinationFileType = 'mp3';
                                } else if (m4aFiles[0] && (mp3Files.indexOf(m4aFileNameCheck) > -1)) {
                                    _filePath = budgetRequestFolderPath + '/' + m4aFiles[0];
                                    sourceFileExtention = '.m4a';
                                    destinationFileExtension = '.mp3';
                                    destinationFileType = 'mp3';
                                }

                                //
                                //
                                // AS OF 7-31-2023 WE ARE NO LONGER DELETING THESE FILES.
                                //
                                //
                                //
                                // 9-8-2022 COMMENTED THIS OUT BECAUSE THE FILE IS GETTING DELETED BEFORE THE FFMPEG CONVERSION HAS COMPLETED.
                                //
                                //// 9-6-2022 Adding a timeout here to decrease the likelihood of a race condition...
                                //setTimeout(function () {
                                //    var fileToDeletePath = _filePath;
                                //    fs.unlink(fileToDeletePath, function (deleteErr) {
                                //        if (deleteErr) {

                                //            var msg = 'xcx3432 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath;
                                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                //            var source = 'In /_files/convertfile()';
                                //            var errorCode = null;
                                //            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                //        } else {

                                //            var msg = 'xcx3432 Deleted ' + sourceFileExtention + ' file: ' + fileToDeletePath;
                                //            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                //            var source = 'In /_files/convertfile()';
                                //            var errorCode = null;
                                //            WriteToErrorLog(threatLevel, source, errorCode, msg);
                                //            console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                //        }
                                //    });
                                //}, 2000); // 2 seconds should help out a lot! 1-12-2023 not sure this is necessary but leaving it.


                            }

                        }


                        if (proceedToConversion != true) {

                            var msg = 'In _files/convertfile(). proceedToConversion was set to false, so must have had a previous file to cleanup. Look at previous or subsequent log entry to explain this.';
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.GET._files/convertfile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                            console.log(msg);

                            response.send(msg);


                        } else {

                            //console.log('Writing file. Size for file ' + _Filename + ': ' + _FileContent.length);

                            if (!(_filePath && (_filePath.toLowerCase().indexOf(sourceFileExtention) > -1) && !(_filePath.toLowerCase().indexOf('.metadata') > -1))) {

                                var msg = 'UNEXPECTED RESPONSE 2 in _files/convertfile(). ' + sourceFileExtention + ' file not found. budgetRequestFolderPath: ' + budgetRequestFolderPath + ', _filePath: ' + _filePath;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.GET._files/convertfile()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                console.log(msg);

                                response.send(msg);

                            } else {


                                // 9-8-2022
                                // Set the FileConversionInProgress flag.
                                BwBudgetRequest.update({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, { FileConversionInProgress: true }, function (bruError, bruResult) {
                                    try {
                                        if (bruError) {

                                            var msg = 'Error in _files/convertfile():2-1. Error updating the budget request ' + bwBudgetRequestId + ': ' + bruError;
                                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js._files/convertfile()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            response.send(msg);

                                        } else {


                                            //console.log(msg);

                                            response.send('WORKING ON IT'); // We just return a response, and this will continue on by itself for now... :)

                                            //console.log('Preparing to convert ' + sourceFileExtention + ' to ' + destinationFileExtension + ': ' + _filePath);
                                            var amrIndex = _filePath.toLowerCase().indexOf(sourceFileExtention);
                                            var filePath = _filePath.substring(0, amrIndex) + destinationFileExtension;

                                            //
                                            //
                                            // The following IF statement handles each file conversion differently.
                                            //
                                            //


                                            var msg = 'In _files/convertfile(). xcx2312312. DECIDING HOW TO CONVERT BASED ON THE FILE EXTENSION. sourceFileExtention: ' + sourceFileExtention;
                                            var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js._files/convertfile()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                            if (sourceFileExtention == '.m4a') {

                                                console.log('Preparing to convert .m4a to .mp3: ' + _filePath);
                                                var amrIndex = _filePath.toUpperCase().indexOf('.M4A');
                                                var mp3FilePath = _filePath.substring(0, amrIndex) + '.mp3';
                                                console.log(mp3FilePath);
                                                ffmpeg(_filePath)
                                                    .toFormat('mp3')
                                                    .on('error', function (err) {

                                                        var msg = 'The .M4A file was not converted successfully to a .mp3 file: ' + err.message + ', ' + err.stack;
                                                        console.log(msg);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                                        var errorCode = null;
                                                        var message = msg;
                                                        WriteToErrorLog(threatLevel, source, errorCode, message);

                                                    })
                                                    .on('progress', function (progress) {
                                                        // console.log(JSON.stringify(progress));
                                                        console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                    })
                                                    .on('end', function () {
                                                        console.log('FFMPEG: Processing finished !');

                                                        // Now that we have our .mp3 file, delete the .m4a file.
                                                        //var fileToDeletePath = inventoryImageFolderPath + '/' + _Filename;
                                                        fs.unlink(_filePath, function (deleteErr) {
                                                            if (deleteErr) {
                                                                console.log(deleteErr);
                                                                response.send(deleteErr);
                                                            } else {

                                                                console.log('The file ' + fileToDeletePath + ' was deleted!');

                                                                var msg = 'The .M4A file was converted successfully to a .mp3 file.';
                                                                var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                var source = 'In PUT /_files/uploadidentifyingimageforparticipant()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId, bwParticipantId);

                                                                // Here is where we should create the file.metadata file. We only write the file if there is something to save in it!
                                                                if (description != '') {
                                                                    var amrIndex = _Filename.toUpperCase().indexOf('.M4A');
                                                                    var mp3Filename = _Filename.substring(0, amrIndex) + '.mp3';
                                                                    var metaFilePath = inventoryImageFolderPath + '/' + mp3Filename + '.metadata';
                                                                    var metaFileContent = '';
                                                                    metaFileContent += '<description>';
                                                                    metaFileContent += description;
                                                                    metaFileContent += '</description>';
                                                                    fs.writeFile(metaFilePath, metaFileContent, 'binary', function (metaErr) {
                                                                        if (metaErr) {
                                                                            console.log(metaErr);
                                                                            response.send(metaErr);
                                                                        } else {
                                                                            console.log('The file ' + metaFilePath + ' was saved!');
                                                                            response.send('The file ' + metaFilePath + ' was saved!');
                                                                        }
                                                                    });
                                                                } else {
                                                                    console.log('The file was saved!');
                                                                    response.send('The file was saved!');
                                                                }
                                                            }
                                                        });
                                                    })
                                                    .save(mp3FilePath); //path where you want to save your file



                                            } else if (sourceFileExtention == '.mp4') { // THIS IS THE ONLY PLACE WHERE A .mp4 GETS CONVERTED. 7-31-2023.

                                                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                    return v.toString(16);
                                                });

                                                var filePath2 = budgetRequestFolderPath + '/' + guid + destinationFileExtension;
                                                //var filePath2 = guid + destinationFileExtension;

                                                var msg = 'LAUNCHING THE FFMPEG CONVERSION in _files/convertfile(). Set FileConversionInProgress = true, and launching FFMPEG to convert ' + _filePath + ' to ' + filePath2 + ' for bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.GET._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);








                                                //ffprobe(_filePath, { path: ffprobeStatic.path }, function (err, info) {
                                                ffprobe(_filePath, { path: ffprobePath }, function (err, info) {
                                                    //ffprobe(_filePath, function (err, info) {
                                                    if (err) {

                                                        var msg = 'Error in FFPROBE: ' + err;
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js._files/convertfile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    } else {

                                                        var msg = 'FFPROBE DETAILS FOR ' + _filePath + ': ' + JSON.stringify(info);
                                                        var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.GET._files/convertfile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    }
                                                });








                                                //var stream = fs.createWriteStream(filePath2);
                                                //fs.closeSync(fs.openSync(filePath2, 'w'));


                                                // ffmpeg -i in.mp4 -c copy -map 0 -movflags +faststart out.mp4

                                                //var outputOptions = '"-c" "copy" "-map" "0" "-movflags" "faststart"';
                                                //var outputOptions = '-c copy -map 0 -movflags faststart';
                                                //var outputOptions = '-movflags faststart';

                                                //var file = fs.createReadStream(_filePath);
                                                const input = fs.createReadStream(path.resolve(_filePath))
                                                const output = fs.createWriteStream(path.resolve(filePath2))

                                                //const inputForFFMPEG = new stream.PassThrough()

                                                ffmpeg(input) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                    //.toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg
                                                    //.output(stream)
                                                    //.output(filePath2)
                                                    //.outputOptions('-movflags faststart') // 7-31-2023. // -preset ultrafast -c:v libx264 -crf 36 -r 10 -vf scale=640:480 -movflags faststart -b:a 8k
                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "36", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart", "-b:a", "8k") //, filePath2)


                                                    // -c:v libx264 -preset slow -crf 20 -c:a aac -b:a 160k -vf format=yuv420p -movflags +faststart
                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart", "-b:a", "8k") //, filePath2)

                                                    //.outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-vf", "scale=640:480", "-movflags", "faststart")

                                                    .outputOptions("-preset", "ultrafast", "-c:v", "libx264", "-crf", "23", "-r", "10", "-movflags", "faststart", "-an") // -an removes audio.

                                                    //.outputOptions('-movflags empty_moov')

                                                    .toFormat('mp4')
                                                    //.videoCodec('libx264')
                                                    //.format('mp4')

                                                    //.outputOptions('-movflags frag_keyframe+empty_moov')
                                                    //.outputOptions('-movflags faststart')
                                                    //.outputOptions('-c:v copy')

                                                    //.addOption('-preset ultrafast')

                                                    //.addOption('-vf', "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")

                                                    .output(output)



                                                    .on('error', function (err, stdout, stderr) {

                                                        var msg = 'ERROR ERROR in ffmpeg.error() xcx9898-2-1: File ' + filePath + ' file was not converted successfully: message: ' + err.message + ', err: ' + err + ', stderr: ' + stderr + ', stack: ' + err.stack;
                                                        console.log(msg);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'In /_files/convertfile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                    })
                                                    .on('progress', function (progress) {
                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + 'to ' + filePath2);
                                                    })
                                                    .on('end', function () {

                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                        //console.log(msg);
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'In GET /_files/convertfile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                        //
                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                        //
                                                        // Create a thumbnail for this file.
                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                        ffmpeg(filePath)
                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                            .output(thumbnailPath)
                                                            .outputOptions(
                                                                '-frames', '1'  // Capture just one frame of the video
                                                            )
                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                            .on('error', function (err) {

                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                //console.log(msg);
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'In /_files/convertfile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            })
                                                            .on('end', function () {

                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                var newMetaFilePath = filePath + '.metadata';

                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                    if (rError) {

                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = '_files/uploadattachment_large()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    } else {

                                                                        var msg = 'CONVERSION COMPLETE ' + filePath + ' file xcx243235: ' + filePath2;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In /_files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    }

                                                                });

                                                            })
                                                            .run()

                                                    })
                                                    .save(filePath); //path where you want to save your file



                                            } else if ((sourceFileExtention == '.vob') || (sourceFileExtention == '.avi')) { // Added avi 8-14-2023. // THIS IS THE ONLY PLACE WHERE A .vob GETS CONVERTED. 7-31-2023.

                                                var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                                                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                                                    return v.toString(16);
                                                });

                                                var filePath2 = guid + destinationFileExtension; // Using this one as an intermediate file name since we have to run ffmpeg a couple of times.

                                                console.log('filePath: ' + filePath);








                                                if (sourceFileExtention == '.vob') {








                                                    ffmpeg(_filePath) // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
                                                        //ffmpeg() // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {

                                                        //.input(_filePath)
                                                        //.input(orgImageFolderPath)

                                                        //.complexFilter([
                                                        //    {
                                                        //        filter: "format",
                                                        //        options: { pix_fmts: "yuva444p" },
                                                        //        inputs: "[1]",
                                                        //    },

                                                        //    {
                                                        //        filter: "colorchannelmixer",
                                                        //        options: { aa: 0.5 },
                                                        //    },

                                                        //    {
                                                        //        filter: "overlay",
                                                        //        options: { [0]: "H-h" }
                                                        //    }

                                                        //])

                                                        .toFormat(destinationFileType)

                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')


                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5;[0]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')
                                                        //.outputOptions('-movflags faststart')
                                                        //.outputOptions('-movflags faststart')



                                                        //.outputOptions(executionString)

                                                        //.addOption('-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[orgimage.png];[0][orgimage.png]overlay=0:H-h')


                                                        // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                        //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 6-14-2023.

                                                        .on('error', function (err) {

                                                            var msg = 'In ffmpeg.error() xcx9898: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                            console.log(msg);
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'In /_files/convertfile()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                        })
                                                        .on('progress', function (progress) {
                                                            console.log('FFMPEG:1: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + ' to ' + filePath2); // sourceFileExtention + ' to ' + filePath2); // destinationFileExtension);
                                                        })
                                                        .on('end', function () {

                                                            var msg = 'xcx232384 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                            //console.log(msg);
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'In GET /_files/convertfile()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                            if (destinationFileExtension == '.mp3') {

                                                                //
                                                                // This does not get a thumbnail... it is an audio file! :) 12-1-2022
                                                                //
                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                var newMetaFilePath = filePath + '.metadata';
                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) { 
                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                    if (rError) {

                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = '_files/uploadattachment_large()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    } else {

                                                                        //
                                                                        //
                                                                        // As of 7-31-2023 we are no longer deleting the .vob file.
                                                                        //
                                                                        //

                                                                        //// Now that we have our .mp4 file, delete the .vob file.
                                                                        //var fileToDeletePath = _filePath;
                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                        //    if (deleteErr) {

                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        //        var source = 'In /_files/convertfile()';
                                                                        //        var errorCode = null;
                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        //    } else {

                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        //var source = 'In /_files/convertfile()';
                                                                        //var errorCode = null;
                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                        //    }
                                                                        //});

                                                                    }

                                                                });


                                                            } else if (destinationFileExtension == '.mp4') {

                                                                //
                                                                //
                                                                //
                                                                // Now that we have our .mp4 file, we have to run it through ffmpeg with these flags set to make it stream properly, 
                                                                // so the user doesn't have to wait and download the entire file.
                                                                // THIS HAS NOT BEEN TESTED AND MAY NOT WORK!! 6-14-2023.
                                                                //
                                                                //
                                                                //


                                                                ffmpeg(filePath2) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                                    .toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                    .outputOptions('-movflags faststart') // 6-14-2023.

                                                                    .on('error', function (err) {

                                                                        var msg = 'In ffmpeg.error() xcx9898-2-2: File ' + filePath + ' file was not converted successfully: ' + err.message + ', ' + err.stack;
                                                                        console.log(msg);
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In /_files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    })
                                                                    .on('progress', function (progress) {
                                                                        //console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + sourceFileExtention + 'to ' + destinationFileExtension);
                                                                    })
                                                                    .on('end', function () {

                                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                        //console.log(msg);
                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        var source = 'In GET /_files/convertfile()';
                                                                        var errorCode = null;
                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        //
                                                                        //
                                                                        // As of 7-31-2023 we no longer delete the file.
                                                                        //
                                                                        //

                                                                        // Now that we have our .mp4 file, delete the intermediate .mp4 file.
                                                                        //var fileToDeletePath = filePath2;
                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                        //    if (deleteErr) {

                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        //        var source = 'In /_files/convertfile()';
                                                                        //        var errorCode = null;
                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        //    } else {

                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                        //var source = 'In /_files/convertfile()';
                                                                        //var errorCode = null;
                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        //
                                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                                        //
                                                                        // Create a thumbnail for this file.
                                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                                        ffmpeg(filePath)
                                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                                            .output(thumbnailPath)
                                                                            .outputOptions(
                                                                                '-frames', '1'  // Capture just one frame of the video
                                                                            )
                                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                                            .on('error', function (err) {

                                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                //console.log(msg);
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'In /_files/convertfile()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            })
                                                                            .on('end', function () {
                                                                                //console.log('');
                                                                                //console.log('Thumbnail saved: ' + thumbnailPath);
                                                                                //console.log('');





                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                var newMetaFilePath = filePath + '.metadata';





                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                    if (rError) {

                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = '_files/uploadattachment_large()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    } else {

                                                                                        //
                                                                                        //
                                                                                        // As of 7-31-2023 we are no longer deleting the file.
                                                                                        //
                                                                                        //

                                                                                        // Now that we have our .mp4 file, delete the .vob file.
                                                                                        //var fileToDeletePath = _filePath;
                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                        //    if (deleteErr) {

                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //    } else {

                                                                                        //        var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                        //        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                        //    }
                                                                                        //});

                                                                                    }

                                                                                });

                                                                            })
                                                                            .run()





                                                                        //    }
                                                                        //});




                                                                    })
                                                                    .save(filePath); //path where you want to save your file






                                                            } else {

                                                                //
                                                                // UNEXPECTED FILE EXTENSION.
                                                                //

                                                                var msg = 'Error in _files/convertfile(). UNEXPECTED FILE EXTENSION: ' + destinationFileExtension;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js._files/convertfile()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                response.send(msg);

                                                            }
                                                        })
                                                        .save(filePath2); //path where you want to save your file




























                                                } else if (sourceFileExtention == '.avi') {







                                                    // var executionString = ['-i', 'input.avi', '-i', 'image.png', '-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];
                                                    // await ffmpeg.exec(executionString);

                                                    //var file5 = rootFilePath + 'images/corporeal.png'; // rootFilePath + bwWorkflowAppId + '/orgimages';

                                                    var orgImageFolderPath = rootFilePath + bwWorkflowAppId + '/orgimages/root/orgimage.png'; // + bwOrgId;

                                                    var smallerOrgImagePath = orgImageFolderPath + '_overlay.png';

                                                    // 8-14-2023.

                                                    gm(orgImageFolderPath)
                                                        .resize(80)
                                                        //.font('Arial', 72)
                                                        //.drawText(75, 200, 'PDF') // 'PDF')
                                                        .write(smallerOrgImagePath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error creating the .pdfxcx21314124124 thumbnail in ProcessFileAfterUpload.imagemagick.write(): ' + err;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'In ProcessFileAfterUpload()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg,
                                                                        bwWorkflowAppId: bwWorkflowAppId,
                                                                        bwBudgetRequestId: bwBudgetRequestId,
                                                                        filePath: pdfFilePath
                                                                    }

                                                                    reject(result);

                                                                } else {







                                                                    //await ffmpeg.writeFile(
                                                                    //    "image.png",
                                                                    //    await fetchFile(file5) //  'https://shareandcollaborate.com/images/corporeal.png')
                                                                    //);



                                                                    //ffmpeg()
                                                                    //    .input('input.mp4')
                                                                    //    .input('input.mp3')
                                                                    //    .outputOptions('-c copy -map 0:v:0 -map 1:a:0')
                                                                    //    .save('output.mp4');




                                                                    //ffmpeg.writeFile(
                                                                    //    "input.avi",
                                                                    //    fetchFile(_filePath) //  'https://shareandcollaborate.com/images/corporeal.png')
                                                                    //);

                                                                    //var executionString = ['-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];
                                                                    var executionString = ['-preset', 'ultrafast', '-c:v', 'libx264', '-crf', '35', '-pix_fmt', 'yuv420p', '-map_metadata', '0', '-movflags', 'faststart', 'output.mp4'];


                                                                    //ffmpeg(_filePath) // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {
                                                                    ffmpeg() // This is: router.get('/_files/convertfile/:bwWorkflowAppId/:bwBudgetRequestId', function (request, response) {

                                                                        .input(_filePath)
                                                                        //.input(orgImageFolderPath)

                                                                        //.complexFilter([
                                                                        //    {
                                                                        //        filter: "format",
                                                                        //        options: { pix_fmts: "yuva444p" },
                                                                        //        inputs: "[1]",
                                                                        //    },

                                                                        //    {
                                                                        //        filter: "colorchannelmixer",
                                                                        //        options: { aa: 0.5 },
                                                                        //    },

                                                                        //    {
                                                                        //        filter: "overlay",
                                                                        //        options: { [0]: "H-h" }
                                                                        //    }

                                                                        //])

                                                                        .toFormat(destinationFileType)

                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5[image.png];[0][image.png]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')


                                                                        //.outputOptions('-preset ultrafast -c:v libx264 -crf 35 -filter_complex [1]format=yuva444p,colorchannelmixer=aa=0.5;[0]overlay=0:H-h -pix_fmt yuv420p -map_metadata 0 -movflags faststart')
                                                                        //.outputOptions('-movflags faststart')
                                                                        //.outputOptions('-movflags faststart')



                                                                        .outputOptions(executionString)








                                                                        //.addOption('-filter_complex', '[1]format=yuva444p,colorchannelmixer=aa=0.5[orgimage.png];[0][orgimage.png]overlay=0:H-h')
















                                                                        // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                        //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                        //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 6-14-2023.

                                                                        .on('error', function (err) {

                                                                            var msg = 'In ffmpeg.error() xcx9898: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                            console.log(msg);
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In /_files/convertfile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                        })
                                                                        .on('progress', function (progress) {
                                                                            console.log('FFMPEG:1: Processing: ' + progress.targetSize + ' KB converted. ' + filePath + ' to ' + filePath2); // sourceFileExtention + ' to ' + filePath2); // destinationFileExtension);
                                                                        })
                                                                        .on('end', function () {

                                                                            var msg = 'xcx232384 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                            //console.log(msg);
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In GET /_files/convertfile()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            if (destinationFileExtension == '.mp3') {

                                                                                //
                                                                                // This does not get a thumbnail... it is an audio file! :) 12-1-2022
                                                                                //
                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                var newMetaFilePath = filePath + '.metadata';
                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) { 
                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                    if (rError) {

                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = '_files/uploadattachment_large()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    } else {

                                                                                        //
                                                                                        //
                                                                                        // As of 7-31-2023 we are no longer deleting the .vob file.
                                                                                        //
                                                                                        //

                                                                                        //// Now that we have our .mp4 file, delete the .vob file.
                                                                                        //var fileToDeletePath = _filePath;
                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                        //    if (deleteErr) {

                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //    } else {

                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //var source = 'In /_files/convertfile()';
                                                                                        //var errorCode = null;
                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                        //    }
                                                                                        //});

                                                                                    }

                                                                                });


                                                                            } else if (destinationFileExtension == '.mp4') {

                                                                                //
                                                                                //
                                                                                //
                                                                                // Now that we have our .mp4 file, we have to run it through ffmpeg with these flags set to make it stream properly, 
                                                                                // so the user doesn't have to wait and download the entire file.
                                                                                // THIS HAS NOT BEEN TESTED AND MAY NOT WORK!! 6-14-2023.
                                                                                //
                                                                                //
                                                                                //


                                                                                ffmpeg(filePath2) // Run the .mp4 file we just got converted through ffmpeg again so we get it ready for streaming "-movflags faststart + frag_keyframe + empty_moov".
                                                                                    .toFormat(destinationFileType) // destinationFileType = 'mp4'.
                                                                                    // .outputOptions('-movflags faststart') << This does not work for vob files. 9-7-2022 just gives a blank video.
                                                                                    //.outputOptions('-movflags faststart') // Added 9-6-2022 // This moves the moov atom to the front. I believe it takes a second pass over the video to accomplish this. The resulting file is streamable from a webserver to a browser, but if I understand what I read from the other answer you can't stream it directly from ffmpeg without an intermediate file. TODD: MORE NEEDS TO BE DISCOVERED ABOUT THIS 9-6-2022
                                                                                    //.outputOptions(['-movflags frag_keyframe + empty_moov']) // 9-7-2022 You need to enable fragmentation with the 'movflags' option. Having an empty moov atom means it doesn't need to seek and thus works with a pipe. credit: https://stackoverflow.com/questions/40485218/how-to-stream-mp4-file-with-fluent-ffmpeg

                                                                                    .outputOptions('-movflags faststart') // 6-14-2023.

                                                                                    .on('error', function (err) {

                                                                                        var msg = 'In ffmpeg.error() xcx9898-2-2: File ' + filePath + ' file was not converted successfully: ' + err.message + ', ' + err.stack;
                                                                                        console.log(msg);
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'In /_files/convertfile()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                    })
                                                                                    .on('progress', function (progress) {
                                                                                        //console.log('FFMPEG: Processing: ' + progress.targetSize + ' KB converted');
                                                                                        console.log('FFMPEG:2: Processing: ' + progress.targetSize + ' KB converted. ' + sourceFileExtention + 'to ' + destinationFileExtension);
                                                                                    })
                                                                                    .on('end', function () {

                                                                                        var msg = 'xcx232384-2 The ' + sourceFileExtention + ' file was converted successfully to a ' + destinationFileExtension + ' file: ' + filePath;
                                                                                        //console.log(msg);
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'In GET /_files/convertfile()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //
                                                                                        //
                                                                                        // As of 7-31-2023 we no longer delete the file.
                                                                                        //
                                                                                        //

                                                                                        // Now that we have our .mp4 file, delete the intermediate .mp4 file.
                                                                                        //var fileToDeletePath = filePath2;
                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                        //    if (deleteErr) {

                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                        //        var errorCode = null;
                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //    } else {

                                                                                        //var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                        //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        //var source = 'In /_files/convertfile()';
                                                                                        //var errorCode = null;
                                                                                        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        //
                                                                                        // THIS IS WHERE WE MAKE THE THUMBNAIL 6-9-2022
                                                                                        //
                                                                                        // Create a thumbnail for this file.
                                                                                        var thumbnailPath = filePath + '_thumbnail_.png'; // changed this 8-4-2024. // + '.jpg';
                                                                                        ffmpeg(filePath)
                                                                                            .seekInput('00:00.010') // For example, at the 15 minute mark: seekInput('15:00.000')
                                                                                            .output(thumbnailPath)
                                                                                            .outputOptions(
                                                                                                '-frames', '1'  // Capture just one frame of the video
                                                                                            )
                                                                                            .addOption('-vf', ffmpegThumbnailVFInstructions) // "drawtext=fontfile=/path/to/font.ttf:text='MP4':fontcolor=white:fontsize=400:box=1:boxcolor=black@0.5:boxborderw=5:x=(w-text_w)/2:y=(h-text_h)/2")
                                                                                            .on('error', function (err) {

                                                                                                var msg = 'In ffmpeg.error() xcx215: The ' + sourceFileExtention + ' file was not converted successfully to a ' + destinationFileExtension + ' file: ' + err.message + ', ' + err.stack;
                                                                                                //console.log(msg);
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'In /_files/convertfile()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            })
                                                                                            .on('end', function () {
                                                                                                //console.log('');
                                                                                                //console.log('Thumbnail saved: ' + thumbnailPath);
                                                                                                //console.log('');





                                                                                                // Lets rename our metadata file and get a new size for the new .mp4 file. <<<<<<<<<<<< need to come back and get the new size!!! It is good enough for now..... 
                                                                                                var oldMetaFilePath = _filePath + '.metadata';
                                                                                                var newMetaFilePath = filePath + '.metadata';





                                                                                                //fs.rename(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                fs.copyFile(oldMetaFilePath, newMetaFilePath, function (rError) {
                                                                                                    if (rError) {

                                                                                                        var msg = 'Error copying metadata file from "' + oldMetaFilePath + '" to "' + newMetaFilePath + '": ' + rError;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = '_files/uploadattachment_large()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                    } else {

                                                                                                        //
                                                                                                        //
                                                                                                        // As of 7-31-2023 we are no longer deleting the file.
                                                                                                        //
                                                                                                        //

                                                                                                        // Now that we have our .mp4 file, delete the .vob file.
                                                                                                        //var fileToDeletePath = _filePath;
                                                                                                        //fs.unlink(fileToDeletePath, function (deleteErr) {
                                                                                                        //    if (deleteErr) {

                                                                                                        //        var msg = 'xcx885 Error deleting ' + sourceFileExtention + ' file: ' + fileToDeletePath + ', deleteErr: ' + JSON.stringify(deleteErr);
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                                        //    } else {

                                                                                                        //        var msg = 'Deleted ' + sourceFileExtention + ' file xcx243235: ' + fileToDeletePath;
                                                                                                        //        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        //        var source = 'In /_files/convertfile()';
                                                                                                        //        var errorCode = null;
                                                                                                        //        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);
                                                                                                        //        //console.log(msg); // This is a success, so we don't need to log it, we log the error above...

                                                                                                        //    }
                                                                                                        //});

                                                                                                    }

                                                                                                });

                                                                                            })
                                                                                            .run()





                                                                                        //    }
                                                                                        //});




                                                                                    })
                                                                                    .save(filePath); //path where you want to save your file






                                                                            } else {

                                                                                //
                                                                                // UNEXPECTED FILE EXTENSION.
                                                                                //

                                                                                var msg = 'Error in _files/convertfile(). UNEXPECTED FILE EXTENSION: ' + destinationFileExtension;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js._files/convertfile()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                response.send(msg);

                                                                            }
                                                                        })
                                                                        .save(filePath2); //path where you want to save your file




























                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in ProcessFileAfterUpload.imagemagick.write(). xcx2134253466667 while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.ProcessFileAfterUpload.imagemagick.write()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                var result = {
                                                                    status: 'EXCEPTION',
                                                                    message: msg,
                                                                    bwWorkflowAppId: bwWorkflowAppId,
                                                                    bwBudgetRequestId: bwBudgetRequestId,
                                                                    filePath: pdfFilePath
                                                                }

                                                                reject(result);

                                                            }

                                                        });



                                                }












                                            } else {


                                                var msg = 'Error in _files/convertfile(). xcx123123. Unexpected value for sourceFileExtention: ' + sourceFileExtention;
                                                var threatLevel = 'elevated'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js._files/convertfile()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                //response.send(msg);


                                            }

                                        }

                                    } catch (e) {

                                        var msg = 'Exception in _files/convertfile:2 xcx4443-2:' + e.message + ', ' + e.stack;
                                        var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                        var source = 'start.js._files/convertfile()';
                                        var errorCode = null;
                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                        response.send(msg);

                                    }
                                });

                            }
                        }

                    }

                }
            });
        }




















    } catch (e) {

        var msg = 'Exception in launchFileConversion: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.launchFileConversion()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});


router.post('/_files/renameafile', function (request, response) {
    try {
        console.log('In start.js.renameafile().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /renameafile().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
                    var originalFilename = request.body.OriginalFilename;
                    var newFilename = request.body.NewFilename;

                    //
                    // We need to make sure the new file name doesn't overwrite an existing file with the same name. 11-8-2022
                    //
                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;

                    fs.readdir(budgetRequestFolderPath, function (err, files) {
                        try {
                            console.log('In start.js.renameafile.fs.readdir(). originalFilename: ' + originalFilename + ', newFilename: ' + newFilename);
                            if (err) {

                                var msg = 'Error in start.js.renameafile.fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                var source = 'start.js._files/slideshowslidesets()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }

                                response.send(msg);

                            } else {

                                if (files.indexOf(newFilename) > -1) {

                                    //
                                    // This file name already exists, so we will just send a message back to the user.
                                    //
                                    var newFilePath = budgetRequestFolderPath + '/' + newFilename;

                                    var stats = fs.statSync(newFilePath);
                                    var size = stats["size"];
                                    var birthtime = stats["birthtime"];

                                    var msg = 'This filename already exists. Please choose a different filename.';
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.renameafile()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'FILE_ALREADY_EXISTS',
                                        File: {
                                            Filename: newFilename,
                                            Filepath: newFilePath,
                                            Stats: stats
                                        },
                                        message: msg
                                    }

                                    response.send(msg);

                                } else {

                                    //
                                    // Now we must update the filename and the metadata file. ************** AND THE THUMBNAIL!!!!!!!!!!!!!!!!!
                                    //

                                    var originalFilePath = budgetRequestFolderPath + '/' + originalFilename;
                                    var newFilePath = budgetRequestFolderPath + '/' + newFilename;

                                    fs.rename(originalFilePath, newFilePath, function (err) {
                                        if (err) {

                                            var msg = 'Error in start.js.renameafile.fs.rename():1: originalFilePath: ' + originalFilePath + ', newFilePath: ' + newFilePath + ', error: ' + err;
                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                            var source = 'start.js.renameafile()';
                                            var errorCode = null;
                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                            var result = {
                                                status: 'ERROR',
                                                message: msg
                                            }

                                            response.send(result);

                                        } else {

                                            //
                                            // At this point the file has been renamed. Now rename the thumbnail and metadata files.
                                            //

                                            // Rename the existing thumbnail file to match the newFilename.
                                            var originalMetadataFilePath2 = originalFilePath + '_320px_.png';
                                            var newMetadataFilePath2 = newFilePath + '_320px_.png';
                                            fs.rename(originalMetadataFilePath2, newMetadataFilePath2, function (err3) {

                                                // Rename the existing .metadata file to match the newFilename.
                                                var originalMetadataFilePath = originalFilePath + '.metadata';
                                                var newMetadataFilePath = newFilePath + '.metadata';
                                                fs.rename(originalMetadataFilePath, newMetadataFilePath, function (err2) {
                                                    if (err2) {

                                                        var msg = 'Error in start.js.renameafile.fs.rename():2: originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + err2;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.renameafile()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    } else {

                                                        var msg = 'The file was renamed successfully.';

                                                        var result = {
                                                            status: 'SUCCESS',
                                                            message: msg
                                                        }
                                                        response.send(result);

                                                    }
                                                });

                                            });

                                        }
                                    });

                                }

                            }
                        } catch (e) {

                            var msg = 'Exception in start.js.renameafile():2: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.renameafile()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            }

                            response.send(result);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /renameafile().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js./renameafile:3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js./renameafile()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    message: msg,
                    status: 'EXCEPTION'
                }
                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js/renameafile:2: ' + e;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js./renameafile()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                message: msg,
                status: 'EXCEPTION'
            }
            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.renameafile(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.POST.renameafile()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        response.send(msg);

    }
});




//function resolveAfter2Seconds() {
//    return new Promise(function (resolve) {
//        setTimeout(function() {
//            resolve('resolved');
//        }, 2000);
//    });
//}

//
// This is valid code, even though Visual Studio is complaining about it!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//


//im.readMetadata(process.argv[2], function(err, metadata) {
//         if (err) reject(err);
//         else resolve(metadata);
//});



async function readMetadata(filePath, bwWorkflowAppId) {
    return new Promise(function (resolve, reject) {
        try {
            console.log('mmmmmmmmmmmmmmmmmmm filePath: ' + filePath + ', bwWorkflowAppId: ' + bwWorkflowAppId);
            im.readMetadata(filePath, function (imError, imResult) {
                try {
                    if (imError) {

                        var msg = 'Error in start.js.getExifData.gm.readMetadata(). imError: ' + imError;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.getExifData()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        var result = {
                            status: 'ERROR',
                            message: msg
                        }

                        reject(result);

                    } else {

                        var msg = 'In start.js.getExifData.gm.readMetadata(). imResult: ' + JSON.stringify(imResult);
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.getExifData()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                        var result = {
                            status: 'SUCCESS',
                            message: 'SUCCESS',
                            data: imResult
                        }

                        resolve(result);

                    }
                } catch (e) {

                    var msg = 'Exception in getExifData.gm.readMetadata():2: ' + e.message + ', ' + e.stack;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getExifData()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                    var result = {
                        status: 'EXCEPTION',
                        message: msg
                    }

                    reject(result);

                }
            });
        } catch (e) {

            var msg = 'Exception in getExifData.gm.readMetadata(): ' + e.message + ', ' + e.stack;
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.getExifData()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg);

            var result = {
                status: 'EXCEPTION',
                message: msg
            }

            reject(result);

        }
    });

}

router.post('/_files/getExifData', function (request, response) {
    try {
        console.log('In POST /_files/getExifData().');

        var bwWorkflowAppId = request.body.bwWorkflowAppId;
        var bwBudgetRequestId = request.body.bwBudgetRequestId;
        var filename = request.body.Filename;

        var filePath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId + '/' + filename;

        //var msg = '>>>>>>>>>>>>>> In getExifData(). bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ', filePath: ' + filePath;
        //var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
        //var source = 'start.js.getExifData()';
        //var errorCode = null;
        //WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

        var extensionIndex = filePath.split('.').length - 1;
        var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

        // More info on image metadata: https://itnext.io/getting-image-metadata-exif-using-node-js-bd14aeee981d

        // Using ExifReader.
        const imgbuffer = fs.readFileSync(filePath);
        const ExifReader_results = ExifReader.load(imgbuffer, { expanded: true, includeUnknown: true }, function (erResult, erError) {
            try {
                if (erError) {

                    var msg = 'Error in start.js.getExifData.ExifReader.load(). erError: ' + erError;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getExifData()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }

                    response.send(result);

                } else {


                }
            } catch (e) {

                var msg = 'Exception in start.js.getExifData.ExifReader.load(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getExifData()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                response.send(result);

            }
        });

        gm(filePath).identify(function (gmError, gmResult) {
            try {
                if (gmError) {

                    var msg = 'Error in start.js.getExifData.gm.identify(). gmError: ' + gmError;
                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                    var source = 'start.js.getExifData()';
                    var errorCode = null;
                    WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                    var result = {
                        status: 'ERROR',
                        message: msg
                    }

                    response.send(result);

                } else {

                    var promise = readMetadata(filePath, bwWorkflowAppId);
                    promise.then(function (results) {

                        var result = {
                            status: 'SUCCESS',
                            message: 'SUCCESS',
                            data: {
                                ExifReader: ExifReader_results,
                                ImageMagick_identify: gmResult,
                                ImageMagick_readMetadata: results.data
                            }
                        }

                        response.send(result);

                    }).catch(function (e) {

                        var msg = 'Exception in getExifData.gm.readMetadata(): ' + e;
                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                        var source = 'start.js.getExifData()';
                        var errorCode = null;
                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                        var result = {
                            status: 'EXCEPTION',
                            message: msg
                        }

                        response.send(result);

                    });

                }
            } catch (e) {

                var msg = 'Exception in getExifData.gm.identify(): ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.getExifData()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg);

                var result = {
                    status: 'EXCEPTION',
                    message: msg
                }

                response.send(result);

            }
        });

    } catch (e) {

        var msg = 'Exception in getExifData(): ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.getExifData()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }

        response.send(result);

    }
});

router.post('/_files/saveattachmentmetadata', function (request, response) {
    try {
        console.log('In start.js.saveattachmentmetadata().');

        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
        promise.then(function (result) {
            try {

                if (result.status == 'AUTHORIZED') {

                    // AUTHORIZED.
                    console.log('AUTHORIZED in /saveattachmentmetadata().');
                    console.log('AUTHORIZED');
                    console.log('AUTHORIZED');

                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
                    var bwBudgetRequestId = request.body.bwBudgetRequestId;

                    var bwParticipantId = request.body.bwParticipantId;
                    var bwParticipantEmail = request.body.bwParticipantEmail;
                    var bwParticipantFriendlyName = request.body.bwParticipantFriendlyName;

                    var originalFilename = request.body.OriginalFilename;
                    var newFilename = request.body.NewFilename;
                    var newDescription = request.body.Description;

                    BwBudgetRequest.find({ bwWorkflowAppId: bwWorkflowAppId, bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) {
                        try {
                            if (brfError) {

                                var msg = 'Error in start.js.saveattachmentmetadata(). Error finding the budget request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ': ' + brfError;
                                var threatLevel = 'high'; // severe, high, elevated, guarded, low.
                                var source = 'start.js.saveattachmentmetadata()';
                                var errorCode = null;
                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                var result = {
                                    status: 'ERROR',
                                    message: msg
                                }

                                response.send(result);

                            } else {

                                if (brfResult.length != 1) {

                                    var msg = 'Error in start.js.saveattachmentmetadata(). Could not find the budget request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId;
                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                    var source = 'start.js.saveattachmentmetadata()';
                                    var errorCode = null;
                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                    var result = {
                                        status: 'ERROR',
                                        message: msg
                                    }

                                    response.send(result);

                                } else {

                                    var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
                                    var originalFilePath = budgetRequestFolderPath + '/' + originalFilename;
                                    var newFilePath = budgetRequestFolderPath + '/' + newFilename;

                                    if (originalFilename == newFilename) {

                                        //
                                        // No change to the file name. Now check if the .metadata file exists.
                                        //

                                        fs.readdir(budgetRequestFolderPath, function (err, files) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.readdir():9-22: Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.saveattachmentmetadata()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }

                                                    response.send(msg);

                                                } else {

                                                    var originalMetadataFileName = originalFilename + '.metadata';

                                                    if (files.indexOf(originalMetadataFileName) > -1) {

                                                        //
                                                        // Now check if the description has been modified.
                                                        //

                                                        var metadataFilePath = originalFilePath + '.metadata';

                                                        var data = fs.readFileSync(metadataFilePath).toString();

                                                        var json;

                                                        try {

                                                            json = JSON.parse(data);

                                                        } catch (e) {

                                                            // It was NOT valid json, so re-initialize.

                                                            var msg = 'The metadata file was not valid JSON, so re-initializing the json. metadataFilePath: ' + metadataFilePath;
                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                            var source = 'start.js.saveattachmentmetadata()';
                                                            var errorCode = null;
                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                            json = {};

                                                            var json = {};
                                                            json["description"] = newDescription;
                                                            json["bwParticipantId"] = bwParticipantId;
                                                            json["bwParticipantEmail"] = bwParticipantEmail;
                                                            json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                        }

                                                        var stats = fs.statSync(originalFilePath);
                                                        var size = stats["size"];
                                                        var birthtime = stats["birthtime"];

                                                        json["size"] = size;
                                                        json["birthtime"] = birthtime;

                                                        var originalDescription = json["description"];

                                                        //if (originalDescription == newDescription) {

                                                        //    //
                                                        //    // Nothing has changed, so don't bother altering the .metadata file.
                                                        //    //

                                                        //    var msg = 'The metadata file has not been changed, so it has not been updated.';
                                                        //    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        //    var source = 'start.js.saveattachmentmetadata()';
                                                        //    var errorCode = null;
                                                        //    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        //    var result = {
                                                        //        status: 'SUCCESS',
                                                        //        message: msg
                                                        //    }

                                                        //    response.send(result);

                                                        //} else {

                                                        //
                                                        // The description has been modified, so save the new one back to the file.
                                                        //

                                                        json["description"] = newDescription;
                                                        json["LastModifiedBy_bwParticipantId"] = bwParticipantId;
                                                        json["LastModifiedBy_bwParticipantEmail"] = bwParticipantEmail;
                                                        json["LastModifiedBy_bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                        var metaFileContent = JSON.stringify(json);

                                                        fs.writeFile(metadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                            try {
                                                                if (metaErr) {

                                                                    var msg = 'Error in start.js.saveattachmentmetadata()a.fs.writeFile():10-1: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }

                                                                    response.send(result);

                                                                } else {

                                                                    var msg = 'The metadata file was saved.';
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg
                                                                    }

                                                                    response.send(result);

                                                                }
                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.saveattachmentmetadata():12: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    message: msg,
                                                                    status: 'EXCEPTION'
                                                                }

                                                                response.send(result);

                                                            }
                                                        });

                                                        //}

                                                    } else {

                                                        //
                                                        // For some reason, the metadata file doesn't exist. We will create it.
                                                        //

                                                        var metadataFilePath = originalFilePath + '.metadata';

                                                        var msg = 'Error in start.js.saveattachmentmetadata():7-22: The metadata file does not exist. We will try to create a new one instead. metadataFilePath: ' + metadataFilePath;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.saveattachmentmetadata()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var stats = fs.statSync(originalFilePath);
                                                        var size = stats["size"];
                                                        var birthtime = stats["birthtime"];

                                                        var json = {};
                                                        json["description"] = newDescription;
                                                        json["size"] = size;
                                                        json["birthtime"] = birthtime;
                                                        json["bwParticipantId"] = bwParticipantId;
                                                        json["bwParticipantEmail"] = bwParticipantEmail;
                                                        json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                        var metaFileContent = JSON.stringify(json);

                                                        fs.writeFile(metadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                            try {
                                                                if (metaErr) {

                                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.writeFile():6-22: Error saving the new metadata file. metadataFilePath: ' + metadataFilePath + ', error: ' + metaErr;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }

                                                                    response.send(result);

                                                                } else {

                                                                    var msg = 'There was an error renaming the metadata file. Instead, it has been re-created. The file was saved successfully.';
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'SUCCESS',
                                                                        message: msg
                                                                    }

                                                                    response.send(result);

                                                                }
                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.saveattachmentmetadata():10: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    message: msg,
                                                                    status: 'EXCEPTION'
                                                                }

                                                                response.send(result);

                                                            }
                                                        });

                                                    }

                                                }

                                            } catch (e) {

                                                var msg = 'Exception in start.js.saveattachmentmetadata():10-22: ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.saveattachmentmetadata()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    message: msg,
                                                    status: 'EXCEPTION'
                                                }

                                                response.send(result);

                                            }

                                        });

                                    } else {

                                        //
                                        // We are changing the file name. We need to make sure the new file name doesn't overwrite an existing file with the same name. 11-8-2022
                                        //

                                        fs.readdir(budgetRequestFolderPath, function (err, files) {
                                            try {
                                                if (err) {

                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.readdir():9: Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                    var source = 'start.js.saveattachmentmetadata()';
                                                    var errorCode = null;
                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                    var result = {
                                                        status: 'ERROR',
                                                        message: msg
                                                    }

                                                    response.send(msg);

                                                } else {

                                                    if (files.indexOf(newFilename) > -1) {

                                                        //
                                                        // This file name already exists, so we will just send a message back to the user.
                                                        //

                                                        var msg = 'The file name already exists: ' + newFilename;
                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                        var source = 'start.js.saveattachmentmetadata()';
                                                        var errorCode = null;
                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                        var result = {
                                                            status: 'ERROR',
                                                            message: msg
                                                        }

                                                        response.send(result);

                                                    } else {

                                                        //
                                                        // The new filename doesn't not already exist. Update the filename, the thumbnail, and the metadata file.
                                                        //

                                                        fs.rename(originalFilePath, newFilePath, function (err) {
                                                            try {
                                                                if (err) {

                                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.rename():7: Error renaming the file. originalFilePath: ' + originalFilePath + ', newFilePath: ' + newFilePath + ', error: ' + err;
                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                    var errorCode = null;
                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                    var result = {
                                                                        status: 'ERROR',
                                                                        message: msg
                                                                    }

                                                                    response.send(result);

                                                                } else {

                                                                    //
                                                                    // Check if the thumbnail file exists.
                                                                    //

                                                                    //
                                                                    // 5-30-2024. This addresses the naming of thumbnails. For some reason I am using _thumbnail_ for .mp4 files.... maybe standardize that someday.
                                                                    //

                                                                    var thumb1 = originalFilename + '_320px_.png';
                                                                    var thumb2 = originalFilename + '_thumbnail_.png'; // 8-4-2024.

                                                                    var originalThumbnailFile;
                                                                    var originalThumbnailPath;
                                                                    var newThumbnailPath;

                                                                    if (files.indexOf(thumb1) > -1) {

                                                                        originalThumbnailFile = originalFilename + '_320px_.png';
                                                                        originalThumbnailPath = originalFilePath + '_320px_.png';
                                                                        newThumbnailPath = newFilePath + '_320px_.png';

                                                                    } else if (files.indexOf(thumb2) > -1) {

                                                                        originalThumbnailFile = originalFilename + '_thumbnail_.png'; // 8-4-2024.
                                                                        originalThumbnailPath = originalFilePath + '_thumbnail_.png'; // 8-4-2024.
                                                                        newThumbnailPath = newFilePath + '_thumbnail_.png'; // 8-4-2024.

                                                                    } else {

                                                                        originalThumbnailFile = originalFilename + '_320px_.png';
                                                                        originalThumbnailPath = originalFilePath + '_320px_.png';
                                                                        newThumbnailPath = newFilePath + '_320px_.png';

                                                                    }


                                                                    //var originalThumbnailFile = originalFilename + '_320px_.png';

                                                                    if (files.indexOf(originalThumbnailFile) > -1) {

                                                                        //
                                                                        // Rename the existing thumbnail file to match the new file name. 
                                                                        //

                                                                        //var originalThumbnailPath = originalFilePath + '_320px_.png';
                                                                        //var newThumbnailPath = newFilePath + '_320px_.png';
                                                                        fs.rename(originalThumbnailPath, newThumbnailPath, function (error_renamingThumbnail) {
                                                                            try {
                                                                                if (error_renamingThumbnail) {

                                                                                    //
                                                                                    // There was an error, so we are reverting the rename and notifying the user.
                                                                                    //

                                                                                    fs.rename(newFilePath, originalFilePath, function (err) {
                                                                                        try {
                                                                                            if (err) {

                                                                                                var msg = 'Error in start.js.saveattachmentmetadata().fs.rename():7: Reverting the rename due to an error renaming the thumbnail. newFilePath: ' + newFilePath + ', originalFilePath: ' + originalFilePath + ', err: ' + err;
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                var result = {
                                                                                                    status: 'ERROR',
                                                                                                    message: msg
                                                                                                }

                                                                                                response.send(result);

                                                                                            } else {

                                                                                                var msg = 'Error renaming the thumbnail, so reverted the file name back to its original name. originalThumbnailPath: ' + originalThumbnailPath + ', newThumbnailPath: ' + newThumbnailPath + ', error_renamingThumbnail: ' + error_renamingThumbnail;
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                var result = {
                                                                                                    status: 'ERROR',
                                                                                                    message: msg
                                                                                                }

                                                                                                response.send(result);

                                                                                            }

                                                                                        } catch (e) {

                                                                                            var msg = 'Exception in start.js.saveattachmentmetadata():11: ' + e.message + ', ' + e.stack;
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                            var result = {
                                                                                                message: msg,
                                                                                                status: 'EXCEPTION'
                                                                                            }

                                                                                            response.send(result);

                                                                                        }
                                                                                    });

                                                                                } else {

                                                                                    //
                                                                                    // Rename the .metadata file to match the newFilename.
                                                                                    //

                                                                                    var originalMetadataFilePath = originalFilePath + '.metadata';
                                                                                    var newMetadataFilePath = newFilePath + '.metadata';

                                                                                    fs.rename(originalMetadataFilePath, newMetadataFilePath, function (error_renamingMetadataFile) {
                                                                                        try {
                                                                                            if (error_renamingMetadataFile) {

                                                                                                var msg = 'Error in start.js.saveattachmentmetadata().fs.rename():7: Error renaming the metadata file. We will try to create a new one instead. originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error_renamingMetadataFile: ' + error_renamingMetadataFile;
                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                var errorCode = null;
                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                var stats = fs.statSync(newFilePath);
                                                                                                var size = stats["size"];
                                                                                                var birthtime = stats["birthtime"];

                                                                                                var json = {};
                                                                                                json["description"] = newDescription;
                                                                                                json["size"] = size;
                                                                                                json["birthtime"] = birthtime;
                                                                                                json["bwParticipantId"] = bwParticipantId;
                                                                                                json["bwParticipantEmail"] = bwParticipantEmail;
                                                                                                json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                var metaFileContent = JSON.stringify(json);

                                                                                                fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                                                                    try {
                                                                                                        if (metaErr) {

                                                                                                            var msg = 'Error in start.js.saveattachmentmetadata().fs.writeFile():6: Error saving the new metadata file. newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            var result = {
                                                                                                                status: 'ERROR',
                                                                                                                message: msg
                                                                                                            }

                                                                                                            response.send(result);

                                                                                                        } else {

                                                                                                            var msg = 'There was an error renaming the metadata file. Instead, it has been re-created. The file was saved successfully.';
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            var result = {
                                                                                                                status: 'ERROR',
                                                                                                                message: msg
                                                                                                            }

                                                                                                            response.send(result);

                                                                                                        }
                                                                                                    } catch (e) {

                                                                                                        var msg = 'Exception in start.js.saveattachmentmetadata():10: ' + e.message + ', ' + e.stack;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                        var result = {
                                                                                                            message: msg,
                                                                                                            status: 'EXCEPTION'
                                                                                                        }

                                                                                                        response.send(result);

                                                                                                    }
                                                                                                });

                                                                                            } else {

                                                                                                //
                                                                                                // The metadata file was renamed successfully. Now we have to check if we need to update the description.
                                                                                                //

                                                                                                var data = fs.readFileSync(newMetadataFilePath).toString();

                                                                                                var json = JSON.parse(data);

                                                                                                var originalDescription = json["description"];

                                                                                                if (originalDescription == newDescription) {

                                                                                                    //
                                                                                                    // Nothing has changed, so don't bother altering the .metadata file.
                                                                                                    //

                                                                                                    var msg = 'The metadata file has not been changed, so it has not been updated.';
                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        status: 'SUCCESS',
                                                                                                        message: msg
                                                                                                    }

                                                                                                    response.send(result);

                                                                                                } else {

                                                                                                    //
                                                                                                    // The description has been modified, so save the new one back to the file.
                                                                                                    //

                                                                                                    // WE ARE ALSO UPDATING THE FILE STATISTICS. THIS GETS RID OF STRAGGLERS / BAD DATA. TECHNICALLY THIS SHOULD NOT BE NECESSARY, but it accomodates old data. 10-20-2023.
                                                                                                    var stats = fs.statSync(newFilePath);
                                                                                                    var size = stats["size"];
                                                                                                    var birthtime = stats["birthtime"];

                                                                                                    json["description"] = newDescription;
                                                                                                    json["size"] = size;
                                                                                                    json["birthtime"] = birthtime;
                                                                                                    json["LastModifiedBy_bwParticipantId"] = bwParticipantId;
                                                                                                    json["LastModifiedBy_bwParticipantEmail"] = bwParticipantEmail;
                                                                                                    json["LastModifiedBy_bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                    var newMetaFileContent = JSON.stringify(json);

                                                                                                    fs.writeFile(newMetadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                                                        try {
                                                                                                            if (metaErr) {

                                                                                                                var msg = 'Error in start.js.saveattachmentmetadata()a.fs.writeFile():10-1-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                var result = {
                                                                                                                    status: 'ERROR',
                                                                                                                    message: msg
                                                                                                                }

                                                                                                                response.send(result);

                                                                                                            } else {

                                                                                                                var msg = 'The file was saved.';
                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                var result = {
                                                                                                                    status: 'SUCCESS',
                                                                                                                    message: msg
                                                                                                                }

                                                                                                                response.send(result);

                                                                                                            }
                                                                                                        } catch (e) {

                                                                                                            var msg = 'Exception in start.js.saveattachmentmetadata():9: ' + e.message + ', ' + e.stack;
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            var result = {
                                                                                                                message: msg,
                                                                                                                status: 'EXCEPTION'
                                                                                                            }

                                                                                                            response.send(result);

                                                                                                        }
                                                                                                    });

                                                                                                }

                                                                                            }

                                                                                        } catch (e) {

                                                                                            var msg = 'Exception in start.js.saveattachmentmetadata():8: ' + e.message + ', ' + e.stack;
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                            var result = {
                                                                                                message: msg,
                                                                                                status: 'EXCEPTION'
                                                                                            }

                                                                                            response.send(result);

                                                                                        }

                                                                                    });

                                                                                }

                                                                            } catch (e) {

                                                                                var msg = 'Exception in start.js.saveattachmentmetadata():7: ' + e.message + ', ' + e.stack;
                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                var errorCode = null;
                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                var result = {
                                                                                    message: msg,
                                                                                    status: 'EXCEPTION'
                                                                                }

                                                                                response.send(result);

                                                                            }

                                                                        });

                                                                    } else {

                                                                        //
                                                                        //
                                                                        // If we get here, the original thumbnail file does not exist for some reason. We will make a new one.
                                                                        //
                                                                        //

                                                                        // Note that this functionality lso eists in the ProcessUpload() method in this file.... maybe this could be refactored at some point. 10-20-2023.

                                                                        var filePath = newFilePath;

                                                                        var extensionIndex = filePath.split('.').length - 1;
                                                                        var fileExtension = filePath.toLowerCase().split('.')[extensionIndex];

                                                                        if ((fileExtension == 'pdf') || (fileExtension == 'doc') || (fileExtension == 'docx') || (fileExtension == 'odt')) {

                                                                            //var thumbnailPath = filePath + '_thumbnail_320px_pdf_' + '.png';
                                                                            var thumbnailPath = filePath + '_320px_.png'; // 8-4-2024.

                                                                            var msg = '>>>>>>>>>>>>>> In start.js.saveattachmentmetadata(). Creating .pdf thumbnail at ' + thumbnailPath + '.';

                                                                            console.log('');
                                                                            console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                                                            console.log('**************************************');
                                                                            console.log(msg);
                                                                            console.log('**************************************');
                                                                            console.log('-- PDF -- PDF -- PDF -- PDF -- PDF --');
                                                                            console.log('');

                                                                            var threatLevel = 'guarded'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            gm(filePath + '[0]')
                                                                                .resize(320)
                                                                                .font('Arial', 72)
                                                                                .drawText(75, 200, fileExtension.toUpperCase()) // 'PDF')
                                                                                .write(thumbnailPath, function (err) {
                                                                                    try {
                                                                                        if (err) {

                                                                                            var msg = 'Error creating the .pdf thumbnail in start.js.saveattachmentmetadata().imagemagick.write(): ' + err;
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            var result = {
                                                                                                status: 'ERROR',
                                                                                                message: msg,
                                                                                                bwWorkflowAppId: bwWorkflowAppId,
                                                                                                bwBudgetRequestId: bwBudgetRequestId,
                                                                                                filePath: filePath
                                                                                            }

                                                                                            response.send(result);

                                                                                        } else {

                                                                                            var msg = 'In start.js.saveattachmentmetadata().imagemagick.write(). Created .' + fileExtension + ' thumbnail at [' + thumbnailPath + '].';
                                                                                            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            //var result = {
                                                                                            //    status: 'SUCCESS',
                                                                                            //    message: msg,
                                                                                            //    bwWorkflowAppId: bwWorkflowAppId,
                                                                                            //    bwBudgetRequestId: bwBudgetRequestId,
                                                                                            //    filePath: filePath
                                                                                            //}

                                                                                            //response.send(result);

                                                                                            //
                                                                                            // Rename the .metadata file to match the newFilename.
                                                                                            //

                                                                                            var originalMetadataFilePath = originalFilePath + '.metadata';
                                                                                            var newMetadataFilePath = newFilePath + '.metadata';

                                                                                            fs.rename(originalMetadataFilePath, newMetadataFilePath, function (error_renamingMetadataFile) {
                                                                                                try {
                                                                                                    if (error_renamingMetadataFile) {

                                                                                                        var msg = 'Error in start.js.saveattachmentmetadata().fs.rename():7: Error renaming the metadata file. We will try to create a new one instead. originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error_renamingMetadataFile: ' + error_renamingMetadataFile;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                        var stats = fs.statSync(newFilePath);
                                                                                                        var size = stats["size"];
                                                                                                        var birthtime = stats["birthtime"];

                                                                                                        var json = {};
                                                                                                        json["description"] = newDescription;
                                                                                                        json["size"] = size;
                                                                                                        json["birthtime"] = birthtime;
                                                                                                        json["bwParticipantId"] = bwParticipantId;
                                                                                                        json["bwParticipantEmail"] = bwParticipantEmail;
                                                                                                        json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                        var metaFileContent = JSON.stringify(json);

                                                                                                        fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                                                                            try {
                                                                                                                if (metaErr) {

                                                                                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.writeFile():6: Error saving the new metadata file. newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        status: 'ERROR',
                                                                                                                        message: msg
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                } else {

                                                                                                                    var msg = 'There was an error renaming the metadata file. Instead, it has been re-created. The file was saved successfully.';
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        status: 'ERROR',
                                                                                                                        message: msg
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                }
                                                                                                            } catch (e) {

                                                                                                                var msg = 'Exception in start.js.saveattachmentmetadata():10: ' + e.message + ', ' + e.stack;
                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                var result = {
                                                                                                                    message: msg,
                                                                                                                    status: 'EXCEPTION'
                                                                                                                }

                                                                                                                response.send(result);

                                                                                                            }
                                                                                                        });

                                                                                                    } else {

                                                                                                        //
                                                                                                        // The metadata file was renamed successfully. Now we have to check if we need to update the description.
                                                                                                        //

                                                                                                        var data = fs.readFileSync(newMetadataFilePath).toString();

                                                                                                        var json = JSON.parse(data);

                                                                                                        var originalDescription = json["description"];

                                                                                                        if (originalDescription == newDescription) {

                                                                                                            //
                                                                                                            // Nothing has changed, so don't bother altering the .metadata file.
                                                                                                            //

                                                                                                            var msg = 'The metadata file has not been changed, so it has not been updated.';
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            var result = {
                                                                                                                status: 'SUCCESS',
                                                                                                                message: msg
                                                                                                            }

                                                                                                            response.send(result);

                                                                                                        } else {

                                                                                                            //
                                                                                                            // The description has been modified, so save the new one back to the file.
                                                                                                            //

                                                                                                            json["description"] = newDescription;
                                                                                                            json["LastModifiedBy_bwParticipantId"] = bwParticipantId;
                                                                                                            json["LastModifiedBy_bwParticipantEmail"] = bwParticipantEmail;
                                                                                                            json["LastModifiedBy_bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                            var newMetaFileContent = JSON.stringify(json);

                                                                                                            fs.writeFile(newMetadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                                                                try {
                                                                                                                    if (metaErr) {

                                                                                                                        var msg = 'Error in start.js.saveattachmentmetadata()a.fs.writeFile():10-1-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        var result = {
                                                                                                                            status: 'ERROR',
                                                                                                                            message: msg
                                                                                                                        }

                                                                                                                        response.send(result);

                                                                                                                    } else {

                                                                                                                        var msg = 'The file was saved.';
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        var result = {
                                                                                                                            status: 'SUCCESS',
                                                                                                                            message: msg
                                                                                                                        }

                                                                                                                        response.send(result);

                                                                                                                    }
                                                                                                                } catch (e) {

                                                                                                                    var msg = 'Exception in start.js.saveattachmentmetadata():9: ' + e.message + ', ' + e.stack;
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        message: msg,
                                                                                                                        status: 'EXCEPTION'
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                }
                                                                                                            });

                                                                                                        }

                                                                                                    }

                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.saveattachmentmetadata():8: ' + e.message + ', ' + e.stack;
                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        message: msg,
                                                                                                        status: 'EXCEPTION'
                                                                                                    }

                                                                                                    response.send(result);

                                                                                                }

                                                                                            });

                                                                                        }

                                                                                    } catch (e) {

                                                                                        var msg = 'Exception in start.js.saveattachmentmetadata().imagemagick.write(). while creating .pdf thumbnail xcx4443:' + e.message + ', ' + e.stack;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'start.js.start.js.saveattachmentmetadata().imagemagick.write()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        var result = {
                                                                                            status: 'EXCEPTION',
                                                                                            message: msg,
                                                                                            bwWorkflowAppId: bwWorkflowAppId,
                                                                                            bwBudgetRequestId: bwBudgetRequestId,
                                                                                            filePath: filePath
                                                                                        }

                                                                                        response.send(result);

                                                                                    }

                                                                                });

                                                                        } else if (fileExtension == 'png' || fileExtension == 'jpg' || fileExtension == 'jpeg' || fileExtension == 'jfif' || fileExtension == 'webp' || fileExtension == 'gif') {

                                                                            var thumbnailPath = filePath + '_320px_.png'; // changed this 8-4-2024. // fileExtension;

                                                                            var msg = '>>>>>>>>>>>>>> In start.js.saveattachmentmetadata(). Creating 320px thumbnail at ' + thumbnailPath + '.';
                                                                            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            ////
                                                                            //// We make sure the thumbnail does not already exist, because if it does, it won't get overriden for some reason.
                                                                            ////
                                                                            //fs.unlink(thumbnailPath, function (deleteErr) {
                                                                            //// We don't want to catch the error if the file doesn't exist. Just carry on! :)



                                                                            //
                                                                            // The following was previously resized using ffmpeg. However, ffmpeg is meant for video and cannot detect EXIF tags (which indicate if the image should be rotated). In some cases, the resizing resulted in a rotated image.
                                                                            // So, using this Imagemagick code.
                                                                            //
                                                                            gm(filePath)
                                                                                .resize(320)
                                                                                .autoOrient()
                                                                                //.rotate("#545651", 78)
                                                                                // Draw Rectangle using drawRectangle function
                                                                                //.drawRectangle(10, 2, 130, 30, 1, 2)
                                                                                .write(thumbnailPath, function (err) {
                                                                                    try {
                                                                                        if (err) {

                                                                                            var msg = 'Error creating the 320px thumbnail in start.js.saveattachmentmetadata().imagemagick.write(): ' + err;
                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            var result = {
                                                                                                status: 'ERROR',
                                                                                                message: msg,
                                                                                                bwWorkflowAppId: bwWorkflowAppId,
                                                                                                bwBudgetRequestId: bwBudgetRequestId,
                                                                                                filePath: filePath
                                                                                            }

                                                                                            response.send(result);

                                                                                        } else {

                                                                                            var msg = 'In start.js.saveattachmentmetadata().imagemagick.write(). Created 320px thumbnail at [' + thumbnailPath + '].';
                                                                                            var threatLevel = 'low'; // severe, high, elevated, guarded, low.
                                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                                            var errorCode = null;
                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                            //var result = {
                                                                                            //    status: 'SUCCESS',
                                                                                            //    message: msg,
                                                                                            //    bwWorkflowAppId: bwWorkflowAppId,
                                                                                            //    bwBudgetRequestId: bwBudgetRequestId,
                                                                                            //    filePath: filePath
                                                                                            //}

                                                                                            //response.send(result);

                                                                                            //
                                                                                            // Rename the .metadata file to match the newFilename.
                                                                                            //

                                                                                            var originalMetadataFilePath = originalFilePath + '.metadata';
                                                                                            var newMetadataFilePath = newFilePath + '.metadata';

                                                                                            fs.rename(originalMetadataFilePath, newMetadataFilePath, function (error_renamingMetadataFile) {
                                                                                                try {
                                                                                                    if (error_renamingMetadataFile) {

                                                                                                        var msg = 'Error in start.js.saveattachmentmetadata().fs.rename():7: Error renaming the metadata file. We will try to create a new one instead. originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error_renamingMetadataFile: ' + error_renamingMetadataFile;
                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                        var errorCode = null;
                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                        var stats = fs.statSync(newFilePath);
                                                                                                        var size = stats["size"];
                                                                                                        var birthtime = stats["birthtime"];

                                                                                                        var json = {};
                                                                                                        json["description"] = newDescription;
                                                                                                        json["size"] = size;
                                                                                                        json["birthtime"] = birthtime;
                                                                                                        json["bwParticipantId"] = bwParticipantId;
                                                                                                        json["bwParticipantEmail"] = bwParticipantEmail;
                                                                                                        json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                        var metaFileContent = JSON.stringify(json);

                                                                                                        fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
                                                                                                            try {
                                                                                                                if (metaErr) {

                                                                                                                    var msg = 'Error in start.js.saveattachmentmetadata().fs.writeFile():6: Error saving the new metadata file. newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        status: 'ERROR',
                                                                                                                        message: msg
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                } else {

                                                                                                                    var msg = 'There was an error renaming the metadata file. Instead, it has been re-created. The file was saved successfully.';
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        status: 'ERROR',
                                                                                                                        message: msg
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                }
                                                                                                            } catch (e) {

                                                                                                                var msg = 'Exception in start.js.saveattachmentmetadata():10: ' + e.message + ', ' + e.stack;
                                                                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                                                                var errorCode = null;
                                                                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                var result = {
                                                                                                                    message: msg,
                                                                                                                    status: 'EXCEPTION'
                                                                                                                }

                                                                                                                response.send(result);

                                                                                                            }
                                                                                                        });

                                                                                                    } else {

                                                                                                        //
                                                                                                        // The metadata file was renamed successfully. Now we have to check if we need to update the description.
                                                                                                        //

                                                                                                        var data = fs.readFileSync(newMetadataFilePath).toString();

                                                                                                        var json;

                                                                                                        try {

                                                                                                            json = JSON.parse(data);

                                                                                                        } catch (e) {

                                                                                                            // It was NOT valid json, so re-initialize.

                                                                                                            var msg = 'The metadata file was not valid JSON, so re-initializing the json. newMetadataFilePath: ' + newMetadataFilePath;
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            json = {};

                                                                                                            var stats = fs.statSync(newFilePath);
                                                                                                            var size = stats["size"];
                                                                                                            var birthtime = stats["birthtime"];

                                                                                                            var json = {};
                                                                                                            json["description"] = newDescription;
                                                                                                            json["size"] = size;
                                                                                                            json["birthtime"] = birthtime;
                                                                                                            json["bwParticipantId"] = bwParticipantId;
                                                                                                            json["bwParticipantEmail"] = bwParticipantEmail;
                                                                                                            json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                        }

                                                                                                        var originalDescription = json["description"];

                                                                                                        if (originalDescription == newDescription) {

                                                                                                            //
                                                                                                            // Nothing has changed, so don't bother altering the .metadata file.
                                                                                                            //

                                                                                                            var msg = 'The metadata file has not been changed, so it has not been updated.';
                                                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                            var source = 'start.js.saveattachmentmetadata()';
                                                                                                            var errorCode = null;
                                                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                            var result = {
                                                                                                                status: 'SUCCESS',
                                                                                                                message: msg
                                                                                                            }

                                                                                                            response.send(result);

                                                                                                        } else {

                                                                                                            //
                                                                                                            // The description has been modified, so save the new one back to the file.
                                                                                                            //

                                                                                                            json["description"] = newDescription;
                                                                                                            json["LastModifiedBy_bwParticipantId"] = bwParticipantId;
                                                                                                            json["LastModifiedBy_bwParticipantEmail"] = bwParticipantEmail;
                                                                                                            json["LastModifiedBy_bwParticipantFriendlyName"] = bwParticipantFriendlyName;

                                                                                                            var newMetaFileContent = JSON.stringify(json);

                                                                                                            fs.writeFile(newMetadataFilePath, newMetaFileContent, 'binary', function (metaErr) {
                                                                                                                try {
                                                                                                                    if (metaErr) {

                                                                                                                        var msg = 'Error in start.js.saveattachmentmetadata()a.fs.writeFile():10-1-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        var result = {
                                                                                                                            status: 'ERROR',
                                                                                                                            message: msg
                                                                                                                        }

                                                                                                                        response.send(result);

                                                                                                                    } else {

                                                                                                                        var msg = 'The file was saved.';
                                                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                        var source = 'start.js.saveattachmentmetadata()';
                                                                                                                        var errorCode = null;
                                                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                        var result = {
                                                                                                                            status: 'SUCCESS',
                                                                                                                            message: msg
                                                                                                                        }

                                                                                                                        response.send(result);

                                                                                                                    }
                                                                                                                } catch (e) {

                                                                                                                    var msg = 'Exception in start.js.saveattachmentmetadata():9: ' + e.message + ', ' + e.stack;
                                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                                    var errorCode = null;
                                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                                    var result = {
                                                                                                                        message: msg,
                                                                                                                        status: 'EXCEPTION'
                                                                                                                    }

                                                                                                                    response.send(result);

                                                                                                                }
                                                                                                            });

                                                                                                        }

                                                                                                    }

                                                                                                } catch (e) {

                                                                                                    var msg = 'Exception in start.js.saveattachmentmetadata():8: ' + e.message + ', ' + e.stack;
                                                                                                    var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                                    var source = 'start.js.saveattachmentmetadata()';
                                                                                                    var errorCode = null;
                                                                                                    WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                                                    var result = {
                                                                                                        message: msg,
                                                                                                        status: 'EXCEPTION'
                                                                                                    }

                                                                                                    response.send(result);

                                                                                                }

                                                                                            });

                                                                                        }

                                                                                    } catch (e) {

                                                                                        var msg = 'Exception in start.js.saveattachmentmetadata().imagemagick.write(). xcx4443:' + e.message + ', ' + e.stack;
                                                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                                        var source = 'start.js.start.js.saveattachmentmetadata().imagemagick.write()';
                                                                                        var errorCode = null;
                                                                                        WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                                        var result = {
                                                                                            status: 'EXCEPTION',
                                                                                            message: msg,
                                                                                            bwWorkflowAppId: bwWorkflowAppId,
                                                                                            bwBudgetRequestId: bwBudgetRequestId,
                                                                                            filePath: filePath
                                                                                        }

                                                                                        response.send(result);

                                                                                    }

                                                                                });


                                                                            //} else if (fileExtension == 'mp4') {







                                                                        } else {

                                                                            // fileExtension
                                                                            var msg = 'Error in start.js.saveattachmentmetadata().xcx324234(). Unrcognized fileExtension: ' + fileExtension + '. We should be creating a new thumbnail for this file type. xcx23124256325314.';
                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                            var source = 'In start.js.saveattachmentmetadata()';
                                                                            var errorCode = null;
                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId);

                                                                            var result = {
                                                                                status: 'ERROR',
                                                                                message: msg,
                                                                                bwWorkflowAppId: bwWorkflowAppId,
                                                                                bwBudgetRequestId: bwBudgetRequestId,
                                                                                filePath: filePath
                                                                            }

                                                                            response.send(result);

                                                                        }

                                                                    }

                                                                }

                                                            } catch (e) {

                                                                var msg = 'Exception in start.js.saveattachmentmetadata():6: ' + e.message + ', ' + e.stack;
                                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                                var source = 'start.js.saveattachmentmetadata()';
                                                                var errorCode = null;
                                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                                var result = {
                                                                    message: msg,
                                                                    status: 'EXCEPTION'
                                                                }

                                                                response.send(result);

                                                            }

                                                        });

                                                    }

                                                }
                                            } catch (e) {

                                                var msg = 'Exception in start.js.saveattachmentmetadata():5: ' + e.message + ', ' + e.stack;
                                                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                                                var source = 'start.js.saveattachmentmetadata()';
                                                var errorCode = null;
                                                WriteToErrorLog(threatLevel, source, errorCode, msg);

                                                var result = {
                                                    message: msg,
                                                    status: 'EXCEPTION'
                                                }

                                                response.send(result);

                                            }
                                        });

                                    }
                                }

                            }
                        } catch (e) {

                            var msg = 'Exception in start.js.saveattachmentmetadata():4: ' + e.message + ', ' + e.stack;
                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                            var source = 'start.js.saveattachmentmetadata()';
                            var errorCode = null;
                            WriteToErrorLog(threatLevel, source, errorCode, msg);

                            var result = {
                                message: msg,
                                status: 'EXCEPTION'
                            }

                            response.send(result);

                        }
                    });

                } else {

                    // UNAUTHORIZED.
                    console.log('UNAUTHORIZED in /saveattachmentmetadata().');
                    console.log('UNAUTHORIZED');
                    console.log('UNAUTHORIZED');
                    response.status(401);
                    response.send(result);

                }

            } catch (e) {

                var msg = 'Exception in start.js.saveattachmentmetadata():3: ' + e.message + ', ' + e.stack;
                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
                var source = 'start.js.saveattachmentmetadata()';
                var errorCode = null;
                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

                var result = {
                    status: 'EXCEPTION',
                    message: msg

                }

                response.send(result);

            }

        }).catch(function (e) {

            var msg = 'Exception in start.js.saveattachmentmetadata():2: ' + JSON.stringify(e);
            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
            var source = 'start.js.saveattachmentmetadata()';
            var errorCode = null;
            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

            var result = {
                status: 'EXCEPTION',
                message: msg

            }

            response.send(result);

        });

    } catch (e) {

        var msg = 'Exception in start.js.saveattachmentmetadata():1: ' + e.message + ', ' + e.stack;
        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
        var source = 'start.js.saveattachmentmetadata()';
        var errorCode = null;
        WriteToErrorLog(threatLevel, source, errorCode, msg);

        var result = {
            status: 'EXCEPTION',
            message: msg
        }

        response.send(result);

    }
});



//router.post('/_files/saveattachmentmetadata', function (request, response) {
//    try {
//        console.log('In /saveattachmentmetadata()');

//        var bwParticipantId_LoggedIn = request.body.bwParticipantId_LoggedIn;
//        var bwActiveStateIdentifier = request.body.bwActiveStateIdentifier;
//        var bwWorkflowAppId_LoggedIn = request.body.bwWorkflowAppId_LoggedIn;

//        var promise = AuthorizeWebServiceCall(request, bwParticipantId_LoggedIn, bwActiveStateIdentifier, bwWorkflowAppId_LoggedIn, 'participant');
//        promise.then(function (result) {
//            try {

//                if (result.status == 'AUTHORIZED') {

//                    // AUTHORIZED.
//                    console.log('AUTHORIZED in /saveattachmentmetadata().');
//                    console.log('AUTHORIZED');
//                    console.log('AUTHORIZED');

//                    var bwWorkflowAppId = request.body.bwWorkflowAppId;
//                    var bwBudgetRequestId = request.body.bwBudgetRequestId;
//                    var originalFilename = request.body.OriginalFilename;
//                    var newFilename = request.body.NewFilename;
//                    var description = request.body.Description;

//                    BwBudgetRequest.find({ bwBudgetRequestId: bwBudgetRequestId }, function (brfError, brfResult) { // 3-24-2022 There is a reason bwWorkflowAppId is not in the query.... this needs more investigation but good for now....
//                        if (brfError) {

//                            var msg = 'Error in POST /saveattachmentmetadata. Error finding the budget request bwWorkflowAppId: ' + bwWorkflowAppId + ', bwBudgetRequestId: ' + bwBudgetRequestId + ': ' + brfError;
//                            var threatLevel = 'high'; // severe, high, elevated, guarded, low.
//                            var source = 'start.js.POST.saveattachmentmetadata()';
//                            var errorCode = null;
//                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                            var result = {
//                                status: 'ERROR',
//                                message: msg
//                            }

//                            response.send(result);

//                        } else {
//                            console.log('In POST /saveattachmentmetadata:3');

//                            if (brfResult.length > 0) {
//                                // The bwBudgetRequestId was in the database, so get the new bwWorkflowAppId.
//                                bwWorkflowAppId = brfResult[0].bwWorkflowAppId;

//                                console.log('The bwBudgetRequestId was in the database, so use the new bwWorkflowAppId: ' + bwWorkflowAppId);
//                            }

//                            var budgetRequestFolderPath = rootFilePath + bwWorkflowAppId + '/' + bwBudgetRequestId;
//                            var originalFilePath = budgetRequestFolderPath + '/' + originalFilename;
//                            var newFilePath = budgetRequestFolderPath + '/' + newFilename;

//                            if (originalFilename == newFilename) {

//                                // No change to the file name.

//                                console.log('*************************');
//                                console.log('*************************');
//                                console.log('stats xcx232143-2: ');
//                                console.log('*************************');
//                                console.log('*************************');

//                                var stats = fs.statSync(newFilePath);
//                                var size = stats["size"];
//                                var birthtime = stats["birthtime"];

//                                console.log('*************************');
//                                console.log('*************************');
//                                console.log('birthtime xcx232143-2: ' + birthtime);
//                                console.log('*************************');
//                                console.log('*************************');

//                                //var metaFileContent = '';
//                                //metaFileContent += '<description>';
//                                //metaFileContent += description;
//                                //metaFileContent += '</description>';
//                                //metaFileContent += '<size>';
//                                //metaFileContent += size;
//                                //metaFileContent += '</size>';
//                                //metaFileContent += '<birthtime>';
//                                //metaFileContent += birthtime;
//                                //metaFileContent += '</birthtime>';

//                                var json = {};
//                                json["description"] = description;
//                                json["size"] = size;
//                                json["birthtime"] = birthtime;
//                                //json["bwParticipantId"] = bwParticipantId;
//                                //json["bwParticipantEmail"] = bwParticipantEmail;
//                                //json["bwParticipantFriendlyName"] = bwParticipantFriendlyName;

//                                var metaFileContent = JSON.stringify(json);

//                                var newMetadataFilePath = newFilePath + '.metadata';

//                                fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
//                                    if (metaErr) {

//                                        var msg = 'Error in saveattachmentmetadata.fs.writeFile():3-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
//                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                        var source = 'start.js.POST.saveattachmentmetadata()';
//                                        var errorCode = null;
//                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                        var result = {
//                                            status: 'ERROR',
//                                            message: msg
//                                        }

//                                        response.send(result);

//                                    } else {

//                                        var msg = 'The metadata file was saved!';
//                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                        var source = 'start.js.POST.saveattachmentmetadata()';
//                                        var errorCode = null;
//                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                        var result = {
//                                            status: 'SUCCESS',
//                                            message: msg
//                                        }

//                                        response.send(result);

//                                    }
//                                });

//                            } else {

//                                //
//                                // We need to make sure the new file name doesn't overwrite an existing file with the same name. 11-8-2022
//                                //
//                                fs.readdir(budgetRequestFolderPath, function (err, files) {
//                                    try {
//                                        console.log('In saveattachmentmetadata.fs.readdir().');
//                                        if (err) {

//                                            var msg = 'Error in saveattachmentmetadata.fs.readdir(). Error listing the files in budgetRequestFolderPath: ' + budgetRequestFolderPath + ': ' + err;
//                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                            var source = 'start.js._files/slideshowslidesets()';
//                                            var errorCode = null;
//                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                            var result = {
//                                                status: 'ERROR',
//                                                message: msg
//                                            }

//                                            response.send(msg);

//                                        } else {


//                                            if (files.indexOf(newFilename) > -1) {

//                                                //
//                                                // This file name already exists, so we will just send a message back to the user.
//                                                //

//                                                console.log('*************************');
//                                                console.log('*************************');
//                                                console.log('stats xcx232143-3: ');
//                                                console.log('*************************');
//                                                console.log('*************************');

//                                                var stats = fs.statSync(newFilePath);
//                                                var size = stats["size"];
//                                                var birthtime = stats["birthtime"];

//                                                console.log('*************************');
//                                                console.log('*************************');
//                                                console.log('birthtime xcx232143-3: ' + birthtime);
//                                                console.log('*************************');
//                                                console.log('*************************');

//                                                var metaFileContent = '';
//                                                metaFileContent += '<description>';
//                                                metaFileContent += description;
//                                                metaFileContent += '</description>';
//                                                metaFileContent += '<size>';
//                                                metaFileContent += size;
//                                                metaFileContent += '</size>';
//                                                metaFileContent += '<birthtime>';
//                                                metaFileContent += birthtime;
//                                                metaFileContent += '</birthtime>';

//                                                var newMetadataFilePath = newFilePath + '.metadata';

//                                                fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
//                                                    if (metaErr) {

//                                                        var msg = 'Error in saveattachmentmetadata.fs.writeFile():3-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
//                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                        var source = 'start.js.POST.saveattachmentmetadata()';
//                                                        var errorCode = null;
//                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                        var result = {
//                                                            status: 'ERROR',
//                                                            message: msg
//                                                        }

//                                                        response.send(result);

//                                                    } else {

//                                                        var msg = 'The metadata file was saved!' + ' The file was saved! The file name is the same as an existing file name, so the file was not overwritten and the name not changed.';
//                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                        var source = 'start.js.POST.saveattachmentmetadata()';
//                                                        var errorCode = null;
//                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                        var result = {
//                                                            status: 'SUCCESS',
//                                                            message: msg
//                                                        }

//                                                        response.send(result);

//                                                    }
//                                                });


//                                                //var msg = 'The file was saved! The file name is the same as an existing file name, so the file was not overwritten.';
//                                                //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                //var source = 'start.js.POST.saveattachmentmetadata()';
//                                                //var errorCode = null;
//                                                //WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                //response.send(msg);


//                                            } else {

//                                                // Now we must update the filename and the metadata file. ************** AND THE THUMBNAIL!!!!!!!!!!!!!!!!!
//                                                fs.rename(originalFilePath, newFilePath, function (err) {
//                                                    if (err) {

//                                                        var msg = 'Error in saveattachmentmetadata.fs.rename():1: originalFilePath: ' + originalFilePath + ', newFilePath: ' + newFilePath + ', error: ' + err;
//                                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                        var source = 'start.js.POST.saveattachmentmetadata()';
//                                                        var errorCode = null;
//                                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                        var result = {
//                                                            status: 'ERROR',
//                                                            message: msg
//                                                        }

//                                                        response.send(result);

//                                                    } else {

//                                                        // Rename the existing .metadata file to match the newFilename.
//                                                        var originalMetadataFilePath2 = originalFilePath + '_320px_.png';
//                                                        var newMetadataFilePath2 = newFilePath + '_320px_.png';
//                                                        fs.rename(originalMetadataFilePath2, newMetadataFilePath2, function (err3) {

//                                                            // Rename the existing .metadata file to match the newFilename.
//                                                            var originalMetadataFilePath = originalFilePath + '.metadata';
//                                                            var newMetadataFilePath = newFilePath + '.metadata';
//                                                            fs.rename(originalMetadataFilePath, newMetadataFilePath, function (err2) {
//                                                                if (err2) {

//                                                                    //var msg = 'Error in saveattachmentmetadata.fs.rename():2: originalMetadataFilePath: ' + originalMetadataFilePath + ', newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + err2;
//                                                                    //var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                    //var source = 'start.js.POST.saveattachmentmetadata()';
//                                                                    //var errorCode = null;
//                                                                    //WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                    //response.send(msg);

//                                                                    console.log('*************************');
//                                                                    console.log('*************************');
//                                                                    console.log('stats xcx232143-4: ');
//                                                                    console.log('*************************');
//                                                                    console.log('*************************');

//                                                                    var stats = fs.statSync(newFilePath);
//                                                                    var size = stats["size"];
//                                                                    var birthtime = stats["birthtime"];

//                                                                    console.log('*************************');
//                                                                    console.log('*************************');
//                                                                    console.log('birthtime xcx232143-4: ' + birthtime);
//                                                                    console.log('*************************');
//                                                                    console.log('*************************');

//                                                                    var metaFileContent = '';
//                                                                    metaFileContent += '<description>';
//                                                                    metaFileContent += description;
//                                                                    metaFileContent += '</description>';
//                                                                    metaFileContent += '<size>';
//                                                                    metaFileContent += size;
//                                                                    metaFileContent += '</size>';
//                                                                    metaFileContent += '<birthtime>';
//                                                                    metaFileContent += birthtime;
//                                                                    metaFileContent += '</birthtime>';

//                                                                    fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
//                                                                        if (metaErr) {

//                                                                            var msg = 'Error in saveattachmentmetadata.fs.writeFile():3-2: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
//                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                            var source = 'start.js.POST.saveattachmentmetadata()';
//                                                                            var errorCode = null;
//                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                            var result = {
//                                                                                status: 'ERROR',
//                                                                                message: msg
//                                                                            }

//                                                                            response.send(result);

//                                                                        } else {

//                                                                            var msg = 'The file was saved!';
//                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                            var source = 'start.js.POST.saveattachmentmetadata()';
//                                                                            var errorCode = null;
//                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                            var result = {
//                                                                                status: 'SUCCESS',
//                                                                                message: msg
//                                                                            }

//                                                                            response.send(result);

//                                                                        }
//                                                                    });

//                                                                } else {

//                                                                    var size = 'NA xcx213664';
//                                                                    var data = fs.readFileSync(newMetadataFilePath).toString();
//                                                                    if (data) {
//                                                                        var firstPass2 = data.split('<size>')[1];
//                                                                        if (firstPass2) {
//                                                                            size = firstPass2.split('</size>')[0];
//                                                                        }
//                                                                    }

//                                                                    var metaFileContent = '';
//                                                                    metaFileContent += '<description>';
//                                                                    metaFileContent += description;
//                                                                    metaFileContent += '</description>';
//                                                                    metaFileContent += '<size>';
//                                                                    metaFileContent += size;
//                                                                    metaFileContent += '</size>';

//                                                                    fs.writeFile(newMetadataFilePath, metaFileContent, 'binary', function (metaErr) {
//                                                                        if (metaErr) {

//                                                                            var msg = 'Error in saveattachmentmetadata.fs.writeFile():3: newMetadataFilePath: ' + newMetadataFilePath + ', error: ' + metaErr;
//                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                            var source = 'start.js.POST.saveattachmentmetadata()';
//                                                                            var errorCode = null;
//                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                            var result = {
//                                                                                status: 'ERROR',
//                                                                                message: msg
//                                                                            }

//                                                                            response.send(result);

//                                                                        } else {

//                                                                            var msg = 'The file was saved!';
//                                                                            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                                                            var source = 'start.js.POST.saveattachmentmetadata()';
//                                                                            var errorCode = null;
//                                                                            WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                                                            var result = {
//                                                                                status: 'SUCCESS',
//                                                                                message: msg
//                                                                            }

//                                                                            response.send(result);

//                                                                        }
//                                                                    });

//                                                                }
//                                                            });

//                                                        });

//                                                    }
//                                                });

//                                            }

//                                        }
//                                    } catch (e) {

//                                        var msg = 'Exception insaveattachmentmetadata():2: ' + e.message + ', ' + e.stack;
//                                        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                                        var source = '/saveattachmentmetadata()';
//                                        var errorCode = null;
//                                        WriteToErrorLog(threatLevel, source, errorCode, msg);

//                                        var result = {
//                                            message: msg,
//                                            status: 'EXCEPTION'
//                                        }

//                                        response.send(result);

//                                    }
//                                });

//                            }

//                        }
//                    });

//                } else {

//                    // UNAUTHORIZED.
//                    console.log('UNAUTHORIZED in /saveattachmentmetadata().');
//                    console.log('UNAUTHORIZED');
//                    console.log('UNAUTHORIZED');
//                    response.status(401);
//                    response.send(result);

//                }

//            } catch (e) {

//                var msg = 'Exception in start.js./saveattachmentmetadata:3: ' + e.message + ', ' + e.stack;
//                var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//                var source = 'start.js./saveattachmentmetadata()';
//                var errorCode = null;
//                WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

//                var result = {
//                    status: 'EXCEPTION',
//                    message: msg

//                }

//                response.send(result);

//            }

//        }).catch(function (e) {

//            var msg = 'Exception in start.js/saveattachmentmetadata:2: ' + e;
//            var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//            var source = 'start.js./saveattachmentmetadata()';
//            var errorCode = null;
//            WriteToErrorLog(threatLevel, source, errorCode, msg, bwWorkflowAppId_LoggedIn);

//            var result = {
//                status: 'EXCEPTION',
//                message: msg

//            }

//            response.send(result);

//        });

//    } catch (e) {

//        var msg = 'Exception in saveattachmentmetadata(): ' + e.message + ', ' + e.stack;
//        var threatLevel = 'severe'; // severe, high, elevated, guarded, low.
//        var source = 'start.js.POST.saveattachmentmetadata()';
//        var errorCode = null;
//        WriteToErrorLog(threatLevel, source, errorCode, msg);

//        var result = {
//            status: 'EXCEPTION',
//            message: msg
//        }

//        response.send(result);

//    }
//});



// fs.createReadStream(filePath).pipe(res);
// The fs.createReadStream method reads the file in the given file path(public/index.html) and pipes(writes) it to the response(res) for client's view.
//  From: http://stackoverflow.com/questions/20085513/using-pipe-in-node-js-net




module.exports = router;

